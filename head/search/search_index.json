{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Janssen Project Documentation # Introduction # Janssen enables organizations to build a scalable centralized authentication and authorization service using free open source software. The components of the project include client and server implementations of the OAuth, OpenID Connect, SCIM and FIDO standards. Administration Guide # The Janssen Server is highly extensible and customizable. Resources for deployment, operation, and maintenance of the Janssen environment are available in the Administration guide . We recommend a holistic approach to identity, planning the environment thoroughly using the Deployment Guide . For a quick start for testing, you can jump right into Installation . Developer Guide # There are many ways the community can contribute to the Janssen Project. Of course you can contribute code. But we also need people to write documentation and guides, to help us with testing, to answer questions on the forums and chat, to review PRs, to help us with devops and CI/CD, to provide feedback on usability, and to promote the project through outreach. Also, by sharing metrics with us, we can gain valuable insights into how the software performs in the wild. Resources to get started are available here . Governance Guide # The Janssen Project is an open source member of the Linux Foundation. Information about the project's governance can be found here . Script Catalog # Interception scripts (or custom scripts) allow you to define custom business logic for various features offered by the OpenID Provider (Jans-auth server). Some examples of features which can be customized are - implementing a 2FA authentication method, consent gathering, client registration, adding business specific claims to ID token or Access token etc. Scripts can easily be upgraded and doesn't require forking the Jans Server code or re-building it. The definitive location for scripts and their documentation is the Script Catalog . Agama # Agama is a component of the Janssen authentication server that offers an alternative way to build web-based authentication flows. Typically, person authentication flows are defined in the server by means of jython scripts that adhere to a predefined API. With Agama, flows are coded using a DSL (domain specific language) designed for the sole purpose of writing web flows. Support # We prefer to have all our discussions through GitHub Discussions to better facilitate faster responses. However, other means are available such as the community chat on Gitter . You can register for free there with your Github identity. If you find a bug in a Janssen project, or you would like to suggest a new feature, try the GitHub Discussions first. If you have a \"howto\" or \"usage\" question, raise the question or usage ! License # The Janssen Project is licensed under the Apache License 2.0 . The Janssen Server is highly extensible and can be used with a variety of other products and projects, which may fall under other licenses.","title":"Janssen Project Documentation"},{"location":"#janssen-project-documentation","text":"","title":"Janssen Project Documentation"},{"location":"#introduction","text":"Janssen enables organizations to build a scalable centralized authentication and authorization service using free open source software. The components of the project include client and server implementations of the OAuth, OpenID Connect, SCIM and FIDO standards.","title":"Introduction"},{"location":"#administration-guide","text":"The Janssen Server is highly extensible and customizable. Resources for deployment, operation, and maintenance of the Janssen environment are available in the Administration guide . We recommend a holistic approach to identity, planning the environment thoroughly using the Deployment Guide . For a quick start for testing, you can jump right into Installation .","title":"Administration Guide"},{"location":"#developer-guide","text":"There are many ways the community can contribute to the Janssen Project. Of course you can contribute code. But we also need people to write documentation and guides, to help us with testing, to answer questions on the forums and chat, to review PRs, to help us with devops and CI/CD, to provide feedback on usability, and to promote the project through outreach. Also, by sharing metrics with us, we can gain valuable insights into how the software performs in the wild. Resources to get started are available here .","title":"Developer Guide"},{"location":"#governance-guide","text":"The Janssen Project is an open source member of the Linux Foundation. Information about the project's governance can be found here .","title":"Governance Guide"},{"location":"#script-catalog","text":"Interception scripts (or custom scripts) allow you to define custom business logic for various features offered by the OpenID Provider (Jans-auth server). Some examples of features which can be customized are - implementing a 2FA authentication method, consent gathering, client registration, adding business specific claims to ID token or Access token etc. Scripts can easily be upgraded and doesn't require forking the Jans Server code or re-building it. The definitive location for scripts and their documentation is the Script Catalog .","title":"Script Catalog"},{"location":"#agama","text":"Agama is a component of the Janssen authentication server that offers an alternative way to build web-based authentication flows. Typically, person authentication flows are defined in the server by means of jython scripts that adhere to a predefined API. With Agama, flows are coded using a DSL (domain specific language) designed for the sole purpose of writing web flows.","title":"Agama"},{"location":"#support","text":"We prefer to have all our discussions through GitHub Discussions to better facilitate faster responses. However, other means are available such as the community chat on Gitter . You can register for free there with your Github identity. If you find a bug in a Janssen project, or you would like to suggest a new feature, try the GitHub Discussions first. If you have a \"howto\" or \"usage\" question, raise the question or usage !","title":"Support"},{"location":"#license","text":"The Janssen Project is licensed under the Apache License 2.0 . The Janssen Server is highly extensible and can be used with a variety of other products and projects, which may fall under other licenses.","title":"License"},{"location":"CHANGELOG/","text":"Changelog # 1.0.2 (2022-08-30) # Features # agama: add utility classes for inbound identity ( #2204 ) ( 29f58ee ) agama: add utility classes for inbound identity ( #2231 ) ( 96e32a4 ) jans-scim: make max no. of operations and payload size of bulks operations parameterizable ( #1872 ) ( c27a45b ) Bug Fixes # #2143 ( #2144 ) ( ff7f9f4 ) #2157 ( #2159 ) ( dc8cb60 ) agama: template overriding not working with more than one level of nesting ( #1841 ) ( 723922a ) correct the link to image ( #1660 ) ( 0943d81 ) update error pages ( #1957 ) ( 3d63f4d ) Miscellaneous Chores # release 1.0.1 ( 828bfe8 ) release 1.0.2 ( 43dead6 ) 1.0.1 (2022-07-06) # Bug Fixes # correct the link to image ( #1660 ) ( 0943d81 ) Miscellaneous Chores # release 1.0.1 ( 828bfe8 ) 1.0.0 (2022-05-20) # Features # add script for Google login ( #1141 ) ( bac9144 ) jans-core: remove UPDATE_USER and USER_REGISTRATION scripts #1289 ( c34e75d ) Bug Fixes # add issue guidelines to TOC ( #1188 ) ( 192165b ) broken links ( 86d0232 ) hyperlinks ( #1209 ) ( d1e1ed6 ) typo in jans-cli interactive mode ( 25f5971 ) Miscellaneous Chores # release 1.0.0 ( b2895f2 ) release 1.0.0-beta.16 ( a083ad6 ) release 1.0.0-beta.16 ( 90e4bb2 ) release 1.0.0-beta.16 ( eec2073 ) release 1.0.0-beta.16 ( cd92ead ) release 1.0.0-beta.16 ( 7f0a91b ) release 1.0.0-beta.16 ( c2ad604 ) release 1.0.0-beta.16 ( a641486 ) release 1.0.0-beta.16 ( 94d5791 ) release 1.0.0-beta.16 ( 16de429 ) release 1.0.0-beta.16 ( 72915c0 ) release 1.0.0-beta.16 ( 3ea2b37 ) release 1.0.0-beta.16 ( 78a6d39 ) release 1.0.0-beta.16 ( 11bfa93 ) release 1.0.0-beta.16 ( 22b180b ) release 1.0.0-beta.16 ( b9acd0b ) release 1.0.0-beta.16 ( 328cd30 ) release 1.0.0-beta.16 ( 5a84602 ) release 1.0.0-beta.16 ( 4923277 ) release 1.0.0-beta.16 ( 258ba96 ) release 1.0.0-beta.16 ( 77c4423 ) 1.0.0-beta.16 (2022-03-14) # Features # add support to import custom ldif ( #1002 ) ( 0b6334a ) Miscellaneous Chores # release 1.0.0-beta.16 ( a083ad6 ) release 1.0.0-beta.16 ( 90e4bb2 ) release 1.0.0-beta.16 ( eec2073 ) release 1.0.0-beta.16 ( cd92ead ) release 1.0.0-beta.16 ( 7f0a91b ) release 1.0.0-beta.16 ( c2ad604 ) release 1.0.0-beta.16 ( a641486 ) release 1.0.0-beta.16 ( 94d5791 ) release 1.0.0-beta.16 ( 16de429 ) release 1.0.0-beta.16 ( 72915c0 ) release 1.0.0-beta.16 ( 3ea2b37 ) release 1.0.0-beta.16 ( 78a6d39 ) release 1.0.0-beta.16 ( 11bfa93 ) release 1.0.0-beta.16 ( 22b180b ) release 1.0.0-beta.16 ( b9acd0b ) release 1.0.0-beta.16 ( 328cd30 ) release 1.0.0-beta.16 ( 5a84602 ) release 1.0.0-beta.16 ( 4923277 ) release 1.0.0-beta.16 ( 258ba96 ) release 1.0.0-beta.16 ( 77c4423 ) release 1.0.0-beta.16 ( 688b324 ) release 1.0.0-beta.16 ( 4e86f15 ) release 1.0.0-beta.16 ( 8d514ee ) release 1.0.0-beta.16 ( 0899898 ) 1.0.0-beta.15 (2022-03-02) # Features # add POST /rolePermissionsMapping for adding new rolePermissionsMapping entry #144 ( 7bcad3b ) add POST /rolePermissionsMapping for adding new rolePermissionsMapping entry #144 ( 932a45b ) protecting Admin-UI Plugin Apis #142 ( 52e8846 ) protecting Admin-UI Plugin Apis #142 ( a1a0d54 ) Miscellaneous Chores # release 1.0.0-beta.15 ( ee5b719 ) release 1.0.0-beta.15 ( ca6d1c9 ) release 1.0.0-beta.15 ( b65bab2 )","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#102-2022-08-30","text":"","title":"1.0.2 (2022-08-30)"},{"location":"CHANGELOG/#features","text":"agama: add utility classes for inbound identity ( #2204 ) ( 29f58ee ) agama: add utility classes for inbound identity ( #2231 ) ( 96e32a4 ) jans-scim: make max no. of operations and payload size of bulks operations parameterizable ( #1872 ) ( c27a45b )","title":"Features"},{"location":"CHANGELOG/#bug-fixes","text":"#2143 ( #2144 ) ( ff7f9f4 ) #2157 ( #2159 ) ( dc8cb60 ) agama: template overriding not working with more than one level of nesting ( #1841 ) ( 723922a ) correct the link to image ( #1660 ) ( 0943d81 ) update error pages ( #1957 ) ( 3d63f4d )","title":"Bug Fixes"},{"location":"CHANGELOG/#miscellaneous-chores","text":"release 1.0.1 ( 828bfe8 ) release 1.0.2 ( 43dead6 )","title":"Miscellaneous Chores"},{"location":"CHANGELOG/#101-2022-07-06","text":"","title":"1.0.1 (2022-07-06)"},{"location":"CHANGELOG/#bug-fixes_1","text":"correct the link to image ( #1660 ) ( 0943d81 )","title":"Bug Fixes"},{"location":"CHANGELOG/#miscellaneous-chores_1","text":"release 1.0.1 ( 828bfe8 )","title":"Miscellaneous Chores"},{"location":"CHANGELOG/#100-2022-05-20","text":"","title":"1.0.0 (2022-05-20)"},{"location":"CHANGELOG/#features_1","text":"add script for Google login ( #1141 ) ( bac9144 ) jans-core: remove UPDATE_USER and USER_REGISTRATION scripts #1289 ( c34e75d )","title":"Features"},{"location":"CHANGELOG/#bug-fixes_2","text":"add issue guidelines to TOC ( #1188 ) ( 192165b ) broken links ( 86d0232 ) hyperlinks ( #1209 ) ( d1e1ed6 ) typo in jans-cli interactive mode ( 25f5971 )","title":"Bug Fixes"},{"location":"CHANGELOG/#miscellaneous-chores_2","text":"release 1.0.0 ( b2895f2 ) release 1.0.0-beta.16 ( a083ad6 ) release 1.0.0-beta.16 ( 90e4bb2 ) release 1.0.0-beta.16 ( eec2073 ) release 1.0.0-beta.16 ( cd92ead ) release 1.0.0-beta.16 ( 7f0a91b ) release 1.0.0-beta.16 ( c2ad604 ) release 1.0.0-beta.16 ( a641486 ) release 1.0.0-beta.16 ( 94d5791 ) release 1.0.0-beta.16 ( 16de429 ) release 1.0.0-beta.16 ( 72915c0 ) release 1.0.0-beta.16 ( 3ea2b37 ) release 1.0.0-beta.16 ( 78a6d39 ) release 1.0.0-beta.16 ( 11bfa93 ) release 1.0.0-beta.16 ( 22b180b ) release 1.0.0-beta.16 ( b9acd0b ) release 1.0.0-beta.16 ( 328cd30 ) release 1.0.0-beta.16 ( 5a84602 ) release 1.0.0-beta.16 ( 4923277 ) release 1.0.0-beta.16 ( 258ba96 ) release 1.0.0-beta.16 ( 77c4423 )","title":"Miscellaneous Chores"},{"location":"CHANGELOG/#100-beta16-2022-03-14","text":"","title":"1.0.0-beta.16 (2022-03-14)"},{"location":"CHANGELOG/#features_2","text":"add support to import custom ldif ( #1002 ) ( 0b6334a )","title":"Features"},{"location":"CHANGELOG/#miscellaneous-chores_3","text":"release 1.0.0-beta.16 ( a083ad6 ) release 1.0.0-beta.16 ( 90e4bb2 ) release 1.0.0-beta.16 ( eec2073 ) release 1.0.0-beta.16 ( cd92ead ) release 1.0.0-beta.16 ( 7f0a91b ) release 1.0.0-beta.16 ( c2ad604 ) release 1.0.0-beta.16 ( a641486 ) release 1.0.0-beta.16 ( 94d5791 ) release 1.0.0-beta.16 ( 16de429 ) release 1.0.0-beta.16 ( 72915c0 ) release 1.0.0-beta.16 ( 3ea2b37 ) release 1.0.0-beta.16 ( 78a6d39 ) release 1.0.0-beta.16 ( 11bfa93 ) release 1.0.0-beta.16 ( 22b180b ) release 1.0.0-beta.16 ( b9acd0b ) release 1.0.0-beta.16 ( 328cd30 ) release 1.0.0-beta.16 ( 5a84602 ) release 1.0.0-beta.16 ( 4923277 ) release 1.0.0-beta.16 ( 258ba96 ) release 1.0.0-beta.16 ( 77c4423 ) release 1.0.0-beta.16 ( 688b324 ) release 1.0.0-beta.16 ( 4e86f15 ) release 1.0.0-beta.16 ( 8d514ee ) release 1.0.0-beta.16 ( 0899898 )","title":"Miscellaneous Chores"},{"location":"CHANGELOG/#100-beta15-2022-03-02","text":"","title":"1.0.0-beta.15 (2022-03-02)"},{"location":"CHANGELOG/#features_3","text":"add POST /rolePermissionsMapping for adding new rolePermissionsMapping entry #144 ( 7bcad3b ) add POST /rolePermissionsMapping for adding new rolePermissionsMapping entry #144 ( 932a45b ) protecting Admin-UI Plugin Apis #142 ( 52e8846 ) protecting Admin-UI Plugin Apis #142 ( a1a0d54 )","title":"Features"},{"location":"CHANGELOG/#miscellaneous-chores_4","text":"release 1.0.0-beta.15 ( ee5b719 ) release 1.0.0-beta.15 ( ca6d1c9 ) release 1.0.0-beta.15 ( b65bab2 )","title":"Miscellaneous Chores"},{"location":"CODE_OF_CONDUCT/","text":"Janssen Code of Conduct v1.0 # Our Pledge # In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards # Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities # Janssen Project members, project participants and contributors (collectively, \"participants\") are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. The Technical Steering Committee (\"TSC\") of the Janssen Project has the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any participant for other behaviors that they deem inappropriate, threatening, offensive, or harmful. All participants have determined that The Linux Foundation is the most optimal organization to shepherd the development of this project. Participants acknowledge and agree to The Linux Foundation's exclusive right to use \"Janssen Project\" and any other names and trademarks associated with the open source project and Janssen Project and to authorize others\u2019 use of the marks, establish guidelines for such use, and to delegate these responsibilities. Participants agree not to take any action inconsistent with such rights and to cooperate in any action which The Linux Foundation deems necessary or desirable to prevent confusion or establish or preserve these rights. Participants will not independently adopt, use, or attempt to register any trademarks or trade names that are confusingly similar to these names. Scope # This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement # Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the Executive Director, or, if the complaint involves the Executive Director, a member of the steering committee. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Participants who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by the steering committee. Attribution # This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html . For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#janssen-code-of-conduct-v10","text":"","title":"Janssen Code of Conduct v1.0"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","text":"Janssen Project members, project participants and contributors (collectively, \"participants\") are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. The Technical Steering Committee (\"TSC\") of the Janssen Project has the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any participant for other behaviors that they deem inappropriate, threatening, offensive, or harmful. All participants have determined that The Linux Foundation is the most optimal organization to shepherd the development of this project. Participants acknowledge and agree to The Linux Foundation's exclusive right to use \"Janssen Project\" and any other names and trademarks associated with the open source project and Janssen Project and to authorize others\u2019 use of the marks, establish guidelines for such use, and to delegate these responsibilities. Participants agree not to take any action inconsistent with such rights and to cooperate in any action which The Linux Foundation deems necessary or desirable to prevent confusion or establish or preserve these rights. Participants will not independently adopt, use, or attempt to register any trademarks or trade names that are confusingly similar to these names.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the Executive Director, or, if the complaint involves the Executive Director, a member of the steering committee. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Participants who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by the steering committee.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html . For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing to Janssen Project # Purpose of this guide is to provide necessary information and resources to community in order to make successful contribution to the Janssen Project. There are many ways you can contribute. Of course you can contribute code. But we also need people to write documentation and guides, to help us with testing, to answer questions on the forums and chat, to review PR's, to help us with devops and CI/CD, to provide feedback on usability, and to promote the project through outreach. Also, by sharing metrics with us, we can gain valuable insights into how the software performs in the wild. Join the Community First Time Contributors Contribution Guidelines Code of Conduct About Issues Triaging Code Conventions and Guidelines Commits Branches PRs Issues Contributing to the documentation Contribution Workflow Find Something To Work On Start a Discussion Implement the Change Document Raise a PR Follow Through Join the Community # Repo : Watch and Star Janssen repository on Github Discussions : Join interesting discussions at Github Discussions Chat : We have an active community chat on Gitter . You can register for free their with your Github identity. Tweet : Janssen is on Twitter too. Follow us there to stay up to date on release announcements and news around Janssen. First Time Contributors # In case you are first-time contributor, then you can start with our good first issues list These are issues where you can easily contribute and community members will guide and support your contribution as always. If you need Janssen installation to test out your fix, here are the steps . Contribution Guidelines # We are really glad you are reading this, because we need volunteer developers to help this project come to fruition. Code of Conduct Issues Triaging Coding Conventions Code of Conduct # Janssen project has a Code of Conduct to which all contributors must adhere, please read it before interacting with the repository or the community in any way. About Issues # There are four kinds of issues you can open: Bug report : you believe you found a problem in a project and you want to discuss and get it fixed, creating an issue with the bug report template is the best way to do so. Feature Request : any kind of new feature need to be discussed in this kind of issue, do you want a new rule or a new feature? This is the kind of issue you want to open. Be very good at explaining your intent, it's always important that others can understand what you mean in order to discuss, be open and collaborative in letting others help you getting this done! Security Vulnerability : If you identify a security problem, please report it immediately, providing details about the nature, and if applicable, how to reproduce it. If you want to report an issue privately, you can email security@gluu.org Failing tests : you noticed a flaky test or a problem with a build? This is the kind of issue to triage that! The best way to get involved in the project is through issues, you can help in many ways: Issues triaging: participating in the discussion and adding details to open issues is always a good thing, sometimes issues need to be verified, you could be the one writing a test case to fix a bug! Fix an issue: you can help in getting issue fixed in many ways. More often by opening a pull request. In case you are first-time contributor, then you can start with our good first issues list These are issues where you can easily contribute and community members will guide and support your contribution as always. Triaging # Triage is a process of evaluating issues and PRs in order to determine their characteristics and take quick actions if possible. When you triage an issue, you: assess whether it has merit or not quickly close it by correctly answering a question point the reporter to a resource or documentation answering the issue tag it via labels, projects, or milestones take ownership submitting a PR for it, in case you want \ud83d\ude07 Here is how we continously triage new issues and PRs so that contributors can contribute faster and better. Code Conventions and Guidelines # Commits # Janssen Project mandates all commits to follow guidelines as below. Commit messages As commit convention, we adopt Conventional Commits v1.0.0 , we have an history of commits that do not adopt the convention but any new commit must follow it to be eligible for merge. Add GPG signature to your commit To ensure that contribution is coming for a trusted source, all commits should be signed using GPG key and verified by Github. If you have GPG key setup already then just use -S switch with you commit to sign it. If you need to setup your GPG key and verification, then you can find detailed instructions here Add DCO sign-off The Developer Certificate of Origin (DCO) is a lightweight way for contributors to certify that they wrote or otherwise have the right to submit the code they are contributing to the project. Contributors to the Janssen project sign-off that they adhere to these requirements by adding a Signed-off-by line to commit messages. This is a commit message Signed-off-by: Foo Bar <foobar@spam.org> Git even has a -s command line option to append this automatically to your commit message: $ git commit -s -m 'This is my commit message' In all, if you have your GPG verification setup, your commit command should look like git commit -S -s -m 'message that follows conventional commit style' Branches # Branch name should have component name as prefix, eg jans-core-mybranch PRs # PR titles should also follow Conventional Commits v1.0.0 . This will help in keeping merge commit messages inline with commit message standards Squash commits into small number of cohesive commits before raising a PR PR should be rebased on main branch so that there are minimal or no conflicts at the time of merge PR should only have changes related to target feature or issue. Create a separate PR for formatting or other quick bug fixes PR should include relevent documentaton changes PR should include unit and integration tests Issues # Issue titles should follow Conventional Commits v1.0.0 Backport changes to a different version # Backport changes are now supported through a workflow through labels prefixed with backport/ . For-example to backport changes in a certain PR to version v1.0.0 a label to that PR matching the version must be added i.e backport/v1.0.0 . The flow consists of creating a new branch, cherry-picking the changes of the original PR and creating a new PR to merge them. Contributing to the documentation # Great documentation is a reflection of software's maturity and the great community that stands behind it. Contributing to the Janssen Project documentation is the easiest way to learn about the Janssen Project and to get involved in the community process. In order to ensure consistency of style, language, format, and terminology across all documents, please follow the guidelines below: Glossary of terms # This glossary helps to keep terms and their meanings consistent across documentation. Janssen Project or Jans : Refers to the official project name under Linux Foundation that seeks to build the world\u2019s fastest and most comprehensive cloud native identity and access management software platform Janssen Server : Refers to a set of software components developed under the Janssen Project . Components of the Janssen Server include client and server implementations of the OAuth, OpenID Connect, SCIM and FIDO standards. The term Janssen Server is used to refer to these components as a group. jans-auth-server : Refers to a module within the Janssen Server named jans-auth-server . This is one of the significant modules of the Janssen Server that has an implementation for OAuth and OpenId Connect. Janssen Server module names: For correct naming of other modules of the Janssen Server, please refer to README Documentation Style Guide # Janssen Project documentation uses Markdown. Guidelines below are intended to bring consistency in writing and formatting documents. Testing Janssen Project documentation site is published using MkDocs. Markdown parsers used by Github and the one used by MkDocs may have slight variations in how they generate HTML. So, for a small number of cases, document may look different between Github and Janssen Project documentation site . Hence it is critical to test documentation changes locally before pushing to repository. This will ensure that final HTML rendering of documents by MkDocs is as desired. Document Title # The document title summarises what the document aims to achieve and at the same time, it plays a critical role in making the document easy to find via search. Below are a few guidelines to write good titles for documents. Every document must start with a title. Meaning, #<space><title text> Title should summarise what the document is trying to achieve. For examples: Integrating with the Apache mod_auth_openidc module , Integrating DUO's Universal Prompt as an authentication method , Install using Ubuntu Linux Package Title should include its context. For example, the document under Installation > VM Installation > Ubuntu should not be titled as just Ubuntu but it should have a more detailed title similar to Install using Ubuntu Linux Package . When required, to keep the title from becoming too long, assume that Janssen Server is already understood as context. Titles should be written using title case Document Tags # Janssen Project documentation uses tags to make the search more accurate and add context to search results. Following are guidelines and examples to follow while adding tags to a document. Maximum 6 tags First three should establish the context of the section hierarchy under which the document belongs. See the example below. Remaining tags can be based on the content of the document. Each tag should be a single word (no spaces, hyphens or commas, etc) All tags should be in lowercase Example: Let's look at how to add tags to a document that is located on documentation site at path Administration -> Installation -> VM installation . Also, assume that the document describes the steps to install Janssen Project on the Ubuntu platform. Tags below would be recommended: --- ta gs : - admi n is trat io n - i nstallat io n - vm - ubu ntu --- General Text # Allow long lines to wrap, rather than manually breaking them. For example, the Introduction paragraph is a single line Keep explanations short and clear Use complete sentences when possible To make text italicised , put an _ on each side, like this: _word_ To bold text, put a double * on each end, like this: **word** Leave a blank line between paragraphs. Count a header as a paragraph for this purpose Avoid passive voice as much as possible. It's clearer to say that a subject does something than to say a result was done Avoid using you in statements as much as possible. For example, instead of saying You can navigate to... simply say Navigate to... Page Setup # Start your page with a title on the first line Follow with a concise overview of the document / product's purpose Organize the information in the document from least technical to most technical if possible. Start conceptual, then get detailed Lists # Leave a blank line between text and first item in the list Only use a numbered list if the order of the list matters A line of a list should not end with a period. If it's multiple sentences, like this one, drop the last period Start each item in the list with a capital letter End each item in the list with at least three spaces. This makes sure the line breaks properly To make a bulleted list, start each line with - To make a numbered list, start each line with 1. For example: 1. This is the first item 1. This is the second item 1. This is the third item It will look like this: 1. This is the first item 2. This is the second item 3. This is the third item To include additional lines in a list item, start the sub-line with four spaces. For example: 1. This is the first item in a list There are four spaces to start this line Another four spaces here This keeps all text inside the numbered list item, before starting... 1. The following list item It will look like this: This is the first item in a list There are four spaces to start this line Another four spaces here This keeps all text inside the list, before starting... The following list item Other formatting considerations # Admonitions cannot be nested inside a list. They must be aligned all the way left. Inserting them within a list will break the list sequence (starting back over from 1). Nesting a fenced block of code in a numbered list is more challenging, as the list and code block syntaxes clash. To nest a code block into a list, insert four spaces to the left of all lines of the formatting. For example: 1. This is the first item ``` This is code This is also code. ``` 1. This is the second item It will look like this: This is the first item This is code This is also code. This is the second item Headings # Headings should be in title format. All important words should be capitalized The main title of the page should start with a single # , then each level of subheading should add one. For example, the first subheading should start with ## , a subheading of that should use ### , and so on Code Formatting # To format text as code within a line of normal text, surround the code with a single backtick (`). If the code is to be on its own line, it should be a fenced code block. To make a fenced code block, make a line before and after the code with three backticks: ``` This is code ``` We use the SuperFences plugin to enhance this functionality. Examples & Navigation # When possible, provide an example in the form of code output or a screenshot To instruct a user to click a button, or navigate to a certain page or through a menu, use the following style: Navigate to `Configuration` > `Authentication` and click the `Passport` tab It will look like this: Navigate to Configuration > Authentication and click the Passport tab Linking # We recommend using relative linking syntax when linking to other artifacts in repository. Linking to a page within the same repo use this format: [text for the link](../where/the/link/goes.md) - You must link to the .md file on GitHub for it to work properly - As an example, to make text this link link to a Markdown document named example.md in the same directory, you'd type it as [this link](./example.md) Service Commands # The Janssen Server supports many different Operating Systems (e.g. Ubuntu, SUSE etc.). Service commands can vary. Rather than \"hard coding\" service commands into documentation, please instead reference the dedicated documentation page for Service Commands . In documenting a process that involves a service restart, the Service Command documentation is linked: ## Add the attribute to LDAP - Add custom attribute - [Restart](https://jans.io/docs/vm-ops/restarting-services/) the `jans-auth.service` service. The word Restart is simply linked to the dedicated doc for Service Commands. Tables # Try to make tables visually readable by spacing to make distinct columns The header for each column must be separated by at least three dashes Use outer pipes for consistency If an entry is too long to fit in the neat boxes, that's fine, just try to keep it legible An example table follows: |This |Is |A |Table | |--------|-------|------|---------| |1 |2 |3 |4 | |Word |Code |Text |Table | It looks like this: This Is A Table 1 2 3 4 Word Code Text Table Help On Technical Writing # It is essential for everyone in the community to actively participate in the documentation. At the same time, not everyone is formally trained or experienced in writing technical documents. To help everyone understand the basics of good technical writing, we have listed a few resources below. Going through these resources will not take a lot of time and will help in writing better technical documents. Introduction to Technical Writing (part-1) Introduction to Technical Writing (part-2) Contribution Workflow # Find something to work on # Best place to find something to work on is to look at currently open issues . If you are a first time contributor then starting with list of good first issues is best. Start a discussion # Start a Github Discussion about what you are planning to contribute. Explain the feature or issue that you are planning to contribute and what your solution or implementation approach. Janssen is a community driven project and it'll be helpful to get community's view about it. Create an issue # Take your time to write a proper issue including a good summary and description. Outcome of Github discussion about your contribution can help you create good content for the issue. As a first step when creating a new issue, an issue template has to be selected. Select appropriate issue template and it'll help you create an issue with right content. Remember that issue may be the first thing a reviewer of your PR will look at to get an idea of what you are proposing. It will also be used by the community in the future to find about what new features and enhancements are included in new releases. Implement the change # All contributions to Janssen Project should be made via Github pull requests(PR). New to PR workflow?? Learn and practice it at first-contributions Create a Fork # Fork Janssen repository . And create a clone. Implement the Change # Start working on changes as required. Make sure the code conventions are being followed. Use static code analysis and linting tools to make sure the code is high-quality. Write tests first and then code. Ensure that integration tests that cover your code are appropriately updated and reviewed. Create PR early and push often. Janssen uses Github actions to run automated checks on PR changes. Ensure that these checks are passing with every push. Engage PR reviewers at the start so that they can continue to reivew code as it is developed and in small chunks. For a change that is non-trivial(an enhancement or a new feature), design should be reviewed. This should be done via PR by adding appropriate code owners. Document # PR should include changes in relevant documentation along with code changes. PR is checked by bot to have either one of the following : A commit that follows commit guidelines with docs: message Changes in artifacts under jans/docs If PR does not need any documentation changes, then the developer needs to acknowledge that in one of two ways: Add an empty commit to the PR (using --allow-empty git flag) with docs: message (i.e docs: no doc changes required ) Add footer to the commit message of one of the code commits with docs: message e.g fix: typo on class name More details here. docs: no docs modification Raise a PR # Make sure that PR title follows these guidelines Janssen uses Github PR template. Template provides helpful instructions to ensure new PRs are complete in details and easy to review. Github will populate new PR's description with these instructions. You can edit PR description as per your requirements. When PR is raised, Github will automatically assign reviewer to the PR based changed files and CODEOWNERS list. Once PR is raised, ensure that PR passes all the mandatory Github actions checks available on Github PR page. Github will not allow PR to be merged if any of the mandatory check is failing. Follow Through # Once the PR is raised, wait for reviewers to start review. Reviewers will start review at the first opportunity available. If you want to draw attention, give a gentle reminder in PR comments. But please be patient. Follow activities on your PR closely till the time PR is merged. PR reviewer may want to suggest a change or may need to ask a question to get more clarity. Make sure you are actively collaborating. Once Reviewer has completed the review and approved the changes, the PR will be merged. Thats it!! Congratulations on successful contribution. \ud83e\udd73 \ud83e\udd1f","title":"Contribution Guidelines"},{"location":"CONTRIBUTING/#contributing-to-janssen-project","text":"Purpose of this guide is to provide necessary information and resources to community in order to make successful contribution to the Janssen Project. There are many ways you can contribute. Of course you can contribute code. But we also need people to write documentation and guides, to help us with testing, to answer questions on the forums and chat, to review PR's, to help us with devops and CI/CD, to provide feedback on usability, and to promote the project through outreach. Also, by sharing metrics with us, we can gain valuable insights into how the software performs in the wild. Join the Community First Time Contributors Contribution Guidelines Code of Conduct About Issues Triaging Code Conventions and Guidelines Commits Branches PRs Issues Contributing to the documentation Contribution Workflow Find Something To Work On Start a Discussion Implement the Change Document Raise a PR Follow Through","title":"Contributing to Janssen Project"},{"location":"CONTRIBUTING/#join-the-community","text":"Repo : Watch and Star Janssen repository on Github Discussions : Join interesting discussions at Github Discussions Chat : We have an active community chat on Gitter . You can register for free their with your Github identity. Tweet : Janssen is on Twitter too. Follow us there to stay up to date on release announcements and news around Janssen.","title":"Join the Community"},{"location":"CONTRIBUTING/#first-time-contributors","text":"In case you are first-time contributor, then you can start with our good first issues list These are issues where you can easily contribute and community members will guide and support your contribution as always. If you need Janssen installation to test out your fix, here are the steps .","title":"First Time Contributors"},{"location":"CONTRIBUTING/#contribution-guidelines","text":"We are really glad you are reading this, because we need volunteer developers to help this project come to fruition. Code of Conduct Issues Triaging Coding Conventions","title":"Contribution Guidelines"},{"location":"CONTRIBUTING/#code-of-conduct","text":"Janssen project has a Code of Conduct to which all contributors must adhere, please read it before interacting with the repository or the community in any way.","title":"Code of Conduct"},{"location":"CONTRIBUTING/#about-issues","text":"There are four kinds of issues you can open: Bug report : you believe you found a problem in a project and you want to discuss and get it fixed, creating an issue with the bug report template is the best way to do so. Feature Request : any kind of new feature need to be discussed in this kind of issue, do you want a new rule or a new feature? This is the kind of issue you want to open. Be very good at explaining your intent, it's always important that others can understand what you mean in order to discuss, be open and collaborative in letting others help you getting this done! Security Vulnerability : If you identify a security problem, please report it immediately, providing details about the nature, and if applicable, how to reproduce it. If you want to report an issue privately, you can email security@gluu.org Failing tests : you noticed a flaky test or a problem with a build? This is the kind of issue to triage that! The best way to get involved in the project is through issues, you can help in many ways: Issues triaging: participating in the discussion and adding details to open issues is always a good thing, sometimes issues need to be verified, you could be the one writing a test case to fix a bug! Fix an issue: you can help in getting issue fixed in many ways. More often by opening a pull request. In case you are first-time contributor, then you can start with our good first issues list These are issues where you can easily contribute and community members will guide and support your contribution as always.","title":"About Issues"},{"location":"CONTRIBUTING/#triaging","text":"Triage is a process of evaluating issues and PRs in order to determine their characteristics and take quick actions if possible. When you triage an issue, you: assess whether it has merit or not quickly close it by correctly answering a question point the reporter to a resource or documentation answering the issue tag it via labels, projects, or milestones take ownership submitting a PR for it, in case you want \ud83d\ude07 Here is how we continously triage new issues and PRs so that contributors can contribute faster and better.","title":"Triaging"},{"location":"CONTRIBUTING/#code-conventions-and-guidelines","text":"","title":"Code Conventions and Guidelines"},{"location":"CONTRIBUTING/#commits","text":"Janssen Project mandates all commits to follow guidelines as below. Commit messages As commit convention, we adopt Conventional Commits v1.0.0 , we have an history of commits that do not adopt the convention but any new commit must follow it to be eligible for merge. Add GPG signature to your commit To ensure that contribution is coming for a trusted source, all commits should be signed using GPG key and verified by Github. If you have GPG key setup already then just use -S switch with you commit to sign it. If you need to setup your GPG key and verification, then you can find detailed instructions here Add DCO sign-off The Developer Certificate of Origin (DCO) is a lightweight way for contributors to certify that they wrote or otherwise have the right to submit the code they are contributing to the project. Contributors to the Janssen project sign-off that they adhere to these requirements by adding a Signed-off-by line to commit messages. This is a commit message Signed-off-by: Foo Bar <foobar@spam.org> Git even has a -s command line option to append this automatically to your commit message: $ git commit -s -m 'This is my commit message' In all, if you have your GPG verification setup, your commit command should look like git commit -S -s -m 'message that follows conventional commit style'","title":"Commits"},{"location":"CONTRIBUTING/#branches","text":"Branch name should have component name as prefix, eg jans-core-mybranch","title":"Branches"},{"location":"CONTRIBUTING/#prs","text":"PR titles should also follow Conventional Commits v1.0.0 . This will help in keeping merge commit messages inline with commit message standards Squash commits into small number of cohesive commits before raising a PR PR should be rebased on main branch so that there are minimal or no conflicts at the time of merge PR should only have changes related to target feature or issue. Create a separate PR for formatting or other quick bug fixes PR should include relevent documentaton changes PR should include unit and integration tests","title":"PRs"},{"location":"CONTRIBUTING/#issues","text":"Issue titles should follow Conventional Commits v1.0.0","title":"Issues"},{"location":"CONTRIBUTING/#backport-changes-to-a-different-version","text":"Backport changes are now supported through a workflow through labels prefixed with backport/ . For-example to backport changes in a certain PR to version v1.0.0 a label to that PR matching the version must be added i.e backport/v1.0.0 . The flow consists of creating a new branch, cherry-picking the changes of the original PR and creating a new PR to merge them.","title":"Backport changes to a different version"},{"location":"CONTRIBUTING/#contributing-to-the-documentation","text":"Great documentation is a reflection of software's maturity and the great community that stands behind it. Contributing to the Janssen Project documentation is the easiest way to learn about the Janssen Project and to get involved in the community process. In order to ensure consistency of style, language, format, and terminology across all documents, please follow the guidelines below:","title":"Contributing to the documentation"},{"location":"CONTRIBUTING/#glossary-of-terms","text":"This glossary helps to keep terms and their meanings consistent across documentation. Janssen Project or Jans : Refers to the official project name under Linux Foundation that seeks to build the world\u2019s fastest and most comprehensive cloud native identity and access management software platform Janssen Server : Refers to a set of software components developed under the Janssen Project . Components of the Janssen Server include client and server implementations of the OAuth, OpenID Connect, SCIM and FIDO standards. The term Janssen Server is used to refer to these components as a group. jans-auth-server : Refers to a module within the Janssen Server named jans-auth-server . This is one of the significant modules of the Janssen Server that has an implementation for OAuth and OpenId Connect. Janssen Server module names: For correct naming of other modules of the Janssen Server, please refer to README","title":"Glossary of terms"},{"location":"CONTRIBUTING/#documentation-style-guide","text":"Janssen Project documentation uses Markdown. Guidelines below are intended to bring consistency in writing and formatting documents. Testing Janssen Project documentation site is published using MkDocs. Markdown parsers used by Github and the one used by MkDocs may have slight variations in how they generate HTML. So, for a small number of cases, document may look different between Github and Janssen Project documentation site . Hence it is critical to test documentation changes locally before pushing to repository. This will ensure that final HTML rendering of documents by MkDocs is as desired.","title":"Documentation Style Guide"},{"location":"CONTRIBUTING/#document-title","text":"The document title summarises what the document aims to achieve and at the same time, it plays a critical role in making the document easy to find via search. Below are a few guidelines to write good titles for documents. Every document must start with a title. Meaning, #<space><title text> Title should summarise what the document is trying to achieve. For examples: Integrating with the Apache mod_auth_openidc module , Integrating DUO's Universal Prompt as an authentication method , Install using Ubuntu Linux Package Title should include its context. For example, the document under Installation > VM Installation > Ubuntu should not be titled as just Ubuntu but it should have a more detailed title similar to Install using Ubuntu Linux Package . When required, to keep the title from becoming too long, assume that Janssen Server is already understood as context. Titles should be written using title case","title":"Document Title"},{"location":"CONTRIBUTING/#document-tags","text":"Janssen Project documentation uses tags to make the search more accurate and add context to search results. Following are guidelines and examples to follow while adding tags to a document. Maximum 6 tags First three should establish the context of the section hierarchy under which the document belongs. See the example below. Remaining tags can be based on the content of the document. Each tag should be a single word (no spaces, hyphens or commas, etc) All tags should be in lowercase Example: Let's look at how to add tags to a document that is located on documentation site at path Administration -> Installation -> VM installation . Also, assume that the document describes the steps to install Janssen Project on the Ubuntu platform. Tags below would be recommended: --- ta gs : - admi n is trat io n - i nstallat io n - vm - ubu ntu ---","title":"Document Tags"},{"location":"CONTRIBUTING/#general-text","text":"Allow long lines to wrap, rather than manually breaking them. For example, the Introduction paragraph is a single line Keep explanations short and clear Use complete sentences when possible To make text italicised , put an _ on each side, like this: _word_ To bold text, put a double * on each end, like this: **word** Leave a blank line between paragraphs. Count a header as a paragraph for this purpose Avoid passive voice as much as possible. It's clearer to say that a subject does something than to say a result was done Avoid using you in statements as much as possible. For example, instead of saying You can navigate to... simply say Navigate to...","title":"General Text"},{"location":"CONTRIBUTING/#page-setup","text":"Start your page with a title on the first line Follow with a concise overview of the document / product's purpose Organize the information in the document from least technical to most technical if possible. Start conceptual, then get detailed","title":"Page Setup"},{"location":"CONTRIBUTING/#lists","text":"Leave a blank line between text and first item in the list Only use a numbered list if the order of the list matters A line of a list should not end with a period. If it's multiple sentences, like this one, drop the last period Start each item in the list with a capital letter End each item in the list with at least three spaces. This makes sure the line breaks properly To make a bulleted list, start each line with - To make a numbered list, start each line with 1. For example: 1. This is the first item 1. This is the second item 1. This is the third item It will look like this: 1. This is the first item 2. This is the second item 3. This is the third item To include additional lines in a list item, start the sub-line with four spaces. For example: 1. This is the first item in a list There are four spaces to start this line Another four spaces here This keeps all text inside the numbered list item, before starting... 1. The following list item It will look like this: This is the first item in a list There are four spaces to start this line Another four spaces here This keeps all text inside the list, before starting... The following list item","title":"Lists"},{"location":"CONTRIBUTING/#other-formatting-considerations","text":"Admonitions cannot be nested inside a list. They must be aligned all the way left. Inserting them within a list will break the list sequence (starting back over from 1). Nesting a fenced block of code in a numbered list is more challenging, as the list and code block syntaxes clash. To nest a code block into a list, insert four spaces to the left of all lines of the formatting. For example: 1. This is the first item ``` This is code This is also code. ``` 1. This is the second item It will look like this: This is the first item This is code This is also code. This is the second item","title":"Other formatting considerations"},{"location":"CONTRIBUTING/#headings","text":"Headings should be in title format. All important words should be capitalized The main title of the page should start with a single # , then each level of subheading should add one. For example, the first subheading should start with ## , a subheading of that should use ### , and so on","title":"Headings"},{"location":"CONTRIBUTING/#code-formatting","text":"To format text as code within a line of normal text, surround the code with a single backtick (`). If the code is to be on its own line, it should be a fenced code block. To make a fenced code block, make a line before and after the code with three backticks: ``` This is code ``` We use the SuperFences plugin to enhance this functionality.","title":"Code Formatting"},{"location":"CONTRIBUTING/#examples-navigation","text":"When possible, provide an example in the form of code output or a screenshot To instruct a user to click a button, or navigate to a certain page or through a menu, use the following style: Navigate to `Configuration` > `Authentication` and click the `Passport` tab It will look like this: Navigate to Configuration > Authentication and click the Passport tab","title":"Examples &amp; Navigation"},{"location":"CONTRIBUTING/#linking","text":"We recommend using relative linking syntax when linking to other artifacts in repository. Linking to a page within the same repo use this format: [text for the link](../where/the/link/goes.md) - You must link to the .md file on GitHub for it to work properly - As an example, to make text this link link to a Markdown document named example.md in the same directory, you'd type it as [this link](./example.md)","title":"Linking"},{"location":"CONTRIBUTING/#service-commands","text":"The Janssen Server supports many different Operating Systems (e.g. Ubuntu, SUSE etc.). Service commands can vary. Rather than \"hard coding\" service commands into documentation, please instead reference the dedicated documentation page for Service Commands . In documenting a process that involves a service restart, the Service Command documentation is linked: ## Add the attribute to LDAP - Add custom attribute - [Restart](https://jans.io/docs/vm-ops/restarting-services/) the `jans-auth.service` service. The word Restart is simply linked to the dedicated doc for Service Commands.","title":"Service Commands"},{"location":"CONTRIBUTING/#tables","text":"Try to make tables visually readable by spacing to make distinct columns The header for each column must be separated by at least three dashes Use outer pipes for consistency If an entry is too long to fit in the neat boxes, that's fine, just try to keep it legible An example table follows: |This |Is |A |Table | |--------|-------|------|---------| |1 |2 |3 |4 | |Word |Code |Text |Table | It looks like this: This Is A Table 1 2 3 4 Word Code Text Table","title":"Tables"},{"location":"CONTRIBUTING/#help-on-technical-writing","text":"It is essential for everyone in the community to actively participate in the documentation. At the same time, not everyone is formally trained or experienced in writing technical documents. To help everyone understand the basics of good technical writing, we have listed a few resources below. Going through these resources will not take a lot of time and will help in writing better technical documents. Introduction to Technical Writing (part-1) Introduction to Technical Writing (part-2)","title":"Help On Technical Writing"},{"location":"CONTRIBUTING/#contribution-workflow","text":"","title":"Contribution Workflow"},{"location":"CONTRIBUTING/#find-something-to-work-on","text":"Best place to find something to work on is to look at currently open issues . If you are a first time contributor then starting with list of good first issues is best.","title":"Find something to work on"},{"location":"CONTRIBUTING/#start-a-discussion","text":"Start a Github Discussion about what you are planning to contribute. Explain the feature or issue that you are planning to contribute and what your solution or implementation approach. Janssen is a community driven project and it'll be helpful to get community's view about it.","title":"Start a discussion"},{"location":"CONTRIBUTING/#create-an-issue","text":"Take your time to write a proper issue including a good summary and description. Outcome of Github discussion about your contribution can help you create good content for the issue. As a first step when creating a new issue, an issue template has to be selected. Select appropriate issue template and it'll help you create an issue with right content. Remember that issue may be the first thing a reviewer of your PR will look at to get an idea of what you are proposing. It will also be used by the community in the future to find about what new features and enhancements are included in new releases.","title":"Create an issue"},{"location":"CONTRIBUTING/#implement-the-change","text":"All contributions to Janssen Project should be made via Github pull requests(PR). New to PR workflow?? Learn and practice it at first-contributions","title":"Implement the change"},{"location":"CONTRIBUTING/#create-a-fork","text":"Fork Janssen repository . And create a clone.","title":"Create a Fork"},{"location":"CONTRIBUTING/#implement-the-change_1","text":"Start working on changes as required. Make sure the code conventions are being followed. Use static code analysis and linting tools to make sure the code is high-quality. Write tests first and then code. Ensure that integration tests that cover your code are appropriately updated and reviewed. Create PR early and push often. Janssen uses Github actions to run automated checks on PR changes. Ensure that these checks are passing with every push. Engage PR reviewers at the start so that they can continue to reivew code as it is developed and in small chunks. For a change that is non-trivial(an enhancement or a new feature), design should be reviewed. This should be done via PR by adding appropriate code owners.","title":"Implement the Change"},{"location":"CONTRIBUTING/#document","text":"PR should include changes in relevant documentation along with code changes. PR is checked by bot to have either one of the following : A commit that follows commit guidelines with docs: message Changes in artifacts under jans/docs If PR does not need any documentation changes, then the developer needs to acknowledge that in one of two ways: Add an empty commit to the PR (using --allow-empty git flag) with docs: message (i.e docs: no doc changes required ) Add footer to the commit message of one of the code commits with docs: message e.g fix: typo on class name More details here. docs: no docs modification","title":"Document"},{"location":"CONTRIBUTING/#raise-a-pr","text":"Make sure that PR title follows these guidelines Janssen uses Github PR template. Template provides helpful instructions to ensure new PRs are complete in details and easy to review. Github will populate new PR's description with these instructions. You can edit PR description as per your requirements. When PR is raised, Github will automatically assign reviewer to the PR based changed files and CODEOWNERS list. Once PR is raised, ensure that PR passes all the mandatory Github actions checks available on Github PR page. Github will not allow PR to be merged if any of the mandatory check is failing.","title":"Raise a PR"},{"location":"CONTRIBUTING/#follow-through","text":"Once the PR is raised, wait for reviewers to start review. Reviewers will start review at the first opportunity available. If you want to draw attention, give a gentle reminder in PR comments. But please be patient. Follow activities on your PR closely till the time PR is merged. PR reviewer may want to suggest a change or may need to ask a question to get more clarity. Make sure you are actively collaborating. Once Reviewer has completed the review and approved the changes, the PR will be merged. Thats it!! Congratulations on successful contribution. \ud83e\udd73 \ud83e\udd1f","title":"Follow Through"},{"location":"admin/","tags":["administration"],"text":"Overview # Administration # Welcome Admins! This collection of guides will help you deploy, configure and operate Janssen software. Use the left navigation to dig deeper into each specific area. Deployment and Planning Guide High level design concepts and architecture. Installation Howto's for VM and cloud native deployment Kubernetes Operation Guide Day-to-day administration for cloud native VM Operation Guide Day-to-day administration if you installed a SUSE, Red Hat, or Ubuntu linux package. Configuration Guide How to use the various configuration tools: command line, curl , or the text user interface (\"TUI\"). Auth Server Admin Guide How to configure OpenID, OAuth, authentication workflows, and other core functional digital identity features. Developer Guide How to write code to customize the Janssen, and introducing Agama, a programming language for web authentication flows. Reference Guide Autogenerated content like JSON properties, OpenAPI docs, database schemas, javadocs. Jans Eleven Admin Guide Only needed if you use an HSM to store the private keys of the OpenID Provider. FIDO Admin Guide Operational and functional info for the FIDO service. SCIM Admin Guide Operational and functional info for the SCIM service. Integration Guide A collection of docs about configuring third party software and SaaS providers. Client API Admin Guide If you need advanced OpenID signing and encryption features, the Client API does some of the heavy lifting for developers. Config API Admin Guide This required component is used by all configuration tools to write Janssen software configuration to the database. Janssen Recipes Howto's about various frequently asked topics Upgrade Guide Getting to the latest version of Janssen. Script Catalog Examples of doing useful stuff with the various Janssen interception scripts. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Introduction"},{"location":"admin/#overview","text":"","title":"Overview"},{"location":"admin/#administration","text":"Welcome Admins! This collection of guides will help you deploy, configure and operate Janssen software. Use the left navigation to dig deeper into each specific area. Deployment and Planning Guide High level design concepts and architecture. Installation Howto's for VM and cloud native deployment Kubernetes Operation Guide Day-to-day administration for cloud native VM Operation Guide Day-to-day administration if you installed a SUSE, Red Hat, or Ubuntu linux package. Configuration Guide How to use the various configuration tools: command line, curl , or the text user interface (\"TUI\"). Auth Server Admin Guide How to configure OpenID, OAuth, authentication workflows, and other core functional digital identity features. Developer Guide How to write code to customize the Janssen, and introducing Agama, a programming language for web authentication flows. Reference Guide Autogenerated content like JSON properties, OpenAPI docs, database schemas, javadocs. Jans Eleven Admin Guide Only needed if you use an HSM to store the private keys of the OpenID Provider. FIDO Admin Guide Operational and functional info for the FIDO service. SCIM Admin Guide Operational and functional info for the SCIM service. Integration Guide A collection of docs about configuring third party software and SaaS providers. Client API Admin Guide If you need advanced OpenID signing and encryption features, the Client API does some of the heavy lifting for developers. Config API Admin Guide This required component is used by all configuration tools to write Janssen software configuration to the database. Janssen Recipes Howto's about various frequently asked topics Upgrade Guide Getting to the latest version of Janssen. Script Catalog Examples of doing useful stuff with the various Janssen interception scripts. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Administration"},{"location":"admin/auth-server/","tags":["administration","auth-server"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/client-management/","tags":["administration","client"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/client-management/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/client-management/client-authn/","tags":["administration","client"],"text":"This is a placeholder","title":"Client Authentication"},{"location":"admin/auth-server/client-management/client-schema/","tags":["administration","client"],"text":"This is a placeholder","title":"Client Schema"},{"location":"admin/auth-server/client-management/client-scripts/","tags":["administration","client"],"text":"This is a placeholder","title":"Client Scripts"},{"location":"admin/auth-server/client-management/sector-identifiers/","tags":["administration","client"],"text":"This is a placeholder","title":"Sector Identifiers"},{"location":"admin/auth-server/client-management/software-statements/","tags":["administration","client"],"text":"This is a placeholder","title":"Software Statements"},{"location":"admin/auth-server/client-management/configuration/","tags":["administration","client","configuration"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/client-management/configuration/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/client-management/configuration/client-crypto/","tags":["administration","client","configuration"],"text":"This is a placeholder","title":"Client Crypto"},{"location":"admin/auth-server/client-management/configuration/grants/","tags":["administration","client","configuration"],"text":"This is a placeholder","title":"Grants"},{"location":"admin/auth-server/client-management/configuration/pre-authorization/","tags":["administration","client","configuration"],"text":"This is a placeholder","title":"Pre-authorization"},{"location":"admin/auth-server/client-management/configuration/redirect-uris/","tags":["administration","client","configuration"],"text":"This is a placeholder","title":"Redirect URIs"},{"location":"admin/auth-server/client-management/configuration/response-types/","tags":["administration","client","configuration"],"text":"This is a placeholder","title":"Response Types"},{"location":"admin/auth-server/configuration/","tags":["administration","auth-server","configuration"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/configuration/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/configuration/json-properties/","tags":["administration","auth-server","configuration"],"text":"This is a placeholder","title":"JSON Properties"},{"location":"admin/auth-server/configuration/jvm-considerations/","tags":["administration","auth-server","configuration"],"text":"This is a placeholder","title":"JVM Considerations"},{"location":"admin/auth-server/crypto/","tags":["administration","auth-server","cryptography"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/crypto/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/crypto/key-rotation/","tags":["administration","auth-server","cryptography"],"text":"This is a placeholder","title":"Key Rotation"},{"location":"admin/auth-server/crypto/key-storage/","tags":["administration","auth-server","cryptography"],"text":"This is a placeholder","title":"Key Storage"},{"location":"admin/auth-server/crypto/manual-key-regeneration/","tags":["administration","auth-server","cryptography"],"text":"This is a placeholder","title":"Manual Key Rotation"},{"location":"admin/auth-server/crypto/supported-algorithms/","tags":["administration","auth-server","cryptography"],"text":"Supported Cryptographic Algorithms # Overview # Out of the box, Janssen supports several encryption algorithms in salted and unsalted, to fit a variety of business needs. If other algorithms are necessary, Janssen supports them via interception scripts. Supported Algorithms # Name Hash Length SSHA 20 SHA-256 32 SSHA-256 32 SHA-384 48 SSHA-384 48 SHA-512 64 SSHA-512 64 MD5 16 SMD5 16 CRYPT 11 CRYPT-MD5 22 CRYPT-SHA-256 43 CRYPT-SHA-512 86 CRYPT-BCRYPT 31 CRYPT-BCRYPT 31 PKCS5S2 32","title":"Supported Algorithms"},{"location":"admin/auth-server/crypto/supported-algorithms/#supported-cryptographic-algorithms","text":"","title":"Supported Cryptographic Algorithms"},{"location":"admin/auth-server/crypto/supported-algorithms/#overview","text":"Out of the box, Janssen supports several encryption algorithms in salted and unsalted, to fit a variety of business needs. If other algorithms are necessary, Janssen supports them via interception scripts.","title":"Overview"},{"location":"admin/auth-server/crypto/supported-algorithms/#supported-algorithms","text":"Name Hash Length SSHA 20 SHA-256 32 SSHA-256 32 SHA-384 48 SSHA-384 48 SHA-512 64 SSHA-512 64 MD5 16 SMD5 16 CRYPT 11 CRYPT-MD5 22 CRYPT-SHA-256 43 CRYPT-SHA-512 86 CRYPT-BCRYPT 31 CRYPT-BCRYPT 31 PKCS5S2 32","title":"Supported Algorithms"},{"location":"admin/auth-server/endpoints/","tags":["administration","auth-server","endpoint"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/endpoints/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/endpoints/authorization/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Authorization"},{"location":"admin/auth-server/endpoints/backchannel-authentication/","tags":["administration","auth-server","endpoint"],"text":"Backchannel authentication scripts # Janssen server enables domains to render the username/pw login form, avoiding the redirect to the IDP-hosted login page. Many SSO solutions offer a proprietary endpoint to accomplish this. However, in Janssen server, this is accomplished with the OAuth/OpenID framework by using a combination of calling the /token endpoint using the OAuth password flow, and then redirecting to browser to the /authorization endpoint, but auto-submitting the form. This article describes how to process login via backchannel and when browser is processing authorization, AS will recognize automatically the authenticated user, write cookies and then establish the session. Design # Source-code for sequence diagram Title password Grant with State Person->Browser: Navigate to website Browser->Website: Website->Browser:Display login page Person->Browser: Enter Username / PW Browser->Website: (creds) Website->IDP: /token?uid=_&pw=&browser_ip=_ IDP->Website: {\"redirect\": \"/authz/state=1F2D41A\", ...} Website->Browser: Browser->IDP: /authz?state=1F2D41A IDP->IDP: check IP address is\\n same as state IDP->Browser: write cookie / send redirect_uri Browser->Website: redirect_uri Solution # In order to process the whole authorization, idea is to use resource owner password credentials grant type in the first stage, over there process the authentication as we do today, but also write in cache a short-lived token to recognize such authenticated user, then return to the client such short-lived token. During authorization, browser should send that token as part of the custom params and in the AS we should verify if that user is already authenticated using the short-lived param in the cache, then AS will write cookies, create the session and return to the client information required for this. Jans App Configurations # Above the jans-auth record of the jansAppConf table, enable a new attribute on the jansConfDyn field Example: \"authorizationRequestCustomAllowedParameters\": [ { \"paramName\": \"bcAuthnToken\", \"returnInResponse\": true } ] Sample CURL 1. Obtain access token curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/jans-auth-server/config/properties.write\" 2. Apply patch curl -X PATCH -k -H 'Content-Type: application/json-patch+json' \\ -i 'jans-config-api/api/v1/jans-auth-server/config' \\ -H \"Authorization: Bearer put_access_token_here\" --data '[ { \"op\": \"add\", \"path\": \"authorizationRequestCustomAllowedParameters\", \"value\": [ { \"paramName\": \"bcAuthnToken\", \"returnInResponse\": true } ] } ]' Custom Script Registration # In the table jansCustomScr enable 2 new scripts: 1. Script type resource_owner_password_credentials displayName ropc-backchannel [ropc-backchannel-script.py] See script below. 2. Script type person_autentication displayName backchannel-authentication [backchannel-authentication-script.py] See script below. Client Configuration # Associate script person_authentication on table jansClnt . Modify the jansAttrs field which contains a json and the ropcScripts field and add the dn from the ropc script record in the previous step Example: \"ropcScripts\": [ \"inum={SCRIPT_ID},ou=scripts,o=jans\", ], Flow # BcAuthToken request: # Firstly, the /token service is called to generate the bcAuthnToken (get it from the response header with the key Bc-Authn-Token ) In this request example, the client's basic credential is being used in order to authenticate the client, however you could use your preferred authn mode. Request curl --location --request POST 'https://jans.localhost/jans-auth/restv1/token' \\ --header 'Authorization: Basic MzE3MGNiYzUtMDAxOC00OWVmLThiYTYtMjY4MGI2NjhiZjBjOmFmNzk1ZjI1LWQ1MjktNDVlYi1iMTJlLWNjM2ExNTY5OTU1Ng==' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'grant_type=password' \\ --data-urlencode 'username=test_user' \\ --data-urlencode 'password=test_user_password' \\ --data-urlencode 'custom1=your custom param 1' \\ --data-urlencode 'custom2=your custom param 2' \\ --data-urlencode 'scope=openid' Response HTTP/1.1 200 OK Date: Wed, 29 Jun 2022 14:03:25 GMT Server: Apache/2.4.52 (Ubuntu) X-Xss-Protection: 1; mode=block X-Content-Type-Options: nosniff Strict-Transport-Security: max-age=31536000; includeSubDomains Bc-Authn-Token: dacfe4fc-d0ce-4673-9370-e66f652c4b7f Cache-Control: no-store Content-Type: application/json Pragma: no-cache Content-Length: 1109 Keep-Alive: timeout=5, max=100 Connection: Keep-Alive {\"access_token\":\"7a024a59-e132-4c05-9126-f4f36b3d3677\",\"refresh_token\":\"184c2b60-b5c7-4250-9850-97b0f531743c\",\"scope\":\"openid\",\"id_token\":\"eyJraWQiOiJmZGJhY2Q2Yi05YTY0LTQ2MWQtOWJlYy1jOTAyMjc5ZGI2ODZfc2lnX3JzMjU2IiwidHlwIjoiand0IiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiIzMTcwY2JjNS0wMDE4LTQ5ZWYtOGJhNi0yNjgwYjY2OGJmMGMiLCJhY3IiOiJzaW1wbGVfcGFzc3dvcmRfYXV0aCIsInN1YiI6Il9Fa3p5aXlRdVBzUm1mYjh3WHlmTTB4U0xDckxwTDJGNnA3RWhEeWRBUHciLCJjb2RlIjoiNDY4MzQ2NjktOGQ1Yy00NmQxLTkwNWEtNmMzNDg3YzZlMDg3IiwiYW1yIjpbXSwiaXNzIjoiaHR0cHM6Ly9qYW5zLmxvY2FsaG9zdCIsImV4cCI6MTY1NjUxNTAwNiwiZ3JhbnQiOiJwYXNzd29yZCIsImlhdCI6MTY1NjUxMTQwNiwic2lkIjoiMTg0ZTllOTktNjFmNi00ZWNhLWE0ZmUtMTMwZmFmZDk1MjE1Iiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.hW0vReGYLzC2RyBHztSFbDYoaYHcCYxatX1lpzWqyW5U2S9eNp58mKKmvdZmMc229Sz5VxqfYflpWuI_6aXsLFR_KT9FY3exSRIRtPiD_fUETdhsVuKWavumVnjvwdAM6ytu5ORJx06DCxEgaG1uXmRiE9GoT8F1uqeo4NxURhVNXmMd2fiiUmgm1lt3-kNhlSg6vMDJS1Aq1idm-XhiSVy895BY-JdpLEGJEycPKr1lpsBTcmasbFNBJv6_orKWlvvgFCVxo7XmbH7Xnmqi6UUo30L6sULqmCsTLa6DaWYfGokHz_0xRflw_Ihv9wlVq8gSdOZGoMaVGzDdKlddZw\",\"token_type\":\"Bearer\",\"expires_in\":299} Authorize request: # Once you have gotten the bcAuthnToken from the previous /token call, you must call authorize attaching the bcAuthnToken as a parameter and in the acr_values param send the name of the backchannel-authentication registered in previous steps. This script will generate cookies and session associated with the browser if the BcAuthToken is valid. Example: https://jans.localhost/jans-auth/restv1/authorize?response_type=code&client_id=3170cbc5-0018-49ef-8ba6-2680b668bf0c&scope=openid+profile+address+email&redirect_uri=https://jans.localhost/jans-auth-rp/home.htm&state=2f78eaf1-d73e-49f2-8f50-e5faef80808a&nonce=92c3a631-db54-4ae9-bd53-caf92a4adbcf&prompt=&ui_locales=&claims_locales=&acr_values=backchannel-authentication&request_session_id=false&bcAuthnToken={your bcAuthnToken} This call will redirect to the redirect_uri that you sent as a parameter in the call and will receive a code as well, after that the process is more or less the same than the regular flow. Request /token: # With the code obtained previously, you must call /token again, adding the parameter code Request: curl --location --request POST 'https://jans.localhost/jans-auth/restv1/token' \\ --header 'Authorization: Basic MzlhNjlmYzAtNzNmYy00MWJhLWFiMGYtNDJhNWFmYWI2MjllOmJmMDRlZTM4LTM0MTktNGEzNS05YTI5LTcyODlmY2JkNzc2Zg==' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'grant_type=authorization_code' \\ --data-urlencode 'code=d449a7b9-10f6-4320-b257-05fee91d3c16' \\ --data-urlencode 'redirect_uri=https://jans.localhost/jans-auth-rp/home.htm' Response: HTTP/1.1 200 OK Date: Wed, 29 Jun 2022 15:20:50 GMT Server: Apache/2.4.52 (Ubuntu) X-Xss-Protection: 1; mode=block X-Content-Type-Options: nosniff Strict-Transport-Security: max-age=31536000; includeSubDomains Cache-Control: no-store Content-Type: application/json Pragma: no-cache Content-Length: 1291 Keep-Alive: timeout=5, max=100 Connection: Keep-Alive {\"access_token\":\"896b04a2-fcbe-4466-89b9-184930b8675b\",\"refresh_token\":\"843995ef-cd0e-4b2c-9b91-7c68081325ab\",\"id_token\":\"eyJraWQiOiJmZGJhY2Q2Yi05YTY0LTQ2MWQtOWJlYy1jOTAyMjc5ZGI2ODZfc2lnX3JzMjU2IiwidHlwIjoiand0IiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjoiMmx5OXh5emthMmc2T09HcVRPTmhqdyIsInN1YiI6Il9Fa3p5aXlRdVBzUm1mYjh3WHlmTTB4U0xDckxwTDJGNnA3RWhEeWRBUHciLCJjb2RlIjoiMjdiNjM0NTItMTE1My00ZDk5LTlkYzQtYzMyNGRmNjIwYWE0IiwiYW1yIjpbIjEwIl0sImlzcyI6Imh0dHBzOi8vamFucy5sb2NhbGhvc3QiLCJub25jZSI6IjkyYzNhNjMxLWRiNTQtNGFlOS1iZDUzLWNhZjkyYTRhZGJjZiIsInNpZCI6ImQzZDFlOWY2LWE1NTMtNDI2ZC04MWQ1LTE0YTFiZjg0MDJhNCIsIm94T3BlbklEQ29ubmVjdFZlcnNpb24iOiJvcGVuaWRjb25uZWN0LTEuMCIsImF1ZCI6IjMxNzBjYmM1LTAwMTgtNDllZi04YmE2LTI2ODBiNjY4YmYwYyIsImFjciI6InJvcGMtYmFja2NoYW5uZWwiLCJjX2hhc2giOiJzZVkxTldwNmN6ZGppUEdTWktqQlZRIiwiYXV0aF90aW1lIjoxNjU2NTE2MDM4LCJleHAiOjE2NTY1MTk2NTAsImdyYW50IjoiYXV0aG9yaXphdGlvbl9jb2RlIiwiaWF0IjoxNjU2NTE2MDUwfQ.giFYGuN-VUNSVMMT4bBkoGsZ-rKlByqe6qv24jzp7pk2eCY4FawiaLHJqH9MzBN7uEauRXYNR2pa_0oGoYnNNg4zbFiSARSKVsajcrPeDUgNs71MjMOYCH5dukXB7X5SEP3Drz5njxuXswI_EjM2Cd0OtJMoHQ0_IP_C3rzwmaQQsgWk81yAXl-eM4zABYV1e9OObGFqPtVjoHmpbFbg-teoRTr_LxYgKPwB1XnRqD4G9No7oV-9q1Bv1ED9AU6zxLWf9aGE2gQIC-jgkr7LZ5pB4zYgU_DwgmpaAuW_AT8ApfnQPqgNy7YouIPWZ8pyoncLjF0SdStVPEoreRx7GA\",\"token_type\":\"Bearer\",\"expires_in\":299} With info, you could do whatever you want using browser session. NOTE: I added some custom params in case you need to validate something else, for instance browser IP. Script templates # These scripts are examples of how it worked, but you could customize them based on your needs, for instance browser validations. Backchannel authentication script # from io.jans.service.cdi.util import CdiUtil from io.jans.as.server.security import Identity from io.jans.model.custom.script.type.auth import PersonAuthenticationType from io.jans.as.server.service import AuthenticationService from io.jans.util import StringHelper from io.jans.as.server.util import ServerUtil from io.jans.service.cache import CacheProvider from io.jans.as.server.service import SessionIdService from io.jans.as.server.service import CookieService from io.jans.as.server.security import Identity from io.jans.service.cache import CacheProvider import java class PersonAuthentication(PersonAuthenticationType): def __init__(self, currentTimeMillis): self.currentTimeMillis = currentTimeMillis def init(self, customScript, configurationAttributes): print \"Backchannel Authentication. Initialization\" print \"Backchannel Authentication. Initialized successfully\" return True def destroy(self, configurationAttributes): print \"Backchannel Authentication. Destroy\" print \"Backchannel Authentication. Destroyed successfully\" return True def getAuthenticationMethodClaims(self, requestParameters): return None def getApiVersion(self): return 11 def isValidAuthenticationMethod(self, usageType, configurationAttributes): return True def getAlternativeAuthenticationMethod(self, usageType, configurationAttributes): return None def authenticate(self, configurationAttributes, requestParameters, step): print \"Backchannel Authentication. Authenticate\" # Get bcAuthnToken from params bcAuthnToken = ServerUtil.getFirstValue(requestParameters, \"bcAuthnToken\") print \"Backchannel Authentication. Get bcAuthnToken from params: '%s'\" % (bcAuthnToken) if (bcAuthnToken == None): return False # Get sessionDn from cacheProvider cacheProvider = CdiUtil.bean(CacheProvider) sessionCacheDn = cacheProvider.get(bcAuthnToken) print \"Backchannel Authentication. Get sessionCacheDn from cacheProvider: '%s'\" % (sessionCacheDn) if (sessionCacheDn == None): return False # Get sessionId by sessionDn sessionId = CdiUtil.bean(SessionIdService).getSessionByDn(sessionCacheDn) print \"Backchannel Authentication. Get sessionId from sessionIdService: '%s'\" % ('None' if sessionId == None else sessionId.getId()) if (sessionId == None): return False # Write sessionId in cookies CdiUtil.bean(CookieService).createSessionIdCookie(sessionId, False) print \"Backchannel Authentication. Set session in Cookie\" # Set sessionId in Identity identity = CdiUtil.bean(Identity) identity.setSessionId(sessionId) print \"Backchannel Authentication. Set session in Identity\" # Remove bcAuthnToken from cacheProvider cacheProvider.remove(bcAuthnToken) print \"Backchannel Authentication. Removed cacheProvider bcAuthnToken: '%s'\" % bcAuthnToken return True def prepareForStep(self, configurationAttributes, requestParameters, step): if (step == 1): return True else: return False def getExtraParametersForStep(self, configurationAttributes, step): return None def getCountAuthenticationSteps(self, configurationAttributes): return 1 def getPageForStep(self, configurationAttributes, step): return \"postlogin.xhtml\" def getNextStep(self, configurationAttributes, requestParameters, step): return -1 def getLogoutExternalUrl(self, configurationAttributes, requestParameters): return None def logout(self, configurationAttributes, requestParameters): return True ROPC backchannel script # from io.jans.model.custom.script.type.owner import ResourceOwnerPasswordCredentialsType from io.jans.as.server.service import AuthenticationService, SessionIdService from io.jans.as.server.security import Identity from io.jans.service.cdi.util import CdiUtil from io.jans.as.model.authorize import AuthorizeRequestParam from io.jans.as.server.model.config import Constants from io.jans.util import StringHelper from java.lang import String from java.util import Date, HashMap from io.jans.service.cache import CacheProvider import uuid class ResourceOwnerPasswordCredentials(ResourceOwnerPasswordCredentialsType): def __init__(self, currentTimeMillis): self.currentTimeMillis = currentTimeMillis def init(self, customScript, configurationAttributes): print \"ROPC Backchannel. Initializing ...\" print \"ROPC Backchannel. Initialized successfully\" return True def destroy(self, configurationAttributes): print \"ROPC Backchannel. Destroying ...\" print \"ROPC Backchannel. Destroyed successfully\" return True def getApiVersion(self): return 11 def authenticate(self, context): print \"ROPC Backchannel. Authenticate\" # Do generic authentication authenticationService = CdiUtil.bean(AuthenticationService) username = context.getHttpRequest().getParameter(\"username\") password = context.getHttpRequest().getParameter(\"password\") # Add credential validation result = authenticationService.authenticate(username, password) if not result: print \"ROPC Backchannel. Authenticate. Could not authenticate user '%s' \" % username return False context.setUser(authenticationService.getAuthenticatedUser()) print \"ROPC Backchannel. Authenticate. User '%s' authenticated successfully\" % username # Get custom parameters from request customParam1Value = context.getHttpRequest().getParameter(\"custom1\") customParam2Value = context.getHttpRequest().getParameter(\"custom2\") customParameters = {} customParameters[\"custom1\"] = customParam1Value customParameters[\"custom2\"] = customParam2Value print \"ROPC Backchannel. Authenticate. User '%s'. Creating authenticated session with custom attributes: '%s'\" % (username, customParameters) session = self.createNewAuthenticatedSession(context, customParameters) # This is needed to allow store in token entry sessionId authenticationService.configureEventUser(session) print \"ROPC Backchannel. Authenticate. User '%s'. Created authenticated session: '%s'\" % (username, customParameters) return True def createNewAuthenticatedSession(self, context, customParameters={}): sessionIdService = CdiUtil.bean(SessionIdService) user = context.getUser() client = CdiUtil.bean(Identity).getSessionClient().getClient() # Add mandatory session parameters sessionAttributes = HashMap() sessionAttributes.put(Constants.AUTHENTICATED_USER, user.getUserId()) sessionAttributes.put(AuthorizeRequestParam.CLIENT_ID, client.getClientId()) # Add custom session parameters for key, value in customParameters.iteritems(): if StringHelper.isNotEmpty(value): sessionAttributes.put(key, value) # Generate authenticated session sessionId = sessionIdService.generateAuthenticatedSessionId(context.getHttpRequest(), user.getDn(), sessionAttributes) print \"ROPC Backchannel. Generated session id. DN: '%s'\" % sessionId.getDn() # Add state uuid in cache manager and response header bcAuthnToken = str(uuid.uuid4()) cacheProvider = CdiUtil.bean(CacheProvider) cacheProvider.put(300, bcAuthnToken, sessionId.getDn()) print \"ROPC Backchannel. Added cacheProvider id: '%s'\" % bcAuthnToken # Add response header Bc-Authn-Token context.getHttpResponse().setHeader(\"Bc-Authn-Token\", bcAuthnToken) print \"ROPC Backchannel. Added header Bc-Authn-Token\" return sessionId","title":"Backchannel Authentication"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#backchannel-authentication-scripts","text":"Janssen server enables domains to render the username/pw login form, avoiding the redirect to the IDP-hosted login page. Many SSO solutions offer a proprietary endpoint to accomplish this. However, in Janssen server, this is accomplished with the OAuth/OpenID framework by using a combination of calling the /token endpoint using the OAuth password flow, and then redirecting to browser to the /authorization endpoint, but auto-submitting the form. This article describes how to process login via backchannel and when browser is processing authorization, AS will recognize automatically the authenticated user, write cookies and then establish the session.","title":"Backchannel authentication scripts"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#design","text":"Source-code for sequence diagram Title password Grant with State Person->Browser: Navigate to website Browser->Website: Website->Browser:Display login page Person->Browser: Enter Username / PW Browser->Website: (creds) Website->IDP: /token?uid=_&pw=&browser_ip=_ IDP->Website: {\"redirect\": \"/authz/state=1F2D41A\", ...} Website->Browser: Browser->IDP: /authz?state=1F2D41A IDP->IDP: check IP address is\\n same as state IDP->Browser: write cookie / send redirect_uri Browser->Website: redirect_uri","title":"Design"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#solution","text":"In order to process the whole authorization, idea is to use resource owner password credentials grant type in the first stage, over there process the authentication as we do today, but also write in cache a short-lived token to recognize such authenticated user, then return to the client such short-lived token. During authorization, browser should send that token as part of the custom params and in the AS we should verify if that user is already authenticated using the short-lived param in the cache, then AS will write cookies, create the session and return to the client information required for this.","title":"Solution"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#jans-app-configurations","text":"Above the jans-auth record of the jansAppConf table, enable a new attribute on the jansConfDyn field Example: \"authorizationRequestCustomAllowedParameters\": [ { \"paramName\": \"bcAuthnToken\", \"returnInResponse\": true } ] Sample CURL 1. Obtain access token curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/jans-auth-server/config/properties.write\" 2. Apply patch curl -X PATCH -k -H 'Content-Type: application/json-patch+json' \\ -i 'jans-config-api/api/v1/jans-auth-server/config' \\ -H \"Authorization: Bearer put_access_token_here\" --data '[ { \"op\": \"add\", \"path\": \"authorizationRequestCustomAllowedParameters\", \"value\": [ { \"paramName\": \"bcAuthnToken\", \"returnInResponse\": true } ] } ]'","title":"Jans App Configurations"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#custom-script-registration","text":"In the table jansCustomScr enable 2 new scripts: 1. Script type resource_owner_password_credentials displayName ropc-backchannel [ropc-backchannel-script.py] See script below. 2. Script type person_autentication displayName backchannel-authentication [backchannel-authentication-script.py] See script below.","title":"Custom Script Registration"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#client-configuration","text":"Associate script person_authentication on table jansClnt . Modify the jansAttrs field which contains a json and the ropcScripts field and add the dn from the ropc script record in the previous step Example: \"ropcScripts\": [ \"inum={SCRIPT_ID},ou=scripts,o=jans\", ],","title":"Client Configuration"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#flow","text":"","title":"Flow"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#bcauthtoken-request","text":"Firstly, the /token service is called to generate the bcAuthnToken (get it from the response header with the key Bc-Authn-Token ) In this request example, the client's basic credential is being used in order to authenticate the client, however you could use your preferred authn mode. Request curl --location --request POST 'https://jans.localhost/jans-auth/restv1/token' \\ --header 'Authorization: Basic MzE3MGNiYzUtMDAxOC00OWVmLThiYTYtMjY4MGI2NjhiZjBjOmFmNzk1ZjI1LWQ1MjktNDVlYi1iMTJlLWNjM2ExNTY5OTU1Ng==' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'grant_type=password' \\ --data-urlencode 'username=test_user' \\ --data-urlencode 'password=test_user_password' \\ --data-urlencode 'custom1=your custom param 1' \\ --data-urlencode 'custom2=your custom param 2' \\ --data-urlencode 'scope=openid' Response HTTP/1.1 200 OK Date: Wed, 29 Jun 2022 14:03:25 GMT Server: Apache/2.4.52 (Ubuntu) X-Xss-Protection: 1; mode=block X-Content-Type-Options: nosniff Strict-Transport-Security: max-age=31536000; includeSubDomains Bc-Authn-Token: dacfe4fc-d0ce-4673-9370-e66f652c4b7f Cache-Control: no-store Content-Type: application/json Pragma: no-cache Content-Length: 1109 Keep-Alive: timeout=5, max=100 Connection: Keep-Alive {\"access_token\":\"7a024a59-e132-4c05-9126-f4f36b3d3677\",\"refresh_token\":\"184c2b60-b5c7-4250-9850-97b0f531743c\",\"scope\":\"openid\",\"id_token\":\"eyJraWQiOiJmZGJhY2Q2Yi05YTY0LTQ2MWQtOWJlYy1jOTAyMjc5ZGI2ODZfc2lnX3JzMjU2IiwidHlwIjoiand0IiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiIzMTcwY2JjNS0wMDE4LTQ5ZWYtOGJhNi0yNjgwYjY2OGJmMGMiLCJhY3IiOiJzaW1wbGVfcGFzc3dvcmRfYXV0aCIsInN1YiI6Il9Fa3p5aXlRdVBzUm1mYjh3WHlmTTB4U0xDckxwTDJGNnA3RWhEeWRBUHciLCJjb2RlIjoiNDY4MzQ2NjktOGQ1Yy00NmQxLTkwNWEtNmMzNDg3YzZlMDg3IiwiYW1yIjpbXSwiaXNzIjoiaHR0cHM6Ly9qYW5zLmxvY2FsaG9zdCIsImV4cCI6MTY1NjUxNTAwNiwiZ3JhbnQiOiJwYXNzd29yZCIsImlhdCI6MTY1NjUxMTQwNiwic2lkIjoiMTg0ZTllOTktNjFmNi00ZWNhLWE0ZmUtMTMwZmFmZDk1MjE1Iiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.hW0vReGYLzC2RyBHztSFbDYoaYHcCYxatX1lpzWqyW5U2S9eNp58mKKmvdZmMc229Sz5VxqfYflpWuI_6aXsLFR_KT9FY3exSRIRtPiD_fUETdhsVuKWavumVnjvwdAM6ytu5ORJx06DCxEgaG1uXmRiE9GoT8F1uqeo4NxURhVNXmMd2fiiUmgm1lt3-kNhlSg6vMDJS1Aq1idm-XhiSVy895BY-JdpLEGJEycPKr1lpsBTcmasbFNBJv6_orKWlvvgFCVxo7XmbH7Xnmqi6UUo30L6sULqmCsTLa6DaWYfGokHz_0xRflw_Ihv9wlVq8gSdOZGoMaVGzDdKlddZw\",\"token_type\":\"Bearer\",\"expires_in\":299}","title":"BcAuthToken request:"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#authorize-request","text":"Once you have gotten the bcAuthnToken from the previous /token call, you must call authorize attaching the bcAuthnToken as a parameter and in the acr_values param send the name of the backchannel-authentication registered in previous steps. This script will generate cookies and session associated with the browser if the BcAuthToken is valid. Example: https://jans.localhost/jans-auth/restv1/authorize?response_type=code&client_id=3170cbc5-0018-49ef-8ba6-2680b668bf0c&scope=openid+profile+address+email&redirect_uri=https://jans.localhost/jans-auth-rp/home.htm&state=2f78eaf1-d73e-49f2-8f50-e5faef80808a&nonce=92c3a631-db54-4ae9-bd53-caf92a4adbcf&prompt=&ui_locales=&claims_locales=&acr_values=backchannel-authentication&request_session_id=false&bcAuthnToken={your bcAuthnToken} This call will redirect to the redirect_uri that you sent as a parameter in the call and will receive a code as well, after that the process is more or less the same than the regular flow.","title":"Authorize request:"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#request-token","text":"With the code obtained previously, you must call /token again, adding the parameter code Request: curl --location --request POST 'https://jans.localhost/jans-auth/restv1/token' \\ --header 'Authorization: Basic MzlhNjlmYzAtNzNmYy00MWJhLWFiMGYtNDJhNWFmYWI2MjllOmJmMDRlZTM4LTM0MTktNGEzNS05YTI5LTcyODlmY2JkNzc2Zg==' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'grant_type=authorization_code' \\ --data-urlencode 'code=d449a7b9-10f6-4320-b257-05fee91d3c16' \\ --data-urlencode 'redirect_uri=https://jans.localhost/jans-auth-rp/home.htm' Response: HTTP/1.1 200 OK Date: Wed, 29 Jun 2022 15:20:50 GMT Server: Apache/2.4.52 (Ubuntu) X-Xss-Protection: 1; mode=block X-Content-Type-Options: nosniff Strict-Transport-Security: max-age=31536000; includeSubDomains Cache-Control: no-store Content-Type: application/json Pragma: no-cache Content-Length: 1291 Keep-Alive: timeout=5, max=100 Connection: Keep-Alive {\"access_token\":\"896b04a2-fcbe-4466-89b9-184930b8675b\",\"refresh_token\":\"843995ef-cd0e-4b2c-9b91-7c68081325ab\",\"id_token\":\"eyJraWQiOiJmZGJhY2Q2Yi05YTY0LTQ2MWQtOWJlYy1jOTAyMjc5ZGI2ODZfc2lnX3JzMjU2IiwidHlwIjoiand0IiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjoiMmx5OXh5emthMmc2T09HcVRPTmhqdyIsInN1YiI6Il9Fa3p5aXlRdVBzUm1mYjh3WHlmTTB4U0xDckxwTDJGNnA3RWhEeWRBUHciLCJjb2RlIjoiMjdiNjM0NTItMTE1My00ZDk5LTlkYzQtYzMyNGRmNjIwYWE0IiwiYW1yIjpbIjEwIl0sImlzcyI6Imh0dHBzOi8vamFucy5sb2NhbGhvc3QiLCJub25jZSI6IjkyYzNhNjMxLWRiNTQtNGFlOS1iZDUzLWNhZjkyYTRhZGJjZiIsInNpZCI6ImQzZDFlOWY2LWE1NTMtNDI2ZC04MWQ1LTE0YTFiZjg0MDJhNCIsIm94T3BlbklEQ29ubmVjdFZlcnNpb24iOiJvcGVuaWRjb25uZWN0LTEuMCIsImF1ZCI6IjMxNzBjYmM1LTAwMTgtNDllZi04YmE2LTI2ODBiNjY4YmYwYyIsImFjciI6InJvcGMtYmFja2NoYW5uZWwiLCJjX2hhc2giOiJzZVkxTldwNmN6ZGppUEdTWktqQlZRIiwiYXV0aF90aW1lIjoxNjU2NTE2MDM4LCJleHAiOjE2NTY1MTk2NTAsImdyYW50IjoiYXV0aG9yaXphdGlvbl9jb2RlIiwiaWF0IjoxNjU2NTE2MDUwfQ.giFYGuN-VUNSVMMT4bBkoGsZ-rKlByqe6qv24jzp7pk2eCY4FawiaLHJqH9MzBN7uEauRXYNR2pa_0oGoYnNNg4zbFiSARSKVsajcrPeDUgNs71MjMOYCH5dukXB7X5SEP3Drz5njxuXswI_EjM2Cd0OtJMoHQ0_IP_C3rzwmaQQsgWk81yAXl-eM4zABYV1e9OObGFqPtVjoHmpbFbg-teoRTr_LxYgKPwB1XnRqD4G9No7oV-9q1Bv1ED9AU6zxLWf9aGE2gQIC-jgkr7LZ5pB4zYgU_DwgmpaAuW_AT8ApfnQPqgNy7YouIPWZ8pyoncLjF0SdStVPEoreRx7GA\",\"token_type\":\"Bearer\",\"expires_in\":299} With info, you could do whatever you want using browser session. NOTE: I added some custom params in case you need to validate something else, for instance browser IP.","title":"Request /token:"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#script-templates","text":"These scripts are examples of how it worked, but you could customize them based on your needs, for instance browser validations.","title":"Script templates"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#backchannel-authentication-script","text":"from io.jans.service.cdi.util import CdiUtil from io.jans.as.server.security import Identity from io.jans.model.custom.script.type.auth import PersonAuthenticationType from io.jans.as.server.service import AuthenticationService from io.jans.util import StringHelper from io.jans.as.server.util import ServerUtil from io.jans.service.cache import CacheProvider from io.jans.as.server.service import SessionIdService from io.jans.as.server.service import CookieService from io.jans.as.server.security import Identity from io.jans.service.cache import CacheProvider import java class PersonAuthentication(PersonAuthenticationType): def __init__(self, currentTimeMillis): self.currentTimeMillis = currentTimeMillis def init(self, customScript, configurationAttributes): print \"Backchannel Authentication. Initialization\" print \"Backchannel Authentication. Initialized successfully\" return True def destroy(self, configurationAttributes): print \"Backchannel Authentication. Destroy\" print \"Backchannel Authentication. Destroyed successfully\" return True def getAuthenticationMethodClaims(self, requestParameters): return None def getApiVersion(self): return 11 def isValidAuthenticationMethod(self, usageType, configurationAttributes): return True def getAlternativeAuthenticationMethod(self, usageType, configurationAttributes): return None def authenticate(self, configurationAttributes, requestParameters, step): print \"Backchannel Authentication. Authenticate\" # Get bcAuthnToken from params bcAuthnToken = ServerUtil.getFirstValue(requestParameters, \"bcAuthnToken\") print \"Backchannel Authentication. Get bcAuthnToken from params: '%s'\" % (bcAuthnToken) if (bcAuthnToken == None): return False # Get sessionDn from cacheProvider cacheProvider = CdiUtil.bean(CacheProvider) sessionCacheDn = cacheProvider.get(bcAuthnToken) print \"Backchannel Authentication. Get sessionCacheDn from cacheProvider: '%s'\" % (sessionCacheDn) if (sessionCacheDn == None): return False # Get sessionId by sessionDn sessionId = CdiUtil.bean(SessionIdService).getSessionByDn(sessionCacheDn) print \"Backchannel Authentication. Get sessionId from sessionIdService: '%s'\" % ('None' if sessionId == None else sessionId.getId()) if (sessionId == None): return False # Write sessionId in cookies CdiUtil.bean(CookieService).createSessionIdCookie(sessionId, False) print \"Backchannel Authentication. Set session in Cookie\" # Set sessionId in Identity identity = CdiUtil.bean(Identity) identity.setSessionId(sessionId) print \"Backchannel Authentication. Set session in Identity\" # Remove bcAuthnToken from cacheProvider cacheProvider.remove(bcAuthnToken) print \"Backchannel Authentication. Removed cacheProvider bcAuthnToken: '%s'\" % bcAuthnToken return True def prepareForStep(self, configurationAttributes, requestParameters, step): if (step == 1): return True else: return False def getExtraParametersForStep(self, configurationAttributes, step): return None def getCountAuthenticationSteps(self, configurationAttributes): return 1 def getPageForStep(self, configurationAttributes, step): return \"postlogin.xhtml\" def getNextStep(self, configurationAttributes, requestParameters, step): return -1 def getLogoutExternalUrl(self, configurationAttributes, requestParameters): return None def logout(self, configurationAttributes, requestParameters): return True","title":"Backchannel authentication script"},{"location":"admin/auth-server/endpoints/backchannel-authentication/#ropc-backchannel-script","text":"from io.jans.model.custom.script.type.owner import ResourceOwnerPasswordCredentialsType from io.jans.as.server.service import AuthenticationService, SessionIdService from io.jans.as.server.security import Identity from io.jans.service.cdi.util import CdiUtil from io.jans.as.model.authorize import AuthorizeRequestParam from io.jans.as.server.model.config import Constants from io.jans.util import StringHelper from java.lang import String from java.util import Date, HashMap from io.jans.service.cache import CacheProvider import uuid class ResourceOwnerPasswordCredentials(ResourceOwnerPasswordCredentialsType): def __init__(self, currentTimeMillis): self.currentTimeMillis = currentTimeMillis def init(self, customScript, configurationAttributes): print \"ROPC Backchannel. Initializing ...\" print \"ROPC Backchannel. Initialized successfully\" return True def destroy(self, configurationAttributes): print \"ROPC Backchannel. Destroying ...\" print \"ROPC Backchannel. Destroyed successfully\" return True def getApiVersion(self): return 11 def authenticate(self, context): print \"ROPC Backchannel. Authenticate\" # Do generic authentication authenticationService = CdiUtil.bean(AuthenticationService) username = context.getHttpRequest().getParameter(\"username\") password = context.getHttpRequest().getParameter(\"password\") # Add credential validation result = authenticationService.authenticate(username, password) if not result: print \"ROPC Backchannel. Authenticate. Could not authenticate user '%s' \" % username return False context.setUser(authenticationService.getAuthenticatedUser()) print \"ROPC Backchannel. Authenticate. User '%s' authenticated successfully\" % username # Get custom parameters from request customParam1Value = context.getHttpRequest().getParameter(\"custom1\") customParam2Value = context.getHttpRequest().getParameter(\"custom2\") customParameters = {} customParameters[\"custom1\"] = customParam1Value customParameters[\"custom2\"] = customParam2Value print \"ROPC Backchannel. Authenticate. User '%s'. Creating authenticated session with custom attributes: '%s'\" % (username, customParameters) session = self.createNewAuthenticatedSession(context, customParameters) # This is needed to allow store in token entry sessionId authenticationService.configureEventUser(session) print \"ROPC Backchannel. Authenticate. User '%s'. Created authenticated session: '%s'\" % (username, customParameters) return True def createNewAuthenticatedSession(self, context, customParameters={}): sessionIdService = CdiUtil.bean(SessionIdService) user = context.getUser() client = CdiUtil.bean(Identity).getSessionClient().getClient() # Add mandatory session parameters sessionAttributes = HashMap() sessionAttributes.put(Constants.AUTHENTICATED_USER, user.getUserId()) sessionAttributes.put(AuthorizeRequestParam.CLIENT_ID, client.getClientId()) # Add custom session parameters for key, value in customParameters.iteritems(): if StringHelper.isNotEmpty(value): sessionAttributes.put(key, value) # Generate authenticated session sessionId = sessionIdService.generateAuthenticatedSessionId(context.getHttpRequest(), user.getDn(), sessionAttributes) print \"ROPC Backchannel. Generated session id. DN: '%s'\" % sessionId.getDn() # Add state uuid in cache manager and response header bcAuthnToken = str(uuid.uuid4()) cacheProvider = CdiUtil.bean(CacheProvider) cacheProvider.put(300, bcAuthnToken, sessionId.getDn()) print \"ROPC Backchannel. Added cacheProvider id: '%s'\" % bcAuthnToken # Add response header Bc-Authn-Token context.getHttpResponse().setHeader(\"Bc-Authn-Token\", bcAuthnToken) print \"ROPC Backchannel. Added header Bc-Authn-Token\" return sessionId","title":"ROPC backchannel script"},{"location":"admin/auth-server/endpoints/client-registration/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Client Registration"},{"location":"admin/auth-server/endpoints/clientinfo/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Clientinfo"},{"location":"admin/auth-server/endpoints/configuration/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Configuration"},{"location":"admin/auth-server/endpoints/device-authorization/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Device Authorization"},{"location":"admin/auth-server/endpoints/end-session/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"End Session"},{"location":"admin/auth-server/endpoints/introspection/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Introspection"},{"location":"admin/auth-server/endpoints/session-revocation/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Session Revocation"},{"location":"admin/auth-server/endpoints/token-revocation/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Token Revocation"},{"location":"admin/auth-server/endpoints/token/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Token"},{"location":"admin/auth-server/endpoints/userinfo/","tags":["administration","auth-server","endpoint"],"text":"This is a placeholder","title":"Userinfo"},{"location":"admin/auth-server/international/","tags":["administration","auth-server","i18n"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/international/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/international/client-config/","tags":["administration","auth-server","i18n"],"text":"This is a placeholder","title":"Client Configuration"},{"location":"admin/auth-server/international/scope-descriptions/","tags":["administration","auth-server","i18n"],"text":"This is a placeholder","title":"Scope Descriptions"},{"location":"admin/auth-server/international/web-pages/","tags":["administration","auth-server","i18n"],"text":"This is a placeholder","title":"Web Pages"},{"location":"admin/auth-server/logging/","tags":["administration","auth-server","logging"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/logging/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/logging/audit-logs/","tags":["administration","auth-server","logging"],"text":"This is a placeholder","title":"Audit Logs"},{"location":"admin/auth-server/logging/custom-logs/","tags":["administration","auth-server","logging"],"text":"This is a placeholder","title":"Custom Logs"},{"location":"admin/auth-server/logging/log-levels/","tags":["administration","auth-server","logging"],"text":"This is a placeholder","title":"Log Levels"},{"location":"admin/auth-server/logging/log4j2/","tags":["administration","auth-server","logging"],"text":"This is a placeholder","title":"log4j2 Configuration"},{"location":"admin/auth-server/logging/standard-logs/","tags":["administration","auth-server","logging"],"text":"This is a placeholder","title":"Standard Logs"},{"location":"admin/auth-server/oauth-features/","tags":["administration","auth-server","oauth","feature"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/oauth-features/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/oauth-features/client-credential-grant/","tags":["administration","auth-server","oauth","feature"],"text":"This is a placeholder","title":"Client Credential Grant"},{"location":"admin/auth-server/oauth-features/device-grant/","tags":["administration","auth-server","oauth","feature"],"text":"OAuth 2.0 Device Authorization Grant # This OAuth 2.0 protocol extension enables OAuth clients to request user authorization from applications on devices (e.g. smart TVs, media consoles, printers) that are input-constrained or browser-less . The authorization flow defined by this RFC 8628 , sometimes referred to as the \"device flow\", instructs the user to review the authorization request on a secondary device, such as a smartphone or a personal computer, which has the requisite input and browser capabilities to complete the user interaction. Sequence Diagram # Paste the following source text of the sequence diagram on sequencediagram.org title Oauth2.0 Device Authorization flow participant User participant Browser on Computer / Smartphone participant Device App participant Jans AS participant Third Party App User->Device App:Opens an app on device Device App->Jans AS:Sends authorization request \\n\"jans-server.com/jans-auth/restv1/device_authorization\" Jans AS->Device App:Response - \\nuser_code, device_code, verification_url, interval, expiration Device App ->User: Instructs the user to access Verification URL \\nand enter user_code note over Device App:Device App will keep polling AS for Access Token \\nuntil device authorization is completed loop till Device App recieves Access Token: Device App->Jans AS:request Access Token Jans AS->Device App:Response - \\naccess_denied \\nOR expired_token \\nOR authorization_pending \\nOR Access token end User->Browser on Computer / Smartphone:Opens a browser \\nand access verification URL Browser on Computer / Smartphone->Jans AS:send user_code to verification URL Browser on Computer / Smartphone <-Jans AS:Login and authorization prompt Browser on Computer / Smartphone->Jans AS:Authentication and consent Jans AS->Jans AS: Mark device as Authorized note over Jans AS:Subsequent polling by the Device App \\nwill return an Access Token as indicated \\nby the loop above Device App->Third Party App:Invoke API with Access Token Third Party App->Device App: return Response User Experience # First, the user requests authorization from the device: At the URL displayed on the screen, the user can input the displayed code in the device. After that, user could need to authenticate, then decide whether permissions will be granted. Finally, the confirmation screen will be shown. Request user and device codes # This first step, device sends an HTTP POST request to Jans authorization server, at /jans-auth/restv1/device_authorization which is also presented in the Discovery url published by Jans Server, this endpoint could process a common authentication method or it could also not do any authentication, depending on the configuration for the client in Jans Server. Parameters # Parameter Description client_id Required The client ID for your application. scope Required A space separated list of scopes that identify the resources that the device could access on the user's behalf. These values inform the consent screen that Jans server displays to the user. Example # POST /restv1/device_authorization HTTP/1.1 Content-Type: application/x-www-form-urlencoded Host: test.jans.org Authorization: Basic MTIzLTEyMy0xMjM6WkE1aWxpTFFDYUR4 client_id=123-123-123&scope=openid+profile+address+email+phone Device Request response # In response, the Jans authorization server generates a unique device verification code and an end-user code that are valid for a limited time and includes them in the HTTP response body using the \"application/json\" format with a 200 (OK) status code. The response contains the following parameters: Parameter Description user_code Required The end-user verification code device_code Required The device verification code verification_uri Required The end-user verification URI on the authorization server. This should be shown to the end-user because he should open this url in the rich user-agent. verification_uri_complete Optional This is similar than verification_uri , however it also includes user_code as a query param in the url. It's issued if the device wants to use QR mode for example. expires_in Required The lifetime in seconds of the device_code and user_code . interval Required The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint. Example: # HTTP/1.1 200 Content-Length: 307 Content-Type: application/json Server: Jetty(9.4.19.v20190610) { \"user_code\": \"SJFP-DTPL\", \"device_code\": \"aeb28bdc90d806ac58d4b0f832f06c3ac9c4bd03292f0c09\", \"interval\": 5, \"verification_uri_complete\": \"https://test.jans.io:8443/device-code?user_code=SJFP-DTPL\", \"verification_uri\": \"https://test.jans.io:8443/device-code\", \"expires_in\": 1800 } Device Display # Common flow, the device should display verification_url and user_code received from Jans server. The content that the device displays to the user should instruct the user to navigate to the verification_url on a separate device and enter the user_code . Design device interface following these rules: user_code has the following format: XXXX-XXXX where Xs represent to any ASCII character, for example: RTXD-HTLK . The length of the user_code will be always the same, therefore it's highly recommended to show it as clear and big that the user can read it easly. verification_url should be displayed also in a way that the user can read it easily. The normal length should be around 40 characters, however it could depends also on the domain used for the server. Remember that the user will need to write the whole URL manually in the web browser, therefore it's recommended to use a short URL. verification_url_complete will be used for those cases where device can show QR (Quick Response) codes or NFC (Near Field Communication) to save the user from typing the whole URI. Interaction between device and Jans server will be the same, however user can process the authorization faster. For example: User Login & Authorization # The user will need to put user_code value in the browser and after that, he will be redirected to the common authorization flow, it requires login whether there is no session between the user-agent and the Jans server and grant the permissions based on the device request. Poll Token # Since the user will be using a separate device to navigate to the verification_url and grant or deny access, the requesting device is not automatically notified when the user responds to the access request. For that reason, the requesting device needs to poll the Jans Server to determine when the user has responded to the request. The requesting device should continue sending polling requests until it receives a response indicating that the user has responded to the access request or until the device_code expires. The parameter interval returned in step 2 specifies the amount of time, in seconds, to wait between requests. The URL of the endpoint to poll is /jans-auth/restv1/token . The polling request contains the following parameters: Parameters # Parameter Description client_id Required The client ID for your application. grant_type Required Must be urn:ietf:params:oauth:grant-type:device_code . device_code Required The device verification code which is returned by Jans server in Step 2. Authentication can be done using any of those authentication methods for this token endpoint. Example: # POST /restv1/token HTTP/1.1 Content-Type: application/x-www-form-urlencoded Host: test.jans.io Authorization: Basic MTIzLTEyMy0xMjM6WkE1aWxpTFFDYUR4 grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code&device_code=0bd7068e7fdab4bb91b313296a96462256a7370d12f073f0 Token Response # The Jans authorization server responds to each polling request with one of the following responses: Access granted If the user granted access to the device (by clicking Allow on the consent screen), then the response contains an access token and a refresh token. The tokens enable the device to access to the resource server on the user's behalf. In this case, the server responds with all tokens required and allowed to be issued depending on the configuration in the server. Example: HTTP/1.1 200 Content-Length: 858 Content-Type: application/json Server: Jetty(9.4.19.v20190610) <<<<<<< Updated upstream {\"access_token\":\"c31fc092-453b-4275-a36f-b2740c3eb1a6\",\"id_token\":\"eyJraWQiOiJlY4.2Tc4NDgxYy05OTJkLTRmN2UtYTkzMS03NjM2NTYyMzgwZjVfc2lnX3JzMjU2IiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjoidWdMSnAzMkxXdnI4QUdlbmdNTlF3QSIsImF1ZCI6IjEyMy0xMjMtMTIzIiwic3ViIjoiM2M2M25HdWZnWFNkMWFwNU81NFZkVjlUUDdmdjJHc0YtLWl0eVBHeFJBTSIsImlzcyI6Imh0dHBzOi8vdGVzdC5nbHV1Lm9yZzo4NDQzIiwiZXhwIjoxNTk1NjQzOTg0LCJpYXQiOjE1OTU2NDAzODQsIm94T3BlbklEQ29ubmVjdFZlcnNpb24iOiJvcGVuaWRjb25uZWN0LTEuMCJ9.fElZtuUslhSSuqTOuvGeafG4QuQoHKLpya25RHWkC5V9Xf9ODYa6tD_Tdav2D9Gff2Zz7pt8WKso-WYOqmJ3NrgMoVU7d1SMj6pYGilTL1JokjB18Yw1TI6oR6Z4wegy8_ajftLLhqosI5-ZE36TzPwoAKzjPl-iZEpV2U1OPHWZrdwc9N3YOyO0I_IJGQmFnXC_oacitMV2VZaTxfuCew5cPwNp5durooFNvv3DPzc9JYEctmaLsiRtfqN7pCaV30B3hnYTYZ4p2HNsUbOewBI8_Brm1v1CByitQPUFqETgmPGbf4HCTEoaH-7DfaXnAsePt73blNwJrlTlUBieew\",\"token_type\":\"bearer\",\"expires_in\":299} Access denied If the user refuses to grant access to the device, then the server response has a 400 HTTP response status code. The response contains the following error: HTTP/1.1 400 Cache-Control: no-store Content-Length: 74 Content-Type: application/json Pragma: no-cache Server: Jetty(9.4.19.v20190610) { \"error_description\": \"access_denied\", \"error\": \"access_denied\" } Authorization pending It means that the request hasn't been processed by the end-user yet, therefore the request is still in process. Example: HTTP/1.1 400 Cache-Control: no-store Content-Length: 90 Content-Type: application/json Pragma: no-cache Server: Jetty(9.4.19.v20190610) { \"error_description\": \"authorization_pending\", \"error\": \"authorization_pending\" } Polling too frequently If the device sends polling requests too frequently, then the server returns a 400 HTTP response status code. Then the device should increase the time interval between requests. Example: HTTP/1.1 400 Cache-Control: no-store Content-Length: 66 Content-Type: application/json Pragma: no-cache Server: Jetty(9.4.19.v20190610) { \"error_description\": \"slow_down\", \"error\": \"slow_down\" } Other errors This token endpoint can return any error code already defined, for example whether client can't be authenticated or the grant type sent is invalid. Some of them could be: invalid_client , invalid_grant , invalid_request and others. Customizing Device Grant page # More about customising this page to include your organization's stylesheets, images and content in this article","title":"Device Grant"},{"location":"admin/auth-server/oauth-features/device-grant/#oauth-20-device-authorization-grant","text":"This OAuth 2.0 protocol extension enables OAuth clients to request user authorization from applications on devices (e.g. smart TVs, media consoles, printers) that are input-constrained or browser-less . The authorization flow defined by this RFC 8628 , sometimes referred to as the \"device flow\", instructs the user to review the authorization request on a secondary device, such as a smartphone or a personal computer, which has the requisite input and browser capabilities to complete the user interaction.","title":"OAuth 2.0 Device Authorization Grant"},{"location":"admin/auth-server/oauth-features/device-grant/#sequence-diagram","text":"Paste the following source text of the sequence diagram on sequencediagram.org title Oauth2.0 Device Authorization flow participant User participant Browser on Computer / Smartphone participant Device App participant Jans AS participant Third Party App User->Device App:Opens an app on device Device App->Jans AS:Sends authorization request \\n\"jans-server.com/jans-auth/restv1/device_authorization\" Jans AS->Device App:Response - \\nuser_code, device_code, verification_url, interval, expiration Device App ->User: Instructs the user to access Verification URL \\nand enter user_code note over Device App:Device App will keep polling AS for Access Token \\nuntil device authorization is completed loop till Device App recieves Access Token: Device App->Jans AS:request Access Token Jans AS->Device App:Response - \\naccess_denied \\nOR expired_token \\nOR authorization_pending \\nOR Access token end User->Browser on Computer / Smartphone:Opens a browser \\nand access verification URL Browser on Computer / Smartphone->Jans AS:send user_code to verification URL Browser on Computer / Smartphone <-Jans AS:Login and authorization prompt Browser on Computer / Smartphone->Jans AS:Authentication and consent Jans AS->Jans AS: Mark device as Authorized note over Jans AS:Subsequent polling by the Device App \\nwill return an Access Token as indicated \\nby the loop above Device App->Third Party App:Invoke API with Access Token Third Party App->Device App: return Response","title":"Sequence Diagram"},{"location":"admin/auth-server/oauth-features/device-grant/#user-experience","text":"First, the user requests authorization from the device: At the URL displayed on the screen, the user can input the displayed code in the device. After that, user could need to authenticate, then decide whether permissions will be granted. Finally, the confirmation screen will be shown.","title":"User Experience"},{"location":"admin/auth-server/oauth-features/device-grant/#request-user-and-device-codes","text":"This first step, device sends an HTTP POST request to Jans authorization server, at /jans-auth/restv1/device_authorization which is also presented in the Discovery url published by Jans Server, this endpoint could process a common authentication method or it could also not do any authentication, depending on the configuration for the client in Jans Server.","title":"Request user and device codes"},{"location":"admin/auth-server/oauth-features/device-grant/#parameters","text":"Parameter Description client_id Required The client ID for your application. scope Required A space separated list of scopes that identify the resources that the device could access on the user's behalf. These values inform the consent screen that Jans server displays to the user.","title":"Parameters"},{"location":"admin/auth-server/oauth-features/device-grant/#example","text":"POST /restv1/device_authorization HTTP/1.1 Content-Type: application/x-www-form-urlencoded Host: test.jans.org Authorization: Basic MTIzLTEyMy0xMjM6WkE1aWxpTFFDYUR4 client_id=123-123-123&scope=openid+profile+address+email+phone","title":"Example"},{"location":"admin/auth-server/oauth-features/device-grant/#device-request-response","text":"In response, the Jans authorization server generates a unique device verification code and an end-user code that are valid for a limited time and includes them in the HTTP response body using the \"application/json\" format with a 200 (OK) status code. The response contains the following parameters: Parameter Description user_code Required The end-user verification code device_code Required The device verification code verification_uri Required The end-user verification URI on the authorization server. This should be shown to the end-user because he should open this url in the rich user-agent. verification_uri_complete Optional This is similar than verification_uri , however it also includes user_code as a query param in the url. It's issued if the device wants to use QR mode for example. expires_in Required The lifetime in seconds of the device_code and user_code . interval Required The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.","title":"Device Request response"},{"location":"admin/auth-server/oauth-features/device-grant/#example_1","text":"HTTP/1.1 200 Content-Length: 307 Content-Type: application/json Server: Jetty(9.4.19.v20190610) { \"user_code\": \"SJFP-DTPL\", \"device_code\": \"aeb28bdc90d806ac58d4b0f832f06c3ac9c4bd03292f0c09\", \"interval\": 5, \"verification_uri_complete\": \"https://test.jans.io:8443/device-code?user_code=SJFP-DTPL\", \"verification_uri\": \"https://test.jans.io:8443/device-code\", \"expires_in\": 1800 }","title":"Example:"},{"location":"admin/auth-server/oauth-features/device-grant/#device-display","text":"Common flow, the device should display verification_url and user_code received from Jans server. The content that the device displays to the user should instruct the user to navigate to the verification_url on a separate device and enter the user_code . Design device interface following these rules: user_code has the following format: XXXX-XXXX where Xs represent to any ASCII character, for example: RTXD-HTLK . The length of the user_code will be always the same, therefore it's highly recommended to show it as clear and big that the user can read it easly. verification_url should be displayed also in a way that the user can read it easily. The normal length should be around 40 characters, however it could depends also on the domain used for the server. Remember that the user will need to write the whole URL manually in the web browser, therefore it's recommended to use a short URL. verification_url_complete will be used for those cases where device can show QR (Quick Response) codes or NFC (Near Field Communication) to save the user from typing the whole URI. Interaction between device and Jans server will be the same, however user can process the authorization faster. For example:","title":"Device Display"},{"location":"admin/auth-server/oauth-features/device-grant/#user-login-authorization","text":"The user will need to put user_code value in the browser and after that, he will be redirected to the common authorization flow, it requires login whether there is no session between the user-agent and the Jans server and grant the permissions based on the device request.","title":"User Login &amp; Authorization"},{"location":"admin/auth-server/oauth-features/device-grant/#poll-token","text":"Since the user will be using a separate device to navigate to the verification_url and grant or deny access, the requesting device is not automatically notified when the user responds to the access request. For that reason, the requesting device needs to poll the Jans Server to determine when the user has responded to the request. The requesting device should continue sending polling requests until it receives a response indicating that the user has responded to the access request or until the device_code expires. The parameter interval returned in step 2 specifies the amount of time, in seconds, to wait between requests. The URL of the endpoint to poll is /jans-auth/restv1/token . The polling request contains the following parameters:","title":"Poll Token"},{"location":"admin/auth-server/oauth-features/device-grant/#parameters_1","text":"Parameter Description client_id Required The client ID for your application. grant_type Required Must be urn:ietf:params:oauth:grant-type:device_code . device_code Required The device verification code which is returned by Jans server in Step 2. Authentication can be done using any of those authentication methods for this token endpoint.","title":"Parameters"},{"location":"admin/auth-server/oauth-features/device-grant/#example_2","text":"POST /restv1/token HTTP/1.1 Content-Type: application/x-www-form-urlencoded Host: test.jans.io Authorization: Basic MTIzLTEyMy0xMjM6WkE1aWxpTFFDYUR4 grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code&device_code=0bd7068e7fdab4bb91b313296a96462256a7370d12f073f0","title":"Example:"},{"location":"admin/auth-server/oauth-features/device-grant/#token-response","text":"The Jans authorization server responds to each polling request with one of the following responses: Access granted If the user granted access to the device (by clicking Allow on the consent screen), then the response contains an access token and a refresh token. The tokens enable the device to access to the resource server on the user's behalf. In this case, the server responds with all tokens required and allowed to be issued depending on the configuration in the server. Example: HTTP/1.1 200 Content-Length: 858 Content-Type: application/json Server: Jetty(9.4.19.v20190610) <<<<<<< Updated upstream {\"access_token\":\"c31fc092-453b-4275-a36f-b2740c3eb1a6\",\"id_token\":\"eyJraWQiOiJlY4.2Tc4NDgxYy05OTJkLTRmN2UtYTkzMS03NjM2NTYyMzgwZjVfc2lnX3JzMjU2IiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJhdF9oYXNoIjoidWdMSnAzMkxXdnI4QUdlbmdNTlF3QSIsImF1ZCI6IjEyMy0xMjMtMTIzIiwic3ViIjoiM2M2M25HdWZnWFNkMWFwNU81NFZkVjlUUDdmdjJHc0YtLWl0eVBHeFJBTSIsImlzcyI6Imh0dHBzOi8vdGVzdC5nbHV1Lm9yZzo4NDQzIiwiZXhwIjoxNTk1NjQzOTg0LCJpYXQiOjE1OTU2NDAzODQsIm94T3BlbklEQ29ubmVjdFZlcnNpb24iOiJvcGVuaWRjb25uZWN0LTEuMCJ9.fElZtuUslhSSuqTOuvGeafG4QuQoHKLpya25RHWkC5V9Xf9ODYa6tD_Tdav2D9Gff2Zz7pt8WKso-WYOqmJ3NrgMoVU7d1SMj6pYGilTL1JokjB18Yw1TI6oR6Z4wegy8_ajftLLhqosI5-ZE36TzPwoAKzjPl-iZEpV2U1OPHWZrdwc9N3YOyO0I_IJGQmFnXC_oacitMV2VZaTxfuCew5cPwNp5durooFNvv3DPzc9JYEctmaLsiRtfqN7pCaV30B3hnYTYZ4p2HNsUbOewBI8_Brm1v1CByitQPUFqETgmPGbf4HCTEoaH-7DfaXnAsePt73blNwJrlTlUBieew\",\"token_type\":\"bearer\",\"expires_in\":299} Access denied If the user refuses to grant access to the device, then the server response has a 400 HTTP response status code. The response contains the following error: HTTP/1.1 400 Cache-Control: no-store Content-Length: 74 Content-Type: application/json Pragma: no-cache Server: Jetty(9.4.19.v20190610) { \"error_description\": \"access_denied\", \"error\": \"access_denied\" } Authorization pending It means that the request hasn't been processed by the end-user yet, therefore the request is still in process. Example: HTTP/1.1 400 Cache-Control: no-store Content-Length: 90 Content-Type: application/json Pragma: no-cache Server: Jetty(9.4.19.v20190610) { \"error_description\": \"authorization_pending\", \"error\": \"authorization_pending\" } Polling too frequently If the device sends polling requests too frequently, then the server returns a 400 HTTP response status code. Then the device should increase the time interval between requests. Example: HTTP/1.1 400 Cache-Control: no-store Content-Length: 66 Content-Type: application/json Pragma: no-cache Server: Jetty(9.4.19.v20190610) { \"error_description\": \"slow_down\", \"error\": \"slow_down\" } Other errors This token endpoint can return any error code already defined, for example whether client can't be authenticated or the grant type sent is invalid. Some of them could be: invalid_client , invalid_grant , invalid_request and others.","title":"Token Response"},{"location":"admin/auth-server/oauth-features/device-grant/#customizing-device-grant-page","text":"More about customising this page to include your organization's stylesheets, images and content in this article","title":"Customizing Device Grant page"},{"location":"admin/auth-server/oauth-features/dpop/","tags":["administration","auth-server","oauth","feature"],"text":"This is a placeholder","title":"DPoP"},{"location":"admin/auth-server/oauth-features/mtls/","tags":["administration","auth-server","oauth","feature"],"text":"This is a placeholder","title":"MTLS"},{"location":"admin/auth-server/oauth-features/par/","tags":["administration","auth-server","oauth","feature"],"text":"This is a placeholder","title":"PAR"},{"location":"admin/auth-server/oauth-features/password-grant/","tags":["administration","auth-server","oauth","feature"],"text":"This is a placeholder","title":"Password Grant"},{"location":"admin/auth-server/oauth-features/pkce/","tags":["administration","auth-server","oauth","feature"],"text":"This is a placeholder","title":"PKCE"},{"location":"admin/auth-server/openid-features/","tags":["administration","auth-server","openidc","feature"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/openid-features/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/openid-features/acrs/","tags":["administration","auth-server","openidc","feature"],"text":"This is a placeholder","title":"ACRs"},{"location":"admin/auth-server/openid-features/ciba/","tags":["administration","auth-server","openidc","feature"],"text":"This is a placeholder","title":"CIBA"},{"location":"admin/auth-server/openid-features/id-token/","tags":["administration","auth-server","openidc","feature"],"text":"This is a placeholder","title":"id_token"},{"location":"admin/auth-server/openid-features/jarm/","tags":["administration","auth-server","openidc","feature"],"text":"This is a placeholder","title":"JARM"},{"location":"admin/auth-server/openid-features/prompt-parameter/","tags":["administration","auth-server","openidc","feature"],"text":"Prompt NONE # The OpenID Connect protocol supports a prompt=none parameter on the authentication request that allows applications to indicate that the authorization server must not display any user interaction (such as authentication, consent, or MFA). Janssen will either return the requested response back to the application, or return an error if the user is not already authenticated or if some type of consent or prompt is required before proceeding. Initiate Silent Authentication requests To initiate a silent authentication request, add the prompt=none parameter when you redirect a user to the /authorize endpoint of Janssen authentication API. (The individual parameters on the authentication request will vary depending on the specific needs of your app.) For example: GET https://YOUR_DOMAIN//authorize? response_type={response_type}& client_id={client_id}& scope={scope}& state={state}& ui_locales=& claims_locales=& acr_values=& redirect_uri={redirect_uri}& prompt=none Basic credential user The prompt=none parameter causes Jannsen to immediately send a result to the specified redirect_uri (callback URL) using the specified response_mode with one of two possible responses: success or error. Note: Any applicable rules will be executed as part of the silent authentication process. Successful authentication responses If the user was already logged in to Janssen and no other interactive prompts are required, Janssen will respond exactly as if the user had authenticated manually through the login page. This response is indistinguishable from a login performed directly without the prompt=none parameter. Example 1: Prompt None (Without credentials in Header) title Prompt None (Without credentials in Header) participant Browser participant IDP participant Identity participant SessionIdService participant AuthorizeRestWebServiceValidator participant AuthenticationFilterService Browser->IDP: /authorize?\\nresponse_type=... &\\nclient_id=... &\\nscope=... &\\nstate=... &\\nui_locales=... &\\nclaims_locales=... &\\nacr_values=... &\\nredirect_uri=... &\\n**prompt=none** IDP->Identity: getSessionId() Identity->IDP: return: null IDP->SessionIdService: getUser(): from sessionId SessionIdService->IDP: return: null group Client validation IDP->AuthorizeRestWebServiceValidator: validateClient(): if it's par, disabled or not found? AuthorizeRestWebServiceValidator->Browser: throw WebApplicationException end group User is null IDP->IDP: ifUserIsNull() IDP->AuthenticationFilterService: processAuthenticationFilters() AuthenticationFilterService->Browser: WebApplicationException (LOGIN_REQUIRED) end Example 2: Prompt None (Without credentials in Header) title Prompt None (With credentials in Header) participant Browser participant Janssen participant Identity participant SessionIdService participant AuthorizeRestWebServiceValidator participant ScopeChecker participant ExternalPostAuthnService participant ResponseParameters participant ExternalUpdateTokenService participant ClientService Browser->Janssen: /authorize?\\nresponse_type=... &\\nclient_id=... &\\nscope=... &\\nstate=... &\\nui_locales=... &\\nclaims_locales=... &\\nacr_values=... &\\nredirect_uri=... &\\n**prompt=none**\\n\\n**Basic credentials (user)** in Headers Janssen->Identity: getSessionId() Identity->Janssen: return: sessionId Janssen->SessionIdService: getUser(): from sessionId SessionIdService->Janssen: return: User group Update Session For ROPC: If exists session attribute grant_type ROPC Janssen->Janssen: updateSessionForROPC() Janssen->SessionIdService: updateSessionId() SessionIdService->Janssen: session attributes updated end group Client validation Janssen->AuthorizeRestWebServiceValidator: validateClient(): if it's par, disabled or not found? AuthorizeRestWebServiceValidator->Browser: throw WebApplicationException (INVALID_REQUEST, UNAUTHORIZED_CLIENT, DISABLED_CLIENT) end group ACR validation Janssen->AuthorizeRestWebServiceValidator: validateAcrs(): If the request acr list does not exist in the session attribute? or\\n Acr Changed? AuthorizeRestWebServiceValidator->Browser: throw WebApplicationException (INVALID_REQUEST) end group Max Age Validation Janssen->Janssen: validateMaxAge() Janssen->AuthorizeRestWebServiceValidator: isAuthnMaxAgeValid() AuthorizeRestWebServiceValidator->Janssen: throw new WebApplicationException(): redirectToAuthorizationPage(): if it's not valid end Janssen->ScopeChecker: checkScopesPolicy() ScopeChecker->Janssen: return: scopes group Post Authn Custom Script Janssen->ExternalPostAuthnService: checkForceReAuthentication() Janssen->ExternalPostAuthnService: checkForceAuthorization() end group if ResponseType CODE Janssen->ResponseParameters: put code end group if ResponseType TOKEN Janssen->ResponseParameters: put access_token, token_type and expires_in Janssen->ExternalUpdateTokenService: modifyAccessToken() ExternalUpdateTokenService->Janssen: return true or false end group if ResponseType ID_TOKEN Janssen->ResponseParameters: put id_token Janssen->ExternalUpdateTokenService: modifyIdToken() ExternalUpdateTokenService->Janssen: return true or false end Janssen->SessionIdService: generateAuthenticatedSessionId(): if exists sessionId SessionIdService->Janssen: return: newSessionUser Janssen->ResponseParameters: addRespnseParameterSessionId(): if enabled appConfiguration.getSessionIdRequestParameterEnabled() Janssen->ResponseParameters: addResponseParameterSid(): if enabled appConfiguration.getIncludeSidInResponse() Janssen->ResponseParameters: put session_state and state Janssen->ClientService: updateAccessTime() Janssen->Browser: /redirect_uri?with_param=...","title":"Prompt Parameter"},{"location":"admin/auth-server/openid-features/prompt-parameter/#prompt-none","text":"The OpenID Connect protocol supports a prompt=none parameter on the authentication request that allows applications to indicate that the authorization server must not display any user interaction (such as authentication, consent, or MFA). Janssen will either return the requested response back to the application, or return an error if the user is not already authenticated or if some type of consent or prompt is required before proceeding. Initiate Silent Authentication requests To initiate a silent authentication request, add the prompt=none parameter when you redirect a user to the /authorize endpoint of Janssen authentication API. (The individual parameters on the authentication request will vary depending on the specific needs of your app.) For example: GET https://YOUR_DOMAIN//authorize? response_type={response_type}& client_id={client_id}& scope={scope}& state={state}& ui_locales=& claims_locales=& acr_values=& redirect_uri={redirect_uri}& prompt=none Basic credential user The prompt=none parameter causes Jannsen to immediately send a result to the specified redirect_uri (callback URL) using the specified response_mode with one of two possible responses: success or error. Note: Any applicable rules will be executed as part of the silent authentication process. Successful authentication responses If the user was already logged in to Janssen and no other interactive prompts are required, Janssen will respond exactly as if the user had authenticated manually through the login page. This response is indistinguishable from a login performed directly without the prompt=none parameter. Example 1: Prompt None (Without credentials in Header) title Prompt None (Without credentials in Header) participant Browser participant IDP participant Identity participant SessionIdService participant AuthorizeRestWebServiceValidator participant AuthenticationFilterService Browser->IDP: /authorize?\\nresponse_type=... &\\nclient_id=... &\\nscope=... &\\nstate=... &\\nui_locales=... &\\nclaims_locales=... &\\nacr_values=... &\\nredirect_uri=... &\\n**prompt=none** IDP->Identity: getSessionId() Identity->IDP: return: null IDP->SessionIdService: getUser(): from sessionId SessionIdService->IDP: return: null group Client validation IDP->AuthorizeRestWebServiceValidator: validateClient(): if it's par, disabled or not found? AuthorizeRestWebServiceValidator->Browser: throw WebApplicationException end group User is null IDP->IDP: ifUserIsNull() IDP->AuthenticationFilterService: processAuthenticationFilters() AuthenticationFilterService->Browser: WebApplicationException (LOGIN_REQUIRED) end Example 2: Prompt None (Without credentials in Header) title Prompt None (With credentials in Header) participant Browser participant Janssen participant Identity participant SessionIdService participant AuthorizeRestWebServiceValidator participant ScopeChecker participant ExternalPostAuthnService participant ResponseParameters participant ExternalUpdateTokenService participant ClientService Browser->Janssen: /authorize?\\nresponse_type=... &\\nclient_id=... &\\nscope=... &\\nstate=... &\\nui_locales=... &\\nclaims_locales=... &\\nacr_values=... &\\nredirect_uri=... &\\n**prompt=none**\\n\\n**Basic credentials (user)** in Headers Janssen->Identity: getSessionId() Identity->Janssen: return: sessionId Janssen->SessionIdService: getUser(): from sessionId SessionIdService->Janssen: return: User group Update Session For ROPC: If exists session attribute grant_type ROPC Janssen->Janssen: updateSessionForROPC() Janssen->SessionIdService: updateSessionId() SessionIdService->Janssen: session attributes updated end group Client validation Janssen->AuthorizeRestWebServiceValidator: validateClient(): if it's par, disabled or not found? AuthorizeRestWebServiceValidator->Browser: throw WebApplicationException (INVALID_REQUEST, UNAUTHORIZED_CLIENT, DISABLED_CLIENT) end group ACR validation Janssen->AuthorizeRestWebServiceValidator: validateAcrs(): If the request acr list does not exist in the session attribute? or\\n Acr Changed? AuthorizeRestWebServiceValidator->Browser: throw WebApplicationException (INVALID_REQUEST) end group Max Age Validation Janssen->Janssen: validateMaxAge() Janssen->AuthorizeRestWebServiceValidator: isAuthnMaxAgeValid() AuthorizeRestWebServiceValidator->Janssen: throw new WebApplicationException(): redirectToAuthorizationPage(): if it's not valid end Janssen->ScopeChecker: checkScopesPolicy() ScopeChecker->Janssen: return: scopes group Post Authn Custom Script Janssen->ExternalPostAuthnService: checkForceReAuthentication() Janssen->ExternalPostAuthnService: checkForceAuthorization() end group if ResponseType CODE Janssen->ResponseParameters: put code end group if ResponseType TOKEN Janssen->ResponseParameters: put access_token, token_type and expires_in Janssen->ExternalUpdateTokenService: modifyAccessToken() ExternalUpdateTokenService->Janssen: return true or false end group if ResponseType ID_TOKEN Janssen->ResponseParameters: put id_token Janssen->ExternalUpdateTokenService: modifyIdToken() ExternalUpdateTokenService->Janssen: return true or false end Janssen->SessionIdService: generateAuthenticatedSessionId(): if exists sessionId SessionIdService->Janssen: return: newSessionUser Janssen->ResponseParameters: addRespnseParameterSessionId(): if enabled appConfiguration.getSessionIdRequestParameterEnabled() Janssen->ResponseParameters: addResponseParameterSid(): if enabled appConfiguration.getIncludeSidInResponse() Janssen->ResponseParameters: put session_state and state Janssen->ClientService: updateAccessTime() Janssen->Browser: /redirect_uri?with_param=...","title":"Prompt NONE"},{"location":"admin/auth-server/openid-features/request-objects/","tags":["administration","auth-server","openidc","feature"],"text":"This is a placeholder","title":"Request Objects"},{"location":"admin/auth-server/openid-features/siop/","tags":["administration","auth-server","openidc","feature"],"text":"This is a placeholder","title":"SIOP"},{"location":"admin/auth-server/openid-features/subject-identifiers/","tags":["administration","auth-server","openidc","feature"],"text":"This is a placeholder","title":"Pairwise/Public Subject Identifiers"},{"location":"admin/auth-server/openid-features/consent/","tags":["administration","auth-server","openidc","feature","consent"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/openid-features/consent/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/openid-features/consent/customize/","tags":["administration","auth-server","openidc","feature","consent"],"text":"This is a placeholder","title":"Customize"},{"location":"admin/auth-server/openid-features/consent/list-delete/","tags":["administration","auth-server","openidc","feature","consent"],"text":"This is a placeholder","title":"List/Delete Consent"},{"location":"admin/auth-server/openid-features/logout/","tags":["administration","auth-server","openidc","feature","logout"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/openid-features/logout/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/openid-features/logout/back-channel/","tags":["administration","auth-server","openidc","feature","logout"],"text":"This is a placeholder","title":"Back Channel"},{"location":"admin/auth-server/openid-features/logout/customizing-logout/","tags":["administration","auth-server","openidc","feature","logout"],"text":"This is a placeholder","title":"Customizing Logout"},{"location":"admin/auth-server/openid-features/logout/forcing-logout/","tags":["administration","auth-server","openidc","feature","logout"],"text":"This is a placeholder","title":"Forcing Logout on Browser Exit"},{"location":"admin/auth-server/openid-features/logout/front-channel/","tags":["administration","auth-server","openidc","feature","logout"],"text":"This is a placeholder","title":"Front Channel"},{"location":"admin/auth-server/openid-features/user-claims/","tags":["administration","auth-server","openidc","feature","claims"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/openid-features/user-claims/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/openid-features/user-claims/built-in-claims/","tags":["administration","auth-server","openidc","feature","claims"],"text":"This is a placeholder","title":"Built-in Claims"},{"location":"admin/auth-server/openid-features/user-claims/claim-uniqueness-validation/","tags":["administration","auth-server","openidc","feature","claims"],"text":"This is a placeholder","title":"Claim Uniqueness/Validation"},{"location":"admin/auth-server/openid-features/user-claims/custom-claims/","tags":["administration","auth-server","openidc","feature","claims"],"text":"This is a placeholder","title":"Adding Custom Claims"},{"location":"admin/auth-server/reporting-metrics/","tags":["administration","auth-server","reporting","metric"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/reporting-metrics/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/reporting-metrics/failed-success-authn/","tags":["administration","auth-server","reporting","metric"],"text":"This is a placeholder","title":"Failed/Successful Authentications"},{"location":"admin/auth-server/reporting-metrics/health/","tags":["administration","auth-server","reporting","metric"],"text":"This is a placeholder","title":"Health"},{"location":"admin/auth-server/reporting-metrics/mau/","tags":["administration","auth-server","reporting","metric"],"text":"This is a placeholder","title":"Monthly Active Users"},{"location":"admin/auth-server/reporting-metrics/tokens-issued/","tags":["administration","auth-server","reporting","metric"],"text":"This is a placeholder","title":"Tokens Issued"},{"location":"admin/auth-server/reporting-metrics/user-client-count/","tags":["administration","auth-server","reporting","metric"],"text":"This is a placeholder","title":"User/Client Counts"},{"location":"admin/auth-server/session-management/","tags":["administration","auth-server","session"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/session-management/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/session-management/idp-v-rp/","tags":["administration","auth-server","session"],"text":"This is a placeholder","title":"IDP v RP Sessions"},{"location":"admin/auth-server/session-management/multiple-browser-sessions/","tags":["administration","auth-server","session"],"text":"This is a placeholder","title":"Multiple Browser Sessions"},{"location":"admin/auth-server/session-management/multiple-sessions-one-browser/","tags":["administration","auth-server","session"],"text":"This is a placeholder","title":"Multiple Sessions in One Browser"},{"location":"admin/auth-server/session-management/what-is/","tags":["administration","auth-server","session"],"text":"This is a placeholder","title":"What is a session?"},{"location":"admin/auth-server/tokens/","tags":["administration","auth-server","token"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/tokens/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/tokens/oauth-access-tokens/","tags":["administration","auth-server","token"],"text":"This is a placeholder","title":"OAuth Access Tokens"},{"location":"admin/auth-server/tokens/oauth-refresh-tokens/","tags":["administration","auth-server","token"],"text":"This is a placeholder","title":"OAuth Refresh Tokens"},{"location":"admin/auth-server/tokens/openid-id-token/","tags":["administration","auth-server","token"],"text":"This is a placeholder","title":"OpenID id_token"},{"location":"admin/auth-server/tokens/openid-userinfo-token/","tags":["administration","auth-server","token"],"text":"This is a placeholder","title":"OpenID Userinfo Token"},{"location":"admin/auth-server/tokens/uma-rpt-token/","tags":["administration","auth-server","token"],"text":"This is a placeholder","title":"UMA RPT Token"},{"location":"admin/auth-server/uma-features/","tags":["administration","auth-server","uma"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/uma-features/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/auth-server/uma-features/claims-gathering-endpoint/","tags":["administration","auth-server","uma","feature","endpoint"],"text":"This is a placeholder","title":"Claims Gathering Endpoint"},{"location":"admin/auth-server/uma-features/rpt-endpoint/","tags":["administration","auth-server","uma","feature","endpoint"],"text":"This is a placeholder","title":"RPT Endpoint"},{"location":"admin/client-api/","tags":["administration","client-api"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/client-api/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/client-api/config/","tags":["administration","client-api"],"text":"This is a placeholder","title":"Configuration"},{"location":"admin/client-api/key-mgt/","tags":["administration","client-api"],"text":"This is a placeholder","title":"Key Management"},{"location":"admin/client-api/logs/","tags":["administration","client-api"],"text":"This is a placeholder","title":"Logs"},{"location":"admin/client-api/monitoring/","tags":["administration","client-api"],"text":"This is a placeholder","title":"Monitoring"},{"location":"admin/client-api/oauth-features/","tags":["administration","client-api"],"text":"This is a placeholder","title":"OAuth Features"},{"location":"admin/client-api/oidc-features/","tags":["administration","client-api"],"text":"This is a placeholder","title":"OpenID Connect Features"},{"location":"admin/client-api/sdks/","tags":["administration","client-api"],"text":"This is a placeholder","title":"SDKs"},{"location":"admin/client-api/siop-features/","tags":["administration","client-api"],"text":"This is a placeholder","title":"SIOP Features"},{"location":"admin/client-api/uma-features/","tags":["administration","client-api"],"text":"This is a placeholder","title":"UMA Features"},{"location":"admin/config-api/","tags":["administration","config-api"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/config-api/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/config-api/config/","tags":["administration","config-api"],"text":"This is a placeholder","title":"Configuration"},{"location":"admin/config-api/logs/","tags":["administration","config-api"],"text":"This is a placeholder","title":"Logs"},{"location":"admin/config-api/monitoring/","tags":["administration","config-api"],"text":"This is a placeholder","title":"Monitoring"},{"location":"admin/config-api/plugins/","tags":["administration","config-api"],"text":"Overview # Jans Config Api is a REST application that is developed using Weld 4.x (JSR-365) and JAX-RS. Its endpoint can be used to manage configuration and other properties of Jans Auth Server . Jans Config API Plugins # Jans Config API follow a flexible plugin architecture in which the new features can be added using extensions called plugins without altering the application itself. In this section, we will discuss the steps to develop and add plugins in Jans Config API. The plugin architecture implemented in Jans Config API allows the deployer to add/remove new rest APIs (plugin) without changing the core application. A plugin contains one or more Rest API(s) packaged in a Java ARchive (jar file). It is added to Jans Config API by adding the plugin jar file path in the external extraClasspath of the jetty context file. Pre-requisites # The plugin developer should have an understanding of the following: Jakarta EE Platform : The plugin developer should know the Java programming language Weld : Weld is the reference implementation of CDI: Contexts and Dependency Injection for the Java EE Platform JAX-RS : JAX-RS for creating RESTful web services. Maven : Maven to build projects and manage dependencies. Web application container (Jetty) Sample plugin # To help bootstrap the plugin development, we have put together a sample plugin. Clone the Jans Config API project from here . Navigate under the plugins/sample folder. This folder contains the sample plugins for reference. helloworld folder for example contains the code for a basic plugin with GET endpoint sending Hello World! string response. Take the time to explore helloworld which is a minimalistic plugin that showcases very basic aspects of plugin development. Exploring Hello World Plugin # beans.xml # The resources/META-INF/beans.xml is the CDI deployment descriptor required in bean archive . Deployment descriptor helps WELD to explore beans, interceptors, decorators, etc in the bean archive . Refer WELD docs to know more about deployment descriptors. HelloWorldExtension.java # A CDI portable extension is a mechanism by which we can implement additional functionalities on top of the CDI container. In this sample plugin, we have created an Extension HelloWorldExtension.java implementing jakarta.enterprise.inject.spi.Extension . An extension can observe lifecycle events and also can modify the container\u2019s metamodel. Please refer WELD documentation for details. We need to register our extension as a service provider by creating a file named resources/META-INF/services/jakarta.enterprise.inject.spi.Extension (as shown below). com.spl.plugin.helloworld.ext.HelloWorldExtension HelloWorldApplication.java # com.spl.plugin.helloworld.rest.HelloWorldApplication.java class is annotated with the @ApplicationPath annotation which identifies the application path that serves as the base URI for all resources of the plugin and is used to register JAX-RS resources and providers. HelloWorldResource.java # This is sample JAX-RS resource with an endpoint returning Hello World! string as http response. Plugin Deployment # Jans Config API is offered as one of the several components of the Jans Auth Server. A plugin jar can be added to Jans Config API by following below steps. On an installed Jans Auth Server with Jans Config API (as component) copy plugin jar to /opt/jans/jetty/jans-config-api/custom/libs location. Add the location of plugin jar inside tag with name extraClasspath (multiple plugins can be added comma separated) of /opt/jans/jetty/jans-config-api/webapps/jans-config-api.xml file. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE Configure PUBLIC \"-//Jetty//Configure//EN\" \"http://www.eclipse.org/jetty/configure_9_0.dtd\"> <Configure class=\"org.eclipse.jetty.webapp.WebAppContext\"> <Set name=\"contextPath\">/jans-config-api</Set> <Set name=\"war\"> <Property name=\"jetty.webapps\" default=\".\" />/jans-config-api.war </Set> <Set name=\"extractWAR\">true</Set> <Set name=\"extraClasspath\">/opt/jans/jetty/jans-config-api/custom/libs/helloWorldjar</Set> </Configure> 3. Restart jans-config-api service. systemctl restart jans-config-api.service","title":"Plugins"},{"location":"admin/config-api/plugins/#overview","text":"Jans Config Api is a REST application that is developed using Weld 4.x (JSR-365) and JAX-RS. Its endpoint can be used to manage configuration and other properties of Jans Auth Server .","title":"Overview"},{"location":"admin/config-api/plugins/#jans-config-api-plugins","text":"Jans Config API follow a flexible plugin architecture in which the new features can be added using extensions called plugins without altering the application itself. In this section, we will discuss the steps to develop and add plugins in Jans Config API. The plugin architecture implemented in Jans Config API allows the deployer to add/remove new rest APIs (plugin) without changing the core application. A plugin contains one or more Rest API(s) packaged in a Java ARchive (jar file). It is added to Jans Config API by adding the plugin jar file path in the external extraClasspath of the jetty context file.","title":"Jans Config API Plugins"},{"location":"admin/config-api/plugins/#pre-requisites","text":"The plugin developer should have an understanding of the following: Jakarta EE Platform : The plugin developer should know the Java programming language Weld : Weld is the reference implementation of CDI: Contexts and Dependency Injection for the Java EE Platform JAX-RS : JAX-RS for creating RESTful web services. Maven : Maven to build projects and manage dependencies. Web application container (Jetty)","title":"Pre-requisites"},{"location":"admin/config-api/plugins/#sample-plugin","text":"To help bootstrap the plugin development, we have put together a sample plugin. Clone the Jans Config API project from here . Navigate under the plugins/sample folder. This folder contains the sample plugins for reference. helloworld folder for example contains the code for a basic plugin with GET endpoint sending Hello World! string response. Take the time to explore helloworld which is a minimalistic plugin that showcases very basic aspects of plugin development.","title":"Sample plugin"},{"location":"admin/config-api/plugins/#exploring-hello-world-plugin","text":"","title":"Exploring Hello World Plugin"},{"location":"admin/config-api/plugins/#beansxml","text":"The resources/META-INF/beans.xml is the CDI deployment descriptor required in bean archive . Deployment descriptor helps WELD to explore beans, interceptors, decorators, etc in the bean archive . Refer WELD docs to know more about deployment descriptors.","title":"beans.xml"},{"location":"admin/config-api/plugins/#helloworldextensionjava","text":"A CDI portable extension is a mechanism by which we can implement additional functionalities on top of the CDI container. In this sample plugin, we have created an Extension HelloWorldExtension.java implementing jakarta.enterprise.inject.spi.Extension . An extension can observe lifecycle events and also can modify the container\u2019s metamodel. Please refer WELD documentation for details. We need to register our extension as a service provider by creating a file named resources/META-INF/services/jakarta.enterprise.inject.spi.Extension (as shown below). com.spl.plugin.helloworld.ext.HelloWorldExtension","title":"HelloWorldExtension.java"},{"location":"admin/config-api/plugins/#helloworldapplicationjava","text":"com.spl.plugin.helloworld.rest.HelloWorldApplication.java class is annotated with the @ApplicationPath annotation which identifies the application path that serves as the base URI for all resources of the plugin and is used to register JAX-RS resources and providers.","title":"HelloWorldApplication.java"},{"location":"admin/config-api/plugins/#helloworldresourcejava","text":"This is sample JAX-RS resource with an endpoint returning Hello World! string as http response.","title":"HelloWorldResource.java"},{"location":"admin/config-api/plugins/#plugin-deployment","text":"Jans Config API is offered as one of the several components of the Jans Auth Server. A plugin jar can be added to Jans Config API by following below steps. On an installed Jans Auth Server with Jans Config API (as component) copy plugin jar to /opt/jans/jetty/jans-config-api/custom/libs location. Add the location of plugin jar inside tag with name extraClasspath (multiple plugins can be added comma separated) of /opt/jans/jetty/jans-config-api/webapps/jans-config-api.xml file. <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!DOCTYPE Configure PUBLIC \"-//Jetty//Configure//EN\" \"http://www.eclipse.org/jetty/configure_9_0.dtd\"> <Configure class=\"org.eclipse.jetty.webapp.WebAppContext\"> <Set name=\"contextPath\">/jans-config-api</Set> <Set name=\"war\"> <Property name=\"jetty.webapps\" default=\".\" />/jans-config-api.war </Set> <Set name=\"extractWAR\">true</Set> <Set name=\"extraClasspath\">/opt/jans/jetty/jans-config-api/custom/libs/helloWorldjar</Set> </Configure> 3. Restart jans-config-api service. systemctl restart jans-config-api.service","title":"Plugin Deployment"},{"location":"admin/config-api/security/","tags":["administration","config-api"],"text":"This is a placeholder","title":"Security"},{"location":"admin/config-guide/curl/","tags":["administration","configuration","cli","curl"],"text":"Most useful configurations and operations on Jans server using CURL # Configuring the Janssen server # To use CURL commands and configure Janssen's Authorization server, you need to have an access token of \"Config-API\" (which is an RP of Jans-auth server). Configurations to the AS can be done only through \"The Config-API client (RP)\". 1. Obtaining an Access token # All commands to configure the AS are protected by an Access token. According to the use case, you must specify the scope for which the access token has been requested. For the client_id and client_secret, contact your administrator. Template : curl -u \"client_inum:client_secret\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=put_scope_name_here Example : To modify a custom script, you need to request an access token using the scope scope=https://jans.io/oauth/config/scripts.write curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/scripts.write\" 2. Enable an authentication script # Steps: 1. Obtain a token, use scope https://jans.io/oauth/config/scripts.write curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/scripts.write\" 2. Enable the script curl https://<your.jans.server>/jans-config-api/api/v1/config/scripts/name/name_of_the_script \\ -H \"Authorization: Bearer put_access_token_here\" Examples of name_of_the_script ( Authentication methods that are present in the Janssen server.) Name of the script smpp otp duo fido2 super_gluu twilio_sms smpp otp duo fido2 super_gluu 3. Add scope to client # Obtain the pre-existing scopes of the client Obtain an Access Token with scope https://jans.io/oauth/config/openid/clients.readonly . curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/openid/clients.readonly\" Obtain client information using: curl -X GET https://my.jans.server/jans-config-api/api/v1/openid/clients/client-s_inum_for_which_scope_to_be_added -H \"Authorization: Bearer put_access_token_here\" Notice the scope field. It is a space-seperated String of scope values e.g \"scope\" : \"openid user_name \" . To this, lets append the profile, so the scope attrib should now have value \"openid user_name profile\"`. This new value will be patched onto the client. Patch the client Obtain an Access Token with scope https://jans.io/oauth/config/openid/clients.write curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/openid/clients.write\" Patch the new scope for the client curl -X PATCH -k -H 'Content-Type: application/json-patch+json' \\ -i 'https://my.jans.server/jans-config-api/api/v1/openid/clients/put_client_inum_here' \\ -H \"Authorization: Bearer put_access_token_here\" --data '[ { \"op\": \"add\", \"path\": \"/scope\", \"value\": \"openid user_name profile\" } ]' 4. Get grant_types for client # Obtain an Access Token with scope https://jans.io/oauth/config/openid/clients.readonly . curl -u \"put_client_id:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/openid/clients.readonly\" Obtain client information using: curl -X GET https://my.jans.server/jans-config-api/api/v1/openid/clients/client-s_inum_for_which_grant_types_to_check \\ -H \"Authorization: Bearer put_access_token_here\" Notice the grant_types field in the response. 5. Add OpenID scope and map to database attribute # Obtain access token curl -k -u \"put_client_id:put_client_secret\" https://jans-ui.jans.io/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/scopes.write\" Build json on similar lines { \"dn\": \"string\", \"inum\": \"string\", \"displayName\": \"string\", \"id\": \"string\", \"iconUrl\": \"string\", \"description\": \"string\", \"scopeType\": \"openid\", \"claims\": [ \"string\" ], \"defaultScope\": true, \"groupClaims\": true, \"dynamicScopeScripts\": [ \"string\" ], \"umaAuthorizationPolicies\": [ \"string\" ], \"attributes\": { \"spontaneousClientId\": \"string\", \"spontaneousClientScopes\": [ \"string\" ], \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": \"2022-07-26\" } Run curl. Note the claims field which maps to the database attrib curl -k -X POST https://jans-ui.jans.io/jans-config-api/api/v1/scopes -H \"Content-Type: application/json\" -H \"Authorization: Bearer use_bearer_token_here\" --data '{ \"dn\": \"inum=AAC1,ou=scopes,o=jans\", \"inum\": \"AAC1\", \"displayName\": \"website\", \"id\": \"website\", \"description\": \"website\", \"scopeType\": \"openid\", \"claims\": [\"website\"], \"umaType\": false, \"deletable\": false }' Using the Janssen server # 1. OpenID Discovery endpoint / Well-known endpoint # curl https://jans-ui.jans.io/.well-known/openid-configuration 2. Client creation # Steps: 1. Download this json file , update the values and save it as client.json. Few important fields to populate are scope , responseTypes , redirectUris (The only mandatory field), grantTypes 1. Run curl command curl -X POST https://my.jans.server/jans-auth/restv1/register \\ -H \"Content-Type: application/json\" -d @/some/directory/client.json Further reading 2. Client Credentials Flow # curl -k -u \"put_client_id:put_client_secret\" https://jans-ui.jans.io/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/scopes.write\" 3. Authorization code flow # Steps: 1. On a browser type https://my.jans.server/jans-auth/restv1/authorize?redirect_uri=https://my-redirect-app:8080&client_id=Put_client_id_here&scope=username+openid&response_type=code 2. Based on the default authentication method set, the user will be presented with credentials for login. The OpenID Provider (Gluu Server) verifies the user\u2019s identity and authenticates the user. 3. In the back channel the following steps take place : 1. The OpenID Provider (Gluu Server) sends the user back to the application with an authorization code. 2. The application sends the code to the Token Endpoint to receive an Access Token and ID Token in the response. 3. The application uses the ID Token to authorize the user. At this point the application/RP can access the UserInfo endpoint for claims. 4. Device Authorization code flow # Client_id that is used in the curl command below should have grant_type urn:ietf:params:oauth:grant-type:device_code Call the Device Authorization Endpoint : curl -k -u \"client_id_here:client_secret_here\" https://jans-ui.jans.io/jans-auth/restv1/device_authorization \\ -d scope=openid+profile+email+offline_access\" Response recieved will be like this { \"user_code\": \"HJDN-BMHQ\", \"device_code\": \"b8a5e5e6b1c10506af4f4bbb5400ca2587dcfe44974d7e62\", \"interval\": 5, \"verification_uri_complete\": \"https://jans-ui.jans.io/device-code?user_code=HJDN-BMHQ\", \"verification_uri\": \"https://jans-ui.jans.io/device-code\", \"expires_in\": 1800 } User should visit the verification_uri link on a browser and enter the user_code . Until the user to activates the device, begin polling token URL to request an Access Token. Use interval from step 2 as the polling interval. curl -k -u \"client_id:put_client_secret\" https://jans-ui.jans.io/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&grant_type=urn:ietf:params:oauth:grant-type:device_code&device_code=YOUR_DEVICE_CODE&client_id=YOUR_CLIENT_ID\"","title":"CURL Guide"},{"location":"admin/config-guide/curl/#most-useful-configurations-and-operations-on-jans-server-using-curl","text":"","title":"Most useful configurations and operations on Jans server using CURL"},{"location":"admin/config-guide/curl/#configuring-the-janssen-server","text":"To use CURL commands and configure Janssen's Authorization server, you need to have an access token of \"Config-API\" (which is an RP of Jans-auth server). Configurations to the AS can be done only through \"The Config-API client (RP)\".","title":"Configuring the Janssen server"},{"location":"admin/config-guide/curl/#1-obtaining-an-access-token","text":"All commands to configure the AS are protected by an Access token. According to the use case, you must specify the scope for which the access token has been requested. For the client_id and client_secret, contact your administrator. Template : curl -u \"client_inum:client_secret\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=put_scope_name_here Example : To modify a custom script, you need to request an access token using the scope scope=https://jans.io/oauth/config/scripts.write curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/scripts.write\"","title":"1. Obtaining an Access token"},{"location":"admin/config-guide/curl/#2-enable-an-authentication-script","text":"Steps: 1. Obtain a token, use scope https://jans.io/oauth/config/scripts.write curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/scripts.write\" 2. Enable the script curl https://<your.jans.server>/jans-config-api/api/v1/config/scripts/name/name_of_the_script \\ -H \"Authorization: Bearer put_access_token_here\" Examples of name_of_the_script ( Authentication methods that are present in the Janssen server.) Name of the script smpp otp duo fido2 super_gluu twilio_sms smpp otp duo fido2 super_gluu","title":"2. Enable an authentication script"},{"location":"admin/config-guide/curl/#3-add-scope-to-client","text":"Obtain the pre-existing scopes of the client Obtain an Access Token with scope https://jans.io/oauth/config/openid/clients.readonly . curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/openid/clients.readonly\" Obtain client information using: curl -X GET https://my.jans.server/jans-config-api/api/v1/openid/clients/client-s_inum_for_which_scope_to_be_added -H \"Authorization: Bearer put_access_token_here\" Notice the scope field. It is a space-seperated String of scope values e.g \"scope\" : \"openid user_name \" . To this, lets append the profile, so the scope attrib should now have value \"openid user_name profile\"`. This new value will be patched onto the client. Patch the client Obtain an Access Token with scope https://jans.io/oauth/config/openid/clients.write curl -u \"put_client_id_here:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/openid/clients.write\" Patch the new scope for the client curl -X PATCH -k -H 'Content-Type: application/json-patch+json' \\ -i 'https://my.jans.server/jans-config-api/api/v1/openid/clients/put_client_inum_here' \\ -H \"Authorization: Bearer put_access_token_here\" --data '[ { \"op\": \"add\", \"path\": \"/scope\", \"value\": \"openid user_name profile\" } ]'","title":"3. Add scope to client"},{"location":"admin/config-guide/curl/#4-get-grant_types-for-client","text":"Obtain an Access Token with scope https://jans.io/oauth/config/openid/clients.readonly . curl -u \"put_client_id:put_config_api_client_secret_here\" https://<your.jans.server>/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/openid/clients.readonly\" Obtain client information using: curl -X GET https://my.jans.server/jans-config-api/api/v1/openid/clients/client-s_inum_for_which_grant_types_to_check \\ -H \"Authorization: Bearer put_access_token_here\" Notice the grant_types field in the response.","title":"4. Get grant_types for client"},{"location":"admin/config-guide/curl/#5-add-openid-scope-and-map-to-database-attribute","text":"Obtain access token curl -k -u \"put_client_id:put_client_secret\" https://jans-ui.jans.io/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/scopes.write\" Build json on similar lines { \"dn\": \"string\", \"inum\": \"string\", \"displayName\": \"string\", \"id\": \"string\", \"iconUrl\": \"string\", \"description\": \"string\", \"scopeType\": \"openid\", \"claims\": [ \"string\" ], \"defaultScope\": true, \"groupClaims\": true, \"dynamicScopeScripts\": [ \"string\" ], \"umaAuthorizationPolicies\": [ \"string\" ], \"attributes\": { \"spontaneousClientId\": \"string\", \"spontaneousClientScopes\": [ \"string\" ], \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": \"2022-07-26\" } Run curl. Note the claims field which maps to the database attrib curl -k -X POST https://jans-ui.jans.io/jans-config-api/api/v1/scopes -H \"Content-Type: application/json\" -H \"Authorization: Bearer use_bearer_token_here\" --data '{ \"dn\": \"inum=AAC1,ou=scopes,o=jans\", \"inum\": \"AAC1\", \"displayName\": \"website\", \"id\": \"website\", \"description\": \"website\", \"scopeType\": \"openid\", \"claims\": [\"website\"], \"umaType\": false, \"deletable\": false }'","title":"5. Add OpenID scope and map to database attribute"},{"location":"admin/config-guide/curl/#using-the-janssen-server","text":"","title":"Using the Janssen server"},{"location":"admin/config-guide/curl/#1-openid-discovery-endpoint-well-known-endpoint","text":"curl https://jans-ui.jans.io/.well-known/openid-configuration","title":"1. OpenID Discovery endpoint / Well-known endpoint"},{"location":"admin/config-guide/curl/#2-client-creation","text":"Steps: 1. Download this json file , update the values and save it as client.json. Few important fields to populate are scope , responseTypes , redirectUris (The only mandatory field), grantTypes 1. Run curl command curl -X POST https://my.jans.server/jans-auth/restv1/register \\ -H \"Content-Type: application/json\" -d @/some/directory/client.json Further reading","title":"2. Client creation"},{"location":"admin/config-guide/curl/#2-client-credentials-flow","text":"curl -k -u \"put_client_id:put_client_secret\" https://jans-ui.jans.io/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&scope=https://jans.io/oauth/config/scopes.write\"","title":"2. Client Credentials Flow"},{"location":"admin/config-guide/curl/#3-authorization-code-flow","text":"Steps: 1. On a browser type https://my.jans.server/jans-auth/restv1/authorize?redirect_uri=https://my-redirect-app:8080&client_id=Put_client_id_here&scope=username+openid&response_type=code 2. Based on the default authentication method set, the user will be presented with credentials for login. The OpenID Provider (Gluu Server) verifies the user\u2019s identity and authenticates the user. 3. In the back channel the following steps take place : 1. The OpenID Provider (Gluu Server) sends the user back to the application with an authorization code. 2. The application sends the code to the Token Endpoint to receive an Access Token and ID Token in the response. 3. The application uses the ID Token to authorize the user. At this point the application/RP can access the UserInfo endpoint for claims.","title":"3. Authorization code flow"},{"location":"admin/config-guide/curl/#4-device-authorization-code-flow","text":"Client_id that is used in the curl command below should have grant_type urn:ietf:params:oauth:grant-type:device_code Call the Device Authorization Endpoint : curl -k -u \"client_id_here:client_secret_here\" https://jans-ui.jans.io/jans-auth/restv1/device_authorization \\ -d scope=openid+profile+email+offline_access\" Response recieved will be like this { \"user_code\": \"HJDN-BMHQ\", \"device_code\": \"b8a5e5e6b1c10506af4f4bbb5400ca2587dcfe44974d7e62\", \"interval\": 5, \"verification_uri_complete\": \"https://jans-ui.jans.io/device-code?user_code=HJDN-BMHQ\", \"verification_uri\": \"https://jans-ui.jans.io/device-code\", \"expires_in\": 1800 } User should visit the verification_uri link on a browser and enter the user_code . Until the user to activates the device, begin polling token URL to request an Access Token. Use interval from step 2 as the polling interval. curl -k -u \"client_id:put_client_secret\" https://jans-ui.jans.io/jans-auth/restv1/token \\ -d \"grant_type=client_credentials&grant_type=urn:ietf:params:oauth:grant-type:device_code&device_code=YOUR_DEVICE_CODE&client_id=YOUR_CLIENT_ID\"","title":"4. Device Authorization code flow"},{"location":"admin/config-guide/scim-cli/","tags":["administration","configuration","cli","scim"],"text":"SCIM-CLI # SCIM is a specification designed to reduce the complexity of user management operations by providing a common user schema and the patterns for exchanging such schema using HTTP in a platform-neutral fashion. The aim of SCIM is achieving interoperability, security, and scalability in the context of identity management. SCIM-CLI which is going to help on performing such SCIM operations on the Janssen Server with ease and more readability. It supports both of the Menu-driven Interactive Mode and Command Line Mode .","title":"SCIM CLI"},{"location":"admin/config-guide/scim-cli/#scim-cli","text":"SCIM is a specification designed to reduce the complexity of user management operations by providing a common user schema and the patterns for exchanging such schema using HTTP in a platform-neutral fashion. The aim of SCIM is achieving interoperability, security, and scalability in the context of identity management. SCIM-CLI which is going to help on performing such SCIM operations on the Janssen Server with ease and more readability. It supports both of the Menu-driven Interactive Mode and Command Line Mode .","title":"SCIM-CLI"},{"location":"admin/config-guide/jans-cli/","tags":["administration","configuration","cli","commandline"],"text":"Janssen CLI # jans-cli module is a command line interface for configuring the Janssen software, providing both interactive and simple single line options for configuration. This module interacts with Janssen server via RESTful configuration APIs that server exposes. Using these REST APIs, jans-cli allows configuration of authorization server and its major modules for FIDO2, SCIM, OpenID Connect etc. jans-cli offers two modes in which it can be used. Command-line and interactive mode. Command-line mode : With command-line mode you can run a single command with all the required inputs to perform the operation you want. A sample command-line may look like below: /opt/jans/jans-cli/config-cli.py --operation-id get-attributes --endpoint-args limit:5 Interactive mode : Interactive mode is a terminal based menu-driven mode where user can select intended action from available options and also provide input parameters required for that action.","title":"Overview"},{"location":"admin/config-guide/jans-cli/#janssen-cli","text":"jans-cli module is a command line interface for configuring the Janssen software, providing both interactive and simple single line options for configuration. This module interacts with Janssen server via RESTful configuration APIs that server exposes. Using these REST APIs, jans-cli allows configuration of authorization server and its major modules for FIDO2, SCIM, OpenID Connect etc. jans-cli offers two modes in which it can be used. Command-line and interactive mode. Command-line mode : With command-line mode you can run a single command with all the required inputs to perform the operation you want. A sample command-line may look like below: /opt/jans/jans-cli/config-cli.py --operation-id get-attributes --endpoint-args limit:5 Interactive mode : Interactive mode is a terminal based menu-driven mode where user can select intended action from available options and also provide input parameters required for that action.","title":"Janssen CLI"},{"location":"admin/config-guide/jans-cli/cli-attribute/","tags":["administration","configuration","cli","commandline"],"text":"Attribute # First thing, let's get the information for Attribute : /opt/jans/jans-cli/config-cli.py --info Attribute In return, we get a list of Operations ID as below: Operation ID: get-all-attribute Description: Gets all attributes. Optionally max-size of the result, attribute status and pattern can be provided. Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] status: Status of the attribute [string] startIndex: The 1-based index of the first query result. [integer] sortBy: Attribute whose value will be used to order the returned response. [string] sortOrder: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\". [string] Operation ID: post-attributes Description: Adds a new attribute. Schema: /components/schemas/GluuAttribute Operation ID: put-attributes Description: Updates an existing attribute. Schema: /components/schemas/GluuAttribute Operation ID: get-attributes-by-inum Description: Gets an attribute based on inum. url-suffix: inum Operation ID: delete-attributes-by-inum Description: Deletes an attribute based on inum. url-suffix: inum Operation ID: patch-attributes-by-inum Description: Partially modify a GluuAttribute. url-suffix: inum Schema: Array of /components/schemas/PatchRequest To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest We have discussed here about each of this operations ID with few examples to understand how these really works. Table of Contents # Attribute Get Attributes Creating an Attribute Updating an Attribute Get Attribute by inum Delete Attributes Patch Attributes Get Attributes # Prerequisite: Know how to use the Janssen CLI in command-line mode As we know, Attributes are individual pieces of user data, like uid or email , that are required by applications in order to identify a user and grant access to protect resources. The user attributes that are available in your Janssen Server can be found by using this operation-ID. If we look at the description below: Operation ID: get-all-attribute Description: Gets all attributes. Optionally max-size of the result, attribute status and pattern can be provided. Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] status: Status of the attribute [string] startIndex: The 1-based index of the first query result. [integer] sortBy: Attribute whose value will be used to order the returned response. [string] sortOrder: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\". [string] To get all the attributes without any arguments, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-all-attribute To get attributes with passing the arguments, let's retrieve randomly limit:5: /opt/jans/jans-cli/config-cli.py --operation-id get-attributes --endpoint-args limit:5 It will return any 5 attributes randomly: Getting access token for scope https://jans.io/oauth/config/attributes.readonly Calling with params limit=5 [ { \"dn\": \"inum=B4B0,ou=attributes,o=jans\", \"inum\": \"B4B0\", \"selected\": false, \"name\": \"givenName\", \"displayName\": \"First Name\", \"description\": \"Given name(s) or first name(s) of the End-User.Note that in some cultures, people can have multiple given names;all can be present, with the names being separated by space characters.\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"given_name\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:givenName\", \"saml2Uri\": \"urn:oid:2.5.4.42\", \"urn\": \"urn:mace:dir:attribute-def:givenName\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null }, { \"dn\": \"inum=29DA,ou=attributes,o=jans\", \"inum\": \"29DA\", \"selected\": false, \"name\": \"inum\", \"displayName\": \"Inum\", \"description\": \"XRI i-number, persistent non-reassignable identifier\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": null, \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"inum\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:inum\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.117\", \"urn\": \"urn:jans:dir:attribute-def:inum\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null }, { \"dn\": \"inum=B52A,ou=attributes,o=jans\", \"inum\": \"B52A\", \"selected\": false, \"name\": \"jansPrefUsrName\", \"displayName\": \"Preferred Username\", \"description\": \"A domain issued and managed identifier for the person.Subject - Identifier for the End-User at the Issuer.\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"preferred_username\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:preferredUsername\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.320\", \"urn\": \"http://openid.net/specs/openid-connect-core-1_0.html/StandardClaims/preferred_username\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null }, { \"dn\": \"inum=64A0,ou=attributes,o=jans\", \"inum\": \"64A0\", \"selected\": false, \"name\": \"profile\", \"displayName\": \"Profile URL\", \"description\": \"URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"profile\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:profile\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.321\", \"urn\": \"http://openid.net/specs/openid-connect-core-1_0.html/StandardClaims/profile\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null }, { \"dn\": \"inum=42E0,ou=attributes,o=jans\", \"inum\": \"42E0\", \"selected\": false, \"name\": \"uid\", \"displayName\": \"Username\", \"description\": \"A domain issued and managed identifier for the person.Subject - Identifier for the End-User at the Issuer.\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"user_name\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:uid\", \"saml2Uri\": \"urn:oid:0.9.2342.19200300.100.1.1\", \"urn\": \"urn:mace:dir:attribute-def:uid\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null } ] To get attributes with pattern & status : /opt/jans/jans-cli/config-cli.py --operation-id get-attributes --endpoint-args limit:5,pattern:profile,status:ACTIVE In return, we get a list of attribute that are matched with the given pattern and status : Getting access token for scope https : //jans.io/oauth/config/attributes.readonly Calling with params limit = 5&pattern=profile&status=ACTIVE [ { \"dn\" : \"inum=EC3A,ou=attributes,o=jans\", \"inum\" : \"EC3A\", \"selected\" : false, \"name\" : \"picture\", \"displayName\" : \"Picture URL\", \"description\" : \"URL of the End-User's profile picture\", \"dataType\" : \"STRING\", \"status\" : \"ACTIVE\", \"lifetime\" : null, \"sourceAttribute\" : null, \"salt\" : null, \"nameIdType\" : null, \"origin\" : \"jansPerson\", \"editType\" : [ \"USER\", \"ADMIN\" ], \"viewType\" : [ \"USER\", \"ADMIN\" ], \"usageType\" : null, \"claimName\" : \"picture\", \"seeAlso\" : null, \"saml1Uri\" : \"urn:mace:dir:attribute-def:picture\", \"saml2Uri\" : \"urn:oid:1.3.6.1.4.1.48710.1.3.322\", \"urn\" : \"http://openid.net/specs/openid-connect-core-1_0.html/StandardClaims/picture\", \"scimCustomAttr\" : null, \"oxMultiValuedAttribute\" : false, \"custom\" : false, \"requred\" : false, \"attributeValidation\" : null, \"tooltip\" : null }, { \"dn\" : \"inum=64A0,ou=attributes,o=jans\", \"inum\" : \"64A0\", \"selected\" : false, \"name\" : \"profile\", \"displayName\" : \"Profile URL\", \"description\" : \"URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.\", \"dataType\" : \"STRING\", \"status\" : \"ACTIVE\", \"lifetime\" : null, \"sourceAttribute\" : null, \"salt\" : null, \"nameIdType\" : null, \"origin\" : \"jansPerson\", \"editType\" : [ \"USER\", \"ADMIN\" ], \"viewType\" : [ \"USER\", \"ADMIN\" ], \"usageType\" : null, \"claimName\" : \"profile\", \"seeAlso\" : null, \"saml1Uri\" : \"urn:mace:dir:attribute-def:profile\", \"saml2Uri\" : \"urn:oid:1.3.6.1.4.1.48710.1.3.321\", \"urn\" : \"http://openid.net/specs/openid-connect-core-1_0.html/StandardClaims/profile\", \"scimCustomAttr\" : null, \"oxMultiValuedAttribute\" : false, \"custom\" : false, \"requred\" : false, \"attributeValidation\" : null, \"tooltip\" : null } ] Creating an Attribute # To create SSO for certain applications, you may need to add custom attributes to your Janssen Server. Custom attributes can be added by using this operation-ID. It has a schema file where it's defined: the properties it needs to be filled to create a new custom attribute. Operation ID: post-attributes Description: Adds a new attribute. Schema: /components/schemas/GluuAttribute Before adding a new attribute, let's get sample schema : /opt/jans/jans-cli/config-cli.py --schema /components/schemas/GluuAttribute > /tmp/attribute.json It will return as below: { \"dn\": null, \"inum\": null, \"selected\": true, \"name\": \"name, displayName, birthdate, email\", \"displayName\": \"string\", \"description\": \"string\", \"dataType\": \"STRING\", \"status\": \"REGISTER\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": [], \"viewType\": \"array\", \"usageType\": [], \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": true, \"oxMultiValuedAttribute\": true, \"custom\": true, \"requred\": true, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null } Modify it to update attribute name , display name , view type : nano /tmp/attribute.json Now, let's add this attribute using post-attributes : /opt/jans/jans-cli/config-cli.py --operation-id post-attributes --data /tmp/attribute.json It will create a new attribute into the Attribute list with updated inum & dn : Getting access token for scope https://jans.io/oauth/config/attributes.write Server Response: { \"dn\": \"inum=256135af-56eb-43f3-9583-d7e9fc75c672,ou=attributes,o=jans\", \"inum\": \"256135af-56eb-43f3-9583-d7e9fc75c672\", \"selected\": false, \"name\": \"testAttribute\", \"displayName\": \"test Attribute\", \"description\": \"testing post-attributes\", \"dataType\": \"CERTIFICATE\", \"status\": \"REGISTER\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": null, \"viewType\": [ \"ADMIN\", \"OWNER\", \"USER\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": false, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null } Updating an Attribute # This operation-id can be used to update an existing attribute information. The Janssen Server administrator can make changes to attributes, such as changing their status to active/inactive by using this operation-ID. Let's look at the schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/GluuAttribute > /tmp/attrib.json You must see the similar schema while performed in post-attributes operation. To update an existing attribute, we have to ensure following properties in the schema file. In our case, I have modified the schema file as below: { \"dn\": \"inum=b691f2ab-a7db-4725-b85b-9961575b441f,ou=attributes,o=jans\", \"inum\": \"b691f2ab-a7db-4725-b85b-9961575b441f\", \"selected\": true, \"name\": \"testAttribute\", \"display_name\": \"testAttribute\", \"description\": \"testing put-attribute\", \"data_type\": \"STRING\", \"status\": \"ACTIVE\", \"edit_type\": [\"ADMIN\", \"OWNER\"], \"view_type\": [\"ADMIN\", \"OWNER\", \"USER\"] } Now if we run the below command line: /opt/jans/jans-cli/config-cli.py --operation-id put-attributes --data /tmp/attrb.json Getting access token for scope https://jans.io/oauth/config/attributes.write Server Response: { \"dn\": \"inum=b691f2ab-a7db-4725-b85b-9961575b441f,ou=attributes,o=jans\", \"inum\": \"b691f2ab-a7db-4725-b85b-9961575b441f\", \"selected\": false, \"name\": \"testAttribute\", \"displayName\": \"testAttribute\", \"description\": \"testing put-attribute\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": [ \"ADMIN\", \"OWNER\" ], \"viewType\": [ \"ADMIN\", \"OWNER\", \"USER\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null, \"jansHideOnDiscovery\": null } It just replace the previous value with new one. Get Attribute by inum # As we know, There are a lot of attributes available in the Janssen Server including custom attributes as well. You may want to know details information for a single attribute uniquely identified by inum . Getting an attribute information by using its inum is pretty simple. /opt/jans/jans-cli/config-cli.py --operation-id get-attributes-by-inum --url-suffix inum:b691f2ab-a7db-4725-b85b-9961575b441f It will show all details information of the selected Attribute. Getting access token for scope https://jans.io/oauth/config/attributes.readonly { \"dn\": \"inum=b691f2ab-a7db-4725-b85b-9961575b441f,ou=attributes,o=jans\", \"inum\": \"b691f2ab-a7db-4725-b85b-9961575b441f\", \"selected\": false, \"name\": \"testAttribute\", \"displayName\": \"testAttribute\", \"description\": \"testing put-attribute\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": [ \"ADMIN\", \"OWNER\" ], \"viewType\": [ \"ADMIN\", \"OWNER\", \"USER\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null, \"jansHideOnDiscovery\": null } Delete Attributes # For any reason, If it needs to delete any attribute, you can do that simply using its inum value. See below example, just change the inum value with one that you want to delete. /opt/jans/jans-cli/config-cli.py --operation-id delete-attributes-by-inum --url-suffix inum:b691f2ab-a7db-4725-b85b-9961575b441f Patch Attributes # This operation can also used for updating an existing attribute by using its inum value. Operation ID: patch-attributes-by-inum Description: Partially modify a GluuAttribute. url-suffix: inum Schema: Array of /components/schemas/PatchRequest If we look at the description, we see that there is a schema file. Let's get the schema file with below command: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch.json # cat /tmp/patch.json { \"op\": \"add\", \"path\": \"string\", \"value\": {} } Let's modify this schema file to change the status of an attribute as below: In the above image, added two tasks. To know more about how we can modify this schema file to perform a specific task, follow this link: patch-request-schema Let's update an attribute by its inum value. In our case, inum : 6EEB. Before patching the selected attribute, you can check its properties using get-attributes-by-inum operation. Before patching the attribute, its properties are: { \"dn\": \"inum=6EEB,ou=attributes,o=jans\", \"inum\": \"6EEB\", \"selected\": false, \"name\": \"l\", \"displayName\": \"City\", \"description\": \"City\", \"dataType\": \"STRING\", \"status\": \"INACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansCustomPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"locality\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:l\", \"saml2Uri\": \"urn:oid:2.5.4.7\", \"urn\": \"urn:mace:dir:attribute-def:l\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null, \"jansHideOnDiscovery\": null } According to the schema file, There should be two changes, status and jansHideOnDiscovery . Let's perform the operation: /opt/jans/jans-cli/config-cli.py --operation-id patch-attributes-by-inum --url-suffix inum:6EEB --data /tmp/patch.json The updated attribute looks like: Getting access token for scope https://jans.io/oauth/config/attributes.write Server Response: { \"dn\": \"inum=6EEB,ou=attributes,o=jans\", \"inum\": \"6EEB\", \"selected\": false, \"name\": \"l\", \"displayName\": \"City\", \"description\": \"City\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansCustomPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"locality\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:l\", \"saml2Uri\": \"urn:oid:2.5.4.7\", \"urn\": \"urn:mace:dir:attribute-def:l\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null, \"jansHideOnDiscovery\": true } As you see, there are two changes.","title":"Attribute"},{"location":"admin/config-guide/jans-cli/cli-attribute/#attribute","text":"First thing, let's get the information for Attribute : /opt/jans/jans-cli/config-cli.py --info Attribute In return, we get a list of Operations ID as below: Operation ID: get-all-attribute Description: Gets all attributes. Optionally max-size of the result, attribute status and pattern can be provided. Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] status: Status of the attribute [string] startIndex: The 1-based index of the first query result. [integer] sortBy: Attribute whose value will be used to order the returned response. [string] sortOrder: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\". [string] Operation ID: post-attributes Description: Adds a new attribute. Schema: /components/schemas/GluuAttribute Operation ID: put-attributes Description: Updates an existing attribute. Schema: /components/schemas/GluuAttribute Operation ID: get-attributes-by-inum Description: Gets an attribute based on inum. url-suffix: inum Operation ID: delete-attributes-by-inum Description: Deletes an attribute based on inum. url-suffix: inum Operation ID: patch-attributes-by-inum Description: Partially modify a GluuAttribute. url-suffix: inum Schema: Array of /components/schemas/PatchRequest To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest We have discussed here about each of this operations ID with few examples to understand how these really works.","title":"Attribute"},{"location":"admin/config-guide/jans-cli/cli-attribute/#table-of-contents","text":"Attribute Get Attributes Creating an Attribute Updating an Attribute Get Attribute by inum Delete Attributes Patch Attributes","title":"Table of Contents"},{"location":"admin/config-guide/jans-cli/cli-attribute/#get-attributes","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode As we know, Attributes are individual pieces of user data, like uid or email , that are required by applications in order to identify a user and grant access to protect resources. The user attributes that are available in your Janssen Server can be found by using this operation-ID. If we look at the description below: Operation ID: get-all-attribute Description: Gets all attributes. Optionally max-size of the result, attribute status and pattern can be provided. Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] status: Status of the attribute [string] startIndex: The 1-based index of the first query result. [integer] sortBy: Attribute whose value will be used to order the returned response. [string] sortOrder: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\". [string] To get all the attributes without any arguments, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-all-attribute To get attributes with passing the arguments, let's retrieve randomly limit:5: /opt/jans/jans-cli/config-cli.py --operation-id get-attributes --endpoint-args limit:5 It will return any 5 attributes randomly: Getting access token for scope https://jans.io/oauth/config/attributes.readonly Calling with params limit=5 [ { \"dn\": \"inum=B4B0,ou=attributes,o=jans\", \"inum\": \"B4B0\", \"selected\": false, \"name\": \"givenName\", \"displayName\": \"First Name\", \"description\": \"Given name(s) or first name(s) of the End-User.Note that in some cultures, people can have multiple given names;all can be present, with the names being separated by space characters.\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"given_name\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:givenName\", \"saml2Uri\": \"urn:oid:2.5.4.42\", \"urn\": \"urn:mace:dir:attribute-def:givenName\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null }, { \"dn\": \"inum=29DA,ou=attributes,o=jans\", \"inum\": \"29DA\", \"selected\": false, \"name\": \"inum\", \"displayName\": \"Inum\", \"description\": \"XRI i-number, persistent non-reassignable identifier\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": null, \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"inum\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:inum\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.117\", \"urn\": \"urn:jans:dir:attribute-def:inum\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null }, { \"dn\": \"inum=B52A,ou=attributes,o=jans\", \"inum\": \"B52A\", \"selected\": false, \"name\": \"jansPrefUsrName\", \"displayName\": \"Preferred Username\", \"description\": \"A domain issued and managed identifier for the person.Subject - Identifier for the End-User at the Issuer.\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"preferred_username\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:preferredUsername\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.320\", \"urn\": \"http://openid.net/specs/openid-connect-core-1_0.html/StandardClaims/preferred_username\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null }, { \"dn\": \"inum=64A0,ou=attributes,o=jans\", \"inum\": \"64A0\", \"selected\": false, \"name\": \"profile\", \"displayName\": \"Profile URL\", \"description\": \"URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"profile\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:profile\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.321\", \"urn\": \"http://openid.net/specs/openid-connect-core-1_0.html/StandardClaims/profile\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null }, { \"dn\": \"inum=42E0,ou=attributes,o=jans\", \"inum\": \"42E0\", \"selected\": false, \"name\": \"uid\", \"displayName\": \"Username\", \"description\": \"A domain issued and managed identifier for the person.Subject - Identifier for the End-User at the Issuer.\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"user_name\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:uid\", \"saml2Uri\": \"urn:oid:0.9.2342.19200300.100.1.1\", \"urn\": \"urn:mace:dir:attribute-def:uid\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null } ] To get attributes with pattern & status : /opt/jans/jans-cli/config-cli.py --operation-id get-attributes --endpoint-args limit:5,pattern:profile,status:ACTIVE In return, we get a list of attribute that are matched with the given pattern and status : Getting access token for scope https : //jans.io/oauth/config/attributes.readonly Calling with params limit = 5&pattern=profile&status=ACTIVE [ { \"dn\" : \"inum=EC3A,ou=attributes,o=jans\", \"inum\" : \"EC3A\", \"selected\" : false, \"name\" : \"picture\", \"displayName\" : \"Picture URL\", \"description\" : \"URL of the End-User's profile picture\", \"dataType\" : \"STRING\", \"status\" : \"ACTIVE\", \"lifetime\" : null, \"sourceAttribute\" : null, \"salt\" : null, \"nameIdType\" : null, \"origin\" : \"jansPerson\", \"editType\" : [ \"USER\", \"ADMIN\" ], \"viewType\" : [ \"USER\", \"ADMIN\" ], \"usageType\" : null, \"claimName\" : \"picture\", \"seeAlso\" : null, \"saml1Uri\" : \"urn:mace:dir:attribute-def:picture\", \"saml2Uri\" : \"urn:oid:1.3.6.1.4.1.48710.1.3.322\", \"urn\" : \"http://openid.net/specs/openid-connect-core-1_0.html/StandardClaims/picture\", \"scimCustomAttr\" : null, \"oxMultiValuedAttribute\" : false, \"custom\" : false, \"requred\" : false, \"attributeValidation\" : null, \"tooltip\" : null }, { \"dn\" : \"inum=64A0,ou=attributes,o=jans\", \"inum\" : \"64A0\", \"selected\" : false, \"name\" : \"profile\", \"displayName\" : \"Profile URL\", \"description\" : \"URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.\", \"dataType\" : \"STRING\", \"status\" : \"ACTIVE\", \"lifetime\" : null, \"sourceAttribute\" : null, \"salt\" : null, \"nameIdType\" : null, \"origin\" : \"jansPerson\", \"editType\" : [ \"USER\", \"ADMIN\" ], \"viewType\" : [ \"USER\", \"ADMIN\" ], \"usageType\" : null, \"claimName\" : \"profile\", \"seeAlso\" : null, \"saml1Uri\" : \"urn:mace:dir:attribute-def:profile\", \"saml2Uri\" : \"urn:oid:1.3.6.1.4.1.48710.1.3.321\", \"urn\" : \"http://openid.net/specs/openid-connect-core-1_0.html/StandardClaims/profile\", \"scimCustomAttr\" : null, \"oxMultiValuedAttribute\" : false, \"custom\" : false, \"requred\" : false, \"attributeValidation\" : null, \"tooltip\" : null } ]","title":"Get Attributes"},{"location":"admin/config-guide/jans-cli/cli-attribute/#creating-an-attribute","text":"To create SSO for certain applications, you may need to add custom attributes to your Janssen Server. Custom attributes can be added by using this operation-ID. It has a schema file where it's defined: the properties it needs to be filled to create a new custom attribute. Operation ID: post-attributes Description: Adds a new attribute. Schema: /components/schemas/GluuAttribute Before adding a new attribute, let's get sample schema : /opt/jans/jans-cli/config-cli.py --schema /components/schemas/GluuAttribute > /tmp/attribute.json It will return as below: { \"dn\": null, \"inum\": null, \"selected\": true, \"name\": \"name, displayName, birthdate, email\", \"displayName\": \"string\", \"description\": \"string\", \"dataType\": \"STRING\", \"status\": \"REGISTER\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": [], \"viewType\": \"array\", \"usageType\": [], \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": true, \"oxMultiValuedAttribute\": true, \"custom\": true, \"requred\": true, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null } Modify it to update attribute name , display name , view type : nano /tmp/attribute.json Now, let's add this attribute using post-attributes : /opt/jans/jans-cli/config-cli.py --operation-id post-attributes --data /tmp/attribute.json It will create a new attribute into the Attribute list with updated inum & dn : Getting access token for scope https://jans.io/oauth/config/attributes.write Server Response: { \"dn\": \"inum=256135af-56eb-43f3-9583-d7e9fc75c672,ou=attributes,o=jans\", \"inum\": \"256135af-56eb-43f3-9583-d7e9fc75c672\", \"selected\": false, \"name\": \"testAttribute\", \"displayName\": \"test Attribute\", \"description\": \"testing post-attributes\", \"dataType\": \"CERTIFICATE\", \"status\": \"REGISTER\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": null, \"viewType\": [ \"ADMIN\", \"OWNER\", \"USER\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": false, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null }","title":"Creating an Attribute"},{"location":"admin/config-guide/jans-cli/cli-attribute/#updating-an-attribute","text":"This operation-id can be used to update an existing attribute information. The Janssen Server administrator can make changes to attributes, such as changing their status to active/inactive by using this operation-ID. Let's look at the schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/GluuAttribute > /tmp/attrib.json You must see the similar schema while performed in post-attributes operation. To update an existing attribute, we have to ensure following properties in the schema file. In our case, I have modified the schema file as below: { \"dn\": \"inum=b691f2ab-a7db-4725-b85b-9961575b441f,ou=attributes,o=jans\", \"inum\": \"b691f2ab-a7db-4725-b85b-9961575b441f\", \"selected\": true, \"name\": \"testAttribute\", \"display_name\": \"testAttribute\", \"description\": \"testing put-attribute\", \"data_type\": \"STRING\", \"status\": \"ACTIVE\", \"edit_type\": [\"ADMIN\", \"OWNER\"], \"view_type\": [\"ADMIN\", \"OWNER\", \"USER\"] } Now if we run the below command line: /opt/jans/jans-cli/config-cli.py --operation-id put-attributes --data /tmp/attrb.json Getting access token for scope https://jans.io/oauth/config/attributes.write Server Response: { \"dn\": \"inum=b691f2ab-a7db-4725-b85b-9961575b441f,ou=attributes,o=jans\", \"inum\": \"b691f2ab-a7db-4725-b85b-9961575b441f\", \"selected\": false, \"name\": \"testAttribute\", \"displayName\": \"testAttribute\", \"description\": \"testing put-attribute\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": [ \"ADMIN\", \"OWNER\" ], \"viewType\": [ \"ADMIN\", \"OWNER\", \"USER\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null, \"jansHideOnDiscovery\": null } It just replace the previous value with new one.","title":"Updating an Attribute"},{"location":"admin/config-guide/jans-cli/cli-attribute/#get-attribute-by-inum","text":"As we know, There are a lot of attributes available in the Janssen Server including custom attributes as well. You may want to know details information for a single attribute uniquely identified by inum . Getting an attribute information by using its inum is pretty simple. /opt/jans/jans-cli/config-cli.py --operation-id get-attributes-by-inum --url-suffix inum:b691f2ab-a7db-4725-b85b-9961575b441f It will show all details information of the selected Attribute. Getting access token for scope https://jans.io/oauth/config/attributes.readonly { \"dn\": \"inum=b691f2ab-a7db-4725-b85b-9961575b441f,ou=attributes,o=jans\", \"inum\": \"b691f2ab-a7db-4725-b85b-9961575b441f\", \"selected\": false, \"name\": \"testAttribute\", \"displayName\": \"testAttribute\", \"description\": \"testing put-attribute\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": [ \"ADMIN\", \"OWNER\" ], \"viewType\": [ \"ADMIN\", \"OWNER\", \"USER\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null, \"jansHideOnDiscovery\": null }","title":"Get Attribute by inum"},{"location":"admin/config-guide/jans-cli/cli-attribute/#delete-attributes","text":"For any reason, If it needs to delete any attribute, you can do that simply using its inum value. See below example, just change the inum value with one that you want to delete. /opt/jans/jans-cli/config-cli.py --operation-id delete-attributes-by-inum --url-suffix inum:b691f2ab-a7db-4725-b85b-9961575b441f","title":"Delete Attributes"},{"location":"admin/config-guide/jans-cli/cli-attribute/#patch-attributes","text":"This operation can also used for updating an existing attribute by using its inum value. Operation ID: patch-attributes-by-inum Description: Partially modify a GluuAttribute. url-suffix: inum Schema: Array of /components/schemas/PatchRequest If we look at the description, we see that there is a schema file. Let's get the schema file with below command: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch.json # cat /tmp/patch.json { \"op\": \"add\", \"path\": \"string\", \"value\": {} } Let's modify this schema file to change the status of an attribute as below: In the above image, added two tasks. To know more about how we can modify this schema file to perform a specific task, follow this link: patch-request-schema Let's update an attribute by its inum value. In our case, inum : 6EEB. Before patching the selected attribute, you can check its properties using get-attributes-by-inum operation. Before patching the attribute, its properties are: { \"dn\": \"inum=6EEB,ou=attributes,o=jans\", \"inum\": \"6EEB\", \"selected\": false, \"name\": \"l\", \"displayName\": \"City\", \"description\": \"City\", \"dataType\": \"STRING\", \"status\": \"INACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansCustomPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"locality\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:l\", \"saml2Uri\": \"urn:oid:2.5.4.7\", \"urn\": \"urn:mace:dir:attribute-def:l\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null, \"jansHideOnDiscovery\": null } According to the schema file, There should be two changes, status and jansHideOnDiscovery . Let's perform the operation: /opt/jans/jans-cli/config-cli.py --operation-id patch-attributes-by-inum --url-suffix inum:6EEB --data /tmp/patch.json The updated attribute looks like: Getting access token for scope https://jans.io/oauth/config/attributes.write Server Response: { \"dn\": \"inum=6EEB,ou=attributes,o=jans\", \"inum\": \"6EEB\", \"selected\": false, \"name\": \"l\", \"displayName\": \"City\", \"description\": \"City\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansCustomPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": \"locality\", \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:l\", \"saml2Uri\": \"urn:oid:2.5.4.7\", \"urn\": \"urn:mace:dir:attribute-def:l\", \"scimCustomAttr\": null, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": null, \"tooltip\": null, \"jansHideOnDiscovery\": true } As you see, there are two changes.","title":"Patch Attributes"},{"location":"admin/config-guide/jans-cli/cli-cache-configuration/","tags":["administration","configuration","cli","commandline"],"text":"Cache Configuration # Prerequisite: Know how to use the Janssen CLI in command-line mode Cache Configuration supports two types of operation through the Single Line command of Janssen CLI. Let's get the information for Cache Configuration. /opt/jans/jans-cli/config-cli.py --info CacheConfiguration It prints below two operations: Operation ID: get-config-cache Description: Returns cache configuration. Operation ID: patch-config-cache Description: Partially modifies cache configuration. Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Table of Contents # Cache Configuration Table of Contents Get Cache Configuration Patch Cache Configuration Quick Patch Operation Get Cache Configuration # You can get the current Cache Configuration of your Janssen Server by performing this operation. /opt/jans/jans-cli/config-cli.py --operation-id get-config-cache It will show the Cache configuration with details. { \"cacheProviderType\": \"NATIVE_PERSISTENCE\", \"memcachedConfiguration\": { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32768, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" }, \"redisConfiguration\": { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 }, \"inMemoryConfiguration\": { \"defaultPutExpiration\": 60 }, \"nativePersistenceConfiguration\": { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } } Patch Cache Configuration # You may need to update Cache configuration, In that case patch-config-cache can be used to modify cache configuration. Operation ID: patch-config-cache Description: Partially modifies cache configuration. Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Let's see the sample schema of cache configuration. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch-cache.json { \"op\": \"add\", \"path\": \"string\", \"value\": {} } Let, We want to replace memcachedConfiguration/bufferSize : We can edit this json as follows (remember to make it an array): nano /tmp/patch-cache.json [ { \"op\": \"replace\", \"path\": \"memcachedConfiguration/bufferSize\", \"value\": \"32788\" } ] Now, let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id patch-config-cache --data /tmp/patch-cache.json Getting access token for scope https://jans.io/oauth/config/cache.write Server Response: { \"cacheProviderType\": \"NATIVE_PERSISTENCE\", \"memcachedConfiguration\": { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32788, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" }, \"redisConfiguration\": { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 }, \"inMemoryConfiguration\": { \"defaultPutExpiration\": 60 }, \"nativePersistenceConfiguration\": { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } You see bufferSize has changed. You may want to know more about patching cache configuration. Please, have a look to this link to know more about how you can modify the schema file. Quick Patch Operation # In case you need to do a quick patch operation, you can do that also. For example, let's say we would like to replace defaultPutExpiration value from nativePersistenceConfiguration . We can do that simply by the following command line: /opt/jans/jans-cli/config-cli.py --operation-id patch-config-cache --patch-replace nativePersistenceConfiguration/defaultPutExpiration:90 It will change the value with given one. There are few option to do such quick patch operations. Please check them out from here .","title":"Cache Configuration"},{"location":"admin/config-guide/jans-cli/cli-cache-configuration/#cache-configuration","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode Cache Configuration supports two types of operation through the Single Line command of Janssen CLI. Let's get the information for Cache Configuration. /opt/jans/jans-cli/config-cli.py --info CacheConfiguration It prints below two operations: Operation ID: get-config-cache Description: Returns cache configuration. Operation ID: patch-config-cache Description: Partially modifies cache configuration. Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest","title":"Cache Configuration"},{"location":"admin/config-guide/jans-cli/cli-cache-configuration/#table-of-contents","text":"Cache Configuration Table of Contents Get Cache Configuration Patch Cache Configuration Quick Patch Operation","title":"Table of Contents"},{"location":"admin/config-guide/jans-cli/cli-cache-configuration/#get-cache-configuration","text":"You can get the current Cache Configuration of your Janssen Server by performing this operation. /opt/jans/jans-cli/config-cli.py --operation-id get-config-cache It will show the Cache configuration with details. { \"cacheProviderType\": \"NATIVE_PERSISTENCE\", \"memcachedConfiguration\": { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32768, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" }, \"redisConfiguration\": { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 }, \"inMemoryConfiguration\": { \"defaultPutExpiration\": 60 }, \"nativePersistenceConfiguration\": { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } }","title":"Get Cache Configuration"},{"location":"admin/config-guide/jans-cli/cli-cache-configuration/#patch-cache-configuration","text":"You may need to update Cache configuration, In that case patch-config-cache can be used to modify cache configuration. Operation ID: patch-config-cache Description: Partially modifies cache configuration. Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Let's see the sample schema of cache configuration. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch-cache.json { \"op\": \"add\", \"path\": \"string\", \"value\": {} } Let, We want to replace memcachedConfiguration/bufferSize : We can edit this json as follows (remember to make it an array): nano /tmp/patch-cache.json [ { \"op\": \"replace\", \"path\": \"memcachedConfiguration/bufferSize\", \"value\": \"32788\" } ] Now, let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id patch-config-cache --data /tmp/patch-cache.json Getting access token for scope https://jans.io/oauth/config/cache.write Server Response: { \"cacheProviderType\": \"NATIVE_PERSISTENCE\", \"memcachedConfiguration\": { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32788, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" }, \"redisConfiguration\": { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 }, \"inMemoryConfiguration\": { \"defaultPutExpiration\": 60 }, \"nativePersistenceConfiguration\": { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } You see bufferSize has changed. You may want to know more about patching cache configuration. Please, have a look to this link to know more about how you can modify the schema file.","title":"Patch Cache Configuration"},{"location":"admin/config-guide/jans-cli/cli-cache-configuration/#quick-patch-operation","text":"In case you need to do a quick patch operation, you can do that also. For example, let's say we would like to replace defaultPutExpiration value from nativePersistenceConfiguration . We can do that simply by the following command line: /opt/jans/jans-cli/config-cli.py --operation-id patch-config-cache --patch-replace nativePersistenceConfiguration/defaultPutExpiration:90 It will change the value with given one. There are few option to do such quick patch operations. Please check them out from here .","title":"Quick Patch Operation"},{"location":"admin/config-guide/jans-cli/cli-couchbase-configuration/","tags":["administration","configuration","cli","commandline"],"text":"Couchbase Database Configuration # Prerequisite: Know how to use the Janssen CLI in command-line mode If your janssen server backend is connected with couchbase database then you can go with these operations instead of LDAP configuration . Let's get the couchbase database configuration operations details: /opt/jans/jans-cli/config-cli.py --info DatabaseCouchbaseConfiguration Operation ID: get-config-database-couchbase Description: Gets list of existing Couchbase configurations. Operation ID: post-config-database-couchbase Description: Adds a new Couchbase configuration. Schema: /components/schemas/CouchbaseConfiguration Operation ID: put-config-database-couchbase Description: Updates Couchbase configuration. Schema: /components/schemas/CouchbaseConfiguration Operation ID: get-config-database-couchbase-by-name Description: Gets a Couchbase configurations by name. url-suffix: name Operation ID: patch-config-database-couchbase-by-name Description: Partially modify an Couchbase configuration. url-suffix: name Schema: Array of /components/schemas/PatchRequest Operation ID: delete-config-database-couchbase-by-name Description: Deletes a Couchbase configurations by name. url-suffix: name Operation ID: post-config-database-couchbase-test Description: Tests a Couchbase configuration. Schema: /components/schemas/CouchbaseConfiguration To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CouchbaseConfiguration Get Couchbase Database Configuration details # To get the database configuration details, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-config-database-couchbase Adds new Database Configurations # To add a new couchbase database configuration into the janssen server: /opt/jans/jans-cli/config-cli.py --operation-id post-config-database-couchbase --data data.json Update/Replace old couchbase database configurations # To update or replace an couchbase database configuration: /opt/jans/jans-cli/config-cli.py --operation-id put-config-database-couchbase --data data.json Gets Couchbase Database Configuration by its name # To get the couchbase database configuration by its configId: /opt/jans/jans-cli/config-cli.py --operation-id get-config-database-couchbase-by-name --url-suffix name:configId-name Delete Couchbase Database Configuration # You can delete the couchbase database configuration by its name. The command line is: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-database-couchbase-by-name --url-suffix name:configId-name","title":"Couchbase Configuration"},{"location":"admin/config-guide/jans-cli/cli-couchbase-configuration/#couchbase-database-configuration","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode If your janssen server backend is connected with couchbase database then you can go with these operations instead of LDAP configuration . Let's get the couchbase database configuration operations details: /opt/jans/jans-cli/config-cli.py --info DatabaseCouchbaseConfiguration Operation ID: get-config-database-couchbase Description: Gets list of existing Couchbase configurations. Operation ID: post-config-database-couchbase Description: Adds a new Couchbase configuration. Schema: /components/schemas/CouchbaseConfiguration Operation ID: put-config-database-couchbase Description: Updates Couchbase configuration. Schema: /components/schemas/CouchbaseConfiguration Operation ID: get-config-database-couchbase-by-name Description: Gets a Couchbase configurations by name. url-suffix: name Operation ID: patch-config-database-couchbase-by-name Description: Partially modify an Couchbase configuration. url-suffix: name Schema: Array of /components/schemas/PatchRequest Operation ID: delete-config-database-couchbase-by-name Description: Deletes a Couchbase configurations by name. url-suffix: name Operation ID: post-config-database-couchbase-test Description: Tests a Couchbase configuration. Schema: /components/schemas/CouchbaseConfiguration To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CouchbaseConfiguration","title":"Couchbase Database Configuration"},{"location":"admin/config-guide/jans-cli/cli-couchbase-configuration/#get-couchbase-database-configuration-details","text":"To get the database configuration details, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-config-database-couchbase","title":"Get Couchbase Database Configuration details"},{"location":"admin/config-guide/jans-cli/cli-couchbase-configuration/#adds-new-database-configurations","text":"To add a new couchbase database configuration into the janssen server: /opt/jans/jans-cli/config-cli.py --operation-id post-config-database-couchbase --data data.json","title":"Adds new Database Configurations"},{"location":"admin/config-guide/jans-cli/cli-couchbase-configuration/#updatereplace-old-couchbase-database-configurations","text":"To update or replace an couchbase database configuration: /opt/jans/jans-cli/config-cli.py --operation-id put-config-database-couchbase --data data.json","title":"Update/Replace old couchbase database configurations"},{"location":"admin/config-guide/jans-cli/cli-couchbase-configuration/#gets-couchbase-database-configuration-by-its-name","text":"To get the couchbase database configuration by its configId: /opt/jans/jans-cli/config-cli.py --operation-id get-config-database-couchbase-by-name --url-suffix name:configId-name","title":"Gets Couchbase Database Configuration by its name"},{"location":"admin/config-guide/jans-cli/cli-couchbase-configuration/#delete-couchbase-database-configuration","text":"You can delete the couchbase database configuration by its name. The command line is: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-database-couchbase-by-name --url-suffix name:configId-name","title":"Delete Couchbase Database Configuration"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/","tags":["administration","configuration","cli","commandline"],"text":"Custom Scripts # Prerequisite: Know how to use the Janssen CLI in command-line mode Interception scripts can be used to implement custom business logic for authentication, authorization, and more in a way that is upgrade-proof and doesn't require forking the Gluu Server code. Using Janssen CLI, we can manage custom scripts as well. Let's get the task information using below command: /opt/jans/jans-cli/config-cli.py --info CustomScripts In return we gets each of the sub-task details: Operation ID: get-config-scripts Description: Gets a list of custom scripts. Operation ID: post-config-scripts Description: Adds a new custom script. Schema: /components/schemas/CustomScript Operation ID: put-config-scripts Description: Updates a custom script. Schema: /components/schemas/CustomScript Operation ID: get-config-scripts-by-type Description: Gets list of scripts by type. url-suffix: type Operation ID: get-config-scripts-by-inum Description: Gets a script by Inum. url-suffix: inum Operation ID: delete-config-scripts-by-inum Description: Deletes a custom script. url-suffix: inum To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript Let's perform each of this operation. Find list of Custom scripts # get-config-scripts operation id can be used to get a list of custom scripts of the Janssen Server. The command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts It returns all the custom scripts of the Janssen Server. You may get nagging here as it display lots of custom scripts together, nearly 40 custom scripts on the terminal. So, I would like to prefer use IM method in this case. Adds a New Custom Script # If we look at the description of this operation we see it supports schema: Operation ID: post-config-scripts Description: Adds a new custom script. Schema: /components/schemas/CustomScript So, let's get the schema first: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript > /tmp/cs.json { \"dn\": null, \"inum\": null, \"name\": \"string\", \"aliases\": [], \"description\": null, \"script\": \"_file /root/script.py\", \"scriptType\": \"INTROSPECTION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": { \"value1\": null, \"value2\": null, \"description\": null, \"hide\": true }, \"level\": \"integer\", \"revision\": 0, \"enabled\": false, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } We need to fill some of these properties with valid data to add this new script. { \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"_file /root/client_registration.py\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [{ \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" }], \"configurationProperties\": null, \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false } We can remove dn , inum . As because these two items are auto generated with random value. Also we see aliases , moduleproperties and configurationProperties are the array type keys . So we need to put data into [] otherwise it will raise an error. We can also use null value if we need to skip any of them. For scriptType we can choose only selected type of script from the below list. Name of the type of scripts # PERSON_AUTHENTICATION, INTROSPECTION, RESOURCE_OWNER_PASSWORD_CREDENTIALS, APPLICATION_SESSION, CACHE_REFRESH, CLIENT_REGISTRATION, ID_GENERATOR, UMA_RPT_POLICY, UMA_RPT_CLAIMS, UMA_CLAIMS_GATHERING, CONSENT_GATHERING, DYNAMIC_SCOPE, SPONTANEOUS_SCOPE, END_SESSION, POST_AUTHN, SCIM, CIBA_END_USER_NOTIFICATION, PERSISTENCE_EXTENSION, IDP, UPDATE_TOKEN Programming Language # Two types of programming language available there. Those are Python and JavaScript . We can choose any of them regarding the script we need to add. Alright, let's add the script using the command line we have: /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/cs.json Getting access token for scope https://jans.io/oauth/config/scripts.write Server Response: { \"dn\": \"inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans\", \"inum\": \"61aef81b-b22d-42c0-89d5-b098c976a2b7\", \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"...\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [ { \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" } ], \"configurationProperties\": null, \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false } Update an existing Custom Script # put-config-scripts operation-id can be used to update any existing script on the Janssen server. Operation ID: put-config-scripts Description: Updates a custom script. Schema: /components/schemas/CustomScript As we created a custom script in the above , let's update that one. So we know the dn:inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans and inum:61aef81b-b22d-42c0-89d5-b098c976a2b7 here. In this case, I have modified as below: { \"dn\": \"inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans\", \"inum\": \"61aef81b-b22d-42c0-89d5-b098c976a2b7\", \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"_file /root/client_registrationj.py\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [{ \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" }], \"configurationProperties\": [{ \"value1\": \"testconfigvalue1\", \"value2\": \"testconfigvalue2\", \"description\": \"description for configuration property\", \"hide\": true }], \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false } You can see, I have added configurationProperties for testing purpose only. In case you need to change the script, you can do that by changing the script path as well. /opt/jans/jans-cli/config-cli.py --operation-id put-config-scripts --data /tmp/cs.json Getting access token for scope https://jans.io/oauth/config/scripts.write Server Response: { \"dn\": \"inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans\", \"inum\": \"61aef81b-b22d-42c0-89d5-b098c976a2b7\", \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"...\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [ { \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" } ], \"configurationProperties\": [ { \"value1\": \"testconfigvalue1\", \"value2\": \"testconfigvalue2\", \"description\": \"description for configuration property\", \"hide\": true } ], \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false } Get Custom Script by type # With this operation-id, we can find a specific type of scripts. It uses url-suffix to get the list of a single type scripts. Operation ID: get-config-scripts-by-type Description: Gets list of scripts by type. url-suffix: type The command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:script-type-name For an example, let's find all the scripts of CLIENT_REGISTRATION type. So, the command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:CLIENT_REGISTRATION It returns all the custom scripts that are related to the CLIENT_REGISTRATION type available in the Janssen Server. You will find the name of all the types here Get Custom Scripts by it's inum # In case we need to find out details configuration of any custom script, we can search by its unique inum value. Operation ID: get-config-scripts-by-inum Description: Gets a script by Inum. url-suffix: inum command line: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:inum_value For example, we can show details here that we already added in the Janssen Server and we know it's inum value is 61aef81b-b22d-42c0-89d5-b098c976a2b7 . In our case, the command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:61aef81b-b22d-42c0-89d5-b098c976a2b7 It returns the configuration of the custom script matched with the given inum value. Getting access token for scope https://jans.io/oauth/config/scripts.readonly { \"dn\": \"inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans\", \"inum\": \"61aef81b-b22d-42c0-89d5-b098c976a2b7\", \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"...\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [ { \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" } ], \"configurationProperties\": [ { \"value1\": \"testconfigvalue1\", \"value2\": \"testconfigvalue2\", \"description\": \"description for configuration property\", \"hide\": true } ], \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false } How to delete Custom Script? # Well, we can delete any custom script also in deed. In that case, we need to remember the inum value of the custom script we want to delete. In the above we added , updated a custom script. We know the inum value, so let's delete this one. Command line: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-scripts-by-inum --url-suffix inum:inum_value For example, in our case; the command line is: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-scripts-by-inum --url-suffix inum:61aef81b-b22d-42c0-89d5-b098c976a2b7 That's all for Custom Script management with CLI feature. You can check IM method from here .","title":"Custom Scripts"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/#custom-scripts","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode Interception scripts can be used to implement custom business logic for authentication, authorization, and more in a way that is upgrade-proof and doesn't require forking the Gluu Server code. Using Janssen CLI, we can manage custom scripts as well. Let's get the task information using below command: /opt/jans/jans-cli/config-cli.py --info CustomScripts In return we gets each of the sub-task details: Operation ID: get-config-scripts Description: Gets a list of custom scripts. Operation ID: post-config-scripts Description: Adds a new custom script. Schema: /components/schemas/CustomScript Operation ID: put-config-scripts Description: Updates a custom script. Schema: /components/schemas/CustomScript Operation ID: get-config-scripts-by-type Description: Gets list of scripts by type. url-suffix: type Operation ID: get-config-scripts-by-inum Description: Gets a script by Inum. url-suffix: inum Operation ID: delete-config-scripts-by-inum Description: Deletes a custom script. url-suffix: inum To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript Let's perform each of this operation.","title":"Custom Scripts"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/#find-list-of-custom-scripts","text":"get-config-scripts operation id can be used to get a list of custom scripts of the Janssen Server. The command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts It returns all the custom scripts of the Janssen Server. You may get nagging here as it display lots of custom scripts together, nearly 40 custom scripts on the terminal. So, I would like to prefer use IM method in this case.","title":"Find list of Custom scripts"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/#adds-a-new-custom-script","text":"If we look at the description of this operation we see it supports schema: Operation ID: post-config-scripts Description: Adds a new custom script. Schema: /components/schemas/CustomScript So, let's get the schema first: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript > /tmp/cs.json { \"dn\": null, \"inum\": null, \"name\": \"string\", \"aliases\": [], \"description\": null, \"script\": \"_file /root/script.py\", \"scriptType\": \"INTROSPECTION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": { \"value1\": null, \"value2\": null, \"description\": null, \"hide\": true }, \"level\": \"integer\", \"revision\": 0, \"enabled\": false, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } We need to fill some of these properties with valid data to add this new script. { \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"_file /root/client_registration.py\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [{ \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" }], \"configurationProperties\": null, \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false } We can remove dn , inum . As because these two items are auto generated with random value. Also we see aliases , moduleproperties and configurationProperties are the array type keys . So we need to put data into [] otherwise it will raise an error. We can also use null value if we need to skip any of them. For scriptType we can choose only selected type of script from the below list.","title":"Adds a New Custom Script"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/#name-of-the-type-of-scripts","text":"PERSON_AUTHENTICATION, INTROSPECTION, RESOURCE_OWNER_PASSWORD_CREDENTIALS, APPLICATION_SESSION, CACHE_REFRESH, CLIENT_REGISTRATION, ID_GENERATOR, UMA_RPT_POLICY, UMA_RPT_CLAIMS, UMA_CLAIMS_GATHERING, CONSENT_GATHERING, DYNAMIC_SCOPE, SPONTANEOUS_SCOPE, END_SESSION, POST_AUTHN, SCIM, CIBA_END_USER_NOTIFICATION, PERSISTENCE_EXTENSION, IDP, UPDATE_TOKEN","title":"Name of the type of scripts"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/#programming-language","text":"Two types of programming language available there. Those are Python and JavaScript . We can choose any of them regarding the script we need to add. Alright, let's add the script using the command line we have: /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/cs.json Getting access token for scope https://jans.io/oauth/config/scripts.write Server Response: { \"dn\": \"inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans\", \"inum\": \"61aef81b-b22d-42c0-89d5-b098c976a2b7\", \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"...\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [ { \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" } ], \"configurationProperties\": null, \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false }","title":"Programming Language"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/#update-an-existing-custom-script","text":"put-config-scripts operation-id can be used to update any existing script on the Janssen server. Operation ID: put-config-scripts Description: Updates a custom script. Schema: /components/schemas/CustomScript As we created a custom script in the above , let's update that one. So we know the dn:inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans and inum:61aef81b-b22d-42c0-89d5-b098c976a2b7 here. In this case, I have modified as below: { \"dn\": \"inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans\", \"inum\": \"61aef81b-b22d-42c0-89d5-b098c976a2b7\", \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"_file /root/client_registrationj.py\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [{ \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" }], \"configurationProperties\": [{ \"value1\": \"testconfigvalue1\", \"value2\": \"testconfigvalue2\", \"description\": \"description for configuration property\", \"hide\": true }], \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false } You can see, I have added configurationProperties for testing purpose only. In case you need to change the script, you can do that by changing the script path as well. /opt/jans/jans-cli/config-cli.py --operation-id put-config-scripts --data /tmp/cs.json Getting access token for scope https://jans.io/oauth/config/scripts.write Server Response: { \"dn\": \"inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans\", \"inum\": \"61aef81b-b22d-42c0-89d5-b098c976a2b7\", \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"...\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [ { \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" } ], \"configurationProperties\": [ { \"value1\": \"testconfigvalue1\", \"value2\": \"testconfigvalue2\", \"description\": \"description for configuration property\", \"hide\": true } ], \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false }","title":"Update an existing Custom Script"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/#get-custom-script-by-type","text":"With this operation-id, we can find a specific type of scripts. It uses url-suffix to get the list of a single type scripts. Operation ID: get-config-scripts-by-type Description: Gets list of scripts by type. url-suffix: type The command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:script-type-name For an example, let's find all the scripts of CLIENT_REGISTRATION type. So, the command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:CLIENT_REGISTRATION It returns all the custom scripts that are related to the CLIENT_REGISTRATION type available in the Janssen Server. You will find the name of all the types here","title":"Get Custom Script by type"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/#get-custom-scripts-by-its-inum","text":"In case we need to find out details configuration of any custom script, we can search by its unique inum value. Operation ID: get-config-scripts-by-inum Description: Gets a script by Inum. url-suffix: inum command line: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:inum_value For example, we can show details here that we already added in the Janssen Server and we know it's inum value is 61aef81b-b22d-42c0-89d5-b098c976a2b7 . In our case, the command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:61aef81b-b22d-42c0-89d5-b098c976a2b7 It returns the configuration of the custom script matched with the given inum value. Getting access token for scope https://jans.io/oauth/config/scripts.readonly { \"dn\": \"inum=61aef81b-b22d-42c0-89d5-b098c976a2b7,ou=scripts,o=jans\", \"inum\": \"61aef81b-b22d-42c0-89d5-b098c976a2b7\", \"name\": \"custom_script_client\", \"aliases\": null, \"description\": \"Testing custom script addition\", \"script\": \"...\", \"scriptType\": \"CLIENT_REGISTRATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [ { \"value1\": \"myvalue1\", \"value2\": \"myvalue2\", \"description\": \"description for this property\" } ], \"configurationProperties\": [ { \"value1\": \"testconfigvalue1\", \"value2\": \"testconfigvalue2\", \"description\": \"description for configuration property\", \"hide\": true } ], \"level\": 100, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false }","title":"Get Custom Scripts by it's inum"},{"location":"admin/config-guide/jans-cli/cli-custom-scripts/#how-to-delete-custom-script","text":"Well, we can delete any custom script also in deed. In that case, we need to remember the inum value of the custom script we want to delete. In the above we added , updated a custom script. We know the inum value, so let's delete this one. Command line: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-scripts-by-inum --url-suffix inum:inum_value For example, in our case; the command line is: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-scripts-by-inum --url-suffix inum:61aef81b-b22d-42c0-89d5-b098c976a2b7 That's all for Custom Script management with CLI feature. You can check IM method from here .","title":"How to delete Custom Script?"},{"location":"admin/config-guide/jans-cli/cli-default-authentication-method/","tags":["administration","configuration","cli","commandline"],"text":"Default Authentication Method # Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get the information of Default Authentication Method : /opt/jans/jans-cli/config-cli.py --info DefaultAuthenticationMethod Operation ID: get-acrs Description: Gets default authentication method. Operation ID: put-acrs Description: Updates default authentication method. Schema: /components/schemas/AuthenticationMethod To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/AuthenticationMethod Table of Contents # Default AUthentication Method Find Current Authentication Method Update Default Authentication Method Find Current Authentication Method # To get the default authentication method: /opt/jans/jans-cli/config-cli.py --operation-id get-acrs Getting access token for scope https://jans.io/oauth/config/acrs.readonly { \"defaultAcr\": \"simple_password_auth\" } Update Default Authentication Method # Let's update the Default Authentication Method using janssen CLI command line. To perform the put-acrs operation, we have to use its schema. To get its schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/AuthenticationMethod > /tmp/patch-default-auth.json { \"defaultAcr\": null } It will create a .json file with a schema. It comes with a null value. We need to modify this file to update default acr. we have seen that our Default Authentication Method is simple_password_auth . We are going to update it with passport_saml authenitcation method. nano /tmp/patch-default-auth.json Now let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/patch-default-auth.json It will show the updated result.","title":"Default Authentication"},{"location":"admin/config-guide/jans-cli/cli-default-authentication-method/#default-authentication-method","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get the information of Default Authentication Method : /opt/jans/jans-cli/config-cli.py --info DefaultAuthenticationMethod Operation ID: get-acrs Description: Gets default authentication method. Operation ID: put-acrs Description: Updates default authentication method. Schema: /components/schemas/AuthenticationMethod To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/AuthenticationMethod","title":"Default Authentication Method"},{"location":"admin/config-guide/jans-cli/cli-default-authentication-method/#table-of-contents","text":"Default AUthentication Method Find Current Authentication Method Update Default Authentication Method","title":"Table of Contents"},{"location":"admin/config-guide/jans-cli/cli-default-authentication-method/#find-current-authentication-method","text":"To get the default authentication method: /opt/jans/jans-cli/config-cli.py --operation-id get-acrs Getting access token for scope https://jans.io/oauth/config/acrs.readonly { \"defaultAcr\": \"simple_password_auth\" }","title":"Find Current Authentication Method"},{"location":"admin/config-guide/jans-cli/cli-default-authentication-method/#update-default-authentication-method","text":"Let's update the Default Authentication Method using janssen CLI command line. To perform the put-acrs operation, we have to use its schema. To get its schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/AuthenticationMethod > /tmp/patch-default-auth.json { \"defaultAcr\": null } It will create a .json file with a schema. It comes with a null value. We need to modify this file to update default acr. we have seen that our Default Authentication Method is simple_password_auth . We are going to update it with passport_saml authenitcation method. nano /tmp/patch-default-auth.json Now let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/patch-default-auth.json It will show the updated result.","title":"Update Default Authentication Method"},{"location":"admin/config-guide/jans-cli/cli-group/","tags":["administration","configuration","cli","commandline"],"text":"Group Resources # Prerequisite: Know how to use the Janssen CLI in command-line mode Group resources are used to manage user resources easily with some operations. If you run the below command, then you will get a list of operations as below: root@testjans:~# /opt/jans/jans-cli/scim-cli.py --info Group Operation ID: get-groups Description: Query Group resources (see section 3.4.2 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] filter: An expression specifying the search criteria. See section 3.4.2.2 of RFC 7644 [string] startIndex: The 1-based index of the first query result [integer] count: Specifies the desired maximum number of query results per page [integer] sortBy: The attribute whose value will be used to order the returned responses [string] sortOrder: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\" [string] Operation ID: create-group Description: Allows creating a Group resource via POST (see section 3.3 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] Schema: /components/schemas/GroupResource Schema: /components/schemas/GroupResource Operation ID: get-group-by-id Description: Retrieves a Group resource by Id (see section 3.4.1 of RFC 7644) url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Operation ID: update-group-by-id Description: Updates a Group resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/GroupResource Schema: /components/schemas/GroupResource Operation ID: delete-group-by-id Description: Deletes a group resource (see section 3.6 of RFC 7644) url-suffix: id Parameters: id: Identifier of the resource to delete [string] Operation ID: patch-group-by-id Description: Updates one or more attributes of a Group resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/PatchRequest Schema: /components/schemas/PatchRequest Operation ID: search-group Description: Query Group resources (see section 3.4.2 of RFC 7644) Schema: /components/schemas/SearchRequest Schema: /components/schemas/SearchRequest To get sample schema type /opt/jans/jans-cli/scim-cli.py --schema <schma>, for example /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/SearchRequest root@testjans:~# Table of Contents # Group Resources Get Groups Create Group Get Group by ID Update Group by ID Delete Group by ID Patch Group Search Group Get Groups # This operation can be used to get list of groups that are used to organize user resources. Let's run the below command: # /opt/jans/jans-cli/scim-cli.py --operation-id get-users It will show the list of groups with all the members linked with each of the group. You can filter for the advanced search with some of its properties: attributes excludeAttributes filter count [define maximum number of query] sortBy [attribute] sortOrder ['ascending', 'descending'] Getting access token for scope https://jans.io/scim/groups.read { \"Resources\": [ { \"displayName\": \"Jannsen Manager Group\", \"members\": [ { \"$ref\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df\", \"type\": \"User\", \"display\": \"Default Admin User\", \"value\": \"e0b8a6a5-1955-49d7-acba-55a75b2373df\" } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"60B7\", \"meta\": { \"resourceType\": \"Group\", \"created\": null, \"lastModified\": null, \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/60B7\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 } root@testjans:~# Create Group # This operation can be used to create group resources to manage user resources. Operation ID: create-group Description: Allows creating a Group resource via POST (see section 3.3 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] Schema: /components/schemas/GroupResource So, let's get first the schema, to get schema: /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/GroupResource root@testjans:~# /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/GroupResource { \"displayName\": null, \"members\": { \"$ref\": null, \"type\": null, \"display\": null, \"value\": null }, \"schemas\": [], \"id\": null, \"meta\": { \"resourceType\": null, \"created\": null, \"lastModified\": null, \"location\": null } } The schema defines the properties of an attribute.Just Create a json file with each properties in schema filling by a value. As you see, I have removed members from the schema. We will add members in this group later. Let's use the command to create the group with this data. /opt/jans/jans-cli/scim-cli.py --operation-id create-group --data group.json Getting access token for scope https://jans.io/scim/groups.write Server Response: { \"displayName\": \"Jannsen Test Group\", \"members\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"766ffd8c-88a8-4aa8-a430-a5b3ae809c21\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-14T19:54:03.091Z\", \"lastModified\": \"2021-04-14T19:54:03.091Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/766ffd8c-88a8-4aa8-a430-a5b3ae809c21\" } } To verify let's use the get-groups operation id: root@testjans:~# /opt/jans/jans-cli/scim-cli.py --operation-id get-groups Getting access token for scope https://jans.io/scim/groups.read { \"Resources\": [ { \"displayName\": \"Jannsen Manager Group\", \"members\": [ { \"$ref\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df\", \"type\": \"User\", \"display\": \"Default Admin User\", \"value\": \"e0b8a6a5-1955-49d7-acba-55a75b2373df\" } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"60B7\", \"meta\": { \"resourceType\": \"Group\", \"created\": null, \"lastModified\": null, \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/60B7\" } }, { \"displayName\": \"Jannsen Test Group\", \"members\": [], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"766ffd8c-88a8-4aa8-a430-a5b3ae809c21\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-14T19:54:03.091Z\", \"lastModified\": \"2021-04-14T19:54:03.091Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/766ffd8c-88a8-4aa8-a430-a5b3ae809c21\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 2, \"startIndex\": 1, \"itemsPerPage\": 2 } root@testjans:~# Get Group by ID # If you have an id of a group resource, Then you can view its properties through this operation. Operation ID: get-group-by-id Description: Retrieves a Group resource by Id (see section 3.4.1 of RFC 7644) url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] In our case, id:766ffd8c-88a8-4aa8-a430-a5b3ae809c21 that's created while performing the create-group operation. /opt/jans/jans-cli/scim-cli.py --operation-id get-group-by-id --url-suffix id:766ffd8c-88a8-4aa8-a430-a5b3ae809c21 In return, you must see the group resources linked with the id: Getting access token for scope https://jans.io/scim/groups.read { \"displayName\": \"Jannsen Test Group\", \"members\": [], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"766ffd8c-88a8-4aa8-a430-a5b3ae809c21\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-14T19:54:03.091Z\", \"lastModified\": \"2021-04-14T19:54:03.091Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/766ffd8c-88a8-4aa8-a430-a5b3ae809c21\" } } Update Group by ID # If we look at the description, We see this op-mode needs url-suffix as id and schema definition for data. Operation ID: update-group-by-id Description: Updates a Group resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/GroupResource Let's get the schema first: /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/GroupResource > /tmp/group.json let's modify this schema to add members into a selected group: displayName: It should be a group name id: Selected group id which one you want to updae meta: Meta data of the selected group Now let's add this member into the group we are going to update. root@testjans:~# /opt/jans/jans-cli/scim-cli.py --operation-id update-group-by-id --data /tmp/group.json --url-suffix id:56030854-2784-408e-8fa7-e11835804ac7 Getting access token for scope https://jans.io/scim/groups.write Server Response: { \"displayName\": \"Test Janssen Server\", \"members\": [ { \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/null\", \"type\": \"User\", \"display\": null, \"value\": null } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"56030854-2784-408e-8fa7-e11835804ac7\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-19T22:15:15.151Z\", \"lastModified\": \"2021-04-21T16:22:24.085Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/56030854-2784-408e-8fa7-e11835804ac7\" } } root@testjans:~# That's how we can update a group using this operation method. Please remember one thing, this update method just replace the data. If you want to add members instead of replacing then you must try patch-group-by-id . Delete Group by ID # You can delete a group by its ID. The command line looks like: /opt/jans/jans-cli/scim-cli.py --operation-id delete-group-by-id --url-suffix id:56030854-2784-408e-8fa7-e11835804ac7 It will delete the group and all of its data matched with the unique ID. root@testjans:~# /opt/jans/jans-cli/scim-cli.py --operation-id delete-group-by-id --url-suffix id:56030854-2784-408e-8fa7-e11835804ac7 Getting access token for scope https://jans.io/scim/groups.write Patch Group # This is also an option to update any existing group resources. The only difference between update-group-by-id and patch-group is that the first one just replace new data with previous data. It won't add any new data into the group. But Patch-group supports few more operations including replace. Like, You can test , add , replace , delete , copy any data from a Group resource. If wee look at the description: Operation ID: patch-group-by-id Description: Updates one or more attributes of a Group resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/PatchRequest As we see, It has a schema file. So, Let's get the schema: Search Group #","title":"SCIM Group Management"},{"location":"admin/config-guide/jans-cli/cli-group/#group-resources","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode Group resources are used to manage user resources easily with some operations. If you run the below command, then you will get a list of operations as below: root@testjans:~# /opt/jans/jans-cli/scim-cli.py --info Group Operation ID: get-groups Description: Query Group resources (see section 3.4.2 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] filter: An expression specifying the search criteria. See section 3.4.2.2 of RFC 7644 [string] startIndex: The 1-based index of the first query result [integer] count: Specifies the desired maximum number of query results per page [integer] sortBy: The attribute whose value will be used to order the returned responses [string] sortOrder: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\" [string] Operation ID: create-group Description: Allows creating a Group resource via POST (see section 3.3 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] Schema: /components/schemas/GroupResource Schema: /components/schemas/GroupResource Operation ID: get-group-by-id Description: Retrieves a Group resource by Id (see section 3.4.1 of RFC 7644) url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Operation ID: update-group-by-id Description: Updates a Group resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/GroupResource Schema: /components/schemas/GroupResource Operation ID: delete-group-by-id Description: Deletes a group resource (see section 3.6 of RFC 7644) url-suffix: id Parameters: id: Identifier of the resource to delete [string] Operation ID: patch-group-by-id Description: Updates one or more attributes of a Group resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/PatchRequest Schema: /components/schemas/PatchRequest Operation ID: search-group Description: Query Group resources (see section 3.4.2 of RFC 7644) Schema: /components/schemas/SearchRequest Schema: /components/schemas/SearchRequest To get sample schema type /opt/jans/jans-cli/scim-cli.py --schema <schma>, for example /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/SearchRequest root@testjans:~#","title":"Group Resources"},{"location":"admin/config-guide/jans-cli/cli-group/#table-of-contents","text":"Group Resources Get Groups Create Group Get Group by ID Update Group by ID Delete Group by ID Patch Group Search Group","title":"Table of Contents"},{"location":"admin/config-guide/jans-cli/cli-group/#get-groups","text":"This operation can be used to get list of groups that are used to organize user resources. Let's run the below command: # /opt/jans/jans-cli/scim-cli.py --operation-id get-users It will show the list of groups with all the members linked with each of the group. You can filter for the advanced search with some of its properties: attributes excludeAttributes filter count [define maximum number of query] sortBy [attribute] sortOrder ['ascending', 'descending'] Getting access token for scope https://jans.io/scim/groups.read { \"Resources\": [ { \"displayName\": \"Jannsen Manager Group\", \"members\": [ { \"$ref\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df\", \"type\": \"User\", \"display\": \"Default Admin User\", \"value\": \"e0b8a6a5-1955-49d7-acba-55a75b2373df\" } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"60B7\", \"meta\": { \"resourceType\": \"Group\", \"created\": null, \"lastModified\": null, \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/60B7\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 } root@testjans:~#","title":"Get Groups"},{"location":"admin/config-guide/jans-cli/cli-group/#create-group","text":"This operation can be used to create group resources to manage user resources. Operation ID: create-group Description: Allows creating a Group resource via POST (see section 3.3 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] Schema: /components/schemas/GroupResource So, let's get first the schema, to get schema: /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/GroupResource root@testjans:~# /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/GroupResource { \"displayName\": null, \"members\": { \"$ref\": null, \"type\": null, \"display\": null, \"value\": null }, \"schemas\": [], \"id\": null, \"meta\": { \"resourceType\": null, \"created\": null, \"lastModified\": null, \"location\": null } } The schema defines the properties of an attribute.Just Create a json file with each properties in schema filling by a value. As you see, I have removed members from the schema. We will add members in this group later. Let's use the command to create the group with this data. /opt/jans/jans-cli/scim-cli.py --operation-id create-group --data group.json Getting access token for scope https://jans.io/scim/groups.write Server Response: { \"displayName\": \"Jannsen Test Group\", \"members\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"766ffd8c-88a8-4aa8-a430-a5b3ae809c21\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-14T19:54:03.091Z\", \"lastModified\": \"2021-04-14T19:54:03.091Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/766ffd8c-88a8-4aa8-a430-a5b3ae809c21\" } } To verify let's use the get-groups operation id: root@testjans:~# /opt/jans/jans-cli/scim-cli.py --operation-id get-groups Getting access token for scope https://jans.io/scim/groups.read { \"Resources\": [ { \"displayName\": \"Jannsen Manager Group\", \"members\": [ { \"$ref\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df\", \"type\": \"User\", \"display\": \"Default Admin User\", \"value\": \"e0b8a6a5-1955-49d7-acba-55a75b2373df\" } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"60B7\", \"meta\": { \"resourceType\": \"Group\", \"created\": null, \"lastModified\": null, \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/60B7\" } }, { \"displayName\": \"Jannsen Test Group\", \"members\": [], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"766ffd8c-88a8-4aa8-a430-a5b3ae809c21\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-14T19:54:03.091Z\", \"lastModified\": \"2021-04-14T19:54:03.091Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/766ffd8c-88a8-4aa8-a430-a5b3ae809c21\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 2, \"startIndex\": 1, \"itemsPerPage\": 2 } root@testjans:~#","title":"Create Group"},{"location":"admin/config-guide/jans-cli/cli-group/#get-group-by-id","text":"If you have an id of a group resource, Then you can view its properties through this operation. Operation ID: get-group-by-id Description: Retrieves a Group resource by Id (see section 3.4.1 of RFC 7644) url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] In our case, id:766ffd8c-88a8-4aa8-a430-a5b3ae809c21 that's created while performing the create-group operation. /opt/jans/jans-cli/scim-cli.py --operation-id get-group-by-id --url-suffix id:766ffd8c-88a8-4aa8-a430-a5b3ae809c21 In return, you must see the group resources linked with the id: Getting access token for scope https://jans.io/scim/groups.read { \"displayName\": \"Jannsen Test Group\", \"members\": [], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"766ffd8c-88a8-4aa8-a430-a5b3ae809c21\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-14T19:54:03.091Z\", \"lastModified\": \"2021-04-14T19:54:03.091Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/766ffd8c-88a8-4aa8-a430-a5b3ae809c21\" } }","title":"Get Group by ID"},{"location":"admin/config-guide/jans-cli/cli-group/#update-group-by-id","text":"If we look at the description, We see this op-mode needs url-suffix as id and schema definition for data. Operation ID: update-group-by-id Description: Updates a Group resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/GroupResource Let's get the schema first: /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/GroupResource > /tmp/group.json let's modify this schema to add members into a selected group: displayName: It should be a group name id: Selected group id which one you want to updae meta: Meta data of the selected group Now let's add this member into the group we are going to update. root@testjans:~# /opt/jans/jans-cli/scim-cli.py --operation-id update-group-by-id --data /tmp/group.json --url-suffix id:56030854-2784-408e-8fa7-e11835804ac7 Getting access token for scope https://jans.io/scim/groups.write Server Response: { \"displayName\": \"Test Janssen Server\", \"members\": [ { \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/null\", \"type\": \"User\", \"display\": null, \"value\": null } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"56030854-2784-408e-8fa7-e11835804ac7\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-19T22:15:15.151Z\", \"lastModified\": \"2021-04-21T16:22:24.085Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/56030854-2784-408e-8fa7-e11835804ac7\" } } root@testjans:~# That's how we can update a group using this operation method. Please remember one thing, this update method just replace the data. If you want to add members instead of replacing then you must try patch-group-by-id .","title":"Update Group by ID"},{"location":"admin/config-guide/jans-cli/cli-group/#delete-group-by-id","text":"You can delete a group by its ID. The command line looks like: /opt/jans/jans-cli/scim-cli.py --operation-id delete-group-by-id --url-suffix id:56030854-2784-408e-8fa7-e11835804ac7 It will delete the group and all of its data matched with the unique ID. root@testjans:~# /opt/jans/jans-cli/scim-cli.py --operation-id delete-group-by-id --url-suffix id:56030854-2784-408e-8fa7-e11835804ac7 Getting access token for scope https://jans.io/scim/groups.write","title":"Delete Group by ID"},{"location":"admin/config-guide/jans-cli/cli-group/#patch-group","text":"This is also an option to update any existing group resources. The only difference between update-group-by-id and patch-group is that the first one just replace new data with previous data. It won't add any new data into the group. But Patch-group supports few more operations including replace. Like, You can test , add , replace , delete , copy any data from a Group resource. If wee look at the description: Operation ID: patch-group-by-id Description: Updates one or more attributes of a Group resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/PatchRequest As we see, It has a schema file. So, Let's get the schema:","title":"Patch Group"},{"location":"admin/config-guide/jans-cli/cli-group/#search-group","text":"","title":"Search Group"},{"location":"admin/config-guide/jans-cli/cli-index/","tags":["administration","configuration","cli","commandline"],"text":"Command Line Interface # We will refer to this mode as CL . Using this mode is difficult compared to IM. The first is to get help, so type: /opt/jans/jans-cli/config-cli.py --help It will print all information about how to configure Janssen Server using CLI mode: usage: config-cli.py [-h] [--host HOST] [--client-id CLIENT_ID] [--client_secret CLIENT_SECRET] [--plugins PLUGINS] [-debug] [--debug-log-file DEBUG_LOG_FILE] [--operation-id OPERATION_ID] [--url-suffix URL_SUFFIX] [--info {Attribute,CacheConfiguration,CacheConfigurationInMemory,CacheConfigurationMemcached,CacheConfigurationNativePersistence,CacheConfigurationRedis,ConfigurationFido2,ConfigurationJWKJSONWebKeyJWK,ConfigurationLogging,ConfigurationProperties,ConfigurationSMTP,CustomScripts,DatabaseCouchbaseConfiguration,DatabaseLDAPConfiguration,DefaultAuthenticationMethod,OAuthOpenIDConnectClients,OAuthScopes,OAuthUMAResources}] [--op-mode {get,post,put,patch,delete}] [--endpoint-args ENDPOINT_ARGS] [--schema SCHEMA] [--username USERNAME] [--password PASSWORD] [-j J] [--cert-file CERT_FILE] [--key-file KEY_FILE] [-noverify] [--patch-add PATCH_ADD] [--patch-replace PATCH_REPLACE] [--patch-remove PATCH_REMOVE] [--data DATA] optional arguments: -h, --help show this help message and exit --host HOST Hostname of server --client-id CLIENT_ID Jans Config Api Client ID --client_secret CLIENT_SECRET Jans Config Api Client ID secret --plugins PLUGINS Available plugins separated by comma -debug Run in debug mode --debug-log-file DEBUG_LOG_FILE Log file name when run in debug mode --operation-id OPERATION_ID Operation ID to be done --url-suffix URL_SUFFIX Argument to be added api endpoint url. For example inum:2B29 --info {Attribute,CacheConfiguration,CacheConfigurationInMemory,CacheConfigurationMemcached,CacheConfigurationNativePersistence,CacheConfigurationRedis,ConfigurationFido2,ConfigurationJWKJSONWebKeyJWK,ConfigurationLogging,ConfigurationProperties,ConfigurationSMTP,CustomScripts,DatabaseCouchbaseConfiguration,DatabaseLDAPConfiguration,DefaultAuthenticationMethod,OAuthOpenIDConnectClients,OAuthScopes,OAuthUMAResources} Help for operation --op-mode {get,post,put,patch,delete} Operation mode to be done --endpoint-args ENDPOINT_ARGS Arguments to pass endpoint separated by comma. For example limit:5,status:INACTIVE --schema SCHEMA Get sample json schema --username USERNAME Auth username --password PASSWORD Auth password -j J Auth password file --cert-file CERT_FILE Path to SSL Certificate file --key-file KEY_FILE Path to SSL Key file -noverify Ignore verifying the SSL certificate --patch-add PATCH_ADD Colon delimited key:value pair for add patch operation. For example loggingLevel:DEBUG --patch-replace PATCH_REPLACE Colon delimited key:value pair for replace patch operation. For example loggingLevel:DEBUG --patch-remove PATCH_REMOVE Key for remove patch operation. For example imgLocation --data DATA Path to json data file root@testjans:~# We start with getting information about tasks, tasks are options of argument --info : Attribute, CacheConfiguration, CacheConfigurationInMemory, CacheConfigurationMemcached, CacheConfigurationNativePersistence, CacheConfigurationRedis, ConfigurationFido2, ConfigurationJWKJSONWebKeyJWK, ConfigurationLogging, ConfigurationProperties, ConfigurationSMTP, CustomScripts, DatabaseCouchbaseConfiguration, DatabaseLDAPConfiguration, DefaultAuthenticationMethod, OAuthOpenIDConnectClients, OAuthOpenIDConnectSectorIdentifiers, OAuthScopes, OAuthUMAResources To get information for a specific task we run command as below: /opt/jans/jans-cli/config-cli.py --info [task] for example: /opt/jans/jans-cli/config-cli.py --info DefaultAuthenticationMethod It returns with some operation id : Operation ID: get-acrs Description: Gets default authentication method. Operation ID: put-acrs Description: Updates default authentication method. Schema: /components/schemas/AuthenticationMethod To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/AuthenticationMethod To perform any operation, you have to run command line with the operation id. for example: /opt/jans/jans-cli/config-cli.py --operation-id get-acrs It returns: Getting access token for scope https://jans.io/oauth/config/acrs.readonly { \"defaultAcr\": \"simple_password_auth\" } This is how we can execute single line command to get information about the Janssen Server. Basic command-line switches # -h or --help to get all the formations of command line argument (ex; /opt/jans/jans-cli/config-cli.py -h ) --info to get formations about some operations id for a specific task (ex; opt/jans/jans-cli/config-cli.py --info User ) --operation-id usage to operate each of the sub-task --endpoint-args advanced usage for operation-id --data usage to share data in operations Patch Request (schema) # This schema file can be found in /components/schemas/PatchRequest for those which one support this operation. When you examine this sample schema, you will see three properties in an object: op, path, and value. op : operation to be done, one of add , remove , replace , move , copy , test path : Path of the property to be changed. use path separator / for config or . for SCIM to change a property inside an object. value : New value to be assigned for each property defined in path Multiple Patch Request (schema) # When we need to perform multiple patch operations on any configuration endpoint, Instead of doing one by one, we can create a json file including all individual operation into an array. To clarify, please see below json file: [ { \"op\": \"operation-name\", \"path\": \"configuration-path\", \"value\": \"Value\" }, { \"op\": \"operation-name\", \"path\": \"configuration-path\", \"value\": \"value\" }, { \"op\": \"operation-name\", \"path\": \"configuration-path\", \"value\": \"value\" } ... ... ... { \"op\": \"operation-name\", \"path\": \"configuration-path\", \"value\": \"value\" } ] This file contains multiple individual patch operation. In Patch Request (schema) we explained about each of these keys in the above json file. After creating the json file, just run the patch operation command. /opt/jans/jans-cli/config-cli.py --operation-id [patch operation id name] --data [json file absolute url] Quick Patch Operations # There is another patch request feature. It is a single line patch-request command line. It supports three types of operations: patch-replace : to replace value with new one. patch-add : it will add value into the key path. patch-remove : to remove value from any key path. The command line looks like below: /opt/jans/jans-cli/config-cli.py --operation-id [patch-operation-id] --[patch-operation-name] key:value for example: /opt/jans/jans-cli/config-cli.py --operation-id patch-config-cache --patch-replace memcachedConfiguration/bufferSize:32788 In this command line: - patch-config-cache is a operation-id from Cache Configurations task. - patch-replace type of operation; used to replace values in - memcachedConfiguration/bufferSize:32788 is a key:value pair CLI Authorization # To run operations on Janssen Server, CLI client will need to be authenticated and authorized by the server. Since CLI has limited input capabilities, it uses Device Authorization Grant flow to get required permissions in form of an access token. After successfully receiving the token, CLI can run operations on the Janssen server while the token is valid. The steps below will summarize this process. Execution of CLI command will return the following message if a valid token is not found. Access token was not found. Please visit verification url <Janssen-server-device-code-url> and enter user code CGFZ-RTZR in 1800 seconds Please press <<Enter>> when ready Take <Janssen-server-device-code-url> from the message above and use any browser to access it from a different device User will be presented with a page where the user has to authenticate using id and password After successful user authentication, the next screen allows the user to enter the user code. Use the user code presented on command-line instruction in step 1 above. After successful code validation, the user is presented with OAuth permissions screen. This screen would list all the permissions requested by Jans CLI. The user can choose to Allow or Not Allow granting of these permissions. After allowing the grant of requested permissions, the user should come back to the command-line interface and hit < > as instructed. This will enable CLI to run operations on the corresponding Janssen server.","title":"Overview"},{"location":"admin/config-guide/jans-cli/cli-index/#command-line-interface","text":"We will refer to this mode as CL . Using this mode is difficult compared to IM. The first is to get help, so type: /opt/jans/jans-cli/config-cli.py --help It will print all information about how to configure Janssen Server using CLI mode: usage: config-cli.py [-h] [--host HOST] [--client-id CLIENT_ID] [--client_secret CLIENT_SECRET] [--plugins PLUGINS] [-debug] [--debug-log-file DEBUG_LOG_FILE] [--operation-id OPERATION_ID] [--url-suffix URL_SUFFIX] [--info {Attribute,CacheConfiguration,CacheConfigurationInMemory,CacheConfigurationMemcached,CacheConfigurationNativePersistence,CacheConfigurationRedis,ConfigurationFido2,ConfigurationJWKJSONWebKeyJWK,ConfigurationLogging,ConfigurationProperties,ConfigurationSMTP,CustomScripts,DatabaseCouchbaseConfiguration,DatabaseLDAPConfiguration,DefaultAuthenticationMethod,OAuthOpenIDConnectClients,OAuthScopes,OAuthUMAResources}] [--op-mode {get,post,put,patch,delete}] [--endpoint-args ENDPOINT_ARGS] [--schema SCHEMA] [--username USERNAME] [--password PASSWORD] [-j J] [--cert-file CERT_FILE] [--key-file KEY_FILE] [-noverify] [--patch-add PATCH_ADD] [--patch-replace PATCH_REPLACE] [--patch-remove PATCH_REMOVE] [--data DATA] optional arguments: -h, --help show this help message and exit --host HOST Hostname of server --client-id CLIENT_ID Jans Config Api Client ID --client_secret CLIENT_SECRET Jans Config Api Client ID secret --plugins PLUGINS Available plugins separated by comma -debug Run in debug mode --debug-log-file DEBUG_LOG_FILE Log file name when run in debug mode --operation-id OPERATION_ID Operation ID to be done --url-suffix URL_SUFFIX Argument to be added api endpoint url. For example inum:2B29 --info {Attribute,CacheConfiguration,CacheConfigurationInMemory,CacheConfigurationMemcached,CacheConfigurationNativePersistence,CacheConfigurationRedis,ConfigurationFido2,ConfigurationJWKJSONWebKeyJWK,ConfigurationLogging,ConfigurationProperties,ConfigurationSMTP,CustomScripts,DatabaseCouchbaseConfiguration,DatabaseLDAPConfiguration,DefaultAuthenticationMethod,OAuthOpenIDConnectClients,OAuthScopes,OAuthUMAResources} Help for operation --op-mode {get,post,put,patch,delete} Operation mode to be done --endpoint-args ENDPOINT_ARGS Arguments to pass endpoint separated by comma. For example limit:5,status:INACTIVE --schema SCHEMA Get sample json schema --username USERNAME Auth username --password PASSWORD Auth password -j J Auth password file --cert-file CERT_FILE Path to SSL Certificate file --key-file KEY_FILE Path to SSL Key file -noverify Ignore verifying the SSL certificate --patch-add PATCH_ADD Colon delimited key:value pair for add patch operation. For example loggingLevel:DEBUG --patch-replace PATCH_REPLACE Colon delimited key:value pair for replace patch operation. For example loggingLevel:DEBUG --patch-remove PATCH_REMOVE Key for remove patch operation. For example imgLocation --data DATA Path to json data file root@testjans:~# We start with getting information about tasks, tasks are options of argument --info : Attribute, CacheConfiguration, CacheConfigurationInMemory, CacheConfigurationMemcached, CacheConfigurationNativePersistence, CacheConfigurationRedis, ConfigurationFido2, ConfigurationJWKJSONWebKeyJWK, ConfigurationLogging, ConfigurationProperties, ConfigurationSMTP, CustomScripts, DatabaseCouchbaseConfiguration, DatabaseLDAPConfiguration, DefaultAuthenticationMethod, OAuthOpenIDConnectClients, OAuthOpenIDConnectSectorIdentifiers, OAuthScopes, OAuthUMAResources To get information for a specific task we run command as below: /opt/jans/jans-cli/config-cli.py --info [task] for example: /opt/jans/jans-cli/config-cli.py --info DefaultAuthenticationMethod It returns with some operation id : Operation ID: get-acrs Description: Gets default authentication method. Operation ID: put-acrs Description: Updates default authentication method. Schema: /components/schemas/AuthenticationMethod To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/AuthenticationMethod To perform any operation, you have to run command line with the operation id. for example: /opt/jans/jans-cli/config-cli.py --operation-id get-acrs It returns: Getting access token for scope https://jans.io/oauth/config/acrs.readonly { \"defaultAcr\": \"simple_password_auth\" } This is how we can execute single line command to get information about the Janssen Server.","title":"Command Line Interface"},{"location":"admin/config-guide/jans-cli/cli-index/#basic-command-line-switches","text":"-h or --help to get all the formations of command line argument (ex; /opt/jans/jans-cli/config-cli.py -h ) --info to get formations about some operations id for a specific task (ex; opt/jans/jans-cli/config-cli.py --info User ) --operation-id usage to operate each of the sub-task --endpoint-args advanced usage for operation-id --data usage to share data in operations","title":"Basic command-line switches"},{"location":"admin/config-guide/jans-cli/cli-index/#patch-request-schema","text":"This schema file can be found in /components/schemas/PatchRequest for those which one support this operation. When you examine this sample schema, you will see three properties in an object: op, path, and value. op : operation to be done, one of add , remove , replace , move , copy , test path : Path of the property to be changed. use path separator / for config or . for SCIM to change a property inside an object. value : New value to be assigned for each property defined in path","title":"Patch Request (schema)"},{"location":"admin/config-guide/jans-cli/cli-index/#multiple-patch-request-schema","text":"When we need to perform multiple patch operations on any configuration endpoint, Instead of doing one by one, we can create a json file including all individual operation into an array. To clarify, please see below json file: [ { \"op\": \"operation-name\", \"path\": \"configuration-path\", \"value\": \"Value\" }, { \"op\": \"operation-name\", \"path\": \"configuration-path\", \"value\": \"value\" }, { \"op\": \"operation-name\", \"path\": \"configuration-path\", \"value\": \"value\" } ... ... ... { \"op\": \"operation-name\", \"path\": \"configuration-path\", \"value\": \"value\" } ] This file contains multiple individual patch operation. In Patch Request (schema) we explained about each of these keys in the above json file. After creating the json file, just run the patch operation command. /opt/jans/jans-cli/config-cli.py --operation-id [patch operation id name] --data [json file absolute url]","title":"Multiple Patch Request (schema)"},{"location":"admin/config-guide/jans-cli/cli-index/#quick-patch-operations","text":"There is another patch request feature. It is a single line patch-request command line. It supports three types of operations: patch-replace : to replace value with new one. patch-add : it will add value into the key path. patch-remove : to remove value from any key path. The command line looks like below: /opt/jans/jans-cli/config-cli.py --operation-id [patch-operation-id] --[patch-operation-name] key:value for example: /opt/jans/jans-cli/config-cli.py --operation-id patch-config-cache --patch-replace memcachedConfiguration/bufferSize:32788 In this command line: - patch-config-cache is a operation-id from Cache Configurations task. - patch-replace type of operation; used to replace values in - memcachedConfiguration/bufferSize:32788 is a key:value pair","title":"Quick Patch Operations"},{"location":"admin/config-guide/jans-cli/cli-index/#cli-authorization","text":"To run operations on Janssen Server, CLI client will need to be authenticated and authorized by the server. Since CLI has limited input capabilities, it uses Device Authorization Grant flow to get required permissions in form of an access token. After successfully receiving the token, CLI can run operations on the Janssen server while the token is valid. The steps below will summarize this process. Execution of CLI command will return the following message if a valid token is not found. Access token was not found. Please visit verification url <Janssen-server-device-code-url> and enter user code CGFZ-RTZR in 1800 seconds Please press <<Enter>> when ready Take <Janssen-server-device-code-url> from the message above and use any browser to access it from a different device User will be presented with a page where the user has to authenticate using id and password After successful user authentication, the next screen allows the user to enter the user code. Use the user code presented on command-line instruction in step 1 above. After successful code validation, the user is presented with OAuth permissions screen. This screen would list all the permissions requested by Jans CLI. The user can choose to Allow or Not Allow granting of these permissions. After allowing the grant of requested permissions, the user should come back to the command-line interface and hit < > as instructed. This will enable CLI to run operations on the corresponding Janssen server.","title":"CLI Authorization"},{"location":"admin/config-guide/jans-cli/cli-jans-authorization-server/","tags":["administration","configuration","cli","commandline"],"text":"Janssen Authorization Server # Prerequisite: Know how to use the Janssen CLI in command-line mode To get info about Jans Authorization Server operations: /opt/jans/jans-cli/config-cli.py --info ConfigurationProperties Operation ID: get-properties Description: Gets all Jans authorization server configuration properties. Operation ID: patch-properties Description: Partially modifies Jans authorization server AppConfiguration properties. Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Jans Authorization server has two operations id to get/modify its properties. Table of Contents # Janssen Authorization Server Table of Contents Get All Jans Auth Server Configuration Properties Partially Modify Jans Auth Server Configuration Properties Get All Jans Auth Server Configuration Properties # It returns all the information of the Jans Authorization server. /opt/jans/jans-cli/config-cli.py --operation-id get-properties Getting access token for scope https://jans.io/oauth/jans-auth-server/config/properties.readonly { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1\", \"authorizationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/authorize\", \"tokenEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/token\", \"tokenRevocationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/revoke\", \"userInfoEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/userinfo\", \"clientInfoEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/clientinfo\", \"checkSessionIFrame\": \"https://testjans.gluu.com/jans-auth/opiframe.htm\", \"endSessionEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/end_session\", \"jwksUri\": \"https://testjans.gluu.com/jans-auth/restv1/jwks\", \"registrationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/register\", \"openIdDiscoveryEndpoint\": \"https://testjans.gluu.com/.well-known/webfinger\", \"openIdConfigurationEndpoint\": \"https://testjans.gluu.com/.well-known/openid-configuration\", \"idGenerationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/id\", \"introspectionEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/introspection\", \"deviceAuthzEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/device_authorization\", \"sessionAsJwt\": false, \"sectorIdentifierCacheLifetimeInMinutes\": 1440, \"umaConfigurationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/uma2-configuration\", \"umaRptAsJwt\": false, \"umaRptLifetime\": 3600, \"umaTicketLifetime\": 3600, \"umaPctLifetime\": 2592000, \"umaResourceLifetime\": 2592000, \"umaAddScopesAutomatically\": true, \"umaValidateClaimToken\": false, \"umaGrantAccessIfNoPolicies\": false, \"umaRestrictResourceToAssociatedClient\": false, \"spontaneousScopeLifetime\": 86400, \"openidSubAttribute\": \"inum\", \"responseTypesSupported\": [ \"['code', 'token']\", \"['id_token', 'code', 'token']\", \"['id_token']\", \"['code']\", \"['token']\", \"['id_token', 'code']\", \"['id_token', 'token']\" ], \"responseModesSupported\": [ \"query\", \"form_post\", \"fragment\" ], \"grantTypesSupported\": [ \"password\", \"authorization_code\", \"refresh_token\", \"urn:ietf:params:oauth:grant-type:device_code\", \"client_credentials\", \"urn:ietf:params:oauth:grant-type:uma-ticket\", \"implicit\" ], \"subjectTypesSupported\": [ \"public\", \"pairwise\" ], \"defaultSubjectType\": [ \"p\", \"a\", \"i\", \"r\", \"w\", \"i\", \"s\", \"e\" ], \"userInfoSigningAlgValuesSupported\": [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"userInfoEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"userInfoEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"idTokenSigningAlgValuesSupported\": [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"idTokenEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"idTokenEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"requestObjectSigningAlgValuesSupported\": [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"requestObjectEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"requestObjectEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"tokenEndpointAuthMethodsSupported\": [ \"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\" ], \"tokenEndpointAuthSigningAlgValuesSupported\": [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"dynamicRegistrationCustomAttributes\": null, \"displayValuesSupported\": [ \"page\", \"popup\" ], \"claimTypesSupported\": [ \"normal\" ], \"jwksAlgorithmsSupported\": [ \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"RSA1_5\", \"RSA-OAEP\" ], \"serviceDocumentation\": [ \"h\", \"t\", \"t\", \"p\", \":\", \"/\", \"/\", \"j\", \"a\", \"n\", \"s\", \".\", \"o\", \"r\", \"g\", \"/\", \"d\", \"o\", \"c\", \"s\" ], \"claimsLocalesSupported\": [ \"en\" ], \"idTokenTokenBindingCnfValuesSupported\": [ \"tbh\" ], \"uiLocalesSupported\": [ \"en\", \"bg\", \"de\", \"es\", \"fr\", \"it\", \"ru\", \"tr\" ], \"claimsParameterSupported\": false, \"requestParameterSupported\": true, \"requestUriParameterSupported\": true, \"requestUriHashVerificationEnabled\": false, \"requireRequestUriRegistration\": false, \"opPolicyUri\": \"http://www.jans.io/doku.php?id=jans:policy\", \"opTosUri\": \"http://www.jans.io/doku.php?id=jans:tos\", \"authorizationCodeLifetime\": 60, \"refreshTokenLifetime\": 14400, \"idTokenLifetime\": 3600, \"idTokenFilterClaimsBasedOnAccessToken\": false, \"accessTokenLifetime\": 300, \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"cleanServiceBaseDns\": null, \"keyRegenerationEnabled\": true, \"keyRegenerationInterval\": 48, \"defaultSignatureAlgorithm\": [ \"R\", \"S\", \"2\", \"5\", \"6\" ], \"oxOpenIdConnectVersion\": \"openidconnect-1.0\", \"oxId\": \"https://testjans.gluu.com/oxid/service/jans/inum\", \"dynamicRegistrationEnabled\": true, \"dynamicRegistrationExpirationTime\": -1, \"dynamicRegistrationPersistClientAuthorizations\": true, \"trustedClientEnabled\": true, \"skipAuthorizationForOpenIdScopeAndPairwiseId\": false, \"dynamicRegistrationScopesParamEnabled\": true, \"dynamicRegistrationPasswordGrantTypeEnabled\": false, \"dynamicRegistrationAllowedPasswordGrantScopes\": null, \"dynamicRegistrationCustomObjectClass\": null, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"persistIdTokenInLdap\": false, \"persistRefreshTokenInLdap\": true, \"allowPostLogoutRedirectWithoutValidation\": false, \"invalidateSessionCookiesAfterAuthorizationFlow\": false, \"returnClientSecretOnRead\": true, \"rejectJwtWithNoneAlg\": true, \"expirationNotificatorEnabled\": false, \"useNestedJwtDuringEncryption\": true, \"expirationNotificatorMapSizeLimit\": 100000, \"expirationNotificatorIntervalInSeconds\": 600, \"authenticationFiltersEnabled\": false, \"clientAuthenticationFiltersEnabled\": false, \"clientRegDefaultToCodeFlowWithRefresh\": true, \"authenticationFilters\": [ { \"filter\": \"(&(mail=*{0}*)(inum={1}))\", \"bind\": false, \"bind-password-attribute\": null, \"base-dn\": null }, { \"filter\": \"uid={0}\", \"bind\": true, \"bind-password-attribute\": null, \"base-dn\": null } ], \"clientAuthenticationFilters\": [ { \"filter\": \"myCustomAttr1={0}\", \"bind\": null, \"bind-password-attribute\": null, \"base-dn\": null } ], \"corsConfigurationFilters\": [ { \"filterName\": \"CorsFilter\", \"corsEnabled\": true, \"corsAllowedOrigins\": \"*\", \"corsAllowedMethods\": \"GET,POST,HEAD,OPTIONS\", \"corsAllowedHeaders\": \"Origin,Authorization,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers\", \"corsExposedHeaders\": null, \"corsSupportCredentials\": true, \"corsLoggingEnabled\": false, \"corsPreflightMaxAge\": 1800, \"corsRequestDecorate\": true } ], \"sessionIdUnusedLifetime\": 86400, \"sessionIdUnauthenticatedUnusedLifetime\": 120, \"sessionIdEnabled\": true, \"sessionIdPersistOnPromptNone\": true, \"sessionIdRequestParameterEnabled\": false, \"changeSessionIdOnAuthentication\": true, \"sessionIdPersistInCache\": false, \"sessionIdLifetime\": 86400, \"serverSessionIdLifetime\": 86400, \"configurationUpdateInterval\": 3600, \"enableClientGrantTypeUpdate\": true, \"dynamicGrantTypeDefault\": [ \"authorization_code\", \"refresh_token\", \"urn:ietf:params:oauth:grant-type:device_code\", \"client_credentials\", \"urn:ietf:params:oauth:grant-type:uma-ticket\", \"implicit\" ], \"cssLocation\": null, \"jsLocation\": null, \"imgLocation\": null, \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": false, \"pairwiseIdType\": [ \"a\", \"l\", \"g\", \"o\", \"r\", \"i\", \"t\", \"h\", \"m\", \"i\", \"c\" ], \"pairwiseCalculationKey\": \"rYX4K1hkDOAc0ie6ESr6T4N2z\", \"pairwiseCalculationSalt\": \"1smvd6pswngMcjB4xVcMuIiuyH\", \"shareSubjectIdBetweenClientsWithSameSectorId\": true, \"webKeysStorage\": \"keystore\", \"dnName\": \"CN=Jans Auth CA Certificates\", \"keyStoreFile\": \"/etc/certs/jans-auth-keys.jks\", \"keyStoreSecret\": \"nXfbJvxuVRNi\", \"keySelectionStrategy\": \"OLDER\", \"oxElevenTestModeToken\": null, \"oxElevenGenerateKeyEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/generateKey\", \"oxElevenSignEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/sign\", \"oxElevenVerifySignatureEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/verifySignature\", \"oxElevenDeleteKeyEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/deleteKey\", \"introspectionAccessTokenMustHaveUmaProtectionScope\": false, \"endSessionWithAccessToken\": false, \"cookieDomain\": null, \"enabledOAuthAuditLogging\": null, \"jmsBrokerURISet\": null, \"jmsUserName\": null, \"jmsPassword\": null, \"clientWhiteList\": [ \"*\" ], \"clientBlackList\": [ \"*.attacker.com/*\" ], \"legacyIdTokenClaims\": false, \"customHeadersWithAuthorizationResponse\": true, \"frontChannelLogoutSessionSupported\": true, \"loggingLevel\": \"INFO\", \"loggingLayout\": \"text\", \"updateUserLastLogonTime\": false, \"updateClientAccessTime\": false, \"logClientIdOnClientAuthentication\": true, \"logClientNameOnClientAuthentication\": false, \"disableJdkLogger\": true, \"authorizationRequestCustomAllowedParameters\": [ \"customParam2\", \"customParam3\", \"customParam1\" ], \"legacyDynamicRegistrationScopeParam\": false, \"openidScopeBackwardCompatibility\": false, \"disableU2fEndpoint\": false, \"useLocalCache\": true, \"fapiCompatibility\": false, \"forceIdTokenHintPrecense\": false, \"forceOfflineAccessScopeToEnableRefreshToken\": true, \"errorReasonEnabled\": false, \"removeRefreshTokensForClientOnLogout\": true, \"skipRefreshTokenDuringRefreshing\": false, \"refreshTokenExtendLifetimeOnRotation\": false, \"consentGatheringScriptBackwardCompatibility\": false, \"introspectionScriptBackwardCompatibility\": false, \"introspectionResponseScopesBackwardCompatibility\": false, \"softwareStatementValidationType\": \"script\", \"softwareStatementValidationClaimName\": null, \"authenticationProtectionConfiguration\": { \"attemptExpiration\": 15, \"maximumAllowedAttemptsWithoutDelay\": 4, \"delayTime\": 2, \"bruteForceProtectionEnabled\": false }, \"errorHandlingMethod\": \"internal\", \"keepAuthenticatorAttributesOnAcrChange\": false, \"deviceAuthzRequestExpiresIn\": 1800, \"deviceAuthzTokenPollInterval\": 5, \"deviceAuthzResponseTypeToProcessAuthz\": \"code\", \"backchannelClientId\": null, \"backchannelRedirectUri\": \"https://testjans.gluu.com/jans-auth/ciba/home.htm\", \"backchannelAuthenticationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/bc-authorize\", \"backchannelDeviceRegistrationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/bc-deviceRegistration\", \"backchannelTokenDeliveryModesSupported\": [ \"poll\", \"ping\", \"push\" ], \"backchannelAuthenticationRequestSigningAlgValuesSupported\": null, \"backchannelUserCodeParameterSupported\": false, \"backchannelBindingMessagePattern\": \"^[a-zA-Z0-9]{4,8}$\", \"backchannelAuthenticationResponseExpiresIn\": 3600, \"backchannelAuthenticationResponseInterval\": 2, \"backchannelLoginHintClaims\": [ \"inum\", \"uid\", \"mail\" ], \"cibaEndUserNotificationConfig\": { \"apiKey\": null, \"authDomain\": null, \"databaseURL\": null, \"projectId\": null, \"storageBucket\": null, \"messagingSenderId\": null, \"appId\": null, \"notificationUrl\": null, \"notificationKey\": null, \"publicVapidKey\": null }, \"backchannelRequestsProcessorJobIntervalSec\": 5, \"backchannelRequestsProcessorJobChunkSize\": 100, \"cibaGrantLifeExtraTimeSec\": 180, \"cibaMaxExpirationTimeAllowedSec\": 1800, \"cibaEnabled\": false, \"discoveryCacheLifetimeInMinutes\": 60, \"httpLoggingEnabled\": false, \"httpLoggingExcludePaths\": null, \"externalLoggerConfiguration\": null, \"redirectUrisRegexEnabled\": false, \"useHighestLevelScriptIfAcrScriptNotFound\": true } Partially Modify Jans Auth Server Configuration Properties # Operation ID: patch-properties Description: Partially modifies Jans authorization server AppConfiguration properties. Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Let's look at the schema first: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch-jans-auth.json It will create a .json file in /tmp with schema. Let's modify this schema: nano /tmp/patch-jans-auth.json This schema has three properties; op , path & value . Let's perform a replace operation at cibaEnabled to change it from false to true . So, the .json file will look like this: [ { \"op\": \"replace\", \"path\": \"cibaEnabled\", \"value\": true } ] Don't forget to use square brackets ( [] ). Otherwise, it won't work. Now, let's do the operation. /opt/jans/jans-cli/config-cli.py --operation-id patch-properties --data /tmp/patch-jans-auth.json If you run the following command line, you must see that cibaEnabled is true :","title":"Auth Server Configuration"},{"location":"admin/config-guide/jans-cli/cli-jans-authorization-server/#janssen-authorization-server","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode To get info about Jans Authorization Server operations: /opt/jans/jans-cli/config-cli.py --info ConfigurationProperties Operation ID: get-properties Description: Gets all Jans authorization server configuration properties. Operation ID: patch-properties Description: Partially modifies Jans authorization server AppConfiguration properties. Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Jans Authorization server has two operations id to get/modify its properties.","title":"Janssen Authorization Server"},{"location":"admin/config-guide/jans-cli/cli-jans-authorization-server/#table-of-contents","text":"Janssen Authorization Server Table of Contents Get All Jans Auth Server Configuration Properties Partially Modify Jans Auth Server Configuration Properties","title":"Table of Contents"},{"location":"admin/config-guide/jans-cli/cli-jans-authorization-server/#get-all-jans-auth-server-configuration-properties","text":"It returns all the information of the Jans Authorization server. /opt/jans/jans-cli/config-cli.py --operation-id get-properties Getting access token for scope https://jans.io/oauth/jans-auth-server/config/properties.readonly { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1\", \"authorizationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/authorize\", \"tokenEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/token\", \"tokenRevocationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/revoke\", \"userInfoEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/userinfo\", \"clientInfoEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/clientinfo\", \"checkSessionIFrame\": \"https://testjans.gluu.com/jans-auth/opiframe.htm\", \"endSessionEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/end_session\", \"jwksUri\": \"https://testjans.gluu.com/jans-auth/restv1/jwks\", \"registrationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/register\", \"openIdDiscoveryEndpoint\": \"https://testjans.gluu.com/.well-known/webfinger\", \"openIdConfigurationEndpoint\": \"https://testjans.gluu.com/.well-known/openid-configuration\", \"idGenerationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/id\", \"introspectionEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/introspection\", \"deviceAuthzEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/device_authorization\", \"sessionAsJwt\": false, \"sectorIdentifierCacheLifetimeInMinutes\": 1440, \"umaConfigurationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/uma2-configuration\", \"umaRptAsJwt\": false, \"umaRptLifetime\": 3600, \"umaTicketLifetime\": 3600, \"umaPctLifetime\": 2592000, \"umaResourceLifetime\": 2592000, \"umaAddScopesAutomatically\": true, \"umaValidateClaimToken\": false, \"umaGrantAccessIfNoPolicies\": false, \"umaRestrictResourceToAssociatedClient\": false, \"spontaneousScopeLifetime\": 86400, \"openidSubAttribute\": \"inum\", \"responseTypesSupported\": [ \"['code', 'token']\", \"['id_token', 'code', 'token']\", \"['id_token']\", \"['code']\", \"['token']\", \"['id_token', 'code']\", \"['id_token', 'token']\" ], \"responseModesSupported\": [ \"query\", \"form_post\", \"fragment\" ], \"grantTypesSupported\": [ \"password\", \"authorization_code\", \"refresh_token\", \"urn:ietf:params:oauth:grant-type:device_code\", \"client_credentials\", \"urn:ietf:params:oauth:grant-type:uma-ticket\", \"implicit\" ], \"subjectTypesSupported\": [ \"public\", \"pairwise\" ], \"defaultSubjectType\": [ \"p\", \"a\", \"i\", \"r\", \"w\", \"i\", \"s\", \"e\" ], \"userInfoSigningAlgValuesSupported\": [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"userInfoEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"userInfoEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"idTokenSigningAlgValuesSupported\": [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"idTokenEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"idTokenEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"requestObjectSigningAlgValuesSupported\": [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"requestObjectEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"requestObjectEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"tokenEndpointAuthMethodsSupported\": [ \"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\" ], \"tokenEndpointAuthSigningAlgValuesSupported\": [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"dynamicRegistrationCustomAttributes\": null, \"displayValuesSupported\": [ \"page\", \"popup\" ], \"claimTypesSupported\": [ \"normal\" ], \"jwksAlgorithmsSupported\": [ \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"RSA1_5\", \"RSA-OAEP\" ], \"serviceDocumentation\": [ \"h\", \"t\", \"t\", \"p\", \":\", \"/\", \"/\", \"j\", \"a\", \"n\", \"s\", \".\", \"o\", \"r\", \"g\", \"/\", \"d\", \"o\", \"c\", \"s\" ], \"claimsLocalesSupported\": [ \"en\" ], \"idTokenTokenBindingCnfValuesSupported\": [ \"tbh\" ], \"uiLocalesSupported\": [ \"en\", \"bg\", \"de\", \"es\", \"fr\", \"it\", \"ru\", \"tr\" ], \"claimsParameterSupported\": false, \"requestParameterSupported\": true, \"requestUriParameterSupported\": true, \"requestUriHashVerificationEnabled\": false, \"requireRequestUriRegistration\": false, \"opPolicyUri\": \"http://www.jans.io/doku.php?id=jans:policy\", \"opTosUri\": \"http://www.jans.io/doku.php?id=jans:tos\", \"authorizationCodeLifetime\": 60, \"refreshTokenLifetime\": 14400, \"idTokenLifetime\": 3600, \"idTokenFilterClaimsBasedOnAccessToken\": false, \"accessTokenLifetime\": 300, \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"cleanServiceBaseDns\": null, \"keyRegenerationEnabled\": true, \"keyRegenerationInterval\": 48, \"defaultSignatureAlgorithm\": [ \"R\", \"S\", \"2\", \"5\", \"6\" ], \"oxOpenIdConnectVersion\": \"openidconnect-1.0\", \"oxId\": \"https://testjans.gluu.com/oxid/service/jans/inum\", \"dynamicRegistrationEnabled\": true, \"dynamicRegistrationExpirationTime\": -1, \"dynamicRegistrationPersistClientAuthorizations\": true, \"trustedClientEnabled\": true, \"skipAuthorizationForOpenIdScopeAndPairwiseId\": false, \"dynamicRegistrationScopesParamEnabled\": true, \"dynamicRegistrationPasswordGrantTypeEnabled\": false, \"dynamicRegistrationAllowedPasswordGrantScopes\": null, \"dynamicRegistrationCustomObjectClass\": null, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"persistIdTokenInLdap\": false, \"persistRefreshTokenInLdap\": true, \"allowPostLogoutRedirectWithoutValidation\": false, \"invalidateSessionCookiesAfterAuthorizationFlow\": false, \"returnClientSecretOnRead\": true, \"rejectJwtWithNoneAlg\": true, \"expirationNotificatorEnabled\": false, \"useNestedJwtDuringEncryption\": true, \"expirationNotificatorMapSizeLimit\": 100000, \"expirationNotificatorIntervalInSeconds\": 600, \"authenticationFiltersEnabled\": false, \"clientAuthenticationFiltersEnabled\": false, \"clientRegDefaultToCodeFlowWithRefresh\": true, \"authenticationFilters\": [ { \"filter\": \"(&(mail=*{0}*)(inum={1}))\", \"bind\": false, \"bind-password-attribute\": null, \"base-dn\": null }, { \"filter\": \"uid={0}\", \"bind\": true, \"bind-password-attribute\": null, \"base-dn\": null } ], \"clientAuthenticationFilters\": [ { \"filter\": \"myCustomAttr1={0}\", \"bind\": null, \"bind-password-attribute\": null, \"base-dn\": null } ], \"corsConfigurationFilters\": [ { \"filterName\": \"CorsFilter\", \"corsEnabled\": true, \"corsAllowedOrigins\": \"*\", \"corsAllowedMethods\": \"GET,POST,HEAD,OPTIONS\", \"corsAllowedHeaders\": \"Origin,Authorization,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers\", \"corsExposedHeaders\": null, \"corsSupportCredentials\": true, \"corsLoggingEnabled\": false, \"corsPreflightMaxAge\": 1800, \"corsRequestDecorate\": true } ], \"sessionIdUnusedLifetime\": 86400, \"sessionIdUnauthenticatedUnusedLifetime\": 120, \"sessionIdEnabled\": true, \"sessionIdPersistOnPromptNone\": true, \"sessionIdRequestParameterEnabled\": false, \"changeSessionIdOnAuthentication\": true, \"sessionIdPersistInCache\": false, \"sessionIdLifetime\": 86400, \"serverSessionIdLifetime\": 86400, \"configurationUpdateInterval\": 3600, \"enableClientGrantTypeUpdate\": true, \"dynamicGrantTypeDefault\": [ \"authorization_code\", \"refresh_token\", \"urn:ietf:params:oauth:grant-type:device_code\", \"client_credentials\", \"urn:ietf:params:oauth:grant-type:uma-ticket\", \"implicit\" ], \"cssLocation\": null, \"jsLocation\": null, \"imgLocation\": null, \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": false, \"pairwiseIdType\": [ \"a\", \"l\", \"g\", \"o\", \"r\", \"i\", \"t\", \"h\", \"m\", \"i\", \"c\" ], \"pairwiseCalculationKey\": \"rYX4K1hkDOAc0ie6ESr6T4N2z\", \"pairwiseCalculationSalt\": \"1smvd6pswngMcjB4xVcMuIiuyH\", \"shareSubjectIdBetweenClientsWithSameSectorId\": true, \"webKeysStorage\": \"keystore\", \"dnName\": \"CN=Jans Auth CA Certificates\", \"keyStoreFile\": \"/etc/certs/jans-auth-keys.jks\", \"keyStoreSecret\": \"nXfbJvxuVRNi\", \"keySelectionStrategy\": \"OLDER\", \"oxElevenTestModeToken\": null, \"oxElevenGenerateKeyEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/generateKey\", \"oxElevenSignEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/sign\", \"oxElevenVerifySignatureEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/verifySignature\", \"oxElevenDeleteKeyEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/deleteKey\", \"introspectionAccessTokenMustHaveUmaProtectionScope\": false, \"endSessionWithAccessToken\": false, \"cookieDomain\": null, \"enabledOAuthAuditLogging\": null, \"jmsBrokerURISet\": null, \"jmsUserName\": null, \"jmsPassword\": null, \"clientWhiteList\": [ \"*\" ], \"clientBlackList\": [ \"*.attacker.com/*\" ], \"legacyIdTokenClaims\": false, \"customHeadersWithAuthorizationResponse\": true, \"frontChannelLogoutSessionSupported\": true, \"loggingLevel\": \"INFO\", \"loggingLayout\": \"text\", \"updateUserLastLogonTime\": false, \"updateClientAccessTime\": false, \"logClientIdOnClientAuthentication\": true, \"logClientNameOnClientAuthentication\": false, \"disableJdkLogger\": true, \"authorizationRequestCustomAllowedParameters\": [ \"customParam2\", \"customParam3\", \"customParam1\" ], \"legacyDynamicRegistrationScopeParam\": false, \"openidScopeBackwardCompatibility\": false, \"disableU2fEndpoint\": false, \"useLocalCache\": true, \"fapiCompatibility\": false, \"forceIdTokenHintPrecense\": false, \"forceOfflineAccessScopeToEnableRefreshToken\": true, \"errorReasonEnabled\": false, \"removeRefreshTokensForClientOnLogout\": true, \"skipRefreshTokenDuringRefreshing\": false, \"refreshTokenExtendLifetimeOnRotation\": false, \"consentGatheringScriptBackwardCompatibility\": false, \"introspectionScriptBackwardCompatibility\": false, \"introspectionResponseScopesBackwardCompatibility\": false, \"softwareStatementValidationType\": \"script\", \"softwareStatementValidationClaimName\": null, \"authenticationProtectionConfiguration\": { \"attemptExpiration\": 15, \"maximumAllowedAttemptsWithoutDelay\": 4, \"delayTime\": 2, \"bruteForceProtectionEnabled\": false }, \"errorHandlingMethod\": \"internal\", \"keepAuthenticatorAttributesOnAcrChange\": false, \"deviceAuthzRequestExpiresIn\": 1800, \"deviceAuthzTokenPollInterval\": 5, \"deviceAuthzResponseTypeToProcessAuthz\": \"code\", \"backchannelClientId\": null, \"backchannelRedirectUri\": \"https://testjans.gluu.com/jans-auth/ciba/home.htm\", \"backchannelAuthenticationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/bc-authorize\", \"backchannelDeviceRegistrationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/bc-deviceRegistration\", \"backchannelTokenDeliveryModesSupported\": [ \"poll\", \"ping\", \"push\" ], \"backchannelAuthenticationRequestSigningAlgValuesSupported\": null, \"backchannelUserCodeParameterSupported\": false, \"backchannelBindingMessagePattern\": \"^[a-zA-Z0-9]{4,8}$\", \"backchannelAuthenticationResponseExpiresIn\": 3600, \"backchannelAuthenticationResponseInterval\": 2, \"backchannelLoginHintClaims\": [ \"inum\", \"uid\", \"mail\" ], \"cibaEndUserNotificationConfig\": { \"apiKey\": null, \"authDomain\": null, \"databaseURL\": null, \"projectId\": null, \"storageBucket\": null, \"messagingSenderId\": null, \"appId\": null, \"notificationUrl\": null, \"notificationKey\": null, \"publicVapidKey\": null }, \"backchannelRequestsProcessorJobIntervalSec\": 5, \"backchannelRequestsProcessorJobChunkSize\": 100, \"cibaGrantLifeExtraTimeSec\": 180, \"cibaMaxExpirationTimeAllowedSec\": 1800, \"cibaEnabled\": false, \"discoveryCacheLifetimeInMinutes\": 60, \"httpLoggingEnabled\": false, \"httpLoggingExcludePaths\": null, \"externalLoggerConfiguration\": null, \"redirectUrisRegexEnabled\": false, \"useHighestLevelScriptIfAcrScriptNotFound\": true }","title":"Get All Jans Auth Server Configuration Properties"},{"location":"admin/config-guide/jans-cli/cli-jans-authorization-server/#partially-modify-jans-auth-server-configuration-properties","text":"Operation ID: patch-properties Description: Partially modifies Jans authorization server AppConfiguration properties. Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Let's look at the schema first: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch-jans-auth.json It will create a .json file in /tmp with schema. Let's modify this schema: nano /tmp/patch-jans-auth.json This schema has three properties; op , path & value . Let's perform a replace operation at cibaEnabled to change it from false to true . So, the .json file will look like this: [ { \"op\": \"replace\", \"path\": \"cibaEnabled\", \"value\": true } ] Don't forget to use square brackets ( [] ). Otherwise, it won't work. Now, let's do the operation. /opt/jans/jans-cli/config-cli.py --operation-id patch-properties --data /tmp/patch-jans-auth.json If you run the following command line, you must see that cibaEnabled is true :","title":"Partially Modify Jans Auth Server Configuration Properties"},{"location":"admin/config-guide/jans-cli/cli-janssen-fido2-configuration/","tags":["administration","configuration","cli","commandline"],"text":"Janssen FIDO2 Configuration # Prerequisite: Know how to use the Janssen CLI in command-line mode Using Janssen CLI, You can get/update Fido2 properties. To get the information of Janssen Fido2 CLI, run the following command: /opt/jans/jans-cli/config-cli.py --info ConfigurationFido2 Operation ID: get-properties-fido2 Description: Gets Jans Authorization Server Fido2 configuration properties. Operation ID: put-properties-fido2 Description: Updates Fido2 configuration properties. Schema: /components/schemas/JansFido2DynConfiguration To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/JansFido2DynConfiguration Table of Contents # Janssen FIDO2 Configuration Find FIDO2 Configuration Properties Update FIDO2 Configuration Properties Find FIDO2 Configuration Properties # To get the properties of Janssen Fido2 Configuration, run below command: /opt/jans/jans-cli/config-cli.py --operation-id get-properties-fido2 It will return the result as below: Getting access token for scope https://jans.io/oauth/config/fido2.readonly { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/fido2/restv1\", \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"useLocalCache\": false, \"disableJdkLogger\": false, \"loggingLevel\": \"DEBUG\", \"loggingLayout\": \"text\", \"externalLoggerConfiguration\": null, \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": false, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"fido2Configuration\": { \"authenticatorCertsFolder\": null, \"mdsCertsFolder\": null, \"mdsTocsFolder\": null, \"serverMetadataFolder\": null, \"requestedParties\": [ { \"name\": null, \"domains\": [] } ], \"userAutoEnrollment\": false, \"unfinishedRequestExpiration\": null, \"authenticationHistoryExpiration\": null, \"requestedCredentialTypes\": [] } } Update FIDO2 Configuration Properties # To perform this operation, let's check the schema first. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/JansFido2DynConfiguration > /tmp/fido2-schema.json This command will create a fido2 schema file on /tmp/ . You can edit this file depending on the requirements: Now let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id put-properties-fido2 --data /tmp/fido2-schema.json Getting access token for scope https://jans.io/oauth/config/fido2.write Server Response: { \"issuer\": \"https://server.example.com/\", \"baseEndpoint\": \"https://server.example.com/fido2/restv1\", \"cleanServiceInterval\": null, \"cleanServiceBatchChunkSize\": null, \"useLocalCache\": false, \"disableJdkLogger\": false, \"loggingLevel\": \"INFO\", \"loggingLayout\": null, \"externalLoggerConfiguration\": null, \"metricReporterInterval\": null, \"metricReporterKeepDataDays\": null, \"metricReporterEnabled\": true, \"personCustomObjectClassList\": [], \"fido2Configuration\": { \"authenticatorCertsFolder\": null, \"mdsCertsFolder\": null, \"mdsTocsFolder\": null, \"serverMetadataFolder\": null, \"requestedParties\": [ { \"name\": null, \"domains\": null }, { \"name\": null, \"domains\": null } ], \"userAutoEnrollment\": true, \"unfinishedRequestExpiration\": null, \"authenticationHistoryExpiration\": null, \"requestedCredentialTypes\": [] } } You may find that I have updated to logginglabel:INFO from NULL .","title":"FIDO2 Configuration"},{"location":"admin/config-guide/jans-cli/cli-janssen-fido2-configuration/#janssen-fido2-configuration","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode Using Janssen CLI, You can get/update Fido2 properties. To get the information of Janssen Fido2 CLI, run the following command: /opt/jans/jans-cli/config-cli.py --info ConfigurationFido2 Operation ID: get-properties-fido2 Description: Gets Jans Authorization Server Fido2 configuration properties. Operation ID: put-properties-fido2 Description: Updates Fido2 configuration properties. Schema: /components/schemas/JansFido2DynConfiguration To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/JansFido2DynConfiguration","title":"Janssen FIDO2 Configuration"},{"location":"admin/config-guide/jans-cli/cli-janssen-fido2-configuration/#table-of-contents","text":"Janssen FIDO2 Configuration Find FIDO2 Configuration Properties Update FIDO2 Configuration Properties","title":"Table of Contents"},{"location":"admin/config-guide/jans-cli/cli-janssen-fido2-configuration/#find-fido2-configuration-properties","text":"To get the properties of Janssen Fido2 Configuration, run below command: /opt/jans/jans-cli/config-cli.py --operation-id get-properties-fido2 It will return the result as below: Getting access token for scope https://jans.io/oauth/config/fido2.readonly { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/fido2/restv1\", \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"useLocalCache\": false, \"disableJdkLogger\": false, \"loggingLevel\": \"DEBUG\", \"loggingLayout\": \"text\", \"externalLoggerConfiguration\": null, \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": false, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"fido2Configuration\": { \"authenticatorCertsFolder\": null, \"mdsCertsFolder\": null, \"mdsTocsFolder\": null, \"serverMetadataFolder\": null, \"requestedParties\": [ { \"name\": null, \"domains\": [] } ], \"userAutoEnrollment\": false, \"unfinishedRequestExpiration\": null, \"authenticationHistoryExpiration\": null, \"requestedCredentialTypes\": [] } }","title":"Find FIDO2 Configuration Properties"},{"location":"admin/config-guide/jans-cli/cli-janssen-fido2-configuration/#update-fido2-configuration-properties","text":"To perform this operation, let's check the schema first. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/JansFido2DynConfiguration > /tmp/fido2-schema.json This command will create a fido2 schema file on /tmp/ . You can edit this file depending on the requirements: Now let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id put-properties-fido2 --data /tmp/fido2-schema.json Getting access token for scope https://jans.io/oauth/config/fido2.write Server Response: { \"issuer\": \"https://server.example.com/\", \"baseEndpoint\": \"https://server.example.com/fido2/restv1\", \"cleanServiceInterval\": null, \"cleanServiceBatchChunkSize\": null, \"useLocalCache\": false, \"disableJdkLogger\": false, \"loggingLevel\": \"INFO\", \"loggingLayout\": null, \"externalLoggerConfiguration\": null, \"metricReporterInterval\": null, \"metricReporterKeepDataDays\": null, \"metricReporterEnabled\": true, \"personCustomObjectClassList\": [], \"fido2Configuration\": { \"authenticatorCertsFolder\": null, \"mdsCertsFolder\": null, \"mdsTocsFolder\": null, \"serverMetadataFolder\": null, \"requestedParties\": [ { \"name\": null, \"domains\": null }, { \"name\": null, \"domains\": null } ], \"userAutoEnrollment\": true, \"unfinishedRequestExpiration\": null, \"authenticationHistoryExpiration\": null, \"requestedCredentialTypes\": [] } } You may find that I have updated to logginglabel:INFO from NULL .","title":"Update FIDO2 Configuration Properties"},{"location":"admin/config-guide/jans-cli/cli-jwk-json-web-key-jwk/","tags":["administration","configuration","cli","commandline"],"text":"JSON Web Key (JWK) # Prerequisite: Know how to use the Janssen CLI in command-line mode This operation is used to get the JSON Web Key Set (JWKS) from OP host. The JWKS is a set of keys containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server. There are few operations we can do using jans-cli commands. To get list of operations id run below command: /opt/jans/jans-cli/config-cli.py --info ConfigurationJWKJSONWebKeyJWK It returns operations id with details information. Operation ID: get-config-jwks Description: Gets list of JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627]. Operation ID: put-config-jwks Description: Puts/replaces JSON Web Keys (JWKS). Schema: /components/schemas/WebKeysConfiguration Operation ID: patch-config-jwks Description: Patch JSON Web Keys (JWKS). Schema: Array of /components/schemas/PatchRequest Operation ID: post-config-jwks-key Description: Adds a new key to JSON Web Keys (JWKS). Schema: /components/schemas/JsonWebKey Operation ID: put-config-jwk-kid Description: Get a JSON Web Key based on kid url-suffix: kid Operation ID: patch-config-jwk-kid Description: Patch a specific JSON Web Key based on kid url-suffix: kid Schema: Array of /components/schemas/PatchRequest Operation ID: delete-config-jwk-kid Description: Delete a JSON Web Key based on kid url-suffix: kid To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Let's explore each of these operations. Get Configurations list of JWKs # We can get list of all configurations of the jwk configuration within a single command like this: /opt/jans/jans-cli/config-cli.py --operation-id get-config-jwks It will return all the jwk configuration information as below: Getting access token for scope https://jans.io/oauth/config/jwks.readonly { \"keys\": [ { \"kid\": \"8627c7e1-0702-4103-9c28-28ff6a818da9_sig_rs256\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS256\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAIi82XlGMTJRsn5djImvoD2wSLY1hkhPPUv2qaGjvC3IMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI1WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqpU+2D0eQTszq3iq7qIHm3ryYGIDd4+3WUwMyCJoV0dYDDKZwFxaZD9auW/9wsqQZnwJcpYuDt+sAYVfei7+1nLKZhuo1eRLQxpHzDTmAoQcuWAGDg5f0sL24qaO9n1zSNAcEt8pyRJVZ1VcCEePryNSoustDZX36Eh/1pAOVjHzlVXSWCMtlS5uG6VcWoCzbrQU/z8ittfWqSpk/hM6z9KO95JofuFm5JG3U6qMFiZdG5qp3dY2zQ8clpqtV4yqaMTD6mv3IiH3TGxo1PGS2UHCRWh6TLVp15ElLlGiaaC6LlYxIdxMgV2AV80718ROKQT8OieVY5Q2T+198lPUWwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAGGUO67E3UjQaaxGI2pIrau0A5qWF0SAMay2FI+o1xstud8+imkANjoqIQgWVpaZCR6I7q9rDHbaSHQy6uPHRBGVtV9izC+vr6+ohVjyFO/1K97FHQJxaR62X+qswFHot6RGFjQbMDEWQs/BMOfuojp7rvkRYjazdxqX2Obbp0cmHuaJV0iiZ71+k2VpoJrpdP/RI+3OdCWvV+fydNDrBXAi7JYNaqhx9wVoqVEeMAOCXbcjEe6YiYcU2WHPCD7DaeOzPgJimzc5ujyu30RFMVl5RYOMYgETt4g+fVKDuRcstQJaR5zowBUGaiXCjOfhfkWa2fFd9v4hg5Y7YCmOMtI=\" ], \"n\": \"qpU-2D0eQTszq3iq7qIHm3ryYGIDd4-3WUwMyCJoV0dYDDKZwFxaZD9auW_9wsqQZnwJcpYuDt-sAYVfei7-1nLKZhuo1eRLQxpHzDTmAoQcuWAGDg5f0sL24qaO9n1zSNAcEt8pyRJVZ1VcCEePryNSoustDZX36Eh_1pAOVjHzlVXSWCMtlS5uG6VcWoCzbrQU_z8ittfWqSpk_hM6z9KO95JofuFm5JG3U6qMFiZdG5qp3dY2zQ8clpqtV4yqaMTD6mv3IiH3TGxo1PGS2UHCRWh6TLVp15ElLlGiaaC6LlYxIdxMgV2AV80718ROKQT8OieVY5Q2T-198lPUWw\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, { \"kid\": \"77e3dec8-8a3e-479b-bcfc-aa508e5d9825_sig_rs384\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS384\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAPMrnxSwxnvlx7up5juXI8j52fQQwbmdLtcooIjv7pC3MA0GCSqGSIb3DQEBDAUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI2WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAq415zmHRArQ9zD5YN44nG52yJI7FakkBUN/aYWNJSCk5Pq/0qc7tm3M6Jhqrz8XuOMfatqzOxG65i4s/kOwGmET+Mq+lJ416A9toUfGdZRHmint/spGOf5nUeWjXRxMOooVtafq0Ao2/WZnsBB4jfAI9F211pJv2MNcxJ1ZwLpNSoaJSrEgxQh3laIVBozEcikozSOVUj8CMfF+WJRo049nv+IazTwTg1ZS96WcAztIemqgjAoE80i9Y4DYNp1R97A9MtFcsLlEPjYyiGmt5SomRa1oo6gymMs3AHYBdYPY/U4iXMsNDBsG+8cbTz44fFTkWHeWSuTnP9z8aj32HFQIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQEMBQADggEBAKdot2Upc7jH4XfgqXFDCkD0ILB2Zu/HE1PG0UGetJiR0hHwQ64CebpBqa8ExCHxiCamGjck6mZOVQHphJ0bgG1svMBG4M/x//RZcFld9L+mlPVEeTDJY5K0cb1csbuziACF1MrZB4pvVIVZgywdGFm+EqJ0aHDr5ByP5foBwqR3e7nGbuu6xWJx1hbXOrnjOFUqlwtnq0Qy4ZNNKgAbVW7n1We44ceWhWb4UenM5Ee2+xy1y9hkETdyLfgSjRh75pAv/+BhLM98x8ozns5bZXMTMZXt49Pbr29x2axBObGwKpv7Suqqndaw09iwSDtzyNUMVnCU4C1ikrozC8KHGvE=\" ], \"n\": \"q415zmHRArQ9zD5YN44nG52yJI7FakkBUN_aYWNJSCk5Pq_0qc7tm3M6Jhqrz8XuOMfatqzOxG65i4s_kOwGmET-Mq-lJ416A9toUfGdZRHmint_spGOf5nUeWjXRxMOooVtafq0Ao2_WZnsBB4jfAI9F211pJv2MNcxJ1ZwLpNSoaJSrEgxQh3laIVBozEcikozSOVUj8CMfF-WJRo049nv-IazTwTg1ZS96WcAztIemqgjAoE80i9Y4DYNp1R97A9MtFcsLlEPjYyiGmt5SomRa1oo6gymMs3AHYBdYPY_U4iXMsNDBsG-8cbTz44fFTkWHeWSuTnP9z8aj32HFQ\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, { \"kid\": \"cb0b2d29-0d2f-411f-9d47-5885cffad6e2_sig_rs512\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS512\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCTCCAfGgAwIBAgIgW10M3Wl7/TEDNK9DarGKNAFT+4E3HQfyJcVmh0e3s8gwDQYJKoZIhvcNAQENBQAwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTA1MjYyMzQ3MjdaFw0yMTA1MjgyMzQ3MzVaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDrEdrcsQGHM1T+7ZcpU46DbbxGTA2qM4T6FSFb2UEPyeD/zKnCcdOgM/598tSzsKZJrIR3ZQn1igzcJkm7gKqkn7Qbg3Thk+MZtX28S68YJSDonjdce1NkIn3fx3TsImBh2Le9iOJfkLRnwCFm1EnplahNZYmV6PyHZ9IChpC6XCoBa6+U6O/owL5iAS34XrRHKxJaECTJObI2Gydg1doEP8jSnU3EZChSwmRDCSE3IH7oiTIIISdhMhD5ZBWGZlPl73Mj8PzYUdWOU1ZqCDngCfBm+SGvXBJcSheJr4la9mnl0AtCnE3zwEGWLKBxhouDQvXYa6ELq8r3VbDBb+4VAgMBAAGjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADANBgkqhkiG9w0BAQ0FAAOCAQEAx8ykyU8CAE6IS+li9pRx/rStBNgvAyY8TiQDlpkBSPwA64KuKWZmSjmMqjZLtqCEIY5X9+GPAeEhFtBQYJVcxYAAWV7JnMrq6RuWmom1gHN8igOYEyBSwPWb9TS1kWrPYg/hD4p9kOlNAbbdEuid/NPWOZJ4uGA1+ViEY9D29dsYvPpPLBxf7XFVjXAkljefi3yREQzEpJ7/cerJW9WyYCeS0/Ahr8Yhn2txBwrniMwyMJPLb+KvLWfqPol0zsyHBwWIa2nygTHJ8mYftHGO26dxIef2kQAu5uUX7po4MXFUBkuUnrkqB2CfvjMq5cU5AATgtPDdmJjKMQ9ZjgGhNQ==\" ], \"n\": \"6xHa3LEBhzNU_u2XKVOOg228RkwNqjOE-hUhW9lBD8ng_8ypwnHToDP-ffLUs7CmSayEd2UJ9YoM3CZJu4CqpJ-0G4N04ZPjGbV9vEuvGCUg6J43XHtTZCJ938d07CJgYdi3vYjiX5C0Z8AhZtRJ6ZWoTWWJlej8h2fSAoaQulwqAWuvlOjv6MC-YgEt-F60RysSWhAkyTmyNhsnYNXaBD_I0p1NxGQoUsJkQwkhNyB-6IkyCCEnYTIQ-WQVhmZT5e9zI_D82FHVjlNWagg54AnwZvkhr1wSXEoXia-JWvZp5dALQpxN88BBliygcYaLg0L12GuhC6vK91WwwW_uFQ\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, ... ... ... ] Adds new JSON Web key (JWK) # In case we need to add new key, we can use this operation id. To add a new key, we need to follow the schema definition. If we look at the description, we can see a schema definition available. Operation ID: post-config-jwks-key Description: Adds a new key to JSON Web Keys (JWKS). Schema: /components/schemas/JsonWebKey So, let's get the schema file and update it with keys data: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/JsonWebKey > /tmp/jwk.json { \"kid\": \"string\", \"kty\": \"string\", \"use\": \"string\", \"alg\": \"string\", \"crv\": null, \"exp\": \"integer\", \"x5c\": [], \"n\": null, \"e\": null, \"x\": null, \"y\": null } Let's update the json file; In our case, I have added sample data for testing purpose only. \"kid\": \"dd550214-7969-41b9-b919-2a0cfa36047b_enc_rsa1_5\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\": \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\", \"e\": \"AQAB\", \"x\": null, \"y\": null Now let's post this keys into the list using below command: /opt/jans/jans-cli/config-cli.py --operation-id post-config-jwks-key --data /tmp/jwk.json Update / Replace JSON Web Key (JWK) # To update / replace any JWK configuration, let get the schema first. Operation ID: put-config-jwks Description: Puts/replaces JSON Web Keys (JWKS). Schema: /components/schemas/WebKeysConfiguration To get the schema file: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/WebKeysConfiguration > /tmp/path-jwk.json root@testjans:~# cat /tmp/path-jwk.json { \"keys\": { \"kid\": null, \"kty\": null, \"use\": null, \"alg\": null, \"crv\": null, \"exp\": null, \"x5c\": [], \"n\": null, \"e\": null, \"x\": null, \"y\": null } } It's a json file containing key-value pair. Each of these properties in the key is defined by the JWK specification RFC 7517 , and for algorithm-specific properties, in RFC 7518 . Properties # name Description kid It's a unique identifier for the key configuration. kty It's used to define the type of the specific cryptographic algorithms use This parameter identifies the intend use of the public key. sig for signature and enc for encryption alg The specific algorithm used with the key crv exp The exponent for the RSA public key. x5c The x5c parameter contains a chain of one or more PKIX certificates RFC5280 n The modulus for the RSA public key . e The \"e\" (exponent) parameter contains the exponent value for the RSA public key . It is represented as a Base64urlUInt-encoded value. x The \"x\" (x coordinate) parameter contains the x coordinate for the Elliptic Curve point . y The \"y\" (y coordinate) parameter contains the y coordinate for the Elliptic Curve point . If you want to explore more, please go through the reference link. Let's update the json file to create a new key configuration. { \"keys\": [{ \"kid\": \"dd550214-7969-41b9-b919-2a0cfa36047b_enc_rsa1_5\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\": \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\", \"e\": \"AQAB\", \"x\": null, \"y\": null }] } Please remember if kid already matched then this will be replaced otherwise a new key configuration will be created in the Janssen server. Now let's put the updated data into the Janssen server. /opt/jans/jans-cli/config-cli.py --operation-id put-config-jwks --data /tmp/path-jwk.json Getting access token for scope https://jans.io/oauth/config/jwks.write Server Response: { \"keys\": [ { \"kid\": \"dd550214-7969-41b9-b919-2a0cfa36047b_enc_rsa1_5\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\": \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\", \"e\": \"AQAB\", \"x\": null, \"y\": null } ] } Please remember, This operation replaces all JWKs having in the Janssen server with new ones. So, In this case, if you want to keep olds JWKs, you have to put them as well in the schema file. Get a JSON Web Key Based on kid # We know that get-config-jwks operation-id returns all the json web keys available in the Janssen Server. With this operation-id, We can get any specific jwk matched with kid. If we know the kid , we can simply use the below command: /opt/jans/jans-cli/config-cli.py --operation-id put-config-jwk-kid --url-suffix kid:new-key-test-id It returns the details as below: Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/jwks.readonly { \"kid\" : \"new-key-test-id\" , \"kty\" : \"RSA\" , \"use\" : \"enc\" , \"alg\" : \"RSA-OAEP\" , \"crv\" : \"\" , \"exp\" : 1622245655163 , \"x5c\" : [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\" : \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\" , \"e\" : \"AQAB\" , \"x\" : null , \"y\" : null } Patch JSON Web Key (JWK) by kid # With this operation id, we can modify JSON Web Keys partially of its properties. Operation ID: patch-config-jwks Description: Patch JSON Web Keys ( JWKS ) . Schema: Array of /components/schemas/PatchRequest In this case, We are going to a test data JWK that already added in jwk list of the Janssen server. { \"kid\" : \"new-key-test-id\" , \"kty\" : \"RSA\" , \"use\" : \"enc\" , \"alg\" : \"RSA-OAEP\" , \"crv\" : \"\" , \"exp\" : 1622245655163 , \"x5c\" : [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\" : \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\" , \"e\" : \"AQAB\" , \"x\" : null , \"y\" : null } We can see here kid is new-key-test-id . Before going to patch this key, let's define the schema first. In this example; We are going to change use from enc to sig . So our schema definition as below: [ { \"op\" : \"replace\" , \"path\" : \"use\" , \"value\" : \"sig\" } ] Please, remember, you can do multiple operation within a single command because this schema definition support array of multiple operations. Now let's do the operation with below command line. /opt/jans/jans-cli/config-cli.py --operation-id patch-config-jwk-kid --url-suffix kid:new-key-test-id --data /tmp/schema.json You need to change kid and data path according to your own. Updated Json Web Key: Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/jwks.write Server Respo nse : { \"kid\" : \"new-key-test-id\" , \"kty\" : \"RSA\" , \"use\" : \"sig\" , \"alg\" : \"RSA-OAEP\" , \"crv\" : null , \"exp\" : 1622245655163 , \"x5c\" : [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\" : \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\" , \"e\" : \"AQAB\" , \"x\" : null , \"y\" : null } We see it has replaced use from enc to sig . Please read about patch method , You can get some idea how this patch method works to modify particular properties of any task. Delete Json Web Key using kid # It's pretty simple to delete json web key using its kid . The command line is: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-jwk-kid --url-suffix kid:new-key-test-id It will delete the jwk if it matches with the given kid .","title":"JSON Web Key"},{"location":"admin/config-guide/jans-cli/cli-jwk-json-web-key-jwk/#json-web-key-jwk","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode This operation is used to get the JSON Web Key Set (JWKS) from OP host. The JWKS is a set of keys containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server. There are few operations we can do using jans-cli commands. To get list of operations id run below command: /opt/jans/jans-cli/config-cli.py --info ConfigurationJWKJSONWebKeyJWK It returns operations id with details information. Operation ID: get-config-jwks Description: Gets list of JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627]. Operation ID: put-config-jwks Description: Puts/replaces JSON Web Keys (JWKS). Schema: /components/schemas/WebKeysConfiguration Operation ID: patch-config-jwks Description: Patch JSON Web Keys (JWKS). Schema: Array of /components/schemas/PatchRequest Operation ID: post-config-jwks-key Description: Adds a new key to JSON Web Keys (JWKS). Schema: /components/schemas/JsonWebKey Operation ID: put-config-jwk-kid Description: Get a JSON Web Key based on kid url-suffix: kid Operation ID: patch-config-jwk-kid Description: Patch a specific JSON Web Key based on kid url-suffix: kid Schema: Array of /components/schemas/PatchRequest Operation ID: delete-config-jwk-kid Description: Delete a JSON Web Key based on kid url-suffix: kid To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Let's explore each of these operations.","title":"JSON Web Key (JWK)"},{"location":"admin/config-guide/jans-cli/cli-jwk-json-web-key-jwk/#get-configurations-list-of-jwks","text":"We can get list of all configurations of the jwk configuration within a single command like this: /opt/jans/jans-cli/config-cli.py --operation-id get-config-jwks It will return all the jwk configuration information as below: Getting access token for scope https://jans.io/oauth/config/jwks.readonly { \"keys\": [ { \"kid\": \"8627c7e1-0702-4103-9c28-28ff6a818da9_sig_rs256\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS256\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAIi82XlGMTJRsn5djImvoD2wSLY1hkhPPUv2qaGjvC3IMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI1WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqpU+2D0eQTszq3iq7qIHm3ryYGIDd4+3WUwMyCJoV0dYDDKZwFxaZD9auW/9wsqQZnwJcpYuDt+sAYVfei7+1nLKZhuo1eRLQxpHzDTmAoQcuWAGDg5f0sL24qaO9n1zSNAcEt8pyRJVZ1VcCEePryNSoustDZX36Eh/1pAOVjHzlVXSWCMtlS5uG6VcWoCzbrQU/z8ittfWqSpk/hM6z9KO95JofuFm5JG3U6qMFiZdG5qp3dY2zQ8clpqtV4yqaMTD6mv3IiH3TGxo1PGS2UHCRWh6TLVp15ElLlGiaaC6LlYxIdxMgV2AV80718ROKQT8OieVY5Q2T+198lPUWwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAGGUO67E3UjQaaxGI2pIrau0A5qWF0SAMay2FI+o1xstud8+imkANjoqIQgWVpaZCR6I7q9rDHbaSHQy6uPHRBGVtV9izC+vr6+ohVjyFO/1K97FHQJxaR62X+qswFHot6RGFjQbMDEWQs/BMOfuojp7rvkRYjazdxqX2Obbp0cmHuaJV0iiZ71+k2VpoJrpdP/RI+3OdCWvV+fydNDrBXAi7JYNaqhx9wVoqVEeMAOCXbcjEe6YiYcU2WHPCD7DaeOzPgJimzc5ujyu30RFMVl5RYOMYgETt4g+fVKDuRcstQJaR5zowBUGaiXCjOfhfkWa2fFd9v4hg5Y7YCmOMtI=\" ], \"n\": \"qpU-2D0eQTszq3iq7qIHm3ryYGIDd4-3WUwMyCJoV0dYDDKZwFxaZD9auW_9wsqQZnwJcpYuDt-sAYVfei7-1nLKZhuo1eRLQxpHzDTmAoQcuWAGDg5f0sL24qaO9n1zSNAcEt8pyRJVZ1VcCEePryNSoustDZX36Eh_1pAOVjHzlVXSWCMtlS5uG6VcWoCzbrQU_z8ittfWqSpk_hM6z9KO95JofuFm5JG3U6qMFiZdG5qp3dY2zQ8clpqtV4yqaMTD6mv3IiH3TGxo1PGS2UHCRWh6TLVp15ElLlGiaaC6LlYxIdxMgV2AV80718ROKQT8OieVY5Q2T-198lPUWw\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, { \"kid\": \"77e3dec8-8a3e-479b-bcfc-aa508e5d9825_sig_rs384\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS384\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAPMrnxSwxnvlx7up5juXI8j52fQQwbmdLtcooIjv7pC3MA0GCSqGSIb3DQEBDAUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI2WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAq415zmHRArQ9zD5YN44nG52yJI7FakkBUN/aYWNJSCk5Pq/0qc7tm3M6Jhqrz8XuOMfatqzOxG65i4s/kOwGmET+Mq+lJ416A9toUfGdZRHmint/spGOf5nUeWjXRxMOooVtafq0Ao2/WZnsBB4jfAI9F211pJv2MNcxJ1ZwLpNSoaJSrEgxQh3laIVBozEcikozSOVUj8CMfF+WJRo049nv+IazTwTg1ZS96WcAztIemqgjAoE80i9Y4DYNp1R97A9MtFcsLlEPjYyiGmt5SomRa1oo6gymMs3AHYBdYPY/U4iXMsNDBsG+8cbTz44fFTkWHeWSuTnP9z8aj32HFQIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQEMBQADggEBAKdot2Upc7jH4XfgqXFDCkD0ILB2Zu/HE1PG0UGetJiR0hHwQ64CebpBqa8ExCHxiCamGjck6mZOVQHphJ0bgG1svMBG4M/x//RZcFld9L+mlPVEeTDJY5K0cb1csbuziACF1MrZB4pvVIVZgywdGFm+EqJ0aHDr5ByP5foBwqR3e7nGbuu6xWJx1hbXOrnjOFUqlwtnq0Qy4ZNNKgAbVW7n1We44ceWhWb4UenM5Ee2+xy1y9hkETdyLfgSjRh75pAv/+BhLM98x8ozns5bZXMTMZXt49Pbr29x2axBObGwKpv7Suqqndaw09iwSDtzyNUMVnCU4C1ikrozC8KHGvE=\" ], \"n\": \"q415zmHRArQ9zD5YN44nG52yJI7FakkBUN_aYWNJSCk5Pq_0qc7tm3M6Jhqrz8XuOMfatqzOxG65i4s_kOwGmET-Mq-lJ416A9toUfGdZRHmint_spGOf5nUeWjXRxMOooVtafq0Ao2_WZnsBB4jfAI9F211pJv2MNcxJ1ZwLpNSoaJSrEgxQh3laIVBozEcikozSOVUj8CMfF-WJRo049nv-IazTwTg1ZS96WcAztIemqgjAoE80i9Y4DYNp1R97A9MtFcsLlEPjYyiGmt5SomRa1oo6gymMs3AHYBdYPY_U4iXMsNDBsG-8cbTz44fFTkWHeWSuTnP9z8aj32HFQ\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, { \"kid\": \"cb0b2d29-0d2f-411f-9d47-5885cffad6e2_sig_rs512\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS512\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCTCCAfGgAwIBAgIgW10M3Wl7/TEDNK9DarGKNAFT+4E3HQfyJcVmh0e3s8gwDQYJKoZIhvcNAQENBQAwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTA1MjYyMzQ3MjdaFw0yMTA1MjgyMzQ3MzVaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDrEdrcsQGHM1T+7ZcpU46DbbxGTA2qM4T6FSFb2UEPyeD/zKnCcdOgM/598tSzsKZJrIR3ZQn1igzcJkm7gKqkn7Qbg3Thk+MZtX28S68YJSDonjdce1NkIn3fx3TsImBh2Le9iOJfkLRnwCFm1EnplahNZYmV6PyHZ9IChpC6XCoBa6+U6O/owL5iAS34XrRHKxJaECTJObI2Gydg1doEP8jSnU3EZChSwmRDCSE3IH7oiTIIISdhMhD5ZBWGZlPl73Mj8PzYUdWOU1ZqCDngCfBm+SGvXBJcSheJr4la9mnl0AtCnE3zwEGWLKBxhouDQvXYa6ELq8r3VbDBb+4VAgMBAAGjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADANBgkqhkiG9w0BAQ0FAAOCAQEAx8ykyU8CAE6IS+li9pRx/rStBNgvAyY8TiQDlpkBSPwA64KuKWZmSjmMqjZLtqCEIY5X9+GPAeEhFtBQYJVcxYAAWV7JnMrq6RuWmom1gHN8igOYEyBSwPWb9TS1kWrPYg/hD4p9kOlNAbbdEuid/NPWOZJ4uGA1+ViEY9D29dsYvPpPLBxf7XFVjXAkljefi3yREQzEpJ7/cerJW9WyYCeS0/Ahr8Yhn2txBwrniMwyMJPLb+KvLWfqPol0zsyHBwWIa2nygTHJ8mYftHGO26dxIef2kQAu5uUX7po4MXFUBkuUnrkqB2CfvjMq5cU5AATgtPDdmJjKMQ9ZjgGhNQ==\" ], \"n\": \"6xHa3LEBhzNU_u2XKVOOg228RkwNqjOE-hUhW9lBD8ng_8ypwnHToDP-ffLUs7CmSayEd2UJ9YoM3CZJu4CqpJ-0G4N04ZPjGbV9vEuvGCUg6J43XHtTZCJ938d07CJgYdi3vYjiX5C0Z8AhZtRJ6ZWoTWWJlej8h2fSAoaQulwqAWuvlOjv6MC-YgEt-F60RysSWhAkyTmyNhsnYNXaBD_I0p1NxGQoUsJkQwkhNyB-6IkyCCEnYTIQ-WQVhmZT5e9zI_D82FHVjlNWagg54AnwZvkhr1wSXEoXia-JWvZp5dALQpxN88BBliygcYaLg0L12GuhC6vK91WwwW_uFQ\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, ... ... ... ]","title":"Get Configurations list of JWKs"},{"location":"admin/config-guide/jans-cli/cli-jwk-json-web-key-jwk/#adds-new-json-web-key-jwk","text":"In case we need to add new key, we can use this operation id. To add a new key, we need to follow the schema definition. If we look at the description, we can see a schema definition available. Operation ID: post-config-jwks-key Description: Adds a new key to JSON Web Keys (JWKS). Schema: /components/schemas/JsonWebKey So, let's get the schema file and update it with keys data: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/JsonWebKey > /tmp/jwk.json { \"kid\": \"string\", \"kty\": \"string\", \"use\": \"string\", \"alg\": \"string\", \"crv\": null, \"exp\": \"integer\", \"x5c\": [], \"n\": null, \"e\": null, \"x\": null, \"y\": null } Let's update the json file; In our case, I have added sample data for testing purpose only. \"kid\": \"dd550214-7969-41b9-b919-2a0cfa36047b_enc_rsa1_5\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\": \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\", \"e\": \"AQAB\", \"x\": null, \"y\": null Now let's post this keys into the list using below command: /opt/jans/jans-cli/config-cli.py --operation-id post-config-jwks-key --data /tmp/jwk.json","title":"Adds new JSON Web key (JWK)"},{"location":"admin/config-guide/jans-cli/cli-jwk-json-web-key-jwk/#update-replace-json-web-key-jwk","text":"To update / replace any JWK configuration, let get the schema first. Operation ID: put-config-jwks Description: Puts/replaces JSON Web Keys (JWKS). Schema: /components/schemas/WebKeysConfiguration To get the schema file: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/WebKeysConfiguration > /tmp/path-jwk.json root@testjans:~# cat /tmp/path-jwk.json { \"keys\": { \"kid\": null, \"kty\": null, \"use\": null, \"alg\": null, \"crv\": null, \"exp\": null, \"x5c\": [], \"n\": null, \"e\": null, \"x\": null, \"y\": null } } It's a json file containing key-value pair. Each of these properties in the key is defined by the JWK specification RFC 7517 , and for algorithm-specific properties, in RFC 7518 .","title":"Update / Replace JSON Web Key (JWK)"},{"location":"admin/config-guide/jans-cli/cli-jwk-json-web-key-jwk/#properties","text":"name Description kid It's a unique identifier for the key configuration. kty It's used to define the type of the specific cryptographic algorithms use This parameter identifies the intend use of the public key. sig for signature and enc for encryption alg The specific algorithm used with the key crv exp The exponent for the RSA public key. x5c The x5c parameter contains a chain of one or more PKIX certificates RFC5280 n The modulus for the RSA public key . e The \"e\" (exponent) parameter contains the exponent value for the RSA public key . It is represented as a Base64urlUInt-encoded value. x The \"x\" (x coordinate) parameter contains the x coordinate for the Elliptic Curve point . y The \"y\" (y coordinate) parameter contains the y coordinate for the Elliptic Curve point . If you want to explore more, please go through the reference link. Let's update the json file to create a new key configuration. { \"keys\": [{ \"kid\": \"dd550214-7969-41b9-b919-2a0cfa36047b_enc_rsa1_5\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\": \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\", \"e\": \"AQAB\", \"x\": null, \"y\": null }] } Please remember if kid already matched then this will be replaced otherwise a new key configuration will be created in the Janssen server. Now let's put the updated data into the Janssen server. /opt/jans/jans-cli/config-cli.py --operation-id put-config-jwks --data /tmp/path-jwk.json Getting access token for scope https://jans.io/oauth/config/jwks.write Server Response: { \"keys\": [ { \"kid\": \"dd550214-7969-41b9-b919-2a0cfa36047b_enc_rsa1_5\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": 1622245655163, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\": \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\", \"e\": \"AQAB\", \"x\": null, \"y\": null } ] } Please remember, This operation replaces all JWKs having in the Janssen server with new ones. So, In this case, if you want to keep olds JWKs, you have to put them as well in the schema file.","title":"Properties"},{"location":"admin/config-guide/jans-cli/cli-jwk-json-web-key-jwk/#get-a-json-web-key-based-on-kid","text":"We know that get-config-jwks operation-id returns all the json web keys available in the Janssen Server. With this operation-id, We can get any specific jwk matched with kid. If we know the kid , we can simply use the below command: /opt/jans/jans-cli/config-cli.py --operation-id put-config-jwk-kid --url-suffix kid:new-key-test-id It returns the details as below: Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/jwks.readonly { \"kid\" : \"new-key-test-id\" , \"kty\" : \"RSA\" , \"use\" : \"enc\" , \"alg\" : \"RSA-OAEP\" , \"crv\" : \"\" , \"exp\" : 1622245655163 , \"x5c\" : [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\" : \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\" , \"e\" : \"AQAB\" , \"x\" : null , \"y\" : null }","title":"Get a JSON Web Key Based on kid"},{"location":"admin/config-guide/jans-cli/cli-jwk-json-web-key-jwk/#patch-json-web-key-jwk-by-kid","text":"With this operation id, we can modify JSON Web Keys partially of its properties. Operation ID: patch-config-jwks Description: Patch JSON Web Keys ( JWKS ) . Schema: Array of /components/schemas/PatchRequest In this case, We are going to a test data JWK that already added in jwk list of the Janssen server. { \"kid\" : \"new-key-test-id\" , \"kty\" : \"RSA\" , \"use\" : \"enc\" , \"alg\" : \"RSA-OAEP\" , \"crv\" : \"\" , \"exp\" : 1622245655163 , \"x5c\" : [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\" : \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\" , \"e\" : \"AQAB\" , \"x\" : null , \"y\" : null } We can see here kid is new-key-test-id . Before going to patch this key, let's define the schema first. In this example; We are going to change use from enc to sig . So our schema definition as below: [ { \"op\" : \"replace\" , \"path\" : \"use\" , \"value\" : \"sig\" } ] Please, remember, you can do multiple operation within a single command because this schema definition support array of multiple operations. Now let's do the operation with below command line. /opt/jans/jans-cli/config-cli.py --operation-id patch-config-jwk-kid --url-suffix kid:new-key-test-id --data /tmp/schema.json You need to change kid and data path according to your own. Updated Json Web Key: Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/jwks.write Server Respo nse : { \"kid\" : \"new-key-test-id\" , \"kty\" : \"RSA\" , \"use\" : \"sig\" , \"alg\" : \"RSA-OAEP\" , \"crv\" : null , \"exp\" : 1622245655163 , \"x5c\" : [ \"MIIDCjCCAfKgAwIBAgIhANYLiviUTmgOsf9Bf+6N/pr6H4Mis5ku1VXNj7VW/CMbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwNTI2MjM0NzI5WhcNMjEwNTI4MjM0NzM1WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArlD19ib3J2bKYr2iap1d/gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx/CfHSgdEmACCXMiG7sQt80DPM67dlbtv/pEnWrHk4fwwst83OF+HXTSi4Sd9QWhDtBvaUu8Rp8ir+x2D0RK8YNGs0prA+qGR8O/h6Y+ascz4VNbbDlbJ+w7DJYeWU1HVp/5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y/9i8kf2pmznpu5QEDimj1yxEB+G5WEYuHD/+qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk/KKB7/KT0rEOn7T2rXW9QIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAKrtlIPhvDBxBfcqS9Xy39QqE1WOPiNQooa/FVVOsCROdRZrHhFcP27HpxO9e6genQSJ6nBRaJ4ykEf0oM535Ker5jZcDWzCwPIyt+5Kc6qeacZI5FxEHRldYkSd4lF1OTzQNvGLOPKnNWnYnXwj48ZxO50lJUsRFspVbP79E6llVNOPexrZ2GOzWghyY1E74f4uGr6fzcXQk2aFaIfLusoJlvbROPTnDu68Jt+IW4WZcO4F0tl0JIcuaqSmLS6McJW0Mpmu4wqEPV6E45zRAuX0kJUkKDMzM/lYW1MZ8QaSTt/pCmlknX1+KTgb6Sf9zZJEya8AyKML/NCpc4sfn8g=\" ], \"n\" : \"rlD19ib3J2bKYr2iap1d_gCmbXocMJTk5o7o3h9jJKXbh9pdf2gd3ZOE6wc5XwGx_CfHSgdEmACCXMiG7sQt80DPM67dlbtv_pEnWrHk4fwwst83OF-HXTSi4Sd9QWhDtBvaUu8Rp8ir-x2D0RK8YNGs0prA-qGR8O_h6Y-ascz4VNbbDlbJ-w7DJYeWU1HVp_5Lt8O5i4Q6I8KZEAytwvspF5y8m8DCrfYXF6Kz14vXgqr08hj0l0Aj4O3y_9i8kf2pmznpu5QEDimj1yxEB-G5WEYuHD_-qRTV85OXDIQJz6fgNM4kEimv7pmspcDfk_KKB7_KT0rEOn7T2rXW9Q\" , \"e\" : \"AQAB\" , \"x\" : null , \"y\" : null } We see it has replaced use from enc to sig . Please read about patch method , You can get some idea how this patch method works to modify particular properties of any task.","title":"Patch JSON Web Key (JWK) by kid"},{"location":"admin/config-guide/jans-cli/cli-jwk-json-web-key-jwk/#delete-json-web-key-using-kid","text":"It's pretty simple to delete json web key using its kid . The command line is: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-jwk-kid --url-suffix kid:new-key-test-id It will delete the jwk if it matches with the given kid .","title":"Delete Json Web Key using kid"},{"location":"admin/config-guide/jans-cli/cli-ldap-configuration/","tags":["administration","configuration","cli","commandline"],"text":"Lightweight Directory Active Protocol (LDAP) Configuration # Prerequisite: Know how to use the Janssen CLI in command-line mode As like as Interactive Menu , We can do the same operations here. Let's run the following command to get operation-id details of LDAP Database COnfiguration. /opt/jans/jans-cli/config-cli.py --info DatabaseLDAPConfiguration It comes with the following options: Operation ID: get-config-database-ldap Description: Gets list of existing LDAP configurations. Operation ID: post-config-database-ldap Description: Adds a new LDAP configuration. Schema: /components/schemas/LdapConfiguration Operation ID: put-config-database-ldap Description: Updates LDAP configuration. Schema: /components/schemas/LdapConfiguration Operation ID: get-config-database-ldap-by-name Description: Gets an LDAP configuration by name. url-suffix: name Operation ID: delete-config-database-ldap-by-name Description: Deletes an LDAP configuration. url-suffix: name Operation ID: patch-config-database-ldap-by-name Description: Partially modify an LDAP configuration. url-suffix: name Schema: Array of /components/schemas/PatchRequest Operation ID: post-config-database-ldap-test Description: Tests an LDAP configuration. Schema: /components/schemas/LdapConfiguration To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/LdapConfiguration Get Existing LDAP Configurations # To find the existing ldap configurations, let's run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-config-database-ldap [ { \"configId\" : \"auth_ldap_server\" , \"bindDN\" : \"cn=directory manager\" , \"bindPassword\" : \"m+OTwmlCEho=\" , \"servers\" : [ \"localhost:1636\" ], \"maxConnections\" : 1000 , \"useSSL\" : true , \"baseDNs\" : [ \"ou=people,o=jans\" ], \"primaryKey\" : \"uid\" , \"localPrimaryKey\" : \"uid\" , \"useAnonymousBind\" : false , \"enabled\" : false , \"version\" : 0 , \"level\" : 0 } ] Adds a new LDAP Configuration # At first, we have checked the existing ldap database configurations the janssen server have. Indeed we can create a new ldap configuration as well. Operation ID: post-config-database-ldap Description: Adds a new LDAP configuration. Schema: /components/schemas/LdapConfiguration Let's get the schema file and update it to push into the server. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/LdapConfiguration > /tmp/ldap.json { \"configId\": \"auth_ldap_server\", \"bindDN\": \"string\", \"bindPassword\": \"string\", \"servers\": \"array\", \"maxConnections\": 2, \"useSSL\": \"boolean\", \"baseDNs\": \"array\", \"primaryKey\": \"SAMAccountName,uid, email\", \"localPrimaryKey\": \"uid, email\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": null, \"level\": null } You need to modify ldap.json file with valid information. In our case, I have modified as below for testing only: { \"configId\": \"test_ldap\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"password\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 1000, \"useSSL\": \"true\", \"baseDNs\": [\"ou=people,o=jans\"], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 } Now, lets post this configuration into the database. /opt/jans/jans-cli/config-cli.py --operation-id post-config-database-ldap --data /tmp/ldap.json Getting access token for scope https://jans.io/oauth/config/database/ldap.write Server Response: { \"configId\": \"test_ldap\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"m+OTwmlCEho=\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 1000, \"useSSL\": true, \"baseDNs\": [ \"ou=people,o=jans\" ], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 } Please note that configId should be a unique identifier name for each configuration. Otherwise you will get error while going to post duplicate configuration into the server. In that case, you can go through the next option to replace instead of adding a new one. Updating LDAP Database Configurations # With this operation, we can update any ldap database configuration. Operation ID: put-config-database-ldap Description: Updates LDAP configuration. Schema: /components/schemas/LdapConfiguration For example, let say we are going to change to maxConnections in the above test_ldap configuration. So lets modify the /tmp/ldap.json file as below: { \"configId\": \"test_ldap\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"Mh@006\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 100, \"useSSL\": \"true\", \"baseDNs\": [\"ou=people,o=jans\"], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 } Finally lets do the operation: /opt/jans/jans-cli/config-cli.oy --operation-id put-config-database-ldap --data /tmp/ldap.json It will update the configuration if match with its configId otherwise return an error. Gets LDAP Database Configuration by its name # In the above operation, we have updated test_ldap.json . Let's check the updated result with this operation by calling its name id. /opt/jans/jans-cli/config-cli.py --operation-id get-config-database-ldap-by-name --url-suffix name:test_ldap Here name is the configId of the configuration. If we run this command, it returns the configuration details matched with configId. Getting access token for scope https://jans.io/oauth/config/database/ldap.readonly { \"configId\": \"test_ldap\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"3eFs1t1aRPsW4xtxvCiGQQ==\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 100, \"useSSL\": true, \"baseDNs\": [ \"ou=people,o=jans\" ], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 } Delete LDAP Database Configurations # In case, we need to delete any existing LDAP Database configuration we can do that as well. The command line: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-database-ldap-by-name --url-suffix name:test_ldap It will delete data ldap database configuration matched with the name. Patch LDAP Database Configurations # If required, We can patch single information of a ldap database configuration by using its name id. In that case, we have to make an array of operations in schema file. So, let's get the schema file first. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > patch.json We know already that this operation support three types of value op , path and value to be replaced. For more info visit this link For example, let's say, we want to change the level of the test_ldap configuration. So, Let's update the patch file as below: [ { \"op\": \"replace\", \"path\": \"level\", \"value\": \"100\" } ] To patch data, the command looks like for this: /opt/jans/jans-cli/config-cli.py --operation-id patch-config-database-ldap-by-name --url-suffix name:test_ldap --data patch.json It will update the configuration and will show the updated result as below image on the display.","title":"LDAP Configuration"},{"location":"admin/config-guide/jans-cli/cli-ldap-configuration/#lightweight-directory-active-protocol-ldap-configuration","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode As like as Interactive Menu , We can do the same operations here. Let's run the following command to get operation-id details of LDAP Database COnfiguration. /opt/jans/jans-cli/config-cli.py --info DatabaseLDAPConfiguration It comes with the following options: Operation ID: get-config-database-ldap Description: Gets list of existing LDAP configurations. Operation ID: post-config-database-ldap Description: Adds a new LDAP configuration. Schema: /components/schemas/LdapConfiguration Operation ID: put-config-database-ldap Description: Updates LDAP configuration. Schema: /components/schemas/LdapConfiguration Operation ID: get-config-database-ldap-by-name Description: Gets an LDAP configuration by name. url-suffix: name Operation ID: delete-config-database-ldap-by-name Description: Deletes an LDAP configuration. url-suffix: name Operation ID: patch-config-database-ldap-by-name Description: Partially modify an LDAP configuration. url-suffix: name Schema: Array of /components/schemas/PatchRequest Operation ID: post-config-database-ldap-test Description: Tests an LDAP configuration. Schema: /components/schemas/LdapConfiguration To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/LdapConfiguration","title":"Lightweight Directory Active Protocol (LDAP) Configuration"},{"location":"admin/config-guide/jans-cli/cli-ldap-configuration/#get-existing-ldap-configurations","text":"To find the existing ldap configurations, let's run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-config-database-ldap [ { \"configId\" : \"auth_ldap_server\" , \"bindDN\" : \"cn=directory manager\" , \"bindPassword\" : \"m+OTwmlCEho=\" , \"servers\" : [ \"localhost:1636\" ], \"maxConnections\" : 1000 , \"useSSL\" : true , \"baseDNs\" : [ \"ou=people,o=jans\" ], \"primaryKey\" : \"uid\" , \"localPrimaryKey\" : \"uid\" , \"useAnonymousBind\" : false , \"enabled\" : false , \"version\" : 0 , \"level\" : 0 } ]","title":"Get Existing LDAP Configurations"},{"location":"admin/config-guide/jans-cli/cli-ldap-configuration/#adds-a-new-ldap-configuration","text":"At first, we have checked the existing ldap database configurations the janssen server have. Indeed we can create a new ldap configuration as well. Operation ID: post-config-database-ldap Description: Adds a new LDAP configuration. Schema: /components/schemas/LdapConfiguration Let's get the schema file and update it to push into the server. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/LdapConfiguration > /tmp/ldap.json { \"configId\": \"auth_ldap_server\", \"bindDN\": \"string\", \"bindPassword\": \"string\", \"servers\": \"array\", \"maxConnections\": 2, \"useSSL\": \"boolean\", \"baseDNs\": \"array\", \"primaryKey\": \"SAMAccountName,uid, email\", \"localPrimaryKey\": \"uid, email\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": null, \"level\": null } You need to modify ldap.json file with valid information. In our case, I have modified as below for testing only: { \"configId\": \"test_ldap\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"password\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 1000, \"useSSL\": \"true\", \"baseDNs\": [\"ou=people,o=jans\"], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 } Now, lets post this configuration into the database. /opt/jans/jans-cli/config-cli.py --operation-id post-config-database-ldap --data /tmp/ldap.json Getting access token for scope https://jans.io/oauth/config/database/ldap.write Server Response: { \"configId\": \"test_ldap\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"m+OTwmlCEho=\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 1000, \"useSSL\": true, \"baseDNs\": [ \"ou=people,o=jans\" ], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 } Please note that configId should be a unique identifier name for each configuration. Otherwise you will get error while going to post duplicate configuration into the server. In that case, you can go through the next option to replace instead of adding a new one.","title":"Adds a new LDAP Configuration"},{"location":"admin/config-guide/jans-cli/cli-ldap-configuration/#updating-ldap-database-configurations","text":"With this operation, we can update any ldap database configuration. Operation ID: put-config-database-ldap Description: Updates LDAP configuration. Schema: /components/schemas/LdapConfiguration For example, let say we are going to change to maxConnections in the above test_ldap configuration. So lets modify the /tmp/ldap.json file as below: { \"configId\": \"test_ldap\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"Mh@006\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 100, \"useSSL\": \"true\", \"baseDNs\": [\"ou=people,o=jans\"], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 } Finally lets do the operation: /opt/jans/jans-cli/config-cli.oy --operation-id put-config-database-ldap --data /tmp/ldap.json It will update the configuration if match with its configId otherwise return an error.","title":"Updating LDAP Database Configurations"},{"location":"admin/config-guide/jans-cli/cli-ldap-configuration/#gets-ldap-database-configuration-by-its-name","text":"In the above operation, we have updated test_ldap.json . Let's check the updated result with this operation by calling its name id. /opt/jans/jans-cli/config-cli.py --operation-id get-config-database-ldap-by-name --url-suffix name:test_ldap Here name is the configId of the configuration. If we run this command, it returns the configuration details matched with configId. Getting access token for scope https://jans.io/oauth/config/database/ldap.readonly { \"configId\": \"test_ldap\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"3eFs1t1aRPsW4xtxvCiGQQ==\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 100, \"useSSL\": true, \"baseDNs\": [ \"ou=people,o=jans\" ], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 }","title":"Gets LDAP Database Configuration by its name"},{"location":"admin/config-guide/jans-cli/cli-ldap-configuration/#delete-ldap-database-configurations","text":"In case, we need to delete any existing LDAP Database configuration we can do that as well. The command line: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-database-ldap-by-name --url-suffix name:test_ldap It will delete data ldap database configuration matched with the name.","title":"Delete LDAP Database Configurations"},{"location":"admin/config-guide/jans-cli/cli-ldap-configuration/#patch-ldap-database-configurations","text":"If required, We can patch single information of a ldap database configuration by using its name id. In that case, we have to make an array of operations in schema file. So, let's get the schema file first. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > patch.json We know already that this operation support three types of value op , path and value to be replaced. For more info visit this link For example, let's say, we want to change the level of the test_ldap configuration. So, Let's update the patch file as below: [ { \"op\": \"replace\", \"path\": \"level\", \"value\": \"100\" } ] To patch data, the command looks like for this: /opt/jans/jans-cli/config-cli.py --operation-id patch-config-database-ldap-by-name --url-suffix name:test_ldap --data patch.json It will update the configuration and will show the updated result as below image on the display.","title":"Patch LDAP Database Configurations"},{"location":"admin/config-guide/jans-cli/cli-logging-configuration/","tags":["administration","configuration","cli","commandline"],"text":"Log Management # Prerequisite: Know how to use the Janssen CLI in command-line mode To view/update logging configuration, let's get the information of logging Configuration. /opt/jans/jans-cli/config-cli.py --info ConfigurationLogging Operation ID: get-config-logging Description: Returns Jans Authorization Server logging settings. Operation ID: put-config-logging Description: Updates Jans Authorization Server logging settings. Schema: /components/schemas/LoggingConfiguration To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/LoggingConfiguration Table of Contents # Log Management Find Logging Configuration Update Logging Configuration Find Logging Configuration # /opt/jans/jans-cli/config-cli.py --operation-id get-config-logging Getting access token for scope https://jans.io/oauth/config/logging.readonly { \"loggingLevel\": \"INFO\", \"loggingLayout\": \"text\", \"httpLoggingEnabled\": false, \"disableJdkLogger\": true, \"enabledOAuthAuditLogging\": false, \"externalLoggerConfiguration\": null, \"httpLoggingExcludePaths\": null } Update Logging Configuration # To update logging configuration, get the schema first: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/LoggingConfiguration > /tmp/log-config.json { \"loggingLevel\": \"FATAL\", \"loggingLayout\": \"text\", \"httpLoggingEnabled\": true, \"disableJdkLogger\": true, \"enabledOAuthAuditLogging\": false, \"externalLoggerConfiguration\": null, \"httpLoggingExcludePaths\": [ \"/auth/img\", \"/auth/stylesheet\" ] } let's update the schema: nano /tmp/log-config.json Here I have updated loggingLevel to DEBUG and enabledOAuditLogging to true as below image. Let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id put-config-logging --data /tmp/log-config.json You will get the updated result as below: Getting access token for scope https://jans.io/oauth/config/logging.write Server Response: { \"loggingLevel\": \"DEBUG\", \"loggingLayout\": \"json\", \"httpLoggingEnabled\": false, \"disableJdkLogger\": false, \"enabledOAuthAuditLogging\": true, \"externalLoggerConfiguration\": null, \"httpLoggingExcludePaths\": [ \"/auth/img\", \"/auth/stylesheet\" ] }","title":"Logging"},{"location":"admin/config-guide/jans-cli/cli-logging-configuration/#log-management","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode To view/update logging configuration, let's get the information of logging Configuration. /opt/jans/jans-cli/config-cli.py --info ConfigurationLogging Operation ID: get-config-logging Description: Returns Jans Authorization Server logging settings. Operation ID: put-config-logging Description: Updates Jans Authorization Server logging settings. Schema: /components/schemas/LoggingConfiguration To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/LoggingConfiguration","title":"Log Management"},{"location":"admin/config-guide/jans-cli/cli-logging-configuration/#table-of-contents","text":"Log Management Find Logging Configuration Update Logging Configuration","title":"Table of Contents"},{"location":"admin/config-guide/jans-cli/cli-logging-configuration/#find-logging-configuration","text":"/opt/jans/jans-cli/config-cli.py --operation-id get-config-logging Getting access token for scope https://jans.io/oauth/config/logging.readonly { \"loggingLevel\": \"INFO\", \"loggingLayout\": \"text\", \"httpLoggingEnabled\": false, \"disableJdkLogger\": true, \"enabledOAuthAuditLogging\": false, \"externalLoggerConfiguration\": null, \"httpLoggingExcludePaths\": null }","title":"Find Logging Configuration"},{"location":"admin/config-guide/jans-cli/cli-logging-configuration/#update-logging-configuration","text":"To update logging configuration, get the schema first: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/LoggingConfiguration > /tmp/log-config.json { \"loggingLevel\": \"FATAL\", \"loggingLayout\": \"text\", \"httpLoggingEnabled\": true, \"disableJdkLogger\": true, \"enabledOAuthAuditLogging\": false, \"externalLoggerConfiguration\": null, \"httpLoggingExcludePaths\": [ \"/auth/img\", \"/auth/stylesheet\" ] } let's update the schema: nano /tmp/log-config.json Here I have updated loggingLevel to DEBUG and enabledOAuditLogging to true as below image. Let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id put-config-logging --data /tmp/log-config.json You will get the updated result as below: Getting access token for scope https://jans.io/oauth/config/logging.write Server Response: { \"loggingLevel\": \"DEBUG\", \"loggingLayout\": \"json\", \"httpLoggingEnabled\": false, \"disableJdkLogger\": false, \"enabledOAuthAuditLogging\": true, \"externalLoggerConfiguration\": null, \"httpLoggingExcludePaths\": [ \"/auth/img\", \"/auth/stylesheet\" ] }","title":"Update Logging Configuration"},{"location":"admin/config-guide/jans-cli/cli-oauthscopes/","tags":["administration","configuration","cli","commandline"],"text":"OAuth Scopes # Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get information for a task OAuthScopes /opt/jans/jans-cli/config-cli.py --info OAuthScopes Operation ID: get-oauth-scopes Description: Gets list of Scopes. Optionally type to filter the scope, max-size of the result and pattern can be provided. Parameters: type: Scope type. [string] limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] Operation ID: post-oauth-scopes Description: Create Scope. Schema: /components/schemas/Scope Operation ID: put-oauth-scopes Description: Updates existing Scope. Schema: /components/schemas/Scope Operation ID: get-oauth-scopes-by-inum Description: Get Scope by Inum url-suffix: inum Operation ID: delete-oauth-scopes-by-inum Description: Delete Scope. url-suffix: inum Operation ID: patch-oauth-scopes-by-id Description: Update modified attributes of existing Scope by Inum. url-suffix: inum Schema: Array of /components/schemas/PatchRequest To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Find/View OAuth Scopes # Operations will be done with Operation ID . Some operations may take parameters, let's retrieve 3 scopes ( limit ) that has view in it's description ( pattern ) and type openid : /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-scopes --endpoint-args limit:3,pattern:view,type:openid ``` It will return: ``` Getting access token for scope https://jans.io/oauth/config/scopes.readonly Calling with params limit=3&pattern=view&type=openid [ { \"dn\": \"inum=43F1,ou=scopes,o=jans\", \"id\": \"profile\", \"inum\": \"43F1\", \"displayName\": null, \"description\": \"View your basic profile info.\", \"iconUrl\": null, \"authorizationPolicies\": null, \"defaultScope\": false, \"scopeType\": \"openid\", \"claims\": [ \"inum=2B29,ou=attributes,o=jans\", \"inum=0C85,ou=attributes,o=jans\", \"inum=B4B0,ou=attributes,o=jans\", \"inum=A0E8,ou=attributes,o=jans\", \"inum=5EC6,ou=attributes,o=jans\", \"inum=B52A,ou=attributes,o=jans\", \"inum=64A0,ou=attributes,o=jans\", \"inum=EC3A,ou=attributes,o=jans\", \"inum=3B47,ou=attributes,o=jans\", \"inum=3692,ou=attributes,o=jans\", \"inum=98FC,ou=attributes,o=jans\", \"inum=A901,ou=attributes,o=jans\", \"inum=36D9,ou=attributes,o=jans\", \"inum=BE64,ou=attributes,o=jans\", \"inum=6493,ou=attributes,o=jans\" ], \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } }, { \"dn\": \"inum=C17A,ou=scopes,o=jans\", \"id\": \"address\", \"inum\": \"C17A\", \"displayName\": null, \"description\": \"View your address.\", \"iconUrl\": null, \"authorizationPolicies\": null, \"defaultScope\": false, \"scopeType\": \"openid\", \"claims\": [ \"inum=27DB,ou=attributes,o=jans\", \"inum=2A3D,ou=attributes,o=jans\", \"inum=6609,ou=attributes,o=jans\", \"inum=6EEB,ou=attributes,o=jans\", \"inum=BCE8,ou=attributes,o=jans\", \"inum=D90B,ou=attributes,o=jans\", \"inum=E6B8,ou=attributes,o=jans\", \"inum=E999,ou=attributes,o=jans\" ], \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } }, { \"dn\": \"inum=764C,ou=scopes,o=jans\", \"id\": \"email\", \"inum\": \"764C\", \"displayName\": null, \"description\": \"View your email address.\", \"iconUrl\": null, \"authorizationPolicies\": null, \"defaultScope\": false, \"scopeType\": \"openid\", \"claims\": [ \"inum=8F88,ou=attributes,o=jans\", \"inum=CAE3,ou=attributes,o=jans\" ], \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } } ] Create an OAuth Scope # Let's create a scope. Remember when we queried info for a task OAuthScopes it printed: Operation ID: post-oauth-scopes Description: Create Scope. Schema: /components/schemas/Scope Thus, we can get sample schema and use Operation ID post-oauth-scopes . Lets get sample schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/Scope > /tmp/scope.json Now edit file tmp/scope.json with an editor (like nano ). As an example we just filled the following properties: \"id\": \"TestScopeID\", \"displayName\": \"TestScope\", \"description\": \"Test Scope created by jans-cli\", It is time to post the data: /opt/jans/jans-cli/config-cli.py --operation-id post-oauth-scopes --data /tmp/scope.json Getting access token for scope https://jans.io/oauth/config/scopes.write Server Response: { \"dn\": \"inum=112116fd-257b-40d8-a2c9-0c23536680ed,ou=scopes,o=jans\", \"id\": \"TestScopeID\", \"inum\": \"112116fd-257b-40d8-a2c9-0c23536680ed\", \"displayName\": \"TestScope\", \"description\": \"Test Scope created by jans-cli\", \"iconUrl\": null, \"authorizationPolicies\": null, \"defaultScope\": true, \"scopeType\": \"openid\", \"claims\": null, \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } } It created scope with inum 112116fd-257b-40d8-a2c9-0c23536680ed and returned current data. Update Existing OAuth Scopes # In case we need to update an existing OAuth Scope, we can do that as well. To update an existing OAuth Scope, we have to create a json file with updated details. You can get the schema file as well to understand the format of the OAuth Scope JSON file. This is an existing OAuth Scope we are going to update. { \"dn\": \"inum=5c3ba3f0-d2ce-4974-9efb-883697d929d1,ou=scopes,o=jans\", \"inum\": \"5c3ba3f0-d2ce-4974-9efb-883697d929d1\", \"displayName\": \"TestScope\", \"id\": \"TestScopeID\", \"iconUrl\": null, \"description\": \"TestScope for jans-cli\", \"scopeType\": \"dynamic\", \"claims\": null, \"defaultScope\": true, \"groupClaims\": true, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": false }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } We have changed only the scopeType to openid . The updated data: { \"dn\": \"inum=5c3ba3f0-d2ce-4974-9efb-883697d929d1,ou=scopes,o=jans\", \"inum\": \"5c3ba3f0-d2ce-4974-9efb-883697d929d1\", \"displayName\": \"TestScope\", \"id\": \"TestScopeID\", \"iconUrl\": null, \"description\": \"TestScope for jans-cli\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": true, \"groupClaims\": true, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": false }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } The command line is: /opt/jans/jans-cli/config-cli.py --operation-id put-oauth-scopes --data /tmp/scope.json This will updated the existing oauth scopes matched with inum value. Patch OAuth Scopes by inum # Let's update iconUrl with patch method. So we need a schema for the patch method. Remember when we queried info for the task OAuthScopes it printed: Operation ID: patch-oauth-scopes-by-id Description: Update modified attributes of existing Scope by Inum. url-suffix: inum Schema: Array of /components/schemas/PatchRequest ``` This means we need schema `/components/schemas/PatchRequest`, be careful it states **Array of**, so we will make an array of this schema, in case you need multiple changes with patch method, you can put as many as of this schema into array. To know more about `PatchRequest` schema, please visit this [link](cli-index.md#patch-request-schema). Let's Get schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch.json We can edit this json as follows (remember to make it an array): ![jans-cl Edit patch.json](../../../assets/image-cl-oauthscope-patch-json-03042021.png) Let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id patch-oauth-scopes-by-id --url-suffix inum:112116fd-257b-40d8-a2c9-0c23536680ed --data /tmp/patch.json Getting access token for scope https://jans.io/oauth/config/scopes.write Server Response: { \"dn\": \"inum=112116fd-257b-40d8-a2c9-0c23536680ed,ou=scopes,o=jans\", \"id\": \"TestScopeID\", \"inum\": \"112116fd-257b-40d8-a2c9-0c23536680ed\", \"displayName\": \"TestScope\", \"description\": \"Test Scope created by jans-cli\", \"iconUrl\": \"https://www.jans.io/icon.png\", \"authorizationPolicies\": null, \"defaultScope\": true, \"scopeType\": \"openid\", \"claims\": null, \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } } ## Find OAuth Scopes by `inum` In case We know the `inum` value of an OAuth Scope, We can get the details of that scope. Operation ID: get-oauth-scopes-by-inum Description: Get Scope by Inum url-suffix: inum We can see that, the `url-suffix` here for `inum` value. And the command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-scopes-by-inum --url-suffix inum:value For example: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-scopes-by-inum --url-suffix inum:C4F6 It returns the details of the scope matched with the `inum` value. { \"dn\": \"inum=C4F6,ou=scopes,o=jans\", \"inum\": \"C4F6\", \"displayName\": \"refresh_token\", \"id\": \"offline_access\", \"iconUrl\": null, \"description\": \"This scope value requests that an OAuth 2.0 Refresh Token be issued.\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": true, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } That's it. ## Delete OAuth Scopes by `inum` You can delete any OAuth Scopes by its `inum` value. The command line is: /opt/jans/jans-cli/config-cli.py --operation-id delete-oauth-scopes-by-inum --url-suffix inum:f9a7add1-04ca-432c-84d4-cb127e84bd48 ``` Just change the inum value to your own according to which one you want to delete.","title":"OAuth Scope Management"},{"location":"admin/config-guide/jans-cli/cli-oauthscopes/#oauth-scopes","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get information for a task OAuthScopes /opt/jans/jans-cli/config-cli.py --info OAuthScopes Operation ID: get-oauth-scopes Description: Gets list of Scopes. Optionally type to filter the scope, max-size of the result and pattern can be provided. Parameters: type: Scope type. [string] limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] Operation ID: post-oauth-scopes Description: Create Scope. Schema: /components/schemas/Scope Operation ID: put-oauth-scopes Description: Updates existing Scope. Schema: /components/schemas/Scope Operation ID: get-oauth-scopes-by-inum Description: Get Scope by Inum url-suffix: inum Operation ID: delete-oauth-scopes-by-inum Description: Delete Scope. url-suffix: inum Operation ID: patch-oauth-scopes-by-id Description: Update modified attributes of existing Scope by Inum. url-suffix: inum Schema: Array of /components/schemas/PatchRequest To get sample schema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest","title":"OAuth Scopes"},{"location":"admin/config-guide/jans-cli/cli-oauthscopes/#findview-oauth-scopes","text":"Operations will be done with Operation ID . Some operations may take parameters, let's retrieve 3 scopes ( limit ) that has view in it's description ( pattern ) and type openid : /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-scopes --endpoint-args limit:3,pattern:view,type:openid ``` It will return: ``` Getting access token for scope https://jans.io/oauth/config/scopes.readonly Calling with params limit=3&pattern=view&type=openid [ { \"dn\": \"inum=43F1,ou=scopes,o=jans\", \"id\": \"profile\", \"inum\": \"43F1\", \"displayName\": null, \"description\": \"View your basic profile info.\", \"iconUrl\": null, \"authorizationPolicies\": null, \"defaultScope\": false, \"scopeType\": \"openid\", \"claims\": [ \"inum=2B29,ou=attributes,o=jans\", \"inum=0C85,ou=attributes,o=jans\", \"inum=B4B0,ou=attributes,o=jans\", \"inum=A0E8,ou=attributes,o=jans\", \"inum=5EC6,ou=attributes,o=jans\", \"inum=B52A,ou=attributes,o=jans\", \"inum=64A0,ou=attributes,o=jans\", \"inum=EC3A,ou=attributes,o=jans\", \"inum=3B47,ou=attributes,o=jans\", \"inum=3692,ou=attributes,o=jans\", \"inum=98FC,ou=attributes,o=jans\", \"inum=A901,ou=attributes,o=jans\", \"inum=36D9,ou=attributes,o=jans\", \"inum=BE64,ou=attributes,o=jans\", \"inum=6493,ou=attributes,o=jans\" ], \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } }, { \"dn\": \"inum=C17A,ou=scopes,o=jans\", \"id\": \"address\", \"inum\": \"C17A\", \"displayName\": null, \"description\": \"View your address.\", \"iconUrl\": null, \"authorizationPolicies\": null, \"defaultScope\": false, \"scopeType\": \"openid\", \"claims\": [ \"inum=27DB,ou=attributes,o=jans\", \"inum=2A3D,ou=attributes,o=jans\", \"inum=6609,ou=attributes,o=jans\", \"inum=6EEB,ou=attributes,o=jans\", \"inum=BCE8,ou=attributes,o=jans\", \"inum=D90B,ou=attributes,o=jans\", \"inum=E6B8,ou=attributes,o=jans\", \"inum=E999,ou=attributes,o=jans\" ], \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } }, { \"dn\": \"inum=764C,ou=scopes,o=jans\", \"id\": \"email\", \"inum\": \"764C\", \"displayName\": null, \"description\": \"View your email address.\", \"iconUrl\": null, \"authorizationPolicies\": null, \"defaultScope\": false, \"scopeType\": \"openid\", \"claims\": [ \"inum=8F88,ou=attributes,o=jans\", \"inum=CAE3,ou=attributes,o=jans\" ], \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } } ]","title":"Find/View OAuth Scopes"},{"location":"admin/config-guide/jans-cli/cli-oauthscopes/#create-an-oauth-scope","text":"Let's create a scope. Remember when we queried info for a task OAuthScopes it printed: Operation ID: post-oauth-scopes Description: Create Scope. Schema: /components/schemas/Scope Thus, we can get sample schema and use Operation ID post-oauth-scopes . Lets get sample schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/Scope > /tmp/scope.json Now edit file tmp/scope.json with an editor (like nano ). As an example we just filled the following properties: \"id\": \"TestScopeID\", \"displayName\": \"TestScope\", \"description\": \"Test Scope created by jans-cli\", It is time to post the data: /opt/jans/jans-cli/config-cli.py --operation-id post-oauth-scopes --data /tmp/scope.json Getting access token for scope https://jans.io/oauth/config/scopes.write Server Response: { \"dn\": \"inum=112116fd-257b-40d8-a2c9-0c23536680ed,ou=scopes,o=jans\", \"id\": \"TestScopeID\", \"inum\": \"112116fd-257b-40d8-a2c9-0c23536680ed\", \"displayName\": \"TestScope\", \"description\": \"Test Scope created by jans-cli\", \"iconUrl\": null, \"authorizationPolicies\": null, \"defaultScope\": true, \"scopeType\": \"openid\", \"claims\": null, \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } } It created scope with inum 112116fd-257b-40d8-a2c9-0c23536680ed and returned current data.","title":"Create an OAuth Scope"},{"location":"admin/config-guide/jans-cli/cli-oauthscopes/#update-existing-oauth-scopes","text":"In case we need to update an existing OAuth Scope, we can do that as well. To update an existing OAuth Scope, we have to create a json file with updated details. You can get the schema file as well to understand the format of the OAuth Scope JSON file. This is an existing OAuth Scope we are going to update. { \"dn\": \"inum=5c3ba3f0-d2ce-4974-9efb-883697d929d1,ou=scopes,o=jans\", \"inum\": \"5c3ba3f0-d2ce-4974-9efb-883697d929d1\", \"displayName\": \"TestScope\", \"id\": \"TestScopeID\", \"iconUrl\": null, \"description\": \"TestScope for jans-cli\", \"scopeType\": \"dynamic\", \"claims\": null, \"defaultScope\": true, \"groupClaims\": true, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": false }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } We have changed only the scopeType to openid . The updated data: { \"dn\": \"inum=5c3ba3f0-d2ce-4974-9efb-883697d929d1,ou=scopes,o=jans\", \"inum\": \"5c3ba3f0-d2ce-4974-9efb-883697d929d1\", \"displayName\": \"TestScope\", \"id\": \"TestScopeID\", \"iconUrl\": null, \"description\": \"TestScope for jans-cli\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": true, \"groupClaims\": true, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": false }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } The command line is: /opt/jans/jans-cli/config-cli.py --operation-id put-oauth-scopes --data /tmp/scope.json This will updated the existing oauth scopes matched with inum value.","title":"Update Existing OAuth Scopes"},{"location":"admin/config-guide/jans-cli/cli-oauthscopes/#patch-oauth-scopes-by-inum","text":"Let's update iconUrl with patch method. So we need a schema for the patch method. Remember when we queried info for the task OAuthScopes it printed: Operation ID: patch-oauth-scopes-by-id Description: Update modified attributes of existing Scope by Inum. url-suffix: inum Schema: Array of /components/schemas/PatchRequest ``` This means we need schema `/components/schemas/PatchRequest`, be careful it states **Array of**, so we will make an array of this schema, in case you need multiple changes with patch method, you can put as many as of this schema into array. To know more about `PatchRequest` schema, please visit this [link](cli-index.md#patch-request-schema). Let's Get schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch.json We can edit this json as follows (remember to make it an array): ![jans-cl Edit patch.json](../../../assets/image-cl-oauthscope-patch-json-03042021.png) Let's do the operation: /opt/jans/jans-cli/config-cli.py --operation-id patch-oauth-scopes-by-id --url-suffix inum:112116fd-257b-40d8-a2c9-0c23536680ed --data /tmp/patch.json Getting access token for scope https://jans.io/oauth/config/scopes.write Server Response: { \"dn\": \"inum=112116fd-257b-40d8-a2c9-0c23536680ed,ou=scopes,o=jans\", \"id\": \"TestScopeID\", \"inum\": \"112116fd-257b-40d8-a2c9-0c23536680ed\", \"displayName\": \"TestScope\", \"description\": \"Test Scope created by jans-cli\", \"iconUrl\": \"https://www.jans.io/icon.png\", \"authorizationPolicies\": null, \"defaultScope\": true, \"scopeType\": \"openid\", \"claims\": null, \"umaType\": false, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true } } ## Find OAuth Scopes by `inum` In case We know the `inum` value of an OAuth Scope, We can get the details of that scope. Operation ID: get-oauth-scopes-by-inum Description: Get Scope by Inum url-suffix: inum We can see that, the `url-suffix` here for `inum` value. And the command line is: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-scopes-by-inum --url-suffix inum:value For example: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-scopes-by-inum --url-suffix inum:C4F6 It returns the details of the scope matched with the `inum` value. { \"dn\": \"inum=C4F6,ou=scopes,o=jans\", \"inum\": \"C4F6\", \"displayName\": \"refresh_token\", \"id\": \"offline_access\", \"iconUrl\": null, \"description\": \"This scope value requests that an OAuth 2.0 Refresh Token be issued.\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": true, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } That's it. ## Delete OAuth Scopes by `inum` You can delete any OAuth Scopes by its `inum` value. The command line is: /opt/jans/jans-cli/config-cli.py --operation-id delete-oauth-scopes-by-inum --url-suffix inum:f9a7add1-04ca-432c-84d4-cb127e84bd48 ``` Just change the inum value to your own according to which one you want to delete.","title":"Patch OAuth Scopes by inum"},{"location":"admin/config-guide/jans-cli/cli-oauthumaresources/","tags":["administration","configuration","cli","commandline"],"text":"UMA Resources # Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get the information for OAuthUMAResources: /opt/jans/jans-cli/config-cli.py --info OAuthUMAResources Operation ID: get-oauth-uma-resources Description: Gets list of UMA resources. Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] Operation ID: post-oauth-uma-resources Description: Creates an UMA resource. Schema: /components/schemas/UmaResource Operation ID: put-oauth-uma-resources Description: Updates an UMA resource. Schema: /components/schemas/UmaResource Operation ID: get-oauth-uma-resources-by-id Description: Gets an UMA resource by ID. url-suffix: id Operation ID: delete-oauth-uma-resources-by-id Description: Deletes an UMA resource. url-suffix: id Operation ID: patch-oauth-uma-resources-by-id Description: Partially updates an UMA resource by Inum. url-suffix: id Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Table of Contents # UMA Resources Get List of UMA Resources Get Oauth UMA Resource by ID Patch OAuth UMA Resource by ID Get List of UMA Resources # This operation is used to search UMA Resources. Operation ID: get-oauth-uma-resources Description: Gets list of UMA resources. Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] To get a list of UMA resources: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-uma-resources --endpoint-args limit:5 It will return random 5 UMA resources. Getting access token for scope https://jans.io/oauth/config/uma/resources.readonly Calling with params limit=5 [ { \"dn\": \"jansId=1800.1ed09ec8-5918-4cb5-9123-e4b9df36231f,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.1ed09ec8-5918-4cb5-9123-e4b9df36231f\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/attributes\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-0B30,ou=scopes,o=jans\", \"inum=CACA-BFDB,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/attributes\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.78e4c317-4d5a-4f23-b767-e63793364bee,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.78e4c317-4d5a-4f23-b767-e63793364bee\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/acrs\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-D906,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/acrs\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.556448d7-b349-45d8-a3a8-0d163df8753c,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.556448d7-b349-45d8-a3a8-0d163df8753c\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/config/cache\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-4525,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/config/cache\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/attributes\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-0B30,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/attributes\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.049d1198-a911-4032-aaf6-59cc94d3f4ef,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.049d1198-a911-4032-aaf6-59cc94d3f4ef\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/acrs\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-D906,ou=scopes,o=jans\", \"inum=CACA-698C,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/acrs\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true } ] To search using multiple arguments, you can change pattern that you want to find: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-uma-resources --endpoint-args limit:1,pattern:\"Jans Cofig Api Uma Resource /jans-config-api/api/v1/config/cache/native-persistence\" Getting access token for scope https://jans.io/oauth/config/uma/resources.readonly Calling with params limit=1&pattern=Jans+Cofig+Api+Uma+Resource+%2Fjans-config-api%2Fapi%2Fv1%2Fconfig%2Fcache%2Fnative-persistence [ { \"dn\": \"jansId=1800.02d24ac8-13d6-464d-af1d-46a6261eaa65,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.02d24ac8-13d6-464d-af1d-46a6261eaa65\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/config/cache/native-persistence\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": null, \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/config/cache/native-persistence\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.6cd9bb98-05ac-43d2-bebb-3b1c92b9b409,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.6cd9bb98-05ac-43d2-bebb-3b1c92b9b409\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/config/cache/native-persistence\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": null, \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/config/cache/native-persistence\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true } ] Get Oauth UMA Resource by ID # Operation ID: get-oauth-uma-resources-by-id Description: Gets an UMA resource by ID. url-suffix: id To get uma resource by its ID, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-uma-resources-by-id --url-suffix id:1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da Getting access token for scope https://jans.io/oauth/config/uma/resources.readonly { \"dn\": \"jansId=1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/attributes\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-0B30,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/attributes\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true } replace the id with accurate one. Patch OAuth UMA Resource by ID # Operation ID: patch-oauth-uma-resources-by-id Description: Partially updates an UMA resource by Inum. url-suffix: id Schema: Array of /components/schemas/PatchRequest As you see the description, you can update an existing uma resource partially with this following operation. Let's get the sample schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch-uma.json { \"op\": \"move\", \"path\": \"string\", \"value\": {} } Let's want to update as deletable:false to an uma resource whose id=1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da . So we are going to operate replace where path is deletable with value: false . let's update the json as below: nan o / t mp/pa t ch - uma.jso n [ { \"op\" : \"replace\" , \"path\" : \"deletable\" , \"value\" : false } ] now let's do the operation: /op t /ja ns /ja ns - cli/co nf ig - cli.py -- opera t io n - id pa t ch - oau t h - uma - resources - by - id -- url - su ff ix id : 1800. c 4e0 d 1 b 6-e731-4 c 8 d - a 0 ab -66784349 a 4 da -- da ta / t mp/pa t ch - uma.jso n Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/uma/resources.write Server Respo nse : { \"dn\" : \"jansId=1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da,ou=resources,ou=uma,o=jans\" , \"inum\" : null , \"id\" : \"1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da\" , \"name\" : \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/attributes\" , \"iconUri\" : \"http://www.jans.io/img/scim_logo.png\" , \"scopes\" : [ \"inum=CACA-0B30,ou=scopes,o=jans\" ], \"scopeExpression\" : null , \"clients\" : [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\" : [ \"https://testjans.gluu.com/jans-config-api/api/v1/attributes\" ], \"rev\" : \"1\" , \"creator\" : \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\" , \"description\" : null , \"type\" : null , \"creationDate\" : null , \"expirationDate\" : null , \"deletable\" : false } you must see that deletable updated to false .","title":"UMA Management"},{"location":"admin/config-guide/jans-cli/cli-oauthumaresources/#uma-resources","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get the information for OAuthUMAResources: /opt/jans/jans-cli/config-cli.py --info OAuthUMAResources Operation ID: get-oauth-uma-resources Description: Gets list of UMA resources. Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] Operation ID: post-oauth-uma-resources Description: Creates an UMA resource. Schema: /components/schemas/UmaResource Operation ID: put-oauth-uma-resources Description: Updates an UMA resource. Schema: /components/schemas/UmaResource Operation ID: get-oauth-uma-resources-by-id Description: Gets an UMA resource by ID. url-suffix: id Operation ID: delete-oauth-uma-resources-by-id Description: Deletes an UMA resource. url-suffix: id Operation ID: patch-oauth-uma-resources-by-id Description: Partially updates an UMA resource by Inum. url-suffix: id Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest","title":"UMA Resources"},{"location":"admin/config-guide/jans-cli/cli-oauthumaresources/#table-of-contents","text":"UMA Resources Get List of UMA Resources Get Oauth UMA Resource by ID Patch OAuth UMA Resource by ID","title":"Table of Contents"},{"location":"admin/config-guide/jans-cli/cli-oauthumaresources/#get-list-of-uma-resources","text":"This operation is used to search UMA Resources. Operation ID: get-oauth-uma-resources Description: Gets list of UMA resources. Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] To get a list of UMA resources: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-uma-resources --endpoint-args limit:5 It will return random 5 UMA resources. Getting access token for scope https://jans.io/oauth/config/uma/resources.readonly Calling with params limit=5 [ { \"dn\": \"jansId=1800.1ed09ec8-5918-4cb5-9123-e4b9df36231f,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.1ed09ec8-5918-4cb5-9123-e4b9df36231f\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/attributes\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-0B30,ou=scopes,o=jans\", \"inum=CACA-BFDB,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/attributes\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.78e4c317-4d5a-4f23-b767-e63793364bee,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.78e4c317-4d5a-4f23-b767-e63793364bee\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/acrs\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-D906,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/acrs\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.556448d7-b349-45d8-a3a8-0d163df8753c,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.556448d7-b349-45d8-a3a8-0d163df8753c\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/config/cache\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-4525,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/config/cache\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/attributes\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-0B30,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/attributes\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.049d1198-a911-4032-aaf6-59cc94d3f4ef,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.049d1198-a911-4032-aaf6-59cc94d3f4ef\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/acrs\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-D906,ou=scopes,o=jans\", \"inum=CACA-698C,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/acrs\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true } ] To search using multiple arguments, you can change pattern that you want to find: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-uma-resources --endpoint-args limit:1,pattern:\"Jans Cofig Api Uma Resource /jans-config-api/api/v1/config/cache/native-persistence\" Getting access token for scope https://jans.io/oauth/config/uma/resources.readonly Calling with params limit=1&pattern=Jans+Cofig+Api+Uma+Resource+%2Fjans-config-api%2Fapi%2Fv1%2Fconfig%2Fcache%2Fnative-persistence [ { \"dn\": \"jansId=1800.02d24ac8-13d6-464d-af1d-46a6261eaa65,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.02d24ac8-13d6-464d-af1d-46a6261eaa65\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/config/cache/native-persistence\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": null, \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/config/cache/native-persistence\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true }, { \"dn\": \"jansId=1800.6cd9bb98-05ac-43d2-bebb-3b1c92b9b409,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.6cd9bb98-05ac-43d2-bebb-3b1c92b9b409\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/config/cache/native-persistence\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": null, \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/config/cache/native-persistence\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true } ]","title":"Get List of UMA Resources"},{"location":"admin/config-guide/jans-cli/cli-oauthumaresources/#get-oauth-uma-resource-by-id","text":"Operation ID: get-oauth-uma-resources-by-id Description: Gets an UMA resource by ID. url-suffix: id To get uma resource by its ID, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-uma-resources-by-id --url-suffix id:1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da Getting access token for scope https://jans.io/oauth/config/uma/resources.readonly { \"dn\": \"jansId=1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da,ou=resources,ou=uma,o=jans\", \"inum\": null, \"id\": \"1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da\", \"name\": \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/attributes\", \"iconUri\": \"http://www.jans.io/img/scim_logo.png\", \"scopes\": [ \"inum=CACA-0B30,ou=scopes,o=jans\" ], \"scopeExpression\": null, \"clients\": [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\": [ \"https://testjans.gluu.com/jans-config-api/api/v1/attributes\" ], \"rev\": \"1\", \"creator\": \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\", \"description\": null, \"type\": null, \"creationDate\": null, \"expirationDate\": null, \"deletable\": true } replace the id with accurate one.","title":"Get Oauth UMA Resource by ID"},{"location":"admin/config-guide/jans-cli/cli-oauthumaresources/#patch-oauth-uma-resource-by-id","text":"Operation ID: patch-oauth-uma-resources-by-id Description: Partially updates an UMA resource by Inum. url-suffix: id Schema: Array of /components/schemas/PatchRequest As you see the description, you can update an existing uma resource partially with this following operation. Let's get the sample schema: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest > /tmp/patch-uma.json { \"op\": \"move\", \"path\": \"string\", \"value\": {} } Let's want to update as deletable:false to an uma resource whose id=1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da . So we are going to operate replace where path is deletable with value: false . let's update the json as below: nan o / t mp/pa t ch - uma.jso n [ { \"op\" : \"replace\" , \"path\" : \"deletable\" , \"value\" : false } ] now let's do the operation: /op t /ja ns /ja ns - cli/co nf ig - cli.py -- opera t io n - id pa t ch - oau t h - uma - resources - by - id -- url - su ff ix id : 1800. c 4e0 d 1 b 6-e731-4 c 8 d - a 0 ab -66784349 a 4 da -- da ta / t mp/pa t ch - uma.jso n Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/uma/resources.write Server Respo nse : { \"dn\" : \"jansId=1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da,ou=resources,ou=uma,o=jans\" , \"inum\" : null , \"id\" : \"1800.c4e0d1b6-e731-4c8d-a0ab-66784349a4da\" , \"name\" : \"Jans Cofig Api Uma Resource /jans-config-api/api/v1/attributes\" , \"iconUri\" : \"http://www.jans.io/img/scim_logo.png\" , \"scopes\" : [ \"inum=CACA-0B30,ou=scopes,o=jans\" ], \"scopeExpression\" : null , \"clients\" : [ \"inum=1801.6e8351d4-5d3f-4773-b632-6c84bf8207cd,ou=clients,o=jans\" ], \"resources\" : [ \"https://testjans.gluu.com/jans-config-api/api/v1/attributes\" ], \"rev\" : \"1\" , \"creator\" : \"inum=d206dd87-3a22-465d-bd25-bec9313cd42d,ou=people,o=json\" , \"description\" : null , \"type\" : null , \"creationDate\" : null , \"expirationDate\" : null , \"deletable\" : false } you must see that deletable updated to false .","title":"Patch OAuth UMA Resource by ID"},{"location":"admin/config-guide/jans-cli/cli-openid-connect-client-configuration/","tags":["administration","configuration","cli","commandline"],"text":"OpenID Connect Configuration # Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get the information of OpenID Connect Client Configuration: /opt/jans/jans-cli/config-cli.py --info OAuthOpenIDConnectClients Operation ID: get-oauth-openid-clients Description: Gets list of OpenID Connect clients Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] Operation ID: post-oauth-openid-clients Description: Create new OpenId connect client Schema: /components/schemas/Client Operation ID: put-oauth-openid-clients Description: Update OpenId Connect client. Schema: /components/schemas/Client Operation ID: get-oauth-openid-clients-by-inum Description: Get OpenId Connect Client by Inum. url-suffix: inum Operation ID: delete-oauth-openid-clients-by-inum Description: Delete OpenId Connect client. url-suffix: inum Operation ID: patch-oauth-openid-clients-by-inum Description: Update modified properties of OpenId Connect client by Inum. url-suffix: inum Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest Get List of OpenID Clients # To get the openid clients, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-openid-clients Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly [ { \"dn\": \"inum=1801.30bd0499-9dc0-48dc-9eb3-96b80a8da856,ou=clients,o=jans\", \"inum\": \"1801.30bd0499-9dc0-48dc-9eb3-96b80a8da856\", \"clientSecret\": \"zITPCsgIfmDTkKWkonuu+g==\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"refresh_token\", \"client_credentials\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"Jans Config Api Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": \"RS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=CACA-B9D4,ou=scopes,o=jans\", \"inum=CACA-5AA4,ou=scopes,o=jans\", \"inum=CACA-F1E3,ou=scopes,o=jans\", \"inum=CACA-A1BD,ou=scopes,o=jans\", \"inum=CACA-113F,ou=scopes,o=jans\", \"inum=CACA-22E5,ou=scopes,o=jans\", \"inum=CACA-E6DE,ou=scopes,o=jans\", \"inum=CACA-B965,ou=scopes,o=jans\", \"inum=CACA-7FB9,ou=scopes,o=jans\", \"inum=CACA-3B0C,ou=scopes,o=jans\", \"inum=CACA-FD1D,ou=scopes,o=jans\", \"inum=CACA-7419,ou=scopes,o=jans\", \"inum=CACA-55A1,ou=scopes,o=jans\", \"inum=CACA-7B22,ou=scopes,o=jans\", \"inum=CACA-66AE,ou=scopes,o=jans\", \"inum=CACA-8283,ou=scopes,o=jans\", \"inum=CACA-1A74,ou=scopes,o=jans\", \"inum=CACA-CCFC,ou=scopes,o=jans\", \"inum=CACA-EABC,ou=scopes,o=jans\", \"inum=CACA-E7BB,ou=scopes,o=jans\", \"inum=CACA-EF5F,ou=scopes,o=jans\", \"inum=CACA-179E,ou=scopes,o=jans\", \"inum=CACA-174C,ou=scopes,o=jans\", \"inum=CACA-B36D,ou=scopes,o=jans\", \"inum=CACA-88E3,ou=scopes,o=jans\", \"inum=CACA-C1F5,ou=scopes,o=jans\", \"inum=CACA-82B8,ou=scopes,o=jans\", \"inum=CACA-016F,ou=scopes,o=jans\", \"inum=CACA-8F20,ou=scopes,o=jans\", \"inum=CACA-79A1,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": true, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"RS256\", \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null }, { \"dn\": \"inum=1001.3c40746d-63a6-478e-b06d-8f49bb984e4f,ou=clients,o=jans\", \"inum\": \"1001.3c40746d-63a6-478e-b06d-8f49bb984e4f\", \"clientSecret\": \"eVXRaEojULdohgOUbMeFPA==\", \"frontChannelLogoutUri\": \"https://testjans.imshakil.me/identity/ssologout.htm\", \"frontChannelLogoutSessionRequired\": true, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.imshakil.me/identity/scim/auth\", \"https://testjans.imshakil.me/identity/authcode.htm\", \"https://testjans.imshakil.me/jans-auth/restv1/uma/gather_claims?authentication=true\" ], \"claimRedirectUris\": [ \"https://testjans.imshakil.me/jans-auth/restv1/uma/gather_claims\" ], \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"implicit\", \"refresh_token\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"oxTrust Admin GUI\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": [ \"https://testjans.imshakil.me/identity/finishlogout.htm\" ], \"requestUris\": null, \"scopes\": [ \"inum=F0C4,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": true, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": null, \"jansId\": null }, { \"dn\": \"inum=1202.049eb91f-6339-4e83-ac83-55df359f6c9c,ou=clients,o=jans\", \"inum\": \"1202.049eb91f-6339-4e83-ac83-55df359f6c9c\", \"clientSecret\": null, \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [ \"client_credentials\" ], \"applicationType\": \"native\", \"contacts\": null, \"clientName\": \"SCIM Requesting Party Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": \"{ \\\"keys\\\" : [ { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"0b60383f-13c9-4064-9de1-7946724c0bbc_sig_rs256\\\", \\\"x5c\\\" : [ \\\"MIIDCTCCAfGgAwIBAgIgLJXeu/MFKl144/y6Xj55fqA+RWTWE0VgEhOSb1CmITcwDQYJKoZIhvcNAQELBQAwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTNaFw0yMjAxMTUyMjM5MjNaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCK7v3/S3Qn1puC16XM1mChQa3ygnAMoDQivlDj0AxLmSEO4ulmubVTbsvBFkt45+kKLvDUDozaNFhhNtnX1vZt37Fnd7/lnsODVn7GOrc8pGyiR048MfmPONO77LLqyf/ByrxhMpBYTR22kniRdQMc1+dHjWHIGzvmsQgMuefT2U81fqRpL0dkL2xDs7OEHm6BjQUoJgSXnf5BmWvdf+WiYPe5DXe6g56LdyZwwgN0vcx1IoYSMvmHlZyNjzyOPhCNgLPexXFpniBcFc5b5nGISgpn37yjVm4UIIMMGajv7jNJZKXkKZ+F4KRnuIByTYHwTqiHEwQoleRhlKJpNbthAgMBAAGjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADANBgkqhkiG9w0BAQsFAAOCAQEAhYEvDDBZ1Sl8b4Ng0aSXN+zw4nwS7pXBAwj4yLid47D6FnomFw25PYDAghO7YehDW18zjgbON69L5PH9Tqnq/Jzu1qAWpjWpwBVMRogCiGip/Kk59HmQos5/ckm9kgKrWhUw7vEqramHw40uqjXWuDfykWDbSqRYX2rccubSGwRsocMoMEoeFXLtyeBgjqoFY1Uqt4VTMdjTv6ekD+BLVfXOTlhemHSRXBG7GJVpwebYIyN/lx7LFAHYqbBi0adyGTI0/HQBtxMQeu57qy9oP+Q9gKse5QAz5Zesld71bKmUOshSGg4ks1JHH70wtRNPdQOgfdaaHHVzoyZo6FcMqg==\\\" ], \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"RS256\\\", \\\"n\\\" : \\\"iu79_0t0J9abgtelzNZgoUGt8oJwDKA0Ir5Q49AMS5khDuLpZrm1U27LwRZLeOfpCi7w1A6M2jRYYTbZ19b2bd-xZ3e_5Z7Dg1Z-xjq3PKRsokdOPDH5jzjTu-yy6sn_wcq8YTKQWE0dtpJ4kXUDHNfnR41hyBs75rEIDLnn09lPNX6kaS9HZC9sQ7OzhB5ugY0FKCYEl53-QZlr3X_lomD3uQ13uoOei3cmcMIDdL3MdSKGEjL5h5WcjY88jj4QjYCz3sVxaZ4gXBXOW-ZxiEoKZ9-8o1ZuFCCDDBmo7-4zSWSl5CmfheCkZ7iAck2B8E6ohxMEKJXkYZSiaTW7YQ\\\" }, { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"b3c52773-7377-45a2-97f8-0e8cc3895342_sig_rs384\\\", \\\"x5c\\\" : [ \\\"MIIDCjCCAfKgAwIBAgIhAPXe8+Rao043PUbs+WlpDB17Gyq8osq3tl/4d2qb38eTMA0GCSqGSIb3DQEBDAUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTE0WhcNMjIwMTE1MjIzOTIzWjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0DJHMKIC9rsPUurwE9aRXJ0YCi0hUrfZJ7CP3bnE5dbjSFgO9jSpFT+BS8SEaEWhTMUsrLAXqANTqPfEz3ITWhVEHdDvBDrSrpjQQWcEksxYP4/ZaScnFg09yt6Y6U3UMzwPijlzvq84xsJ1KWaz2klCSWvb/jQ4RJj6SG4eTApX0A2cHJmHwJ1oM9SwQe+eeKprd+uZj12iouWPjah4ztz2PzzAmYh8l3Wlycw7hs5OQnxU2ZnygSMYh/2V5cKVK22FAp3fE3QxLXYmn4hkmSoHcy0UjRxhSS5Q8m4AcJzdfUauMqpIJ0yL/W9jkAVdsgTMcacjJF9eesVyhcwwgwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQEMBQADggEBAJHB8bKmnQpllotN3dDg1heS2zqdsqyPK7K/5TFBRpXJV2LrIIAHEw5NjIh3vxva/dUwiJD/9uGpi3Xmn9wVFXhIxzYtSAGQmYxFEtkKsZZ7HmndmFbqbeHYv2q266yBQxx1GoZELyU85rrF+hB+/ZSdeMdqjq+Tyr25NwSHwDkGlYui3WAqLH0l0LqIvtSO5bgv6fpqhXe4H8PJ41EUsChN0HrIXNMJLbdvw8tnznJSMbaqKXjKCh0qr9GvHhxvZkDyklWRFTelg8Ct2xiH/eGeu2jwwc/QndcxNq0lqcFzyzp66oTUIdwrQitP9lgipB4c42jefoZjhv6mQaDbuO8=\\\" ], \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"RS384\\\", \\\"n\\\" : \\\"0DJHMKIC9rsPUurwE9aRXJ0YCi0hUrfZJ7CP3bnE5dbjSFgO9jSpFT-BS8SEaEWhTMUsrLAXqANTqPfEz3ITWhVEHdDvBDrSrpjQQWcEksxYP4_ZaScnFg09yt6Y6U3UMzwPijlzvq84xsJ1KWaz2klCSWvb_jQ4RJj6SG4eTApX0A2cHJmHwJ1oM9SwQe-eeKprd-uZj12iouWPjah4ztz2PzzAmYh8l3Wlycw7hs5OQnxU2ZnygSMYh_2V5cKVK22FAp3fE3QxLXYmn4hkmSoHcy0UjRxhSS5Q8m4AcJzdfUauMqpIJ0yL_W9jkAVdsgTMcacjJF9eesVyhcwwgw\\\" }, { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"bf5b0a2f-c977-4e0d-9a3c-bd8faef18e48_sig_rs512\\\", \\\"x5c\\\" : [ \\\"MIIDCTCCAfGgAwIBAgIgDrTQ+5YMX6eyx/WzSSJqS9gEsHlewOmswtphb3jE4/4wDQYJKoZIhvcNAQENBQAwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTVaFw0yMjAxMTUyMjM5MjNaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCWfXYlVgDnZpXP7XdEfSYbmJbKgVh0VzhRUzoXc1UTK+FZRM4NNuQBwkfF1X1vMg5x+1Dp1fhNw6anzf5oRjkgog6hEOucWDXq9+jjlkJPnUrYD9/yrinnBQPjsv2NFxWu7qI3KYUIWe96blPiqO1pJjUPk6dybCYoNoxk/0ut07/9uXcf3qVawqypGz4FHeiVz3SUJ1P17h59CS0+nCBT5OkR+rhT4XNc6qcqO3YDX/mj1vahuJijztoQQN82xp31bod9KsBezHIpuW8aM+steNz/aOn49bLYbNxneXV032wPmTZHr0mxxIlS95Vux0y/FVMnt/D1/L5SbWV/SxVDAgMBAAGjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADANBgkqhkiG9w0BAQ0FAAOCAQEAaEMcSaALKCCLjQ9GFyGQT3pOdT5AplJSD4ql+dISq44atxuDGSyrKyGehW07djBlUZFW8aDDMsOnQMjC049RU1LuU77FB9cmFhWAFCGIPTFFDdQrCK+LYB9LwSRX7kqBHsHZhqH9STdRMamakLnNuSJS5YzQNFziCIEUofkg0xe5WsAB4GdJrOfvy7JF0UnmjXhwpvZY/65b/Vv0o28j46QS4w769ltZwxIABKom0jdbfbn41UeLTlwgRftXh2/k59W5ma3lZPO/zi2aOl9nuj+7lXIUQKLoBUgDBYJ+8SyF0HhqDvlWijb29eJlPKKHkFRiQTo5Cbs704GWK8bx1A==\\\" ], \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"RS512\\\", \\\"n\\\" : \\\"ln12JVYA52aVz-13RH0mG5iWyoFYdFc4UVM6F3NVEyvhWUTODTbkAcJHxdV9bzIOcftQ6dX4TcOmp83-aEY5IKIOoRDrnFg16vfo45ZCT51K2A_f8q4p5wUD47L9jRcVru6iNymFCFnvem5T4qjtaSY1D5OncmwmKDaMZP9LrdO__bl3H96lWsKsqRs-BR3olc90lCdT9e4efQktPpwgU-TpEfq4U-FzXOqnKjt2A1_5o9b2obiYo87aEEDfNsad9W6HfSrAXsxyKblvGjPrLXjc_2jp-PWy2GzcZ3l1dN9sD5k2R69JscSJUveVbsdMvxVTJ7fw9fy-Um1lf0sVQw\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-256\\\", \\\"kid\\\" : \\\"fb0ef9a4-3b7f-4880-b896-57449de9ece8_sig_es256\\\", \\\"x5c\\\" : [ \\\"MIIBfTCCASOgAwIBAgIgQgvjjFY0ZMqTJ3pbRsXCrIcHCdP64r+VwPgHUCzhTwgwCgYIKoZIzj0EAwIwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTVaFw0yMjAxMTUyMjM5MjNaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAT7B1VR+pnR8J0Omavpaeyq5K2aiJZXXQvuHn6piFZd7Gfr0rzzA9hSTgGZ84yOA96ZkV8XS71cuzP24Q72SsCKoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwCgYIKoZIzj0EAwIDSAAwRQIgPMWe6opagvCW0nkMASqpy7aQmnOw2cHFk8gqc7ztZyoCIQCK0xN9Kc3my9qGPYM75lUx2AwAzgyhkdWzo80jd+BVkA==\\\" ], \\\"x\\\" : \\\"APsHVVH6mdHwnQ6Zq-lp7KrkrZqIllddC-4efqmIVl3s\\\", \\\"y\\\" : \\\"Z-vSvPMD2FJOAZnzjI4D3pmRXxdLvVy7M_bhDvZKwIo\\\", \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"ES256\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-384\\\", \\\"kid\\\" : \\\"7cc680c6-c7d5-4a5c-885e-1e591dc1511d_sig_es384\\\", \\\"x5c\\\" : [ \\\"MIIBuTCCAUCgAwIBAgIgDPX0NX82/puI5AxdpOoQxPrsODbEGF3usqHUizJFvd4wCgYIKoZIzj0EAwMwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTZaFw0yMjAxMTUyMjM5MjNaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAR88zjor1uRqZg+UFFF7VrUyPXrGlkojxw2WiJsk3AKr6IbZNhGasSxjLV24Gjoo8BJUdcwX4DcOufpspU0KBUCaNY0rJjV6UM8kiyqDCYoKW0UpKxx1eXwm5m1AmCjkOSjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAKBggqhkjOPQQDAwNnADBkAjAjyJsnKck1+hkXjAoN5PpLLwua4i6+KfW6fBeOXbwGjN7WkfJ595KstuPMI7GzP/ACMAaHxFdnih0lkfWJ6lwr3IXn4eon/yAskkN24DrK0Q9e1mJkrDU2uc3ybh796+f3IQ==\\\" ], \\\"x\\\" : \\\"fPM46K9bkamYPlBRRe1a1Mj16xpZKI8cNloibJNwCq-iG2TYRmrEsYy1duBo6KPA\\\", \\\"y\\\" : \\\"SVHXMF-A3Drn6bKVNCgVAmjWNKyY1elDPJIsqgwmKCltFKSscdXl8JuZtQJgo5Dk\\\", \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"ES384\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-521\\\", \\\"kid\\\" : \\\"98011bc0-8566-41ec-a64b-e0fca1fb22a2_sig_es512\\\", \\\"x5c\\\" : [ \\\"MIICBjCCAWegAwIBAgIhAM1ik4Lr1/favN6xSF65r92aemqYgpCMfLO9vVAtmOO4MAoGCCqGSM49BAMEMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTE2WhcNMjIwMTE1MjIzOTIzWjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAZG1VCPrKI5D9iLqkibhaKHH/j3SmDjhr9em63SIztO6gFXtEFNW4Jqc7oTHHcOv6VpagxX5XTzLinhpUQRuzEFUAw39iGsIJbwvGWarrw5/OCZaKPNRVA/kzAf9dl0I17EMyvGP0ctm6t4qqY8PjqygjA2nBoZWwLnhZu9q54IrdT+6jJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAKBggqhkjOPQQDBAOBjAAwgYgCQgHydUf16d/5yvFP5NGzBHOYY7sQ5jV0i2ICC+Vdh02jVTcmaAy6f2uraa6eL5X9SrfiwtR9HvkMqB/svMzAv999mQJCAL3LrtobouAY/i4Hxvfgt/H9Sf5G47zbO5QJBoqkOA9Q1OG4paRIVSQ3d1iZFvSPLfmbqwXee0aq8H9CU192+y52\\\" ], \\\"x\\\" : \\\"ZG1VCPrKI5D9iLqkibhaKHH_j3SmDjhr9em63SIztO6gFXtEFNW4Jqc7oTHHcOv6VpagxX5XTzLinhpUQRuzEFU\\\", \\\"y\\\" : \\\"AMN_YhrCCW8Lxlmq68OfzgmWijzUVQP5MwH_XZdCNexDMrxj9HLZureKqmPD46soIwNpwaGVsC54WbvaueCK3U_u\\\", \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"ES512\\\" } ]}\", \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"private_key_jwt\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": null, \"jansId\": null }, { \"dn\": \"inum=1201.95be8034-0b72-4add-959c-3edf98b91af6,ou=clients,o=jans\", \"inum\": \"1201.95be8034-0b72-4add-959c-3edf98b91af6\", \"clientSecret\": null, \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [ \"client_credentials\" ], \"applicationType\": \"native\", \"contacts\": null, \"clientName\": \"SCIM Resource Server Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": \"{ \\\"keys\\\" : [ { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"8e6d654d-2133-45b6-84c4-4fce267d6bee_sig_rs256\\\", \\\"x5c\\\" : [ \\\"MIIDCjCCAfKgAwIBAgIhAO4ZTRoknOI/s7Mq9hIT424qwd9tY05Ht2uSgz/CuWmbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTA5WhcNMjIwMTE1MjIzOTE5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsircewYbwIlSPYt6H3yFoxn26wSpij6sYsFHe6HcWkxSmbgkYSfTF5n+14PorBhsWzKDY+YODqIH9sNfZAjx3yX/VQpqlXn52Uwt1ZGb8tnwaNbbMkFW2848fqZXxtZHrBUVMbN+jiMec1tnI6ONIsDNJlBB4jJgE/wIThMtl5cmys9/RHmfr6YAnEVEZksFtyaDS3W4f3JsrbgWs1IYcY9MGeAQJ+OpXifb5D0qhSUrDjLBbKCOukvRf6Ue3U/Q4NaxpokHYhqbr/YA6jiZ2XPcJl53HKdpU4eO6V4HP0nuiVi7q1nQhb9f4cnuPnIKYaai759bozXTjByoki6YCQIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAIyswl5l42DSzAJmJTIwNwJUDGORPPoj3CQlBsaT5pQ2Ykiqv1gqBLjNZw/Em1TYeD2Udm8Gjn5sPUxcwdiiH1zATYPyxk/uv4POkwQBw2n3L8OA4pl0d6So5HVzA1CS23Sy1CSKK0OiRVMym0TxzutYIJB4Usqg2KhgwJBzonoAHY8IXd9QvlV7+4Cb2gE4jpF8kUKgF3dCqQVZybDrEFQ0xf8bDPWp4CBTTVoHsyr/bn7UFpHO1FxKAWJglNa6cNOv1a/1QzjPK2OZGnYciHf/BT6SWRkJukRNs/O3jrfJJsw+LSlQSjpcZPMUwJ3+JJ5Eax41bseue1mLa1js2h4=\\\" ], \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"RS256\\\", \\\"n\\\" : \\\"sircewYbwIlSPYt6H3yFoxn26wSpij6sYsFHe6HcWkxSmbgkYSfTF5n-14PorBhsWzKDY-YODqIH9sNfZAjx3yX_VQpqlXn52Uwt1ZGb8tnwaNbbMkFW2848fqZXxtZHrBUVMbN-jiMec1tnI6ONIsDNJlBB4jJgE_wIThMtl5cmys9_RHmfr6YAnEVEZksFtyaDS3W4f3JsrbgWs1IYcY9MGeAQJ-OpXifb5D0qhSUrDjLBbKCOukvRf6Ue3U_Q4NaxpokHYhqbr_YA6jiZ2XPcJl53HKdpU4eO6V4HP0nuiVi7q1nQhb9f4cnuPnIKYaai759bozXTjByoki6YCQ\\\" }, { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"10a2a7f6-cabf-41c0-9d62-37644f214e1c_sig_rs384\\\", \\\"x5c\\\" : [ \\\"MIIDCjCCAfKgAwIBAgIhAPAwaemYVwozpAJBHURxIh6oD+BjzEvhLegWbdsM7/6zMA0GCSqGSIb3DQEBDAUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTEwWhcNMjIwMTE1MjIzOTE5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1s5Kx0ltPJswSizHDNTA786pyU3bqT5dym0O/9RUs1ishsp76QjytsYdxRZzzaYB4CcEaVRj5ZIZQwt0JNqbfx/MPiMEvpJhZHEruZRc1EsE3kUCx6yInBIuHk6yKsdYoAKiHa0dJOMirTcElZyCCzq83QBKpYdX7kV+i29kF/lOSvPeAsizN8HSmB29Hhy30nB3GmcYwghHAXCSpG5g467iGBi+gOMxRm7g/Uj/WSYIDc8CyGyd6iHPK9smCyna5cCfRtuGTAf+/fnfiK5IFrGXvDK5ggM+cbKBope7RceSawN28kjVtt+gY6oLvI3JrV0V33qKTC30JnPJCxTZ4wIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQEMBQADggEBAGT0S+ke7qG9b7VS553n2JLTB13kSlXrBoa1XX4NlhnHnWO/w/YTFAi3jGVmgCesTr+2XBBFAIdOD9bC397Ufi8xd3PEDhNQKpWThhJpasMJvsiVqnXRsmoN+j5sqtzyUwl1Dsk5zdtDvoV7zeJHJ3niEpS5in6Gw8jMakn84VTekvtQvG6NBWwjVwWc4awSN18YVhMJYbs5J1tTSOcXjdwPD4Ee0WQMBrKqLeo7b9W5/F2Jb3DbfgMhkikVA9jRowyLMgFpyMI6VPneMDWyadnS9YrJHeX1Ml6i3m0uN3Jvp817jhgYFS1L74p3gA9oO0Tin6wnS5EZdWp8kCfrCx4=\\\" ], \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"RS384\\\", \\\"n\\\" : \\\"1s5Kx0ltPJswSizHDNTA786pyU3bqT5dym0O_9RUs1ishsp76QjytsYdxRZzzaYB4CcEaVRj5ZIZQwt0JNqbfx_MPiMEvpJhZHEruZRc1EsE3kUCx6yInBIuHk6yKsdYoAKiHa0dJOMirTcElZyCCzq83QBKpYdX7kV-i29kF_lOSvPeAsizN8HSmB29Hhy30nB3GmcYwghHAXCSpG5g467iGBi-gOMxRm7g_Uj_WSYIDc8CyGyd6iHPK9smCyna5cCfRtuGTAf-_fnfiK5IFrGXvDK5ggM-cbKBope7RceSawN28kjVtt-gY6oLvI3JrV0V33qKTC30JnPJCxTZ4w\\\" }, { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"35a9fa3e-56ac-4408-91c3-e959735222b9_sig_rs512\\\", \\\"x5c\\\" : [ \\\"MIIDCjCCAfKgAwIBAgIhAKLT4VuuTD1hb4Gsdd6djKvblI8eSGoksOMt+l2OG01XMA0GCSqGSIb3DQEBDQUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTEwWhcNMjIwMTE1MjIzOTE5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAppg3PsDya/MqabJX27lWx/xy/2zWaSF9+AQ1el34ECdf5e2PGjZIY5Nsx4T2K5uPTz9gH1i/3x8ViCNCX+VGjmyU96LQrLqTP0p9/dI1/E9Llr1igVn8ryyMCf0i8o+y9wEuxaRtiSCtUx65KLzwiGefgZGd7UwrAFce6Hy7VvYDdx1z6AcsJt08CXdDUAIU/M5zq3JCfmpyMFQQHPQ6H6UlK8pFeAGxLNp4IUVmZgUaswnZiaKgglMBqVVOh7bGBIQbmjzbwnIOWVoyuZt6vRfdQUoduya+PwxjwkF4WCRNNJr0NRbMp2aXJJvAHLNPcDXr2pntg4Gb2s40DMuimwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQENBQADggEBAIjIpRhEg9fQ9DQXbe7wEtaKpxzTl/FM+BAriQiIek2ZYDy2ux+uHmbTPYwIGNyTpkeAkkqk2xFUjP0QYDo9Q9vqlrWz0mTXDoRDuqyFtHy/4n2xVtAmJSg5us4wFWyBSiSOWyOL3H7TUMlSFjVGLUkweSOTymM29mPYb6xRay/6f1q6jB28LtHCpWm15ZmHa2XdyZTb5WSSD480S7jXcF3ON48AasXBfRxZpZpigF6YLZbxqSU4829RjnexfMJWHy81hVeFH3L+7WUkASpZNfIGlzKSFDqVuK3RncMswCHgMcygdzjem6DDH71qUDpwMVGLIcVQ0ZSjQzFSpd6fKag=\\\" ], \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"RS512\\\", \\\"n\\\" : \\\"ppg3PsDya_MqabJX27lWx_xy_2zWaSF9-AQ1el34ECdf5e2PGjZIY5Nsx4T2K5uPTz9gH1i_3x8ViCNCX-VGjmyU96LQrLqTP0p9_dI1_E9Llr1igVn8ryyMCf0i8o-y9wEuxaRtiSCtUx65KLzwiGefgZGd7UwrAFce6Hy7VvYDdx1z6AcsJt08CXdDUAIU_M5zq3JCfmpyMFQQHPQ6H6UlK8pFeAGxLNp4IUVmZgUaswnZiaKgglMBqVVOh7bGBIQbmjzbwnIOWVoyuZt6vRfdQUoduya-PwxjwkF4WCRNNJr0NRbMp2aXJJvAHLNPcDXr2pntg4Gb2s40DMuimw\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-256\\\", \\\"kid\\\" : \\\"b05a91e8-aa4e-4f6c-860a-3b63f13b16da_sig_es256\\\", \\\"x5c\\\" : [ \\\"MIIBfDCCASOgAwIBAgIgFbx/JYXagj82QeW+8XBk/FcdCinm/kX04q4tBOKiQ+gwCgYIKoZIzj0EAwIwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTFaFw0yMjAxMTUyMjM5MTlaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARNynAgBRUdqdd5/Os3gpG/Y/CozNptimxnUXdGcDrMrLFBOtwVrB6wYk69Z9U2iY6KPTmgxHQ/MxcHiJOsTfuOoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwCgYIKoZIzj0EAwIDRwAwRAIgeohxfVOK3qgJSNZRzk50PvjeZZ6sIJi1uAOlsaYEMpcCIGPLcDJYIaFfNVQbO/UZjymtiDpoZdb8U39GSanA6HfP\\\" ], \\\"x\\\" : \\\"TcpwIAUVHanXefzrN4KRv2PwqMzabYpsZ1F3RnA6zKw\\\", \\\"y\\\" : \\\"ALFBOtwVrB6wYk69Z9U2iY6KPTmgxHQ_MxcHiJOsTfuO\\\", \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"ES256\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-384\\\", \\\"kid\\\" : \\\"30fc8067-9cbd-4a39-8621-6555815e046f_sig_es384\\\", \\\"x5c\\\" : [ \\\"MIIBuzCCAUCgAwIBAgIgAeP45q0dJdlruXGW4aKW/728ttfGj31IHROMLnFa5OQwCgYIKoZIzj0EAwMwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTFaFw0yMjAxMTUyMjM5MTlaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARHgy8tqS+sfqcL4f0LrTnisvAN6QEgylRR/upFj9+FOc7b5eImEzhO+PMhTmNvbutWN+0pVhZ5IcBY9dFSDyBSs9lkWgUDgcKXyg7HCIhnC7CXQfwPKOzH7ZzoD/2D6SWjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAKBggqhkjOPQQDAwNpADBmAjEAp1Gof1uj66oNQsIvSaKBhZkgRoAIweQKVbvcXUTKr3P00HOZMdCrkhYwqXEmDmmzAjEA2sk385nNl/uyUzaW3gfciCxXAeMXUQUjmp6ZDrpuPDleL6jo1u6hoURO30EXBNRR\\\" ], \\\"x\\\" : \\\"R4MvLakvrH6nC-H9C6054rLwDekBIMpUUf7qRY_fhTnO2-XiJhM4TvjzIU5jb27r\\\", \\\"y\\\" : \\\"VjftKVYWeSHAWPXRUg8gUrPZZFoFA4HCl8oOxwiIZwuwl0H8Dyjsx-2c6A_9g-kl\\\", \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"ES384\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-521\\\", \\\"kid\\\" : \\\"4c1c8652-06a0-4203-bec7-f5e1408f9a71_sig_es512\\\", \\\"x5c\\\" : [ \\\"MIICBTCCAWegAwIBAgIhAOSKu6QwZhmEMffavHu0TX9xI23MKmwdmhS3iFnklzJrMAoGCCqGSM49BAMEMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTExWhcNMjIwMTE1MjIzOTE5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQA79ze+ti5XVPYSVjd5j/pFDMftJC/yKZ67UXMF4hGKYPOpyntzg2DpObgmYwnyituSmE+Nk04aYyMb9wDYPtAKywA4K+G+8M4i3oQ3u2fxxIEcd/k1hl63rAJwaRCHHYSeUuHkDs90aYNkwTotuOta2+IVzLHTFtut78Ifejy41yqG76jJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAKBggqhkjOPQQDBAOBiwAwgYcCQSyYB5WGd7N0eutyN4VZFnhivJczXshpkYuz5/XX1HmZwNIwBtc1nTSTclQyZNNNPsadKHW3zrpLmuh7ZJtkAQwjAkIBHOUe7iZNtzzz9o3JX6c3a0GtAkNdV3fDB523Xp+jq6coUzzbUo0qX3tD01iKrxtHh/RY3C7GYNRTOndw9G7efnE=\\\" ], \\\"x\\\" : \\\"AO_c3vrYuV1T2ElY3eY_6RQzH7SQv8imeu1FzBeIRimDzqcp7c4Ng6Tm4JmMJ8orbkphPjZNOGmMjG_cA2D7QCss\\\", \\\"y\\\" : \\\"AOCvhvvDOIt6EN7tn8cSBHHf5NYZet6wCcGkQhx2EnlLh5A7PdGmDZME6LbjrWtviFcyx0xbbre_CH3o8uNcqhu-\\\", \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"ES512\\\" } ]}\", \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"private_key_jwt\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=6D99,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": null, \"jansId\": null } ] It will show all the openid clients together. To search using parameters: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-openid-clients --endpoint-args limit:2 It will show two OpenID clients randomly. Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly Calling with params limit=2 [ { \"dn\": \"inum=1801.d361f68d-8200-4ba2-a0bb-ca7fea79e805,ou=clients,o=jans\", \"inum\": \"1801.d361f68d-8200-4ba2-a0bb-ca7fea79e805\", \"clientSecret\": \"KfwZeAfq4jrL\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.gluu.com/admin-ui\", \"http//:localhost:4100\" ], \"claimRedirectUris\": null, \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"refresh_token\", \"client_credentials\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"Jans Config Api Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": \"RS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=1800.F6E877,ou=scopes,o=jans\", \"inum=1800.D4F3E7,ou=scopes,o=jans\", \"inum=1800.2FD7EF,ou=scopes,o=jans\", \"inum=1800.97B23C,ou=scopes,o=jans\", \"inum=1800.8FC2C7,ou=scopes,o=jans\", \"inum=1800.1FFDF2,ou=scopes,o=jans\", \"inum=1800.5CF44C,ou=scopes,o=jans\", \"inum=1800.CCA518,ou=scopes,o=jans\", \"inum=1800.E62D6E,ou=scopes,o=jans\", \"inum=1800.11CB33,ou=scopes,o=jans\", \"inum=1800.781FA2,ou=scopes,o=jans\", \"inum=1800.ADAD8F,ou=scopes,o=jans\", \"inum=1800.40F22F,ou=scopes,o=jans\", \"inum=1800.7619BA,ou=scopes,o=jans\", \"inum=1800.E0DAF5,ou=scopes,o=jans\", \"inum=1800.7F45B0,ou=scopes,o=jans\", \"inum=1800.778C57,ou=scopes,o=jans\", \"inum=1800.E39293,ou=scopes,o=jans\", \"inum=1800.939483,ou=scopes,o=jans\", \"inum=1800.0ED2E8,ou=scopes,o=jans\", \"inum=1800.66CA59,ou=scopes,o=jans\", \"inum=1800.A4DBE5,ou=scopes,o=jans\", \"inum=1800.9AF358,ou=scopes,o=jans\", \"inum=1800.478CCF,ou=scopes,o=jans\", \"inum=1800.450A9A,ou=scopes,o=jans\", \"inum=1800.27A193,ou=scopes,o=jans\", \"inum=1800.3971D5,ou=scopes,o=jans\", \"inum=1800.891693,ou=scopes,o=jans\", \"inum=1800.A35DFD,ou=scopes,o=jans\", \"inum=1800.3516DE,ou=scopes,o=jans\", \"inum=F0C4,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": true, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"RS256\", \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null }, { \"dn\": \"inum=1001.0e964ce7-7670-44a4-a2d1-d0a5f689a34f,ou=clients,o=jans\", \"inum\": \"1001.0e964ce7-7670-44a4-a2d1-d0a5f689a34f\", \"clientSecret\": \"4OJLToBXav0P\", \"frontChannelLogoutUri\": \"https://testjans.gluu.com/identity/ssologout.htm\", \"frontChannelLogoutSessionRequired\": true, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.gluu.com/identity/scim/auth\", \"https://testjans.gluu.com/identity/authcode.htm\", \"https://testjans.gluu.com/jans-auth/restv1/uma/gather_claims?authentication=true\" ], \"claimRedirectUris\": [ \"https://testjans.gluu.com/jans-auth/restv1/uma/gather_claims\" ], \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"implicit\", \"refresh_token\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"oxTrust Admin GUI\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": [ \"https://testjans.gluu.com/identity/finishlogout.htm\" ], \"requestUris\": null, \"scopes\": [ \"inum=F0C4,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": true, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } ] Creating a New OpenID Clients # We can create openid clients as well, Let's see the description. It has a schema file where is defined the properties needs to be filled to create a new openid clients. Operation ID: post-oauth-openid-clients Description: Create new OpenId connect client Schema: /components/schemas/Client To get the schema file: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/Client It contains a lot of properties. But, It's not important to fill each of these properties. We are going to fill these properties: frontChannelLogoutSessionRequired[false, true] applicationType[web, native] clientName subjectType[pairwise, public] includeClaimsInIdToken[false, true] { \"dn\": null, \"inum\": null, \"clientSecret\": null, \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://client.example.org/cb\" ], \"claimRedirectUris\": [], \"responseTypes\": [], \"grantTypes\": [], \"applicationType\": \"web\", \"contacts\": [], \"clientName\": \"testOIDC\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": \"{ \\\"keys\\\" : [ { \\\"e\\\" : \\\"AQAB\\\", \\\"n\\\" : \\\"gmlDX_mgMcHX..\\\" ] }\", \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS512\", \"idTokenEncryptedResponseAlg\": \"RSA1_5\", \"idTokenEncryptedResponseEnc\": \"A256GCM\", \"userInfoSignedResponseAlg\": \"PS256\", \"userInfoEncryptedResponseAlg\": \"RSA1_5\", \"userInfoEncryptedResponseEnc\": \"A128GCM\", \"requestObjectSigningAlg\": \"PS512\", \"requestObjectEncryptionAlg\": \"A128KW\", \"requestObjectEncryptionEnc\": \"A256CBC+HS512\", \"tokenEndpointAuthMethod\": \"tls_client_auth\", \"tokenEndpointAuthSigningAlg\": \"PS384\", \"defaultMaxAge\": 1000000, \"requireAuthTime\": true, \"defaultAcrValues\": [], \"initiateLoginUri\": null, \"postLogoutRedirectUris\": [ \"https://client.example.org/logout/page1\", \"https://client.example.org/logout/page2\", \"https://client.example.org/logout/page3\" ], \"requestUris\": [], \"scopes\": [ \"read write dolphin\" ], \"claims\": [], \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": 100000000, \"accessTokenLifetime\": 100000000, \"customAttributes\": { \"name\": \"name, displayName, birthdate, email\", \"multiValued\": false, \"values\": [] }, \"customObjectClasses\": [], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"ES384\", \"disabled\": false, \"authorizedOrigins\": [], \"softwareId\": \"4NRB1-0XZABZI9E6-5SM3R\", \"softwareVersion\": \"2.1\", \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": true, \"keepClientAuthorizationAfterExpiration\": true, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": [], \"spontaneousScopeScriptDns\": [], \"backchannelLogoutUri\": [], \"backchannelLogoutSessionRequired\": true, \"additionalAudience\": [], \"postAuthnScripts\": [], \"consentGatheringScripts\": [], \"introspectionScripts\": [], \"rptClaimsScripts\": [] }, \"backchannelTokenDeliveryMode\": \"ping\", \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": \"PS384\", \"backchannelUserCodeParameter\": false, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } I have changed few things only here to show how to create an OpenID Connect Client. Please make sure that you filled each of the required properties to work the client.","title":"OpenID Connect Client Configuration"},{"location":"admin/config-guide/jans-cli/cli-openid-connect-client-configuration/#openid-connect-configuration","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get the information of OpenID Connect Client Configuration: /opt/jans/jans-cli/config-cli.py --info OAuthOpenIDConnectClients Operation ID: get-oauth-openid-clients Description: Gets list of OpenID Connect clients Parameters: limit: Search size - max size of the results to return. [integer] pattern: Search pattern. [string] Operation ID: post-oauth-openid-clients Description: Create new OpenId connect client Schema: /components/schemas/Client Operation ID: put-oauth-openid-clients Description: Update OpenId Connect client. Schema: /components/schemas/Client Operation ID: get-oauth-openid-clients-by-inum Description: Get OpenId Connect Client by Inum. url-suffix: inum Operation ID: delete-oauth-openid-clients-by-inum Description: Delete OpenId Connect client. url-suffix: inum Operation ID: patch-oauth-openid-clients-by-inum Description: Update modified properties of OpenId Connect client by Inum. url-suffix: inum Schema: Array of /components/schemas/PatchRequest To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/PatchRequest","title":"OpenID Connect Configuration"},{"location":"admin/config-guide/jans-cli/cli-openid-connect-client-configuration/#get-list-of-openid-clients","text":"To get the openid clients, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-openid-clients Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly [ { \"dn\": \"inum=1801.30bd0499-9dc0-48dc-9eb3-96b80a8da856,ou=clients,o=jans\", \"inum\": \"1801.30bd0499-9dc0-48dc-9eb3-96b80a8da856\", \"clientSecret\": \"zITPCsgIfmDTkKWkonuu+g==\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"refresh_token\", \"client_credentials\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"Jans Config Api Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": \"RS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=CACA-B9D4,ou=scopes,o=jans\", \"inum=CACA-5AA4,ou=scopes,o=jans\", \"inum=CACA-F1E3,ou=scopes,o=jans\", \"inum=CACA-A1BD,ou=scopes,o=jans\", \"inum=CACA-113F,ou=scopes,o=jans\", \"inum=CACA-22E5,ou=scopes,o=jans\", \"inum=CACA-E6DE,ou=scopes,o=jans\", \"inum=CACA-B965,ou=scopes,o=jans\", \"inum=CACA-7FB9,ou=scopes,o=jans\", \"inum=CACA-3B0C,ou=scopes,o=jans\", \"inum=CACA-FD1D,ou=scopes,o=jans\", \"inum=CACA-7419,ou=scopes,o=jans\", \"inum=CACA-55A1,ou=scopes,o=jans\", \"inum=CACA-7B22,ou=scopes,o=jans\", \"inum=CACA-66AE,ou=scopes,o=jans\", \"inum=CACA-8283,ou=scopes,o=jans\", \"inum=CACA-1A74,ou=scopes,o=jans\", \"inum=CACA-CCFC,ou=scopes,o=jans\", \"inum=CACA-EABC,ou=scopes,o=jans\", \"inum=CACA-E7BB,ou=scopes,o=jans\", \"inum=CACA-EF5F,ou=scopes,o=jans\", \"inum=CACA-179E,ou=scopes,o=jans\", \"inum=CACA-174C,ou=scopes,o=jans\", \"inum=CACA-B36D,ou=scopes,o=jans\", \"inum=CACA-88E3,ou=scopes,o=jans\", \"inum=CACA-C1F5,ou=scopes,o=jans\", \"inum=CACA-82B8,ou=scopes,o=jans\", \"inum=CACA-016F,ou=scopes,o=jans\", \"inum=CACA-8F20,ou=scopes,o=jans\", \"inum=CACA-79A1,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": true, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"RS256\", \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null }, { \"dn\": \"inum=1001.3c40746d-63a6-478e-b06d-8f49bb984e4f,ou=clients,o=jans\", \"inum\": \"1001.3c40746d-63a6-478e-b06d-8f49bb984e4f\", \"clientSecret\": \"eVXRaEojULdohgOUbMeFPA==\", \"frontChannelLogoutUri\": \"https://testjans.imshakil.me/identity/ssologout.htm\", \"frontChannelLogoutSessionRequired\": true, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.imshakil.me/identity/scim/auth\", \"https://testjans.imshakil.me/identity/authcode.htm\", \"https://testjans.imshakil.me/jans-auth/restv1/uma/gather_claims?authentication=true\" ], \"claimRedirectUris\": [ \"https://testjans.imshakil.me/jans-auth/restv1/uma/gather_claims\" ], \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"implicit\", \"refresh_token\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"oxTrust Admin GUI\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": [ \"https://testjans.imshakil.me/identity/finishlogout.htm\" ], \"requestUris\": null, \"scopes\": [ \"inum=F0C4,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": true, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": null, \"jansId\": null }, { \"dn\": \"inum=1202.049eb91f-6339-4e83-ac83-55df359f6c9c,ou=clients,o=jans\", \"inum\": \"1202.049eb91f-6339-4e83-ac83-55df359f6c9c\", \"clientSecret\": null, \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [ \"client_credentials\" ], \"applicationType\": \"native\", \"contacts\": null, \"clientName\": \"SCIM Requesting Party Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": \"{ \\\"keys\\\" : [ { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"0b60383f-13c9-4064-9de1-7946724c0bbc_sig_rs256\\\", \\\"x5c\\\" : [ \\\"MIIDCTCCAfGgAwIBAgIgLJXeu/MFKl144/y6Xj55fqA+RWTWE0VgEhOSb1CmITcwDQYJKoZIhvcNAQELBQAwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTNaFw0yMjAxMTUyMjM5MjNaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCK7v3/S3Qn1puC16XM1mChQa3ygnAMoDQivlDj0AxLmSEO4ulmubVTbsvBFkt45+kKLvDUDozaNFhhNtnX1vZt37Fnd7/lnsODVn7GOrc8pGyiR048MfmPONO77LLqyf/ByrxhMpBYTR22kniRdQMc1+dHjWHIGzvmsQgMuefT2U81fqRpL0dkL2xDs7OEHm6BjQUoJgSXnf5BmWvdf+WiYPe5DXe6g56LdyZwwgN0vcx1IoYSMvmHlZyNjzyOPhCNgLPexXFpniBcFc5b5nGISgpn37yjVm4UIIMMGajv7jNJZKXkKZ+F4KRnuIByTYHwTqiHEwQoleRhlKJpNbthAgMBAAGjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADANBgkqhkiG9w0BAQsFAAOCAQEAhYEvDDBZ1Sl8b4Ng0aSXN+zw4nwS7pXBAwj4yLid47D6FnomFw25PYDAghO7YehDW18zjgbON69L5PH9Tqnq/Jzu1qAWpjWpwBVMRogCiGip/Kk59HmQos5/ckm9kgKrWhUw7vEqramHw40uqjXWuDfykWDbSqRYX2rccubSGwRsocMoMEoeFXLtyeBgjqoFY1Uqt4VTMdjTv6ekD+BLVfXOTlhemHSRXBG7GJVpwebYIyN/lx7LFAHYqbBi0adyGTI0/HQBtxMQeu57qy9oP+Q9gKse5QAz5Zesld71bKmUOshSGg4ks1JHH70wtRNPdQOgfdaaHHVzoyZo6FcMqg==\\\" ], \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"RS256\\\", \\\"n\\\" : \\\"iu79_0t0J9abgtelzNZgoUGt8oJwDKA0Ir5Q49AMS5khDuLpZrm1U27LwRZLeOfpCi7w1A6M2jRYYTbZ19b2bd-xZ3e_5Z7Dg1Z-xjq3PKRsokdOPDH5jzjTu-yy6sn_wcq8YTKQWE0dtpJ4kXUDHNfnR41hyBs75rEIDLnn09lPNX6kaS9HZC9sQ7OzhB5ugY0FKCYEl53-QZlr3X_lomD3uQ13uoOei3cmcMIDdL3MdSKGEjL5h5WcjY88jj4QjYCz3sVxaZ4gXBXOW-ZxiEoKZ9-8o1ZuFCCDDBmo7-4zSWSl5CmfheCkZ7iAck2B8E6ohxMEKJXkYZSiaTW7YQ\\\" }, { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"b3c52773-7377-45a2-97f8-0e8cc3895342_sig_rs384\\\", \\\"x5c\\\" : [ \\\"MIIDCjCCAfKgAwIBAgIhAPXe8+Rao043PUbs+WlpDB17Gyq8osq3tl/4d2qb38eTMA0GCSqGSIb3DQEBDAUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTE0WhcNMjIwMTE1MjIzOTIzWjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0DJHMKIC9rsPUurwE9aRXJ0YCi0hUrfZJ7CP3bnE5dbjSFgO9jSpFT+BS8SEaEWhTMUsrLAXqANTqPfEz3ITWhVEHdDvBDrSrpjQQWcEksxYP4/ZaScnFg09yt6Y6U3UMzwPijlzvq84xsJ1KWaz2klCSWvb/jQ4RJj6SG4eTApX0A2cHJmHwJ1oM9SwQe+eeKprd+uZj12iouWPjah4ztz2PzzAmYh8l3Wlycw7hs5OQnxU2ZnygSMYh/2V5cKVK22FAp3fE3QxLXYmn4hkmSoHcy0UjRxhSS5Q8m4AcJzdfUauMqpIJ0yL/W9jkAVdsgTMcacjJF9eesVyhcwwgwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQEMBQADggEBAJHB8bKmnQpllotN3dDg1heS2zqdsqyPK7K/5TFBRpXJV2LrIIAHEw5NjIh3vxva/dUwiJD/9uGpi3Xmn9wVFXhIxzYtSAGQmYxFEtkKsZZ7HmndmFbqbeHYv2q266yBQxx1GoZELyU85rrF+hB+/ZSdeMdqjq+Tyr25NwSHwDkGlYui3WAqLH0l0LqIvtSO5bgv6fpqhXe4H8PJ41EUsChN0HrIXNMJLbdvw8tnznJSMbaqKXjKCh0qr9GvHhxvZkDyklWRFTelg8Ct2xiH/eGeu2jwwc/QndcxNq0lqcFzyzp66oTUIdwrQitP9lgipB4c42jefoZjhv6mQaDbuO8=\\\" ], \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"RS384\\\", \\\"n\\\" : \\\"0DJHMKIC9rsPUurwE9aRXJ0YCi0hUrfZJ7CP3bnE5dbjSFgO9jSpFT-BS8SEaEWhTMUsrLAXqANTqPfEz3ITWhVEHdDvBDrSrpjQQWcEksxYP4_ZaScnFg09yt6Y6U3UMzwPijlzvq84xsJ1KWaz2klCSWvb_jQ4RJj6SG4eTApX0A2cHJmHwJ1oM9SwQe-eeKprd-uZj12iouWPjah4ztz2PzzAmYh8l3Wlycw7hs5OQnxU2ZnygSMYh_2V5cKVK22FAp3fE3QxLXYmn4hkmSoHcy0UjRxhSS5Q8m4AcJzdfUauMqpIJ0yL_W9jkAVdsgTMcacjJF9eesVyhcwwgw\\\" }, { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"bf5b0a2f-c977-4e0d-9a3c-bd8faef18e48_sig_rs512\\\", \\\"x5c\\\" : [ \\\"MIIDCTCCAfGgAwIBAgIgDrTQ+5YMX6eyx/WzSSJqS9gEsHlewOmswtphb3jE4/4wDQYJKoZIhvcNAQENBQAwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTVaFw0yMjAxMTUyMjM5MjNaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCWfXYlVgDnZpXP7XdEfSYbmJbKgVh0VzhRUzoXc1UTK+FZRM4NNuQBwkfF1X1vMg5x+1Dp1fhNw6anzf5oRjkgog6hEOucWDXq9+jjlkJPnUrYD9/yrinnBQPjsv2NFxWu7qI3KYUIWe96blPiqO1pJjUPk6dybCYoNoxk/0ut07/9uXcf3qVawqypGz4FHeiVz3SUJ1P17h59CS0+nCBT5OkR+rhT4XNc6qcqO3YDX/mj1vahuJijztoQQN82xp31bod9KsBezHIpuW8aM+steNz/aOn49bLYbNxneXV032wPmTZHr0mxxIlS95Vux0y/FVMnt/D1/L5SbWV/SxVDAgMBAAGjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADANBgkqhkiG9w0BAQ0FAAOCAQEAaEMcSaALKCCLjQ9GFyGQT3pOdT5AplJSD4ql+dISq44atxuDGSyrKyGehW07djBlUZFW8aDDMsOnQMjC049RU1LuU77FB9cmFhWAFCGIPTFFDdQrCK+LYB9LwSRX7kqBHsHZhqH9STdRMamakLnNuSJS5YzQNFziCIEUofkg0xe5WsAB4GdJrOfvy7JF0UnmjXhwpvZY/65b/Vv0o28j46QS4w769ltZwxIABKom0jdbfbn41UeLTlwgRftXh2/k59W5ma3lZPO/zi2aOl9nuj+7lXIUQKLoBUgDBYJ+8SyF0HhqDvlWijb29eJlPKKHkFRiQTo5Cbs704GWK8bx1A==\\\" ], \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"RS512\\\", \\\"n\\\" : \\\"ln12JVYA52aVz-13RH0mG5iWyoFYdFc4UVM6F3NVEyvhWUTODTbkAcJHxdV9bzIOcftQ6dX4TcOmp83-aEY5IKIOoRDrnFg16vfo45ZCT51K2A_f8q4p5wUD47L9jRcVru6iNymFCFnvem5T4qjtaSY1D5OncmwmKDaMZP9LrdO__bl3H96lWsKsqRs-BR3olc90lCdT9e4efQktPpwgU-TpEfq4U-FzXOqnKjt2A1_5o9b2obiYo87aEEDfNsad9W6HfSrAXsxyKblvGjPrLXjc_2jp-PWy2GzcZ3l1dN9sD5k2R69JscSJUveVbsdMvxVTJ7fw9fy-Um1lf0sVQw\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-256\\\", \\\"kid\\\" : \\\"fb0ef9a4-3b7f-4880-b896-57449de9ece8_sig_es256\\\", \\\"x5c\\\" : [ \\\"MIIBfTCCASOgAwIBAgIgQgvjjFY0ZMqTJ3pbRsXCrIcHCdP64r+VwPgHUCzhTwgwCgYIKoZIzj0EAwIwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTVaFw0yMjAxMTUyMjM5MjNaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAT7B1VR+pnR8J0Omavpaeyq5K2aiJZXXQvuHn6piFZd7Gfr0rzzA9hSTgGZ84yOA96ZkV8XS71cuzP24Q72SsCKoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwCgYIKoZIzj0EAwIDSAAwRQIgPMWe6opagvCW0nkMASqpy7aQmnOw2cHFk8gqc7ztZyoCIQCK0xN9Kc3my9qGPYM75lUx2AwAzgyhkdWzo80jd+BVkA==\\\" ], \\\"x\\\" : \\\"APsHVVH6mdHwnQ6Zq-lp7KrkrZqIllddC-4efqmIVl3s\\\", \\\"y\\\" : \\\"Z-vSvPMD2FJOAZnzjI4D3pmRXxdLvVy7M_bhDvZKwIo\\\", \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"ES256\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-384\\\", \\\"kid\\\" : \\\"7cc680c6-c7d5-4a5c-885e-1e591dc1511d_sig_es384\\\", \\\"x5c\\\" : [ \\\"MIIBuTCCAUCgAwIBAgIgDPX0NX82/puI5AxdpOoQxPrsODbEGF3usqHUizJFvd4wCgYIKoZIzj0EAwMwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTZaFw0yMjAxMTUyMjM5MjNaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAR88zjor1uRqZg+UFFF7VrUyPXrGlkojxw2WiJsk3AKr6IbZNhGasSxjLV24Gjoo8BJUdcwX4DcOufpspU0KBUCaNY0rJjV6UM8kiyqDCYoKW0UpKxx1eXwm5m1AmCjkOSjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAKBggqhkjOPQQDAwNnADBkAjAjyJsnKck1+hkXjAoN5PpLLwua4i6+KfW6fBeOXbwGjN7WkfJ595KstuPMI7GzP/ACMAaHxFdnih0lkfWJ6lwr3IXn4eon/yAskkN24DrK0Q9e1mJkrDU2uc3ybh796+f3IQ==\\\" ], \\\"x\\\" : \\\"fPM46K9bkamYPlBRRe1a1Mj16xpZKI8cNloibJNwCq-iG2TYRmrEsYy1duBo6KPA\\\", \\\"y\\\" : \\\"SVHXMF-A3Drn6bKVNCgVAmjWNKyY1elDPJIsqgwmKCltFKSscdXl8JuZtQJgo5Dk\\\", \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"ES384\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-521\\\", \\\"kid\\\" : \\\"98011bc0-8566-41ec-a64b-e0fca1fb22a2_sig_es512\\\", \\\"x5c\\\" : [ \\\"MIICBjCCAWegAwIBAgIhAM1ik4Lr1/favN6xSF65r92aemqYgpCMfLO9vVAtmOO4MAoGCCqGSM49BAMEMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTE2WhcNMjIwMTE1MjIzOTIzWjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAZG1VCPrKI5D9iLqkibhaKHH/j3SmDjhr9em63SIztO6gFXtEFNW4Jqc7oTHHcOv6VpagxX5XTzLinhpUQRuzEFUAw39iGsIJbwvGWarrw5/OCZaKPNRVA/kzAf9dl0I17EMyvGP0ctm6t4qqY8PjqygjA2nBoZWwLnhZu9q54IrdT+6jJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAKBggqhkjOPQQDBAOBjAAwgYgCQgHydUf16d/5yvFP5NGzBHOYY7sQ5jV0i2ICC+Vdh02jVTcmaAy6f2uraa6eL5X9SrfiwtR9HvkMqB/svMzAv999mQJCAL3LrtobouAY/i4Hxvfgt/H9Sf5G47zbO5QJBoqkOA9Q1OG4paRIVSQ3d1iZFvSPLfmbqwXee0aq8H9CU192+y52\\\" ], \\\"x\\\" : \\\"ZG1VCPrKI5D9iLqkibhaKHH_j3SmDjhr9em63SIztO6gFXtEFNW4Jqc7oTHHcOv6VpagxX5XTzLinhpUQRuzEFU\\\", \\\"y\\\" : \\\"AMN_YhrCCW8Lxlmq68OfzgmWijzUVQP5MwH_XZdCNexDMrxj9HLZureKqmPD46soIwNpwaGVsC54WbvaueCK3U_u\\\", \\\"exp\\\" : 1642286363453, \\\"alg\\\" : \\\"ES512\\\" } ]}\", \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"private_key_jwt\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": null, \"jansId\": null }, { \"dn\": \"inum=1201.95be8034-0b72-4add-959c-3edf98b91af6,ou=clients,o=jans\", \"inum\": \"1201.95be8034-0b72-4add-959c-3edf98b91af6\", \"clientSecret\": null, \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [ \"client_credentials\" ], \"applicationType\": \"native\", \"contacts\": null, \"clientName\": \"SCIM Resource Server Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": \"{ \\\"keys\\\" : [ { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"8e6d654d-2133-45b6-84c4-4fce267d6bee_sig_rs256\\\", \\\"x5c\\\" : [ \\\"MIIDCjCCAfKgAwIBAgIhAO4ZTRoknOI/s7Mq9hIT424qwd9tY05Ht2uSgz/CuWmbMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTA5WhcNMjIwMTE1MjIzOTE5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsircewYbwIlSPYt6H3yFoxn26wSpij6sYsFHe6HcWkxSmbgkYSfTF5n+14PorBhsWzKDY+YODqIH9sNfZAjx3yX/VQpqlXn52Uwt1ZGb8tnwaNbbMkFW2848fqZXxtZHrBUVMbN+jiMec1tnI6ONIsDNJlBB4jJgE/wIThMtl5cmys9/RHmfr6YAnEVEZksFtyaDS3W4f3JsrbgWs1IYcY9MGeAQJ+OpXifb5D0qhSUrDjLBbKCOukvRf6Ue3U/Q4NaxpokHYhqbr/YA6jiZ2XPcJl53HKdpU4eO6V4HP0nuiVi7q1nQhb9f4cnuPnIKYaai759bozXTjByoki6YCQIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAIyswl5l42DSzAJmJTIwNwJUDGORPPoj3CQlBsaT5pQ2Ykiqv1gqBLjNZw/Em1TYeD2Udm8Gjn5sPUxcwdiiH1zATYPyxk/uv4POkwQBw2n3L8OA4pl0d6So5HVzA1CS23Sy1CSKK0OiRVMym0TxzutYIJB4Usqg2KhgwJBzonoAHY8IXd9QvlV7+4Cb2gE4jpF8kUKgF3dCqQVZybDrEFQ0xf8bDPWp4CBTTVoHsyr/bn7UFpHO1FxKAWJglNa6cNOv1a/1QzjPK2OZGnYciHf/BT6SWRkJukRNs/O3jrfJJsw+LSlQSjpcZPMUwJ3+JJ5Eax41bseue1mLa1js2h4=\\\" ], \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"RS256\\\", \\\"n\\\" : \\\"sircewYbwIlSPYt6H3yFoxn26wSpij6sYsFHe6HcWkxSmbgkYSfTF5n-14PorBhsWzKDY-YODqIH9sNfZAjx3yX_VQpqlXn52Uwt1ZGb8tnwaNbbMkFW2848fqZXxtZHrBUVMbN-jiMec1tnI6ONIsDNJlBB4jJgE_wIThMtl5cmys9_RHmfr6YAnEVEZksFtyaDS3W4f3JsrbgWs1IYcY9MGeAQJ-OpXifb5D0qhSUrDjLBbKCOukvRf6Ue3U_Q4NaxpokHYhqbr_YA6jiZ2XPcJl53HKdpU4eO6V4HP0nuiVi7q1nQhb9f4cnuPnIKYaai759bozXTjByoki6YCQ\\\" }, { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"10a2a7f6-cabf-41c0-9d62-37644f214e1c_sig_rs384\\\", \\\"x5c\\\" : [ \\\"MIIDCjCCAfKgAwIBAgIhAPAwaemYVwozpAJBHURxIh6oD+BjzEvhLegWbdsM7/6zMA0GCSqGSIb3DQEBDAUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTEwWhcNMjIwMTE1MjIzOTE5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1s5Kx0ltPJswSizHDNTA786pyU3bqT5dym0O/9RUs1ishsp76QjytsYdxRZzzaYB4CcEaVRj5ZIZQwt0JNqbfx/MPiMEvpJhZHEruZRc1EsE3kUCx6yInBIuHk6yKsdYoAKiHa0dJOMirTcElZyCCzq83QBKpYdX7kV+i29kF/lOSvPeAsizN8HSmB29Hhy30nB3GmcYwghHAXCSpG5g467iGBi+gOMxRm7g/Uj/WSYIDc8CyGyd6iHPK9smCyna5cCfRtuGTAf+/fnfiK5IFrGXvDK5ggM+cbKBope7RceSawN28kjVtt+gY6oLvI3JrV0V33qKTC30JnPJCxTZ4wIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQEMBQADggEBAGT0S+ke7qG9b7VS553n2JLTB13kSlXrBoa1XX4NlhnHnWO/w/YTFAi3jGVmgCesTr+2XBBFAIdOD9bC397Ufi8xd3PEDhNQKpWThhJpasMJvsiVqnXRsmoN+j5sqtzyUwl1Dsk5zdtDvoV7zeJHJ3niEpS5in6Gw8jMakn84VTekvtQvG6NBWwjVwWc4awSN18YVhMJYbs5J1tTSOcXjdwPD4Ee0WQMBrKqLeo7b9W5/F2Jb3DbfgMhkikVA9jRowyLMgFpyMI6VPneMDWyadnS9YrJHeX1Ml6i3m0uN3Jvp817jhgYFS1L74p3gA9oO0Tin6wnS5EZdWp8kCfrCx4=\\\" ], \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"RS384\\\", \\\"n\\\" : \\\"1s5Kx0ltPJswSizHDNTA786pyU3bqT5dym0O_9RUs1ishsp76QjytsYdxRZzzaYB4CcEaVRj5ZIZQwt0JNqbfx_MPiMEvpJhZHEruZRc1EsE3kUCx6yInBIuHk6yKsdYoAKiHa0dJOMirTcElZyCCzq83QBKpYdX7kV-i29kF_lOSvPeAsizN8HSmB29Hhy30nB3GmcYwghHAXCSpG5g467iGBi-gOMxRm7g_Uj_WSYIDc8CyGyd6iHPK9smCyna5cCfRtuGTAf-_fnfiK5IFrGXvDK5ggM-cbKBope7RceSawN28kjVtt-gY6oLvI3JrV0V33qKTC30JnPJCxTZ4w\\\" }, { \\\"kty\\\" : \\\"RSA\\\", \\\"e\\\" : \\\"AQAB\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"\\\", \\\"kid\\\" : \\\"35a9fa3e-56ac-4408-91c3-e959735222b9_sig_rs512\\\", \\\"x5c\\\" : [ \\\"MIIDCjCCAfKgAwIBAgIhAKLT4VuuTD1hb4Gsdd6djKvblI8eSGoksOMt+l2OG01XMA0GCSqGSIb3DQEBDQUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTEwWhcNMjIwMTE1MjIzOTE5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAppg3PsDya/MqabJX27lWx/xy/2zWaSF9+AQ1el34ECdf5e2PGjZIY5Nsx4T2K5uPTz9gH1i/3x8ViCNCX+VGjmyU96LQrLqTP0p9/dI1/E9Llr1igVn8ryyMCf0i8o+y9wEuxaRtiSCtUx65KLzwiGefgZGd7UwrAFce6Hy7VvYDdx1z6AcsJt08CXdDUAIU/M5zq3JCfmpyMFQQHPQ6H6UlK8pFeAGxLNp4IUVmZgUaswnZiaKgglMBqVVOh7bGBIQbmjzbwnIOWVoyuZt6vRfdQUoduya+PwxjwkF4WCRNNJr0NRbMp2aXJJvAHLNPcDXr2pntg4Gb2s40DMuimwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQENBQADggEBAIjIpRhEg9fQ9DQXbe7wEtaKpxzTl/FM+BAriQiIek2ZYDy2ux+uHmbTPYwIGNyTpkeAkkqk2xFUjP0QYDo9Q9vqlrWz0mTXDoRDuqyFtHy/4n2xVtAmJSg5us4wFWyBSiSOWyOL3H7TUMlSFjVGLUkweSOTymM29mPYb6xRay/6f1q6jB28LtHCpWm15ZmHa2XdyZTb5WSSD480S7jXcF3ON48AasXBfRxZpZpigF6YLZbxqSU4829RjnexfMJWHy81hVeFH3L+7WUkASpZNfIGlzKSFDqVuK3RncMswCHgMcygdzjem6DDH71qUDpwMVGLIcVQ0ZSjQzFSpd6fKag=\\\" ], \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"RS512\\\", \\\"n\\\" : \\\"ppg3PsDya_MqabJX27lWx_xy_2zWaSF9-AQ1el34ECdf5e2PGjZIY5Nsx4T2K5uPTz9gH1i_3x8ViCNCX-VGjmyU96LQrLqTP0p9_dI1_E9Llr1igVn8ryyMCf0i8o-y9wEuxaRtiSCtUx65KLzwiGefgZGd7UwrAFce6Hy7VvYDdx1z6AcsJt08CXdDUAIU_M5zq3JCfmpyMFQQHPQ6H6UlK8pFeAGxLNp4IUVmZgUaswnZiaKgglMBqVVOh7bGBIQbmjzbwnIOWVoyuZt6vRfdQUoduya-PwxjwkF4WCRNNJr0NRbMp2aXJJvAHLNPcDXr2pntg4Gb2s40DMuimw\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-256\\\", \\\"kid\\\" : \\\"b05a91e8-aa4e-4f6c-860a-3b63f13b16da_sig_es256\\\", \\\"x5c\\\" : [ \\\"MIIBfDCCASOgAwIBAgIgFbx/JYXagj82QeW+8XBk/FcdCinm/kX04q4tBOKiQ+gwCgYIKoZIzj0EAwIwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTFaFw0yMjAxMTUyMjM5MTlaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARNynAgBRUdqdd5/Os3gpG/Y/CozNptimxnUXdGcDrMrLFBOtwVrB6wYk69Z9U2iY6KPTmgxHQ/MxcHiJOsTfuOoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwCgYIKoZIzj0EAwIDRwAwRAIgeohxfVOK3qgJSNZRzk50PvjeZZ6sIJi1uAOlsaYEMpcCIGPLcDJYIaFfNVQbO/UZjymtiDpoZdb8U39GSanA6HfP\\\" ], \\\"x\\\" : \\\"TcpwIAUVHanXefzrN4KRv2PwqMzabYpsZ1F3RnA6zKw\\\", \\\"y\\\" : \\\"ALFBOtwVrB6wYk69Z9U2iY6KPTmgxHQ_MxcHiJOsTfuO\\\", \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"ES256\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-384\\\", \\\"kid\\\" : \\\"30fc8067-9cbd-4a39-8621-6555815e046f_sig_es384\\\", \\\"x5c\\\" : [ \\\"MIIBuzCCAUCgAwIBAgIgAeP45q0dJdlruXGW4aKW/728ttfGj31IHROMLnFa5OQwCgYIKoZIzj0EAwMwJDEiMCAGA1UEAwwZSmFucyBBdXRoIENBIENlcnRpZmljYXRlczAeFw0yMTAxMTUyMjM5MTFaFw0yMjAxMTUyMjM5MTlaMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARHgy8tqS+sfqcL4f0LrTnisvAN6QEgylRR/upFj9+FOc7b5eImEzhO+PMhTmNvbutWN+0pVhZ5IcBY9dFSDyBSs9lkWgUDgcKXyg7HCIhnC7CXQfwPKOzH7ZzoD/2D6SWjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAKBggqhkjOPQQDAwNpADBmAjEAp1Gof1uj66oNQsIvSaKBhZkgRoAIweQKVbvcXUTKr3P00HOZMdCrkhYwqXEmDmmzAjEA2sk385nNl/uyUzaW3gfciCxXAeMXUQUjmp6ZDrpuPDleL6jo1u6hoURO30EXBNRR\\\" ], \\\"x\\\" : \\\"R4MvLakvrH6nC-H9C6054rLwDekBIMpUUf7qRY_fhTnO2-XiJhM4TvjzIU5jb27r\\\", \\\"y\\\" : \\\"VjftKVYWeSHAWPXRUg8gUrPZZFoFA4HCl8oOxwiIZwuwl0H8Dyjsx-2c6A_9g-kl\\\", \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"ES384\\\" }, { \\\"kty\\\" : \\\"EC\\\", \\\"use\\\" : \\\"sig\\\", \\\"crv\\\" : \\\"P-521\\\", \\\"kid\\\" : \\\"4c1c8652-06a0-4203-bec7-f5e1408f9a71_sig_es512\\\", \\\"x5c\\\" : [ \\\"MIICBTCCAWegAwIBAgIhAOSKu6QwZhmEMffavHu0TX9xI23MKmwdmhS3iFnklzJrMAoGCCqGSM49BAMEMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTExWhcNMjIwMTE1MjIzOTE5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQA79ze+ti5XVPYSVjd5j/pFDMftJC/yKZ67UXMF4hGKYPOpyntzg2DpObgmYwnyituSmE+Nk04aYyMb9wDYPtAKywA4K+G+8M4i3oQ3u2fxxIEcd/k1hl63rAJwaRCHHYSeUuHkDs90aYNkwTotuOta2+IVzLHTFtut78Ifejy41yqG76jJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAKBggqhkjOPQQDBAOBiwAwgYcCQSyYB5WGd7N0eutyN4VZFnhivJczXshpkYuz5/XX1HmZwNIwBtc1nTSTclQyZNNNPsadKHW3zrpLmuh7ZJtkAQwjAkIBHOUe7iZNtzzz9o3JX6c3a0GtAkNdV3fDB523Xp+jq6coUzzbUo0qX3tD01iKrxtHh/RY3C7GYNRTOndw9G7efnE=\\\" ], \\\"x\\\" : \\\"AO_c3vrYuV1T2ElY3eY_6RQzH7SQv8imeu1FzBeIRimDzqcp7c4Ng6Tm4JmMJ8orbkphPjZNOGmMjG_cA2D7QCss\\\", \\\"y\\\" : \\\"AOCvhvvDOIt6EN7tn8cSBHHf5NYZet6wCcGkQhx2EnlLh5A7PdGmDZME6LbjrWtviFcyx0xbbre_CH3o8uNcqhu-\\\", \\\"exp\\\" : 1642286359278, \\\"alg\\\" : \\\"ES512\\\" } ]}\", \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"private_key_jwt\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=6D99,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": null, \"jansId\": null } ] It will show all the openid clients together. To search using parameters: /opt/jans/jans-cli/config-cli.py --operation-id get-oauth-openid-clients --endpoint-args limit:2 It will show two OpenID clients randomly. Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly Calling with params limit=2 [ { \"dn\": \"inum=1801.d361f68d-8200-4ba2-a0bb-ca7fea79e805,ou=clients,o=jans\", \"inum\": \"1801.d361f68d-8200-4ba2-a0bb-ca7fea79e805\", \"clientSecret\": \"KfwZeAfq4jrL\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.gluu.com/admin-ui\", \"http//:localhost:4100\" ], \"claimRedirectUris\": null, \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"refresh_token\", \"client_credentials\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"Jans Config Api Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": \"RS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=1800.F6E877,ou=scopes,o=jans\", \"inum=1800.D4F3E7,ou=scopes,o=jans\", \"inum=1800.2FD7EF,ou=scopes,o=jans\", \"inum=1800.97B23C,ou=scopes,o=jans\", \"inum=1800.8FC2C7,ou=scopes,o=jans\", \"inum=1800.1FFDF2,ou=scopes,o=jans\", \"inum=1800.5CF44C,ou=scopes,o=jans\", \"inum=1800.CCA518,ou=scopes,o=jans\", \"inum=1800.E62D6E,ou=scopes,o=jans\", \"inum=1800.11CB33,ou=scopes,o=jans\", \"inum=1800.781FA2,ou=scopes,o=jans\", \"inum=1800.ADAD8F,ou=scopes,o=jans\", \"inum=1800.40F22F,ou=scopes,o=jans\", \"inum=1800.7619BA,ou=scopes,o=jans\", \"inum=1800.E0DAF5,ou=scopes,o=jans\", \"inum=1800.7F45B0,ou=scopes,o=jans\", \"inum=1800.778C57,ou=scopes,o=jans\", \"inum=1800.E39293,ou=scopes,o=jans\", \"inum=1800.939483,ou=scopes,o=jans\", \"inum=1800.0ED2E8,ou=scopes,o=jans\", \"inum=1800.66CA59,ou=scopes,o=jans\", \"inum=1800.A4DBE5,ou=scopes,o=jans\", \"inum=1800.9AF358,ou=scopes,o=jans\", \"inum=1800.478CCF,ou=scopes,o=jans\", \"inum=1800.450A9A,ou=scopes,o=jans\", \"inum=1800.27A193,ou=scopes,o=jans\", \"inum=1800.3971D5,ou=scopes,o=jans\", \"inum=1800.891693,ou=scopes,o=jans\", \"inum=1800.A35DFD,ou=scopes,o=jans\", \"inum=1800.3516DE,ou=scopes,o=jans\", \"inum=F0C4,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": true, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"RS256\", \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null }, { \"dn\": \"inum=1001.0e964ce7-7670-44a4-a2d1-d0a5f689a34f,ou=clients,o=jans\", \"inum\": \"1001.0e964ce7-7670-44a4-a2d1-d0a5f689a34f\", \"clientSecret\": \"4OJLToBXav0P\", \"frontChannelLogoutUri\": \"https://testjans.gluu.com/identity/ssologout.htm\", \"frontChannelLogoutSessionRequired\": true, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.gluu.com/identity/scim/auth\", \"https://testjans.gluu.com/identity/authcode.htm\", \"https://testjans.gluu.com/jans-auth/restv1/uma/gather_claims?authentication=true\" ], \"claimRedirectUris\": [ \"https://testjans.gluu.com/jans-auth/restv1/uma/gather_claims\" ], \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"implicit\", \"refresh_token\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"oxTrust Admin GUI\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": [ \"https://testjans.gluu.com/identity/finishlogout.htm\" ], \"requestUris\": null, \"scopes\": [ \"inum=F0C4,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": true, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } ]","title":"Get List of OpenID Clients"},{"location":"admin/config-guide/jans-cli/cli-openid-connect-client-configuration/#creating-a-new-openid-clients","text":"We can create openid clients as well, Let's see the description. It has a schema file where is defined the properties needs to be filled to create a new openid clients. Operation ID: post-oauth-openid-clients Description: Create new OpenId connect client Schema: /components/schemas/Client To get the schema file: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/Client It contains a lot of properties. But, It's not important to fill each of these properties. We are going to fill these properties: frontChannelLogoutSessionRequired[false, true] applicationType[web, native] clientName subjectType[pairwise, public] includeClaimsInIdToken[false, true] { \"dn\": null, \"inum\": null, \"clientSecret\": null, \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://client.example.org/cb\" ], \"claimRedirectUris\": [], \"responseTypes\": [], \"grantTypes\": [], \"applicationType\": \"web\", \"contacts\": [], \"clientName\": \"testOIDC\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": \"{ \\\"keys\\\" : [ { \\\"e\\\" : \\\"AQAB\\\", \\\"n\\\" : \\\"gmlDX_mgMcHX..\\\" ] }\", \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS512\", \"idTokenEncryptedResponseAlg\": \"RSA1_5\", \"idTokenEncryptedResponseEnc\": \"A256GCM\", \"userInfoSignedResponseAlg\": \"PS256\", \"userInfoEncryptedResponseAlg\": \"RSA1_5\", \"userInfoEncryptedResponseEnc\": \"A128GCM\", \"requestObjectSigningAlg\": \"PS512\", \"requestObjectEncryptionAlg\": \"A128KW\", \"requestObjectEncryptionEnc\": \"A256CBC+HS512\", \"tokenEndpointAuthMethod\": \"tls_client_auth\", \"tokenEndpointAuthSigningAlg\": \"PS384\", \"defaultMaxAge\": 1000000, \"requireAuthTime\": true, \"defaultAcrValues\": [], \"initiateLoginUri\": null, \"postLogoutRedirectUris\": [ \"https://client.example.org/logout/page1\", \"https://client.example.org/logout/page2\", \"https://client.example.org/logout/page3\" ], \"requestUris\": [], \"scopes\": [ \"read write dolphin\" ], \"claims\": [], \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": 100000000, \"accessTokenLifetime\": 100000000, \"customAttributes\": { \"name\": \"name, displayName, birthdate, email\", \"multiValued\": false, \"values\": [] }, \"customObjectClasses\": [], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"ES384\", \"disabled\": false, \"authorizedOrigins\": [], \"softwareId\": \"4NRB1-0XZABZI9E6-5SM3R\", \"softwareVersion\": \"2.1\", \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": true, \"keepClientAuthorizationAfterExpiration\": true, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": [], \"spontaneousScopeScriptDns\": [], \"backchannelLogoutUri\": [], \"backchannelLogoutSessionRequired\": true, \"additionalAudience\": [], \"postAuthnScripts\": [], \"consentGatheringScripts\": [], \"introspectionScripts\": [], \"rptClaimsScripts\": [] }, \"backchannelTokenDeliveryMode\": \"ping\", \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": \"PS384\", \"backchannelUserCodeParameter\": false, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } I have changed few things only here to show how to create an OpenID Connect Client. Please make sure that you filled each of the required properties to work the client.","title":"Creating a New OpenID Clients"},{"location":"admin/config-guide/jans-cli/cli-smtp-configuration/","tags":["administration","configuration","cli","commandline"],"text":"SMTP Configuration # Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get the information of SMTP Configuration using Janssen CLI. /opt/jans/jans-cli/config-cli.py --info ConfigurationSMTP Operation ID: get-config-smtp Description: Returns SMTP server configuration. Operation ID: post-config-smtp Description: Adds SMTP server configuration. Schema: /components/schemas/SmtpConfiguration Operation ID: put-config-smtp Description: Updates SMTP server configuration. Schema: /components/schemas/SmtpConfiguration Operation ID: delete-config-smtp Description: Deletes SMTP server configuration. Operation ID: test-config-smtp Description: Test SMTP server configuration. To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/SmtpConfiguration As we see, we can perform many operations such as update , delete , test , post , etc. Let's do some operations. Find SMTP Server Configuration # To view the current SMTP server configuration, run the following command line: /opt/jans/jans-cli/config-cli.py --operation-id get-config-smtp It will show your SMTP server configuration as below: Getting access token for scope https://jans.io/oauth/config/smtp.readonly { \"host\": \"webmail.gluu.org\", \"port\": 587, \"requiresSsl\": null, \"serverTrust\": null, \"fromName\": null, \"fromEmailAddress\": null, \"requiresAuthentication\": null, \"userName\": null, \"password\": \"fHze8OEMs1MzkGhWw/29eg==\" } Setup New SMTP Server Configuration # This operation can be performed to update/post a new SMTP configuration on your Janssen server. Let's see the schema first: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/SmtpConfiguration > /tmp/smtp.json It will create a .json file. Let's modify this file: nano /tmp/smtp.json You can update each of its properties. To perform this operation, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id post-config-smtp --data /tmp/smtp.json If you run the following command, it will update your janssen smtp server and print on the screen as below. Getting access token for scope https://jans.io/oauth/config/smtp.write Server Response: { \"host\": \"webmail.gluu.org\", \"port\": 587, \"requiresSsl\": null, \"serverTrust\": null, \"fromName\": null, \"fromEmailAddress\": null, \"requiresAuthentication\": null, \"userName\": null, \"password\": \"fHze8OEMs1MzkGhWw/29eg==\" } Update SMTP Server Configuration # To update smtp server, simply change any information on /tmp/smtp.json file and run the following command: /opt/jans/jans-cli/config-cli.py --operation-id put-config-smtp --data /tmp/smtp.json It will update the information.","title":"SMTP Configuration"},{"location":"admin/config-guide/jans-cli/cli-smtp-configuration/#smtp-configuration","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode Let's get the information of SMTP Configuration using Janssen CLI. /opt/jans/jans-cli/config-cli.py --info ConfigurationSMTP Operation ID: get-config-smtp Description: Returns SMTP server configuration. Operation ID: post-config-smtp Description: Adds SMTP server configuration. Schema: /components/schemas/SmtpConfiguration Operation ID: put-config-smtp Description: Updates SMTP server configuration. Schema: /components/schemas/SmtpConfiguration Operation ID: delete-config-smtp Description: Deletes SMTP server configuration. Operation ID: test-config-smtp Description: Test SMTP server configuration. To get sample shema type /opt/jans/jans-cli/config-cli.py --schema <schma>, for example /opt/jans/jans-cli/config-cli.py --schema /components/schemas/SmtpConfiguration As we see, we can perform many operations such as update , delete , test , post , etc. Let's do some operations.","title":"SMTP Configuration"},{"location":"admin/config-guide/jans-cli/cli-smtp-configuration/#find-smtp-server-configuration","text":"To view the current SMTP server configuration, run the following command line: /opt/jans/jans-cli/config-cli.py --operation-id get-config-smtp It will show your SMTP server configuration as below: Getting access token for scope https://jans.io/oauth/config/smtp.readonly { \"host\": \"webmail.gluu.org\", \"port\": 587, \"requiresSsl\": null, \"serverTrust\": null, \"fromName\": null, \"fromEmailAddress\": null, \"requiresAuthentication\": null, \"userName\": null, \"password\": \"fHze8OEMs1MzkGhWw/29eg==\" }","title":"Find SMTP Server Configuration"},{"location":"admin/config-guide/jans-cli/cli-smtp-configuration/#setup-new-smtp-server-configuration","text":"This operation can be performed to update/post a new SMTP configuration on your Janssen server. Let's see the schema first: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/SmtpConfiguration > /tmp/smtp.json It will create a .json file. Let's modify this file: nano /tmp/smtp.json You can update each of its properties. To perform this operation, run the following command: /opt/jans/jans-cli/config-cli.py --operation-id post-config-smtp --data /tmp/smtp.json If you run the following command, it will update your janssen smtp server and print on the screen as below. Getting access token for scope https://jans.io/oauth/config/smtp.write Server Response: { \"host\": \"webmail.gluu.org\", \"port\": 587, \"requiresSsl\": null, \"serverTrust\": null, \"fromName\": null, \"fromEmailAddress\": null, \"requiresAuthentication\": null, \"userName\": null, \"password\": \"fHze8OEMs1MzkGhWw/29eg==\" }","title":"Setup New SMTP Server Configuration"},{"location":"admin/config-guide/jans-cli/cli-smtp-configuration/#update-smtp-server-configuration","text":"To update smtp server, simply change any information on /tmp/smtp.json file and run the following command: /opt/jans/jans-cli/config-cli.py --operation-id put-config-smtp --data /tmp/smtp.json It will update the information.","title":"Update SMTP Server Configuration"},{"location":"admin/config-guide/jans-cli/cli-user/","tags":["administration","configuration","cli","commandline"],"text":"User Resources # Prerequisite: Know how to use the Janssen CLI in command-line mode The first thing is to do, Let's get some information for the following task: /opt/jans/jans-cli/scim-cli.py --info User In retrun we get, root@testjans:~# /opt/jans/jans-cli/scim-cli.py --info User Operation ID: get-users Description: Query User resources (see section 3.4.2 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] filter: An expression specifying the search criteria. See section 3.4.2.2 of RFC 7644 [string] startIndex: The 1-based index of the first query result [integer] count: Specifies the desired maximum number of query results per page [integer] sortBy: The attribute whose value will be used to order the returned responses [string] sortOrder: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\" [string] Operation ID: create-user Description: Allows creating a User resource via POST (see section 3.3 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] Schema: /components/schemas/UserResource Schema: /components/schemas/UserResource Operation ID: get-user-by-id Description: Retrieves a User resource by Id (see section 3.4.1 of RFC 7644) url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Operation ID: update-user-by-id Description: Updates a User resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/UserResource Schema: /components/schemas/UserResource Operation ID: delete-user-by-id Description: Deletes a user resource url-suffix: id Parameters: id: Identifier of the resource to delete [string] Operation ID: patch-user-by-id Description: Updates one or more attributes of a User resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/PatchRequest Schema: /components/schemas/PatchRequest Operation ID: search-user Description: Query User resources (see section 3.4.2 of RFC 7644) Schema: /components/schemas/SearchRequest Schema: /components/schemas/SearchRequest To get sample schema type /opt/jans/jans-cli/scim-cli.py --schema <schma>, for example /opt/jans/jans-cli/scim-cli.py Find Users List # This operation is used to get list of the users and its properties. The command line is: /opt/jans/jans-cli/scim-cli.py --operation-id get-users By default, This will return all of the users and their properties. root@testjans:~# /opt/jans/jans-cli/scim-cli.py --operation-id get-users Getting access token for scope https://jans.io/scim/users.read { \"Resources\": [ { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"User\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": \"MH Shakil\", \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": \"2021-04-06T18:39:54.087Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 } It also supports parameters for the advanced search. Those parameters are: 1. attributes 2. excludeAttributes 3. filter 4. count [ define maximum number of query ] 5. sortBy [ attribute ] 6. sortOrder [ 'ascending', 'descending' ] This is an example with endpoint-args : /opt/jans/jans-cli/scim-cli.py --operation-id get-users --endpoint-args count:1 It returns as below: Getting access token for scope https://jans.io/scim/users.read Calling with params count=1 { \"Resources\": [ { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"User\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": \"MH Shakil\", \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": \"2021-04-06T18:39:54.087Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 } Creating an User Resources # This operation can be performed to create user resources. Operation ID: create-user Description: Allows creating a User resource via POST (see section 3.3 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] Schema: /components/schemas/UserResource As we see, to perform this operation we need to define the schema. So, let's get the schema of this operation. /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/UserResource > /tmp/create-user.json root@testjans:~# cat /tmp/create-user.json { \"externalId\": null, \"userName\": null, \"name\": { \"familyName\": null, \"givenName\": null, \"middleName\": null, \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": null }, \"displayName\": null, \"nickName\": null, \"profileUrl\": null, \"title\": \"Vice President\", \"userType\": \"Contractor\", \"preferredLanguage\": \"en\", \"locale\": \"en-US\", \"timezone\": \"America/Los_Angeles\", \"active\": false, \"password\": null, \"emails\": { \"value\": \"gossow@nsfw.com\", \"display\": null, \"type\": \"work\", \"primary\": true }, \"phoneNumbers\": { \"value\": \"+1-555-555-8377\", \"display\": null, \"type\": \"fax\", \"primary\": true }, \"ims\": { \"value\": null, \"display\": null, \"type\": \"gtalk\", \"primary\": true }, \"photos\": { \"value\": \"https://pics.nsfw.com/gossow.png\", \"display\": null, \"type\": \"thumbnail\", \"primary\": true }, \"addresses\": { \"formatted\": null, \"streetAddress\": \"56 Acacia Avenue\", \"locality\": null, \"region\": null, \"postalCode\": null, \"country\": \"UK\", \"type\": \"home\", \"primary\": false }, \"groups\": { \"value\": \"180ee84f0671b1\", \"$ref\": \"https://nsfw.com/scim/restv1/v2/Groups/180ee84f0671b1\", \"display\": \"Cult managers\", \"type\": \"direct\" }, \"entitlements\": { \"value\": \"Stakeholder\", \"display\": null, \"type\": null, \"primary\": false }, \"roles\": { \"value\": \"Project manager\", \"display\": null, \"type\": null, \"primary\": false }, \"x509Certificates\": { \"value\": null, \"display\": null, \"type\": null, \"primary\": true }, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": {}, \"schemas\": [], \"id\": null, \"meta\": { \"resourceType\": null, \"created\": null, \"lastModified\": null, \"location\": null } } Now it's pretty simple. Fill each of this information, you may skip some of this properties as well. If you look at the schema, some of the properties are already filled with some random value. You can modify them as well or ignore them. let's modify this schema: nano /tmp/create-user.json Finally use below command line, to create an user resources. /opt/jans/jans-cli/scim-cli.py --operation-id create-user --data /tmp/create-user.json It will generate user inum value, metadata and will be added in user resources: Getting access token for scope https://jans.io/scim/users.write Server Response: { \"externalId\": null, \"userName\": \"mhosen\", \"name\": { \"familyName\": \"mobarak\", \"givenName\": \"mobarak\", \"middleName\": null, \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"mobarak mobarak\" }, \"displayName\": \"mobarak\", \"nickName\": null, \"profileUrl\": null, \"title\": \"Vice President\", \"userType\": \"Contractor\", \"preferredLanguage\": \"en\", \"locale\": \"en-US\", \"timezone\": \"America/Los_Angeles\", \"active\": true, \"password\": null, \"emails\": null, \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"7034663f-dc43-4f8c-8074-e8e75cae9c96\", \"meta\": { \"resourceType\": \"User\", \"created\": \"2021-04-17T14:54:30.430Z\", \"lastModified\": \"2021-04-17T14:54:30.430Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Users/7034663f-dc43-4f8c-8074-e8e75cae9c96\" } } root@testjans:~#","title":"SCIM User Resources"},{"location":"admin/config-guide/jans-cli/cli-user/#user-resources","text":"Prerequisite: Know how to use the Janssen CLI in command-line mode The first thing is to do, Let's get some information for the following task: /opt/jans/jans-cli/scim-cli.py --info User In retrun we get, root@testjans:~# /opt/jans/jans-cli/scim-cli.py --info User Operation ID: get-users Description: Query User resources (see section 3.4.2 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] filter: An expression specifying the search criteria. See section 3.4.2.2 of RFC 7644 [string] startIndex: The 1-based index of the first query result [integer] count: Specifies the desired maximum number of query results per page [integer] sortBy: The attribute whose value will be used to order the returned responses [string] sortOrder: Order in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\" [string] Operation ID: create-user Description: Allows creating a User resource via POST (see section 3.3 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] Schema: /components/schemas/UserResource Schema: /components/schemas/UserResource Operation ID: get-user-by-id Description: Retrieves a User resource by Id (see section 3.4.1 of RFC 7644) url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Operation ID: update-user-by-id Description: Updates a User resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/UserResource Schema: /components/schemas/UserResource Operation ID: delete-user-by-id Description: Deletes a user resource url-suffix: id Parameters: id: Identifier of the resource to delete [string] Operation ID: patch-user-by-id Description: Updates one or more attributes of a User resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 url-suffix: id Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] id: No description is provided for this parameter [string] Schema: /components/schemas/PatchRequest Schema: /components/schemas/PatchRequest Operation ID: search-user Description: Query User resources (see section 3.4.2 of RFC 7644) Schema: /components/schemas/SearchRequest Schema: /components/schemas/SearchRequest To get sample schema type /opt/jans/jans-cli/scim-cli.py --schema <schma>, for example /opt/jans/jans-cli/scim-cli.py","title":"User Resources"},{"location":"admin/config-guide/jans-cli/cli-user/#find-users-list","text":"This operation is used to get list of the users and its properties. The command line is: /opt/jans/jans-cli/scim-cli.py --operation-id get-users By default, This will return all of the users and their properties. root@testjans:~# /opt/jans/jans-cli/scim-cli.py --operation-id get-users Getting access token for scope https://jans.io/scim/users.read { \"Resources\": [ { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"User\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": \"MH Shakil\", \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": \"2021-04-06T18:39:54.087Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 } It also supports parameters for the advanced search. Those parameters are: 1. attributes 2. excludeAttributes 3. filter 4. count [ define maximum number of query ] 5. sortBy [ attribute ] 6. sortOrder [ 'ascending', 'descending' ] This is an example with endpoint-args : /opt/jans/jans-cli/scim-cli.py --operation-id get-users --endpoint-args count:1 It returns as below: Getting access token for scope https://jans.io/scim/users.read Calling with params count=1 { \"Resources\": [ { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"User\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": \"MH Shakil\", \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": \"2021-04-06T18:39:54.087Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 }","title":"Find Users List"},{"location":"admin/config-guide/jans-cli/cli-user/#creating-an-user-resources","text":"This operation can be performed to create user resources. Operation ID: create-user Description: Allows creating a User resource via POST (see section 3.3 of RFC 7644) Parameters: attributes: A comma-separated list of attribute names to return in the response [string] excludedAttributes: When specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list) [string] Schema: /components/schemas/UserResource As we see, to perform this operation we need to define the schema. So, let's get the schema of this operation. /opt/jans/jans-cli/scim-cli.py --schema /components/schemas/UserResource > /tmp/create-user.json root@testjans:~# cat /tmp/create-user.json { \"externalId\": null, \"userName\": null, \"name\": { \"familyName\": null, \"givenName\": null, \"middleName\": null, \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": null }, \"displayName\": null, \"nickName\": null, \"profileUrl\": null, \"title\": \"Vice President\", \"userType\": \"Contractor\", \"preferredLanguage\": \"en\", \"locale\": \"en-US\", \"timezone\": \"America/Los_Angeles\", \"active\": false, \"password\": null, \"emails\": { \"value\": \"gossow@nsfw.com\", \"display\": null, \"type\": \"work\", \"primary\": true }, \"phoneNumbers\": { \"value\": \"+1-555-555-8377\", \"display\": null, \"type\": \"fax\", \"primary\": true }, \"ims\": { \"value\": null, \"display\": null, \"type\": \"gtalk\", \"primary\": true }, \"photos\": { \"value\": \"https://pics.nsfw.com/gossow.png\", \"display\": null, \"type\": \"thumbnail\", \"primary\": true }, \"addresses\": { \"formatted\": null, \"streetAddress\": \"56 Acacia Avenue\", \"locality\": null, \"region\": null, \"postalCode\": null, \"country\": \"UK\", \"type\": \"home\", \"primary\": false }, \"groups\": { \"value\": \"180ee84f0671b1\", \"$ref\": \"https://nsfw.com/scim/restv1/v2/Groups/180ee84f0671b1\", \"display\": \"Cult managers\", \"type\": \"direct\" }, \"entitlements\": { \"value\": \"Stakeholder\", \"display\": null, \"type\": null, \"primary\": false }, \"roles\": { \"value\": \"Project manager\", \"display\": null, \"type\": null, \"primary\": false }, \"x509Certificates\": { \"value\": null, \"display\": null, \"type\": null, \"primary\": true }, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": {}, \"schemas\": [], \"id\": null, \"meta\": { \"resourceType\": null, \"created\": null, \"lastModified\": null, \"location\": null } } Now it's pretty simple. Fill each of this information, you may skip some of this properties as well. If you look at the schema, some of the properties are already filled with some random value. You can modify them as well or ignore them. let's modify this schema: nano /tmp/create-user.json Finally use below command line, to create an user resources. /opt/jans/jans-cli/scim-cli.py --operation-id create-user --data /tmp/create-user.json It will generate user inum value, metadata and will be added in user resources: Getting access token for scope https://jans.io/scim/users.write Server Response: { \"externalId\": null, \"userName\": \"mhosen\", \"name\": { \"familyName\": \"mobarak\", \"givenName\": \"mobarak\", \"middleName\": null, \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"mobarak mobarak\" }, \"displayName\": \"mobarak\", \"nickName\": null, \"profileUrl\": null, \"title\": \"Vice President\", \"userType\": \"Contractor\", \"preferredLanguage\": \"en\", \"locale\": \"en-US\", \"timezone\": \"America/Los_Angeles\", \"active\": true, \"password\": null, \"emails\": null, \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"7034663f-dc43-4f8c-8074-e8e75cae9c96\", \"meta\": { \"resourceType\": \"User\", \"created\": \"2021-04-17T14:54:30.430Z\", \"lastModified\": \"2021-04-17T14:54:30.430Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Users/7034663f-dc43-4f8c-8074-e8e75cae9c96\" } } root@testjans:~#","title":"Creating an User Resources"},{"location":"admin/config-guide/jans-cli/device-flow/","tags":["administration","configuration","cli","commandline"],"text":"This file is a placeholder","title":"Authentication via Device Flow"},{"location":"admin/config-guide/jans-cli/install/","tags":["administration","configuration","cli","commandline"],"text":"This is a placeholder","title":"Standalone Installation"},{"location":"admin/config-guide/jans-cli/im/im-attribute/","tags":["administration","configuration","cli","interactive"],"text":"Attribute # Prerequisite: Know how to use the Janssen CLI in interactive mode Using Janssen CLI , You can perform some quick operations in Attribute . Such as: - view/find list of Attributes in detail. - add new attributes. - update an existing attribute - delete an attribute using its inum etc. For example, to get all attributes to choose 1 from the Main Menu, you will get the following options: To View/Find attributes choose 1, you will be asked to enter Search size , Search pattern and Status of the attribute . For simplicity, leave defaults in our case: Once press Enter, it will retrieve 50 attributes and prints to screen in green color: You can save the result as a file by choosing w in the result screen. To go back enter b , to quit enter q . If you enter a recognized command, it will display valid command. To Add a new attribute, choose 2 (on the Attribute screen). Then enter a value for each type of attribute item, after then it will ask to continue? enter y to continue. If everything is filled in the right way, it will create a new attribute on the list. You can go with to add a new attribute quickly: Obtained Data: { \"dn\": \"ou=attributes,o=jans\", \"inum\": null, \"selected\": false, \"name\": \"testAttrb\", \"displayName\": \"test Attribute\", \"description\": \"testing attribute addition\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": [ \"ADMIN\", \"USER\" ], \"viewType\": [ \"ADMIN\", \"USER\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": false, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null } To update an attribute, choose 3 (on the Attribute screen). It will ask inum of the attribute you are going to update. For example, I want to change the description for an attribute having inum=BCA8 . It will retrieve current data and ask for the modification of each property, just leave defaults if you don't want to change that property. When it comes to an end, it will display modified data and ask if you want to continue (this data just before it sends to a server) Obtained Data: { \"dn\": \"inum=BCA8,ou=attributes,o=jans\", \"inum\": \"BCA8\", \"selected\": false, \"name\": \"transientId\", \"displayName\": \"TransientId\", \"description\": \"TransientId\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:transientId\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.312\", \"urn\": \"mace:shibboleth:1.0:nameIdentifier\", \"scimCustomAttr\": false, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null } Enter y to perform an update and display updated data on the screen. To update property of an attribute, you can go with partial updates from Attribute Menu. To update partially, you must be asked to enter inum , op , path and value . - inum identity of an attribute where operation to be done. - op means operation to be done: [ replace , move , add , remove , copy , test ] - path chose path where operation will be performed: for example attributeValidation/minLength - value value that you want update. It can be integer, boolean or string. Finally, it will display the updated result. Getting access token for scope https://jans.io/oauth/config/attributes.write Please wait for patching... { \"dn\": \"inum=BCA8,ou=attributes,o=jans\", \"inum\": \"BCA8\", \"selected\": true, \"name\": \"transientId\", \"displayName\": \"TransientId\", \"description\": \"TransientId\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:transientId\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.312\", \"urn\": \"mace:shibboleth:1.0:nameIdentifier\", \"scimCustomAttr\": false, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null } To delete an attribute, choose option 5 from Attribute Menu. Enter the inum value that you want to delete. Here I chose that I already created in the above: \"inum=0adfeb80-cb57-4f7b-a3a0-944082e4c199\" It will ask for confirmation, enter y to confirm.","title":"Attribute"},{"location":"admin/config-guide/jans-cli/im/im-attribute/#attribute","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode Using Janssen CLI , You can perform some quick operations in Attribute . Such as: - view/find list of Attributes in detail. - add new attributes. - update an existing attribute - delete an attribute using its inum etc. For example, to get all attributes to choose 1 from the Main Menu, you will get the following options: To View/Find attributes choose 1, you will be asked to enter Search size , Search pattern and Status of the attribute . For simplicity, leave defaults in our case: Once press Enter, it will retrieve 50 attributes and prints to screen in green color: You can save the result as a file by choosing w in the result screen. To go back enter b , to quit enter q . If you enter a recognized command, it will display valid command. To Add a new attribute, choose 2 (on the Attribute screen). Then enter a value for each type of attribute item, after then it will ask to continue? enter y to continue. If everything is filled in the right way, it will create a new attribute on the list. You can go with to add a new attribute quickly: Obtained Data: { \"dn\": \"ou=attributes,o=jans\", \"inum\": null, \"selected\": false, \"name\": \"testAttrb\", \"displayName\": \"test Attribute\", \"description\": \"testing attribute addition\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": null, \"editType\": [ \"ADMIN\", \"USER\" ], \"viewType\": [ \"ADMIN\", \"USER\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": null, \"saml2Uri\": null, \"urn\": null, \"scimCustomAttr\": false, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null } To update an attribute, choose 3 (on the Attribute screen). It will ask inum of the attribute you are going to update. For example, I want to change the description for an attribute having inum=BCA8 . It will retrieve current data and ask for the modification of each property, just leave defaults if you don't want to change that property. When it comes to an end, it will display modified data and ask if you want to continue (this data just before it sends to a server) Obtained Data: { \"dn\": \"inum=BCA8,ou=attributes,o=jans\", \"inum\": \"BCA8\", \"selected\": false, \"name\": \"transientId\", \"displayName\": \"TransientId\", \"description\": \"TransientId\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:transientId\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.312\", \"urn\": \"mace:shibboleth:1.0:nameIdentifier\", \"scimCustomAttr\": false, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null } Enter y to perform an update and display updated data on the screen. To update property of an attribute, you can go with partial updates from Attribute Menu. To update partially, you must be asked to enter inum , op , path and value . - inum identity of an attribute where operation to be done. - op means operation to be done: [ replace , move , add , remove , copy , test ] - path chose path where operation will be performed: for example attributeValidation/minLength - value value that you want update. It can be integer, boolean or string. Finally, it will display the updated result. Getting access token for scope https://jans.io/oauth/config/attributes.write Please wait for patching... { \"dn\": \"inum=BCA8,ou=attributes,o=jans\", \"inum\": \"BCA8\", \"selected\": true, \"name\": \"transientId\", \"displayName\": \"TransientId\", \"description\": \"TransientId\", \"dataType\": \"STRING\", \"status\": \"ACTIVE\", \"lifetime\": null, \"sourceAttribute\": null, \"salt\": null, \"nameIdType\": null, \"origin\": \"jansPerson\", \"editType\": [ \"USER\", \"ADMIN\" ], \"viewType\": [ \"USER\", \"ADMIN\" ], \"usageType\": null, \"claimName\": null, \"seeAlso\": null, \"saml1Uri\": \"urn:mace:dir:attribute-def:transientId\", \"saml2Uri\": \"urn:oid:1.3.6.1.4.1.48710.1.3.312\", \"urn\": \"mace:shibboleth:1.0:nameIdentifier\", \"scimCustomAttr\": false, \"oxMultiValuedAttribute\": false, \"custom\": false, \"requred\": false, \"attributeValidation\": { \"regexp\": null, \"minLength\": null, \"maxLength\": null }, \"tooltip\": null } To delete an attribute, choose option 5 from Attribute Menu. Enter the inum value that you want to delete. Here I chose that I already created in the above: \"inum=0adfeb80-cb57-4f7b-a3a0-944082e4c199\" It will ask for confirmation, enter y to confirm.","title":"Attribute"},{"location":"admin/config-guide/jans-cli/im/im-authentication-method/","tags":["administration","configuration","cli","interactive"],"text":"Default Authentication Method # Prerequisite: Know how to use the Janssen CLI in interactive mode Sometimes It's getting hard to change Default Authentication Method from a web browser if you can't log in using the web interface. Here Janssen CLI is going to help you a lot. View Default Authentication Method. Update Default Authentication Method. Select option 2 from Main Menu to chose Authentication Method. You can see such options as listed above. To View default authentication method select '1' from Authentication Menu, It will show you the current default authentication method of the Janssen server. To update the default authentication method select '2', then enter the default authentication method that you want to update with it. It will ask for the confirmation, y to confirm.","title":"Default Authentication"},{"location":"admin/config-guide/jans-cli/im/im-authentication-method/#default-authentication-method","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode Sometimes It's getting hard to change Default Authentication Method from a web browser if you can't log in using the web interface. Here Janssen CLI is going to help you a lot. View Default Authentication Method. Update Default Authentication Method. Select option 2 from Main Menu to chose Authentication Method. You can see such options as listed above. To View default authentication method select '1' from Authentication Menu, It will show you the current default authentication method of the Janssen server. To update the default authentication method select '2', then enter the default authentication method that you want to update with it. It will ask for the confirmation, y to confirm.","title":"Default Authentication Method"},{"location":"admin/config-guide/jans-cli/im/im-cache-configuration/","tags":["administration","configuration","cli","interactive"],"text":"Cache Configuration # Prerequisite: Know how to use the Janssen CLI in interactive mode In the following Main Menu, Options 3, 4, 5, 6 & 7 are for Cache Configuration . - Cache Configuration - Cache Configuration \u2013 Memcached - Cache Configuration \u2013 Redis - Cache Configuration \u2013 in-Memory - Cache Configuration \u2013 Native-Persistence Select option 3 to enter in Cache Configuration menu. You will get two options as below: Cache Configuration ------------------- 1 Returns cache configuration 2 Partially modifies cache configuration If you want to view cache configuration then choose option 1 from Cache Configuration Menu. It will return cache configuration in details as below: { \"cacheProviderType\": \"NATIVE_PERSISTENCE\", \"memcachedConfiguration\": { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32768, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" }, \"redisConfiguration\": { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 }, \"inMemoryConfiguration\": { \"defaultPutExpiration\": 60 }, \"nativePersistenceConfiguration\": { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } } To update partially, select option 2. then you will be asked to enter op , path and value . op means operation to be done: [ replace , move , add , remove , copy , test ] path chose path where operation will be performed: for example memcachedConfiguration/bufferSize value value that you want update. It can be integer, boolean or string. At next it will ask Patch another param? you can press y if you want to update multiple parameters at a time otherwise n . After then it will show all the patches that are going to be performed. Continue? If any mistake happens simply press n to abort this operation otherwise press y to go with it. It will show you the updated result. please, see below example, you will get a clear concept on this. Selection: 2 \u00abThe operation to be performed. Type: string\u00bb op: replace \u00abA JSON-Pointer. Type: string\u00bb path: memcachedConfiguration/bufferSize \u00abThe value to be used within the operations. Type: object\u00bb value [{}]: 32777 Patch another param? n [ { \"op\": \"replace\", \"path\": \"/memcachedConfiguration/bufferSize\", \"value\": \"32777\" } ] Continue? y Getting access token for scope https://jans.io/oauth/config/cache.write Please wait patching... { \"cacheProviderType\": \"NATIVE_PERSISTENCE\", \"memcachedConfiguration\": { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32777, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" }, \"redisConfiguration\": { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 }, \"inMemoryConfiguration\": { \"defaultPutExpiration\": 60 }, \"nativePersistenceConfiguration\": { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } } Cache Configuration - Memcached # Do You want to update Memcached only? you can go with this option. Memcached have two options: Cache Configuration \u2013 Memcached ------------------------------- 1 Returns Memcached cache configuration 2 Updates Memcached cache configuration Option 1 to get memcached configuration. select 1, and you will get the details: Getting access token for scope https://jans.io/oauth/config/cache.readonly { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32777, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" } Option 2 to update memcached configuration. It will ask for each parameter, enter a value or skip to set default. Selection: 2 Returns Memcached cache configuration ------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly \u00abServer details separated by spaces. Type: string\u00bb servers [localhost:11211]: \u00abMaximum operation Queue Length. Type: integer\u00bb maxOperationQueueLength [100000]: \u00abBuffer Size. Type: integer\u00bb bufferSize [32777]: \u00abExpiration timeout value. Type: integer\u00bb defaultPutExpiration [60]: \u00abThe MemcachedConnectionFactoryType Type. Type: string\u00bb connectionFactoryType [DEFAULT]: Obtained Data: { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32777, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" } Continue? y Getting access token for scope https://jans.io/oauth/config/cache.write Please wait while posting data ... { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32777, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" } Cache Configuration - Redis # To get/update redis configuration, select option 5 to enter the menu. Cache Configuration \u2013 Redis --------------------------- 1 Returns Redis cache configuration 2 Updates Redis cache configuration Option 1 to get redis cache configuration. Selection: 1 Returns Redis cache configuration --------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 } Option 2 to update the Redis cache configuration. You can fill each property or keep as empty to set default. Continue? press y to update the Redis configuration. Selection: 2 Returns Redis cache configuration --------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly \u00abType of connection. Type: string\u00bb redisProviderType [STANDALONE]: \u00abserver details separated by comma e.g. 'server1:8080server2:8081'. Type: string\u00bb servers [localhost:6379]: \u00abRedis password. Type: string\u00bb password: \u00abdefaultPutExpiration timeout value. Type: integer\u00bb defaultPutExpiration [60]: \u00abSentinel Master Group Name (required if SENTINEL type of connection is selected). Type: string\u00bb sentinelMasterGroupName: \u00abEnable SSL communication between Gluu Server and Redis cache. Type: boolean\u00bb useSSL [false]: \u00abDirectory Path to Trust Store. Type: string\u00bb sslTrustStoreFilePath: \u00abThe cap on the number of \\idle\\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point. Type: integer\u00bb maxIdleConnections [10]: \u00abThe number of maximum connection instances in the pool. Type: integer\u00bb maxTotalConnections [500]: \u00abConnection time out. Type: integer\u00bb connectionTimeout [3000]: \u00abWith this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout. Type: integer\u00bb soTimeout [3000]: \u00abMaximum retry attempts in case of failure. Type: integer\u00bb maxRetryAttempts [5]: Obtained Data: { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 } Continue? y Getting access token for scope https://jans.io/oauth/config/cache.write Please wait while posting data ... { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 } Cache Configuration - In-Memory # To enter In-Memory menu select option 6, you will get two options as below: Cache Configuration \u2013 in-Memory ------------------------------- 1 Returns in-Memory cache configuration 2 Updates in-Memory cache configuration Option 1 to get the information of In-Memory cache configuration: Selection: 1 Returns in-Memory cache configuration ------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly { \"defaultPutExpiration\": 60 } Option 2 to update the information of In-Memory cache configuration: Selection: 2 Returns in-Memory cache configuration ------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly \u00abdefaultPutExpiration timeout value. Type: integer\u00bb defaultPutExpiration [60]: Obtained Data: { \"defaultPutExpiration\": 60 } Cache Configuration - Native-Persistence # Cache Configuration \u2013 Native-Persistence ---------------------------------------- 1 Returns native persistence cache configuration 2 Updates native persistence cache configuration Option 1 to get the information of native persistence cache configuration. Selection: 1 Returns native persistence cache configuration ---------------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } Option 2 to update the information of native persistence cache configuration. Selection: 2 Returns native persistence cache configuration ---------------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly \u00abdefaultPutExpiration timeout value. Type: integer\u00bb defaultPutExpiration [60]: \u00abdefaultCleanupBatchSize page size. Type: integer\u00bb defaultCleanupBatchSize [10000]: \u00abType: boolean\u00bb deleteExpiredOnGetRequest [false]: Obtained Data: { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } Continue? y Getting access token for scope https://jans.io/oauth/config/cache.write Please wait while posting data ... { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false }","title":"Cache Configuration"},{"location":"admin/config-guide/jans-cli/im/im-cache-configuration/#cache-configuration","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode In the following Main Menu, Options 3, 4, 5, 6 & 7 are for Cache Configuration . - Cache Configuration - Cache Configuration \u2013 Memcached - Cache Configuration \u2013 Redis - Cache Configuration \u2013 in-Memory - Cache Configuration \u2013 Native-Persistence Select option 3 to enter in Cache Configuration menu. You will get two options as below: Cache Configuration ------------------- 1 Returns cache configuration 2 Partially modifies cache configuration If you want to view cache configuration then choose option 1 from Cache Configuration Menu. It will return cache configuration in details as below: { \"cacheProviderType\": \"NATIVE_PERSISTENCE\", \"memcachedConfiguration\": { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32768, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" }, \"redisConfiguration\": { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 }, \"inMemoryConfiguration\": { \"defaultPutExpiration\": 60 }, \"nativePersistenceConfiguration\": { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } } To update partially, select option 2. then you will be asked to enter op , path and value . op means operation to be done: [ replace , move , add , remove , copy , test ] path chose path where operation will be performed: for example memcachedConfiguration/bufferSize value value that you want update. It can be integer, boolean or string. At next it will ask Patch another param? you can press y if you want to update multiple parameters at a time otherwise n . After then it will show all the patches that are going to be performed. Continue? If any mistake happens simply press n to abort this operation otherwise press y to go with it. It will show you the updated result. please, see below example, you will get a clear concept on this. Selection: 2 \u00abThe operation to be performed. Type: string\u00bb op: replace \u00abA JSON-Pointer. Type: string\u00bb path: memcachedConfiguration/bufferSize \u00abThe value to be used within the operations. Type: object\u00bb value [{}]: 32777 Patch another param? n [ { \"op\": \"replace\", \"path\": \"/memcachedConfiguration/bufferSize\", \"value\": \"32777\" } ] Continue? y Getting access token for scope https://jans.io/oauth/config/cache.write Please wait patching... { \"cacheProviderType\": \"NATIVE_PERSISTENCE\", \"memcachedConfiguration\": { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32777, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" }, \"redisConfiguration\": { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 }, \"inMemoryConfiguration\": { \"defaultPutExpiration\": 60 }, \"nativePersistenceConfiguration\": { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } }","title":"Cache Configuration"},{"location":"admin/config-guide/jans-cli/im/im-cache-configuration/#cache-configuration-memcached","text":"Do You want to update Memcached only? you can go with this option. Memcached have two options: Cache Configuration \u2013 Memcached ------------------------------- 1 Returns Memcached cache configuration 2 Updates Memcached cache configuration Option 1 to get memcached configuration. select 1, and you will get the details: Getting access token for scope https://jans.io/oauth/config/cache.readonly { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32777, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" } Option 2 to update memcached configuration. It will ask for each parameter, enter a value or skip to set default. Selection: 2 Returns Memcached cache configuration ------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly \u00abServer details separated by spaces. Type: string\u00bb servers [localhost:11211]: \u00abMaximum operation Queue Length. Type: integer\u00bb maxOperationQueueLength [100000]: \u00abBuffer Size. Type: integer\u00bb bufferSize [32777]: \u00abExpiration timeout value. Type: integer\u00bb defaultPutExpiration [60]: \u00abThe MemcachedConnectionFactoryType Type. Type: string\u00bb connectionFactoryType [DEFAULT]: Obtained Data: { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32777, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" } Continue? y Getting access token for scope https://jans.io/oauth/config/cache.write Please wait while posting data ... { \"servers\": \"localhost:11211\", \"maxOperationQueueLength\": 100000, \"bufferSize\": 32777, \"defaultPutExpiration\": 60, \"connectionFactoryType\": \"DEFAULT\" }","title":"Cache Configuration - Memcached"},{"location":"admin/config-guide/jans-cli/im/im-cache-configuration/#cache-configuration-redis","text":"To get/update redis configuration, select option 5 to enter the menu. Cache Configuration \u2013 Redis --------------------------- 1 Returns Redis cache configuration 2 Updates Redis cache configuration Option 1 to get redis cache configuration. Selection: 1 Returns Redis cache configuration --------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 } Option 2 to update the Redis cache configuration. You can fill each property or keep as empty to set default. Continue? press y to update the Redis configuration. Selection: 2 Returns Redis cache configuration --------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly \u00abType of connection. Type: string\u00bb redisProviderType [STANDALONE]: \u00abserver details separated by comma e.g. 'server1:8080server2:8081'. Type: string\u00bb servers [localhost:6379]: \u00abRedis password. Type: string\u00bb password: \u00abdefaultPutExpiration timeout value. Type: integer\u00bb defaultPutExpiration [60]: \u00abSentinel Master Group Name (required if SENTINEL type of connection is selected). Type: string\u00bb sentinelMasterGroupName: \u00abEnable SSL communication between Gluu Server and Redis cache. Type: boolean\u00bb useSSL [false]: \u00abDirectory Path to Trust Store. Type: string\u00bb sslTrustStoreFilePath: \u00abThe cap on the number of \\idle\\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point. Type: integer\u00bb maxIdleConnections [10]: \u00abThe number of maximum connection instances in the pool. Type: integer\u00bb maxTotalConnections [500]: \u00abConnection time out. Type: integer\u00bb connectionTimeout [3000]: \u00abWith this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout. Type: integer\u00bb soTimeout [3000]: \u00abMaximum retry attempts in case of failure. Type: integer\u00bb maxRetryAttempts [5]: Obtained Data: { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 } Continue? y Getting access token for scope https://jans.io/oauth/config/cache.write Please wait while posting data ... { \"redisProviderType\": \"STANDALONE\", \"servers\": \"localhost:6379\", \"password\": null, \"defaultPutExpiration\": 60, \"sentinelMasterGroupName\": null, \"useSSL\": false, \"sslTrustStoreFilePath\": null, \"maxIdleConnections\": 10, \"maxTotalConnections\": 500, \"connectionTimeout\": 3000, \"soTimeout\": 3000, \"maxRetryAttempts\": 5 }","title":"Cache Configuration - Redis"},{"location":"admin/config-guide/jans-cli/im/im-cache-configuration/#cache-configuration-in-memory","text":"To enter In-Memory menu select option 6, you will get two options as below: Cache Configuration \u2013 in-Memory ------------------------------- 1 Returns in-Memory cache configuration 2 Updates in-Memory cache configuration Option 1 to get the information of In-Memory cache configuration: Selection: 1 Returns in-Memory cache configuration ------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly { \"defaultPutExpiration\": 60 } Option 2 to update the information of In-Memory cache configuration: Selection: 2 Returns in-Memory cache configuration ------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly \u00abdefaultPutExpiration timeout value. Type: integer\u00bb defaultPutExpiration [60]: Obtained Data: { \"defaultPutExpiration\": 60 }","title":"Cache Configuration - In-Memory"},{"location":"admin/config-guide/jans-cli/im/im-cache-configuration/#cache-configuration-native-persistence","text":"Cache Configuration \u2013 Native-Persistence ---------------------------------------- 1 Returns native persistence cache configuration 2 Updates native persistence cache configuration Option 1 to get the information of native persistence cache configuration. Selection: 1 Returns native persistence cache configuration ---------------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } Option 2 to update the information of native persistence cache configuration. Selection: 2 Returns native persistence cache configuration ---------------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/cache.readonly \u00abdefaultPutExpiration timeout value. Type: integer\u00bb defaultPutExpiration [60]: \u00abdefaultCleanupBatchSize page size. Type: integer\u00bb defaultCleanupBatchSize [10000]: \u00abType: boolean\u00bb deleteExpiredOnGetRequest [false]: Obtained Data: { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false } Continue? y Getting access token for scope https://jans.io/oauth/config/cache.write Please wait while posting data ... { \"defaultPutExpiration\": 60, \"defaultCleanupBatchSize\": 10000, \"deleteExpiredOnGetRequest\": false }","title":"Cache Configuration - Native-Persistence"},{"location":"admin/config-guide/jans-cli/im/im-couchbase-configuration/","tags":["administration","configuration","cli","interactive"],"text":"Couchbase Configuration # Prerequisite: Know how to use the Janssen CLI in interactive mode From the main menu, select option 15 to enter into Couchbase configuration menu. You will get the following menu like LDAP configuration. Database - Couchbase configuration ---------------------------------- 1 Gets list of existing Couchbase configurations 2 Adds a new Couchbase configuration 3 Updates Couchbase configuration 4 Gets a Couchbase configurations by name 5 Partially modify an Couchbase configuration 6 Deletes a Couchbase configurations by name 7 Tests a Couchbase configuration","title":"Couchbase Configuration"},{"location":"admin/config-guide/jans-cli/im/im-couchbase-configuration/#couchbase-configuration","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode From the main menu, select option 15 to enter into Couchbase configuration menu. You will get the following menu like LDAP configuration. Database - Couchbase configuration ---------------------------------- 1 Gets list of existing Couchbase configurations 2 Adds a new Couchbase configuration 3 Updates Couchbase configuration 4 Gets a Couchbase configurations by name 5 Partially modify an Couchbase configuration 6 Deletes a Couchbase configurations by name 7 Tests a Couchbase configuration","title":"Couchbase Configuration"},{"location":"admin/config-guide/jans-cli/im/im-custom-scripts/","tags":["administration","configuration","cli","interactive"],"text":"Custom Scripts # Prerequisite: Know how to use the Janssen CLI in interactive mode Interception scripts can be used to implement custom business logic for authentication, authorization, and more in a way that is upgrade-proof and doesn't require forking the Gluu Server code. Using Janssen CLI, you can perform such an operation as listed below: Custom Scripts -------------- 1 Gets a list of custom scripts 2 Adds a new custom script 3 Updates a custom script 4 Deletes a custom script Get list of Custom Scripts # To get the status of each type of script select option 1, you will get the below result in return: Gets a list of custom scripts ----------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/scripts.readonly +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | | scriptType | name | enabled | inum | +====+=====================================+===========================================================+===========+===========+ | 1 | RESOURCE_OWNER_PASSWORD_CREDENTIALS | resource_owner_password_credentials_example | False | 2DAF-AA91 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 2 | INTROSPECTION | introspection_custom_params | False | 2DAF-BA90 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 3 | UMA_CLAIMS_GATHERING | sampleClaimsGathering | False | 2DAF-F996 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 4 | END_SESSION | frontchannel_logout_sample | False | 2DAF-CA90 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 5 | UPDATE_TOKEN | update_token_sample | False | 2D3E.5A03 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 6 | INTROSPECTION | introspection_sample | False | 2DAF-AA90 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 7 | RESOURCE_OWNER_PASSWORD_CREDENTIALS | resource_owner_password_credentials_custom_params_example | False | 2DAF-BA91 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 8 | CIBA_END_USER_NOTIFICATION | firebase_ciba_end_user_notification | False | C1BA-C1BA | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 9 | PERSON_AUTHENTICATION | basic | False | A51E-76DA | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 10 | CONSENT_GATHERING | consent_gathering | False | DAA9-BA60 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 11 | PERSON_AUTHENTICATION | basic_lock | False | 4BBE-C6A8 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 12 | PERSON_AUTHENTICATION | cert | False | 2124-0CF1 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 13 | PERSON_AUTHENTICATION | yubicloud | False | 24FD-B96E | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 14 | PERSON_AUTHENTICATION | otp | False | 5018-D4BF | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 15 | PERSON_AUTHENTICATION | smpp | False | 09A0-93D7 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 16 | PERSON_AUTHENTICATION | twilio_sms | False | 09A0-93D6 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 17 | PERSON_AUTHENTICATION | thumb_sign_in | False | 92F0-759E | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 18 | PERSON_AUTHENTICATION | u2f | False | 8BAF-80D6 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 19 | PERSON_AUTHENTICATION | duo | False | 5018-F9CF | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 20 | PERSON_AUTHENTICATION | super_gluu | False | 92F0-BF9E | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 21 | PERSON_AUTHENTICATION | fido2 | False | 8BAF-80D7 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 22 | PERSON_AUTHENTICATION | uaf | False | 5018-AF9C | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 23 | UMA_RPT_POLICY | scim_access_policy | False | 2DAF-F9A5 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 24 | UMA_RPT_POLICY | uma_rpt_policy | False | 2DAF-F995 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 25 | DYNAMIC_SCOPE | org_name | False | 031C-5621 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 26 | PERSISTENCE_EXTENSION | persistence_extension | False | 8AF7.D82A | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 27 | ID_GENERATOR | id_generator | False | 031C-4A65 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 28 | IDP | idp | False | 8AF7.D82B | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 29 | CACHE_REFRESH | cache_refresh | False | 13D3-E7AD | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 30 | APPLICATION_SESSION | application_session | False | DAA9-B789 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 31 | DYNAMIC_SCOPE | dynamic_permission | True | CB5B-3211 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 32 | SCIM | scim_event_handler | False | A910-56AB | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 33 | CLIENT_REGISTRATION | client_registration | False | DAA9-B788 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 34 | DYNAMIC_SCOPE | work_phone | False | 031C-5622 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ Add a new Custom Script # To add a new script, choose option 2 and fill each property: dn, inum, display name, valid script ScriptType: [PERSON_AUTHENTICATION, INTROSPECTION, RESOURCE_OWNER_PASSWORD_CREDENTIALS, APPLICATION_SESSION, CACHE_REFRESH, CLIENT_REGISTRATION, ID_GENERATOR, UMA_RPT_POLICY, UMA_RPT_CLAIMS, UMA_CLAIMS_GATHERING, CONSENT_GATHERING, DYNAMIC_SCOPE, SPONTANEOUS_SCOPE, END_SESSION, POST_AUTHN, SCIM, CIBA_END_USER_NOTIFICATION, PERSISTENCE_EXTENSION, IDP] Programming Language: [PYTHON, JAVA] Update Custom Scripts # Let update Person Authentication basic by its inum. Select option 3 from custom scripts menu and enter its inum, in my case it's A51E-76DA selecting the field we are gonna update: 4 \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: 4 \u00abboolean value indicating if script enabled. Type: boolean\u00bb enabled [false]: true Please enter a(n) boolean value: _true, _false enabled [false]: _true \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: 4 \u00abboolean value indicating if script enabled. Type: boolean\u00bb enabled [true]: In this way you can update any field you want. How to delete Custom Scripts? # To delete a custom script, you need an inum of a custom script that you want to delete. It will ask for confirmation when you enter inum , simply enter yes/y to delete it otherwise enter no/n to cancel the operation.","title":"Custom Scripts"},{"location":"admin/config-guide/jans-cli/im/im-custom-scripts/#custom-scripts","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode Interception scripts can be used to implement custom business logic for authentication, authorization, and more in a way that is upgrade-proof and doesn't require forking the Gluu Server code. Using Janssen CLI, you can perform such an operation as listed below: Custom Scripts -------------- 1 Gets a list of custom scripts 2 Adds a new custom script 3 Updates a custom script 4 Deletes a custom script","title":"Custom Scripts"},{"location":"admin/config-guide/jans-cli/im/im-custom-scripts/#get-list-of-custom-scripts","text":"To get the status of each type of script select option 1, you will get the below result in return: Gets a list of custom scripts ----------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/scripts.readonly +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | | scriptType | name | enabled | inum | +====+=====================================+===========================================================+===========+===========+ | 1 | RESOURCE_OWNER_PASSWORD_CREDENTIALS | resource_owner_password_credentials_example | False | 2DAF-AA91 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 2 | INTROSPECTION | introspection_custom_params | False | 2DAF-BA90 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 3 | UMA_CLAIMS_GATHERING | sampleClaimsGathering | False | 2DAF-F996 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 4 | END_SESSION | frontchannel_logout_sample | False | 2DAF-CA90 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 5 | UPDATE_TOKEN | update_token_sample | False | 2D3E.5A03 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 6 | INTROSPECTION | introspection_sample | False | 2DAF-AA90 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 7 | RESOURCE_OWNER_PASSWORD_CREDENTIALS | resource_owner_password_credentials_custom_params_example | False | 2DAF-BA91 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 8 | CIBA_END_USER_NOTIFICATION | firebase_ciba_end_user_notification | False | C1BA-C1BA | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 9 | PERSON_AUTHENTICATION | basic | False | A51E-76DA | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 10 | CONSENT_GATHERING | consent_gathering | False | DAA9-BA60 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 11 | PERSON_AUTHENTICATION | basic_lock | False | 4BBE-C6A8 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 12 | PERSON_AUTHENTICATION | cert | False | 2124-0CF1 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 13 | PERSON_AUTHENTICATION | yubicloud | False | 24FD-B96E | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 14 | PERSON_AUTHENTICATION | otp | False | 5018-D4BF | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 15 | PERSON_AUTHENTICATION | smpp | False | 09A0-93D7 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 16 | PERSON_AUTHENTICATION | twilio_sms | False | 09A0-93D6 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 17 | PERSON_AUTHENTICATION | thumb_sign_in | False | 92F0-759E | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 18 | PERSON_AUTHENTICATION | u2f | False | 8BAF-80D6 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 19 | PERSON_AUTHENTICATION | duo | False | 5018-F9CF | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 20 | PERSON_AUTHENTICATION | super_gluu | False | 92F0-BF9E | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 21 | PERSON_AUTHENTICATION | fido2 | False | 8BAF-80D7 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 22 | PERSON_AUTHENTICATION | uaf | False | 5018-AF9C | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 23 | UMA_RPT_POLICY | scim_access_policy | False | 2DAF-F9A5 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 24 | UMA_RPT_POLICY | uma_rpt_policy | False | 2DAF-F995 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 25 | DYNAMIC_SCOPE | org_name | False | 031C-5621 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 26 | PERSISTENCE_EXTENSION | persistence_extension | False | 8AF7.D82A | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 27 | ID_GENERATOR | id_generator | False | 031C-4A65 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 28 | IDP | idp | False | 8AF7.D82B | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 29 | CACHE_REFRESH | cache_refresh | False | 13D3-E7AD | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 30 | APPLICATION_SESSION | application_session | False | DAA9-B789 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 31 | DYNAMIC_SCOPE | dynamic_permission | True | CB5B-3211 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 32 | SCIM | scim_event_handler | False | A910-56AB | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 33 | CLIENT_REGISTRATION | client_registration | False | DAA9-B788 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+ | 34 | DYNAMIC_SCOPE | work_phone | False | 031C-5622 | +----+-------------------------------------+-----------------------------------------------------------+-----------+-----------+","title":"Get list of Custom Scripts"},{"location":"admin/config-guide/jans-cli/im/im-custom-scripts/#add-a-new-custom-script","text":"To add a new script, choose option 2 and fill each property: dn, inum, display name, valid script ScriptType: [PERSON_AUTHENTICATION, INTROSPECTION, RESOURCE_OWNER_PASSWORD_CREDENTIALS, APPLICATION_SESSION, CACHE_REFRESH, CLIENT_REGISTRATION, ID_GENERATOR, UMA_RPT_POLICY, UMA_RPT_CLAIMS, UMA_CLAIMS_GATHERING, CONSENT_GATHERING, DYNAMIC_SCOPE, SPONTANEOUS_SCOPE, END_SESSION, POST_AUTHN, SCIM, CIBA_END_USER_NOTIFICATION, PERSISTENCE_EXTENSION, IDP] Programming Language: [PYTHON, JAVA]","title":"Add a new Custom Script"},{"location":"admin/config-guide/jans-cli/im/im-custom-scripts/#update-custom-scripts","text":"Let update Person Authentication basic by its inum. Select option 3 from custom scripts menu and enter its inum, in my case it's A51E-76DA selecting the field we are gonna update: 4 \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: 4 \u00abboolean value indicating if script enabled. Type: boolean\u00bb enabled [false]: true Please enter a(n) boolean value: _true, _false enabled [false]: _true \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: 4 \u00abboolean value indicating if script enabled. Type: boolean\u00bb enabled [true]: In this way you can update any field you want.","title":"Update Custom Scripts"},{"location":"admin/config-guide/jans-cli/im/im-custom-scripts/#how-to-delete-custom-scripts","text":"To delete a custom script, you need an inum of a custom script that you want to delete. It will ask for confirmation when you enter inum , simply enter yes/y to delete it otherwise enter no/n to cancel the operation.","title":"How to delete Custom Scripts?"},{"location":"admin/config-guide/jans-cli/im/im-group/","tags":["administration","configuration","cli","interactive"],"text":"Group Resources # Prerequisite: Know how to use the Janssen CLI in interactive mode Group resources are used to organize user resources. These are the following options: group ----- 1 Query Group resources (see section 3.4.2 of RFC 7644) 2 Allows creating a Group resource via POST (see section 3.3 of RFC 7644) 3 Retrieves a Group resource by Id (see section 3.4.1 of RFC 7644) 4 Updates a Group resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. 5 Deletes a group resource (see section 3.6 of RFC 7644) 6 Updates one or more attributes of a Group resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 7 Query Group resources (see section 3.4.2 of RFC 7644) Query Group Resources # It shows all the group resources and its perspective user resources. To find list of resources with custom filter, it supports advanced search with few properties: 1. attributes 2. excludeattributes 3. filter 4. startindex 5. count This is an demo example where each of this properties skipped for default value: Query Group resources (see section 3.4.2 of RFC 7644) ----------------------------------------------------- \u00abA comma-separated list of attribute names to return in the response. Type: string\u00bb attributes: \u00abWhen specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list). Type: string\u00bb excludedAttributes: \u00abAn expression specifying the search criteria. See section 3.4.2.2 of RFC 7644. Type: string\u00bb filter: \u00abThe 1-based index of the first query result. Type: integer\u00bb startIndex: \u00abSpecifies the desired maximum number of query results per page. Type: integer\u00bb count: \u00abThe attribute whose value will be used to order the returned responses. Type: string\u00bb sortBy: \u00abOrder in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\". Type: string\u00bb sortOrder: Please wait while retreiving data ... Getting access token for scope https://jans.io/scim/groups.read { \"Resources\": [ { \"displayName\": \"Jannsen Manager Group\", \"members\": [ { \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"type\": \"User\", \"display\": \"Default Admin User\", \"value\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"60B7\", \"meta\": { \"resourceType\": \"Group\", \"created\": null, \"lastModified\": null, \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 } Selection: Update a group Resource: # Updating a group resource works in a replacement fashion and every attribute value found in the payload will replace the one in the existing resource. Attributes those are not passed in the payload will be left as same as before. If you select option 4 it will be asked to enter the id of a group that you may want to update. After then You will get a list of Fields: Fields: 1 displayName 2 id 3 members 4 meta 5 schemas You can select each of these fields to update one by one. Let's select 3rd field to add memebers in the group. It will ask to enter some follow-up questions, like Add Member? [y, n] . Then enter each value of the user attributes: ref: User referral url type: type as a User display: User display Name value: inum of the user As you see below, If you choose y for Add another Member? then similarly you can add resource for another user. But if you choose n then you can select few options: - q: to quit from operations - v: to view changes - l: to display the current list of fields - s: to save changes Please see below result to better understand about how this option really works. ``` \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: 3 \u00abRepresents a member of a Group resource. \u00bb Add Member? y \u00abURI of the SCIM resource. Type: string\u00bb ref: https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df \u00abThe type of member. Only \"User\" is allowed. Type: string\u00bb type: User \u00abA human readable name, primarily used for display purposes. Type: string\u00bb display: Default Admin User \u00abIdentifier (ID) of the resource. Type: string\u00bb value: e0b8a6a5-1955-49d7-acba-55a75b2373df Add another Member? n \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: s Changes: members: [{'display': 'Default Admin User', 'ref': 'https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df', 'type': 'User', 'value': 'e0b8a6a5-1955-49d7-acba-55a75b2373df'}] ``` continue? as y to perform the operation: Continue? y Please wait while posting data ... Getting access token for scope https://jans.io/scim/groups.write { \"displayName\": \"Jannsen Test Group\", \"members\": [ { \"$ref\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df\", \"type\": \"User\", \"display\": \"Default Admin User\", \"value\": \"e0b8a6a5-1955-49d7-acba-55a75b2373df\" } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"766ffd8c-88a8-4aa8-a430-a5b3ae809c21\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-14T19:54:03.091Z\", \"lastModified\": \"2021-04-15T14:21:10.715Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/766ffd8c-88a8-4aa8-a430-a5b3ae809c21\" } } Finally it will make changes in the group resource.","title":"SCIM Group Management"},{"location":"admin/config-guide/jans-cli/im/im-group/#group-resources","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode Group resources are used to organize user resources. These are the following options: group ----- 1 Query Group resources (see section 3.4.2 of RFC 7644) 2 Allows creating a Group resource via POST (see section 3.3 of RFC 7644) 3 Retrieves a Group resource by Id (see section 3.4.1 of RFC 7644) 4 Updates a Group resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. 5 Deletes a group resource (see section 3.6 of RFC 7644) 6 Updates one or more attributes of a Group resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 7 Query Group resources (see section 3.4.2 of RFC 7644)","title":"Group Resources"},{"location":"admin/config-guide/jans-cli/im/im-group/#query-group-resources","text":"It shows all the group resources and its perspective user resources. To find list of resources with custom filter, it supports advanced search with few properties: 1. attributes 2. excludeattributes 3. filter 4. startindex 5. count This is an demo example where each of this properties skipped for default value: Query Group resources (see section 3.4.2 of RFC 7644) ----------------------------------------------------- \u00abA comma-separated list of attribute names to return in the response. Type: string\u00bb attributes: \u00abWhen specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list). Type: string\u00bb excludedAttributes: \u00abAn expression specifying the search criteria. See section 3.4.2.2 of RFC 7644. Type: string\u00bb filter: \u00abThe 1-based index of the first query result. Type: integer\u00bb startIndex: \u00abSpecifies the desired maximum number of query results per page. Type: integer\u00bb count: \u00abThe attribute whose value will be used to order the returned responses. Type: string\u00bb sortBy: \u00abOrder in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\". Type: string\u00bb sortOrder: Please wait while retreiving data ... Getting access token for scope https://jans.io/scim/groups.read { \"Resources\": [ { \"displayName\": \"Jannsen Manager Group\", \"members\": [ { \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"type\": \"User\", \"display\": \"Default Admin User\", \"value\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"60B7\", \"meta\": { \"resourceType\": \"Group\", \"created\": null, \"lastModified\": null, \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 } Selection:","title":"Query Group Resources"},{"location":"admin/config-guide/jans-cli/im/im-group/#update-a-group-resource","text":"Updating a group resource works in a replacement fashion and every attribute value found in the payload will replace the one in the existing resource. Attributes those are not passed in the payload will be left as same as before. If you select option 4 it will be asked to enter the id of a group that you may want to update. After then You will get a list of Fields: Fields: 1 displayName 2 id 3 members 4 meta 5 schemas You can select each of these fields to update one by one. Let's select 3rd field to add memebers in the group. It will ask to enter some follow-up questions, like Add Member? [y, n] . Then enter each value of the user attributes: ref: User referral url type: type as a User display: User display Name value: inum of the user As you see below, If you choose y for Add another Member? then similarly you can add resource for another user. But if you choose n then you can select few options: - q: to quit from operations - v: to view changes - l: to display the current list of fields - s: to save changes Please see below result to better understand about how this option really works. ``` \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: 3 \u00abRepresents a member of a Group resource. \u00bb Add Member? y \u00abURI of the SCIM resource. Type: string\u00bb ref: https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df \u00abThe type of member. Only \"User\" is allowed. Type: string\u00bb type: User \u00abA human readable name, primarily used for display purposes. Type: string\u00bb display: Default Admin User \u00abIdentifier (ID) of the resource. Type: string\u00bb value: e0b8a6a5-1955-49d7-acba-55a75b2373df Add another Member? n \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: s Changes: members: [{'display': 'Default Admin User', 'ref': 'https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df', 'type': 'User', 'value': 'e0b8a6a5-1955-49d7-acba-55a75b2373df'}] ``` continue? as y to perform the operation: Continue? y Please wait while posting data ... Getting access token for scope https://jans.io/scim/groups.write { \"displayName\": \"Jannsen Test Group\", \"members\": [ { \"$ref\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Users/e0b8a6a5-1955-49d7-acba-55a75b2373df\", \"type\": \"User\", \"display\": \"Default Admin User\", \"value\": \"e0b8a6a5-1955-49d7-acba-55a75b2373df\" } ], \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"id\": \"766ffd8c-88a8-4aa8-a430-a5b3ae809c21\", \"meta\": { \"resourceType\": \"Group\", \"created\": \"2021-04-14T19:54:03.091Z\", \"lastModified\": \"2021-04-15T14:21:10.715Z\", \"location\": \"https://testjans.gluu.org/jans-scim/restv1/v2/Groups/766ffd8c-88a8-4aa8-a430-a5b3ae809c21\" } } Finally it will make changes in the group resource.","title":"Update a group Resource:"},{"location":"admin/config-guide/jans-cli/im/im-index/","tags":["administration","configuration","cli","interactive"],"text":"Menu Driven Interactive Mode # We will refer Menu-driven Interactive Mode as IM . To run IM just simply execute jans-cli as follows: /opt/jans/jans-cli/config-cli.py Note: You can supply certificate and key with options --key-file and --cert-file , to disable ssl verification use -noverify . For more information /opt/jans/jans-cli/config-cli.py -h You will see the main menu as below: Using IM is very simple and intuitive. Just make a selection and answer questions. There is a special option to read value for a question from a file using _file tag. This option is the most suitable choice to input the large text (e.g., interception script source code or JSON file content). To use this option input _file /path/of/file e.g. _file /home/user/interceptionscript.py . From the following menu, you can choose an option by selecting its number. IM uses auto-filler for user inputs. When you type, it displays available values. To see all values, press space button. For example: Quick Tips # _ is an escape character for IM mode. For example, you can create a list [\"me\", \"you\"] by entering me_,you _true means boolean True instead of string \"true\" , similarly _false is boolean False instead of string \"false\" _null is comprehended as None (or in json null ) _x exits the current process and go back to the parent menu _file path_to_file the string property will be read ffrom file path_to_file _q refers to quit","title":"Overview"},{"location":"admin/config-guide/jans-cli/im/im-index/#menu-driven-interactive-mode","text":"We will refer Menu-driven Interactive Mode as IM . To run IM just simply execute jans-cli as follows: /opt/jans/jans-cli/config-cli.py Note: You can supply certificate and key with options --key-file and --cert-file , to disable ssl verification use -noverify . For more information /opt/jans/jans-cli/config-cli.py -h You will see the main menu as below: Using IM is very simple and intuitive. Just make a selection and answer questions. There is a special option to read value for a question from a file using _file tag. This option is the most suitable choice to input the large text (e.g., interception script source code or JSON file content). To use this option input _file /path/of/file e.g. _file /home/user/interceptionscript.py . From the following menu, you can choose an option by selecting its number. IM uses auto-filler for user inputs. When you type, it displays available values. To see all values, press space button. For example:","title":"Menu Driven Interactive Mode"},{"location":"admin/config-guide/jans-cli/im/im-index/#quick-tips","text":"_ is an escape character for IM mode. For example, you can create a list [\"me\", \"you\"] by entering me_,you _true means boolean True instead of string \"true\" , similarly _false is boolean False instead of string \"false\" _null is comprehended as None (or in json null ) _x exits the current process and go back to the parent menu _file path_to_file the string property will be read ffrom file path_to_file _q refers to quit","title":"Quick Tips"},{"location":"admin/config-guide/jans-cli/im/im-jans-authorization-server/","tags":["administration","configuration","cli","interactive"],"text":"Janssen Authorization Server # Prerequisite: Know how to use the Janssen CLI in interactive mode From the Main Menu choose option 8 to get/modify Jans authorization server configuration properties. Configuration \u2013 Properties -------------------------- 1 Gets all Jans authorization server configuration properties 2 Partially modifies Jans authorization server Application configuration properties Select 1 to get all the details about Jans authorization server configuration. It will show all the properties as below: { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1\", \"authorizationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/authorize\", \"tokenEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/token\", \"tokenRevocationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/revoke\", \"userInfoEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/userinfo\", \"clientInfoEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/clientinfo\", \"checkSessionIFrame\": \"https://testjans.gluu.com/jans-auth/opiframe.htm\", \"endSessionEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/end_session\", \"jwksUri\": \"https://testjans.gluu.com/jans-auth/restv1/jwks\", \"registrationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/register\", \"openIdDiscoveryEndpoint\": \"https://testjans.gluu.com/.well-known/webfinger\", \"openIdConfigurationEndpoint\": \"https://testjans.gluu.com/.well-known/openid-configuration\", \"idGenerationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/id\", \"introspectionEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/introspection\", \"deviceAuthzEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/device_authorization\", \"sessionAsJwt\": false, \"sectorIdentifierCacheLifetimeInMinutes\": 1440, \"umaConfigurationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/uma2-configuration\", \"umaRptAsJwt\": false, \"umaRptLifetime\": 3600, \"umaTicketLifetime\": 3600, \"umaPctLifetime\": 2592000, \"umaResourceLifetime\": 2592000, \"umaAddScopesAutomatically\": true, \"umaValidateClaimToken\": false, \"umaGrantAccessIfNoPolicies\": false, \"umaRestrictResourceToAssociatedClient\": false, \"spontaneousScopeLifetime\": 86400, \"openidSubAttribute\": \"inum\", \"responseTypesSupported\": [ \"['token', 'code']\", \"['id_token']\", \"['token']\", \"['id_token', 'code']\", \"['id_token', 'token', 'code']\", \"['code']\", \"['id_token', 'token']\" ], \"responseModesSupported\": [ \"query\", \"form_post\", \"fragment\" ], \"grantTypesSupported\": [ \"password\", \"client_credentials\", \"refresh_token\", \"urn:ietf:params:oauth:grant-type:uma-ticket\", \"urn:ietf:params:oauth:grant-type:device_code\", \"implicit\", \"authorization_code\" ], \"subjectTypesSupported\": [ \"public\", \"pairwise\" ], \"defaultSubjectType\": [ \"p\", \"a\", \"i\", \"r\", \"w\", \"i\", \"s\", \"e\" ], \"userInfoSigningAlgValuesSupported\": [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"userInfoEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"userInfoEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"idTokenSigningAlgValuesSupported\": [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"idTokenEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"idTokenEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"requestObjectSigningAlgValuesSupported\": [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"requestObjectEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"requestObjectEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"tokenEndpointAuthMethodsSupported\": [ \"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\" ], \"tokenEndpointAuthSigningAlgValuesSupported\": [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"dynamicRegistrationCustomAttributes\": null, \"displayValuesSupported\": [ \"page\", \"popup\" ], \"claimTypesSupported\": [ \"normal\" ], \"jwksAlgorithmsSupported\": [ \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"RSA1_5\", \"RSA-OAEP\" ], \"serviceDocumentation\": [ \"h\", \"t\", \"t\", \"p\", \":\", \"/\", \"/\", \"j\", \"a\", \"n\", \"s\", \".\", \"o\", \"r\", \"g\", \"/\", \"d\", \"o\", \"c\", \"s\" ], \"claimsLocalesSupported\": [ \"en\" ], \"idTokenTokenBindingCnfValuesSupported\": [ \"tbh\" ], \"uiLocalesSupported\": [ \"en\", \"bg\", \"de\", \"es\", \"fr\", \"it\", \"ru\", \"tr\" ], \"claimsParameterSupported\": false, \"requestParameterSupported\": true, \"requestUriParameterSupported\": true, \"requestUriHashVerificationEnabled\": false, \"requireRequestUriRegistration\": false, \"opPolicyUri\": \"http://www.jans.io/doku.php?id=jans:policy\", \"opTosUri\": \"http://www.jans.io/doku.php?id=jans:tos\", \"authorizationCodeLifetime\": 60, \"refreshTokenLifetime\": 14400, \"idTokenLifetime\": 3600, \"idTokenFilterClaimsBasedOnAccessToken\": false, \"accessTokenLifetime\": 300, \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"cleanServiceBaseDns\": null, \"keyRegenerationEnabled\": true, \"keyRegenerationInterval\": 48, \"defaultSignatureAlgorithm\": [ \"R\", \"S\", \"2\", \"5\", \"6\" ], \"oxOpenIdConnectVersion\": \"openidconnect-1.0\", \"oxId\": \"https://testjans.gluu.com/oxid/service/jans/inum\", \"dynamicRegistrationEnabled\": true, \"dynamicRegistrationExpirationTime\": -1, \"dynamicRegistrationPersistClientAuthorizations\": true, \"trustedClientEnabled\": true, \"skipAuthorizationForOpenIdScopeAndPairwiseId\": false, \"dynamicRegistrationScopesParamEnabled\": true, \"dynamicRegistrationPasswordGrantTypeEnabled\": false, \"dynamicRegistrationAllowedPasswordGrantScopes\": null, \"dynamicRegistrationCustomObjectClass\": null, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"persistIdTokenInLdap\": false, \"persistRefreshTokenInLdap\": true, \"allowPostLogoutRedirectWithoutValidation\": false, \"invalidateSessionCookiesAfterAuthorizationFlow\": false, \"returnClientSecretOnRead\": true, \"rejectJwtWithNoneAlg\": true, \"expirationNotificatorEnabled\": false, \"useNestedJwtDuringEncryption\": true, \"expirationNotificatorMapSizeLimit\": 100000, \"expirationNotificatorIntervalInSeconds\": 600, \"authenticationFiltersEnabled\": false, \"clientAuthenticationFiltersEnabled\": false, \"clientRegDefaultToCodeFlowWithRefresh\": true, \"authenticationFilters\": [ { \"filter\": \"(&(mail=*{0}*)(inum={1}))\", \"bind\": false, \"bind-password-attribute\": null, \"base-dn\": null }, { \"filter\": \"uid={0}\", \"bind\": true, \"bind-password-attribute\": null, \"base-dn\": null } ], \"clientAuthenticationFilters\": [ { \"filter\": \"myCustomAttr1={0}\", \"bind\": null, \"bind-password-attribute\": null, \"base-dn\": null } ], \"corsConfigurationFilters\": [ { \"filterName\": \"CorsFilter\", \"corsEnabled\": true, \"corsAllowedOrigins\": \"*\", \"corsAllowedMethods\": \"GET,POST,HEAD,OPTIONS\", \"corsAllowedHeaders\": \"Origin,Authorization,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers\", \"corsExposedHeaders\": null, \"corsSupportCredentials\": true, \"corsLoggingEnabled\": false, \"corsPreflightMaxAge\": 1800, \"corsRequestDecorate\": true } ], \"sessionIdUnusedLifetime\": 86400, \"sessionIdUnauthenticatedUnusedLifetime\": 120, \"sessionIdEnabled\": true, \"sessionIdPersistOnPromptNone\": true, \"sessionIdRequestParameterEnabled\": false, \"changeSessionIdOnAuthentication\": true, \"sessionIdPersistInCache\": false, \"sessionIdLifetime\": 86400, \"serverSessionIdLifetime\": 86400, \"configurationUpdateInterval\": 3600, \"enableClientGrantTypeUpdate\": true, \"dynamicGrantTypeDefault\": [ \"client_credentials\", \"refresh_token\", \"urn:ietf:params:oauth:grant-type:uma-ticket\", \"urn:ietf:params:oauth:grant-type:device_code\", \"implicit\", \"authorization_code\" ], \"cssLocation\": null, \"jsLocation\": null, \"imgLocation\": null, \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": false, \"pairwiseIdType\": [ \"a\", \"l\", \"g\", \"o\", \"r\", \"i\", \"t\", \"h\", \"m\", \"i\", \"c\" ], \"pairwiseCalculationKey\": \"sckNNuFhwz3r2fC4xLLlBeVybFw\", \"pairwiseCalculationSalt\": \"USZej6vS3pI7RzFIl3AT\", \"shareSubjectIdBetweenClientsWithSameSectorId\": true, \"webKeysStorage\": \"keystore\", \"dnName\": \"CN=Jans Auth CA Certificates\", \"keyStoreFile\": \"/etc/certs/jans-auth-keys.jks\", \"keyStoreSecret\": \"0EIsfpb6tURD\", \"keySelectionStrategy\": \"OLDER\", \"oxElevenTestModeToken\": null, \"oxElevenGenerateKeyEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/generateKey\", \"oxElevenSignEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/sign\", \"oxElevenVerifySignatureEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/verifySignature\", \"oxElevenDeleteKeyEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/deleteKey\", \"introspectionAccessTokenMustHaveUmaProtectionScope\": false, \"endSessionWithAccessToken\": false, \"cookieDomain\": null, \"enabledOAuthAuditLogging\": null, \"jmsBrokerURISet\": null, \"jmsUserName\": null, \"jmsPassword\": null, \"clientWhiteList\": [ \"*\" ], \"clientBlackList\": [ \"*.attacker.com/*\" ], \"legacyIdTokenClaims\": false, \"customHeadersWithAuthorizationResponse\": true, \"frontChannelLogoutSessionSupported\": true, \"loggingLevel\": \"INFO\", \"loggingLayout\": \"text\", \"updateUserLastLogonTime\": false, \"updateClientAccessTime\": false, \"logClientIdOnClientAuthentication\": true, \"logClientNameOnClientAuthentication\": false, \"disableJdkLogger\": true, \"authorizationRequestCustomAllowedParameters\": [ \"customParam2\", \"customParam3\", \"customParam1\" ], \"legacyDynamicRegistrationScopeParam\": false, \"openidScopeBackwardCompatibility\": false, \"disableU2fEndpoint\": false, \"useLocalCache\": true, \"fapiCompatibility\": false, \"forceIdTokenHintPrecense\": false, \"forceOfflineAccessScopeToEnableRefreshToken\": true, \"errorReasonEnabled\": false, \"removeRefreshTokensForClientOnLogout\": true, \"skipRefreshTokenDuringRefreshing\": false, \"refreshTokenExtendLifetimeOnRotation\": false, \"consentGatheringScriptBackwardCompatibility\": false, \"introspectionScriptBackwardCompatibility\": false, \"introspectionResponseScopesBackwardCompatibility\": false, \"softwareStatementValidationType\": \"script\", \"softwareStatementValidationClaimName\": null, \"authenticationProtectionConfiguration\": { \"attemptExpiration\": 15, \"maximumAllowedAttemptsWithoutDelay\": 4, \"delayTime\": 2, \"bruteForceProtectionEnabled\": false }, \"errorHandlingMethod\": \"internal\", \"keepAuthenticatorAttributesOnAcrChange\": false, \"deviceAuthzRequestExpiresIn\": 1800, \"deviceAuthzTokenPollInterval\": 5, \"deviceAuthzResponseTypeToProcessAuthz\": \"code\", \"backchannelClientId\": null, \"backchannelRedirectUri\": \"https://testjans.gluu.com/jans-auth/ciba/home.htm\", \"backchannelAuthenticationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/bc-authorize\", \"backchannelDeviceRegistrationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/bc-deviceRegistration\", \"backchannelTokenDeliveryModesSupported\": [ \"poll\", \"ping\", \"push\" ], \"backchannelAuthenticationRequestSigningAlgValuesSupported\": null, \"backchannelUserCodeParameterSupported\": false, \"backchannelBindingMessagePattern\": \"^[a-zA-Z0-9]{4,8}$\", \"backchannelAuthenticationResponseExpiresIn\": 3600, \"backchannelAuthenticationResponseInterval\": 2, \"backchannelLoginHintClaims\": [ \"inum\", \"uid\", \"mail\" ], \"cibaEndUserNotificationConfig\": { \"apiKey\": null, \"authDomain\": null, \"databaseURL\": null, \"projectId\": null, \"storageBucket\": null, \"messagingSenderId\": null, \"appId\": null, \"notificationUrl\": null, \"notificationKey\": null, \"publicVapidKey\": null }, \"backchannelRequestsProcessorJobIntervalSec\": 5, \"backchannelRequestsProcessorJobChunkSize\": 100, \"cibaGrantLifeExtraTimeSec\": 180, \"cibaMaxExpirationTimeAllowedSec\": 1800, \"cibaEnabled\": false, \"discoveryCacheLifetimeInMinutes\": 60, \"httpLoggingEnabled\": false, \"httpLoggingExcludePaths\": null, \"externalLoggerConfiguration\": null, \"redirectUrisRegexEnabled\": false, \"useHighestLevelScriptIfAcrScriptNotFound\": true } By selecting the 2nd option, you can modify its properties partially. At the end, it will show the updated result.","title":"Auth Server Configuration"},{"location":"admin/config-guide/jans-cli/im/im-jans-authorization-server/#janssen-authorization-server","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode From the Main Menu choose option 8 to get/modify Jans authorization server configuration properties. Configuration \u2013 Properties -------------------------- 1 Gets all Jans authorization server configuration properties 2 Partially modifies Jans authorization server Application configuration properties Select 1 to get all the details about Jans authorization server configuration. It will show all the properties as below: { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1\", \"authorizationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/authorize\", \"tokenEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/token\", \"tokenRevocationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/revoke\", \"userInfoEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/userinfo\", \"clientInfoEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/clientinfo\", \"checkSessionIFrame\": \"https://testjans.gluu.com/jans-auth/opiframe.htm\", \"endSessionEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/end_session\", \"jwksUri\": \"https://testjans.gluu.com/jans-auth/restv1/jwks\", \"registrationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/register\", \"openIdDiscoveryEndpoint\": \"https://testjans.gluu.com/.well-known/webfinger\", \"openIdConfigurationEndpoint\": \"https://testjans.gluu.com/.well-known/openid-configuration\", \"idGenerationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/id\", \"introspectionEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/introspection\", \"deviceAuthzEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/device_authorization\", \"sessionAsJwt\": false, \"sectorIdentifierCacheLifetimeInMinutes\": 1440, \"umaConfigurationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/uma2-configuration\", \"umaRptAsJwt\": false, \"umaRptLifetime\": 3600, \"umaTicketLifetime\": 3600, \"umaPctLifetime\": 2592000, \"umaResourceLifetime\": 2592000, \"umaAddScopesAutomatically\": true, \"umaValidateClaimToken\": false, \"umaGrantAccessIfNoPolicies\": false, \"umaRestrictResourceToAssociatedClient\": false, \"spontaneousScopeLifetime\": 86400, \"openidSubAttribute\": \"inum\", \"responseTypesSupported\": [ \"['token', 'code']\", \"['id_token']\", \"['token']\", \"['id_token', 'code']\", \"['id_token', 'token', 'code']\", \"['code']\", \"['id_token', 'token']\" ], \"responseModesSupported\": [ \"query\", \"form_post\", \"fragment\" ], \"grantTypesSupported\": [ \"password\", \"client_credentials\", \"refresh_token\", \"urn:ietf:params:oauth:grant-type:uma-ticket\", \"urn:ietf:params:oauth:grant-type:device_code\", \"implicit\", \"authorization_code\" ], \"subjectTypesSupported\": [ \"public\", \"pairwise\" ], \"defaultSubjectType\": [ \"p\", \"a\", \"i\", \"r\", \"w\", \"i\", \"s\", \"e\" ], \"userInfoSigningAlgValuesSupported\": [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"userInfoEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"userInfoEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"idTokenSigningAlgValuesSupported\": [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"idTokenEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"idTokenEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"requestObjectSigningAlgValuesSupported\": [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"requestObjectEncryptionAlgValuesSupported\": [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"requestObjectEncryptionEncValuesSupported\": [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"tokenEndpointAuthMethodsSupported\": [ \"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\" ], \"tokenEndpointAuthSigningAlgValuesSupported\": [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\" ], \"dynamicRegistrationCustomAttributes\": null, \"displayValuesSupported\": [ \"page\", \"popup\" ], \"claimTypesSupported\": [ \"normal\" ], \"jwksAlgorithmsSupported\": [ \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"RSA1_5\", \"RSA-OAEP\" ], \"serviceDocumentation\": [ \"h\", \"t\", \"t\", \"p\", \":\", \"/\", \"/\", \"j\", \"a\", \"n\", \"s\", \".\", \"o\", \"r\", \"g\", \"/\", \"d\", \"o\", \"c\", \"s\" ], \"claimsLocalesSupported\": [ \"en\" ], \"idTokenTokenBindingCnfValuesSupported\": [ \"tbh\" ], \"uiLocalesSupported\": [ \"en\", \"bg\", \"de\", \"es\", \"fr\", \"it\", \"ru\", \"tr\" ], \"claimsParameterSupported\": false, \"requestParameterSupported\": true, \"requestUriParameterSupported\": true, \"requestUriHashVerificationEnabled\": false, \"requireRequestUriRegistration\": false, \"opPolicyUri\": \"http://www.jans.io/doku.php?id=jans:policy\", \"opTosUri\": \"http://www.jans.io/doku.php?id=jans:tos\", \"authorizationCodeLifetime\": 60, \"refreshTokenLifetime\": 14400, \"idTokenLifetime\": 3600, \"idTokenFilterClaimsBasedOnAccessToken\": false, \"accessTokenLifetime\": 300, \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"cleanServiceBaseDns\": null, \"keyRegenerationEnabled\": true, \"keyRegenerationInterval\": 48, \"defaultSignatureAlgorithm\": [ \"R\", \"S\", \"2\", \"5\", \"6\" ], \"oxOpenIdConnectVersion\": \"openidconnect-1.0\", \"oxId\": \"https://testjans.gluu.com/oxid/service/jans/inum\", \"dynamicRegistrationEnabled\": true, \"dynamicRegistrationExpirationTime\": -1, \"dynamicRegistrationPersistClientAuthorizations\": true, \"trustedClientEnabled\": true, \"skipAuthorizationForOpenIdScopeAndPairwiseId\": false, \"dynamicRegistrationScopesParamEnabled\": true, \"dynamicRegistrationPasswordGrantTypeEnabled\": false, \"dynamicRegistrationAllowedPasswordGrantScopes\": null, \"dynamicRegistrationCustomObjectClass\": null, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"persistIdTokenInLdap\": false, \"persistRefreshTokenInLdap\": true, \"allowPostLogoutRedirectWithoutValidation\": false, \"invalidateSessionCookiesAfterAuthorizationFlow\": false, \"returnClientSecretOnRead\": true, \"rejectJwtWithNoneAlg\": true, \"expirationNotificatorEnabled\": false, \"useNestedJwtDuringEncryption\": true, \"expirationNotificatorMapSizeLimit\": 100000, \"expirationNotificatorIntervalInSeconds\": 600, \"authenticationFiltersEnabled\": false, \"clientAuthenticationFiltersEnabled\": false, \"clientRegDefaultToCodeFlowWithRefresh\": true, \"authenticationFilters\": [ { \"filter\": \"(&(mail=*{0}*)(inum={1}))\", \"bind\": false, \"bind-password-attribute\": null, \"base-dn\": null }, { \"filter\": \"uid={0}\", \"bind\": true, \"bind-password-attribute\": null, \"base-dn\": null } ], \"clientAuthenticationFilters\": [ { \"filter\": \"myCustomAttr1={0}\", \"bind\": null, \"bind-password-attribute\": null, \"base-dn\": null } ], \"corsConfigurationFilters\": [ { \"filterName\": \"CorsFilter\", \"corsEnabled\": true, \"corsAllowedOrigins\": \"*\", \"corsAllowedMethods\": \"GET,POST,HEAD,OPTIONS\", \"corsAllowedHeaders\": \"Origin,Authorization,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers\", \"corsExposedHeaders\": null, \"corsSupportCredentials\": true, \"corsLoggingEnabled\": false, \"corsPreflightMaxAge\": 1800, \"corsRequestDecorate\": true } ], \"sessionIdUnusedLifetime\": 86400, \"sessionIdUnauthenticatedUnusedLifetime\": 120, \"sessionIdEnabled\": true, \"sessionIdPersistOnPromptNone\": true, \"sessionIdRequestParameterEnabled\": false, \"changeSessionIdOnAuthentication\": true, \"sessionIdPersistInCache\": false, \"sessionIdLifetime\": 86400, \"serverSessionIdLifetime\": 86400, \"configurationUpdateInterval\": 3600, \"enableClientGrantTypeUpdate\": true, \"dynamicGrantTypeDefault\": [ \"client_credentials\", \"refresh_token\", \"urn:ietf:params:oauth:grant-type:uma-ticket\", \"urn:ietf:params:oauth:grant-type:device_code\", \"implicit\", \"authorization_code\" ], \"cssLocation\": null, \"jsLocation\": null, \"imgLocation\": null, \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": false, \"pairwiseIdType\": [ \"a\", \"l\", \"g\", \"o\", \"r\", \"i\", \"t\", \"h\", \"m\", \"i\", \"c\" ], \"pairwiseCalculationKey\": \"sckNNuFhwz3r2fC4xLLlBeVybFw\", \"pairwiseCalculationSalt\": \"USZej6vS3pI7RzFIl3AT\", \"shareSubjectIdBetweenClientsWithSameSectorId\": true, \"webKeysStorage\": \"keystore\", \"dnName\": \"CN=Jans Auth CA Certificates\", \"keyStoreFile\": \"/etc/certs/jans-auth-keys.jks\", \"keyStoreSecret\": \"0EIsfpb6tURD\", \"keySelectionStrategy\": \"OLDER\", \"oxElevenTestModeToken\": null, \"oxElevenGenerateKeyEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/generateKey\", \"oxElevenSignEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/sign\", \"oxElevenVerifySignatureEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/verifySignature\", \"oxElevenDeleteKeyEndpoint\": \"https://testjans.gluu.com/oxeleven/rest/oxeleven/deleteKey\", \"introspectionAccessTokenMustHaveUmaProtectionScope\": false, \"endSessionWithAccessToken\": false, \"cookieDomain\": null, \"enabledOAuthAuditLogging\": null, \"jmsBrokerURISet\": null, \"jmsUserName\": null, \"jmsPassword\": null, \"clientWhiteList\": [ \"*\" ], \"clientBlackList\": [ \"*.attacker.com/*\" ], \"legacyIdTokenClaims\": false, \"customHeadersWithAuthorizationResponse\": true, \"frontChannelLogoutSessionSupported\": true, \"loggingLevel\": \"INFO\", \"loggingLayout\": \"text\", \"updateUserLastLogonTime\": false, \"updateClientAccessTime\": false, \"logClientIdOnClientAuthentication\": true, \"logClientNameOnClientAuthentication\": false, \"disableJdkLogger\": true, \"authorizationRequestCustomAllowedParameters\": [ \"customParam2\", \"customParam3\", \"customParam1\" ], \"legacyDynamicRegistrationScopeParam\": false, \"openidScopeBackwardCompatibility\": false, \"disableU2fEndpoint\": false, \"useLocalCache\": true, \"fapiCompatibility\": false, \"forceIdTokenHintPrecense\": false, \"forceOfflineAccessScopeToEnableRefreshToken\": true, \"errorReasonEnabled\": false, \"removeRefreshTokensForClientOnLogout\": true, \"skipRefreshTokenDuringRefreshing\": false, \"refreshTokenExtendLifetimeOnRotation\": false, \"consentGatheringScriptBackwardCompatibility\": false, \"introspectionScriptBackwardCompatibility\": false, \"introspectionResponseScopesBackwardCompatibility\": false, \"softwareStatementValidationType\": \"script\", \"softwareStatementValidationClaimName\": null, \"authenticationProtectionConfiguration\": { \"attemptExpiration\": 15, \"maximumAllowedAttemptsWithoutDelay\": 4, \"delayTime\": 2, \"bruteForceProtectionEnabled\": false }, \"errorHandlingMethod\": \"internal\", \"keepAuthenticatorAttributesOnAcrChange\": false, \"deviceAuthzRequestExpiresIn\": 1800, \"deviceAuthzTokenPollInterval\": 5, \"deviceAuthzResponseTypeToProcessAuthz\": \"code\", \"backchannelClientId\": null, \"backchannelRedirectUri\": \"https://testjans.gluu.com/jans-auth/ciba/home.htm\", \"backchannelAuthenticationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/bc-authorize\", \"backchannelDeviceRegistrationEndpoint\": \"https://testjans.gluu.com/jans-auth/restv1/bc-deviceRegistration\", \"backchannelTokenDeliveryModesSupported\": [ \"poll\", \"ping\", \"push\" ], \"backchannelAuthenticationRequestSigningAlgValuesSupported\": null, \"backchannelUserCodeParameterSupported\": false, \"backchannelBindingMessagePattern\": \"^[a-zA-Z0-9]{4,8}$\", \"backchannelAuthenticationResponseExpiresIn\": 3600, \"backchannelAuthenticationResponseInterval\": 2, \"backchannelLoginHintClaims\": [ \"inum\", \"uid\", \"mail\" ], \"cibaEndUserNotificationConfig\": { \"apiKey\": null, \"authDomain\": null, \"databaseURL\": null, \"projectId\": null, \"storageBucket\": null, \"messagingSenderId\": null, \"appId\": null, \"notificationUrl\": null, \"notificationKey\": null, \"publicVapidKey\": null }, \"backchannelRequestsProcessorJobIntervalSec\": 5, \"backchannelRequestsProcessorJobChunkSize\": 100, \"cibaGrantLifeExtraTimeSec\": 180, \"cibaMaxExpirationTimeAllowedSec\": 1800, \"cibaEnabled\": false, \"discoveryCacheLifetimeInMinutes\": 60, \"httpLoggingEnabled\": false, \"httpLoggingExcludePaths\": null, \"externalLoggerConfiguration\": null, \"redirectUrisRegexEnabled\": false, \"useHighestLevelScriptIfAcrScriptNotFound\": true } By selecting the 2nd option, you can modify its properties partially. At the end, it will show the updated result.","title":"Janssen Authorization Server"},{"location":"admin/config-guide/jans-cli/im/im-janssen-fido2/","tags":["administration","configuration","cli","interactive"],"text":"Janssen FIDO2 Configuration # Prerequisite: Know how to use the Janssen CLI in interactive mode Janssen includes a FIDO2 component to implement a two-step, two-factor authentication (2FA) with a username/password as the first step, and any FIDO2 device as the second step. During Janssen installation, the administrator will have an option to install the FIDO2 component. Using Janssen CLI, you can view/update details of the FIDO2 configuration. From the main menu select option 9, you will get two options. Configuration \u2013 Fido2 --------------------- 1 Gets Jans Authorization Server Fido2 configuration properties 2 Updates Fido2 configuration properties If you chose the first option, You will get some details of fido2 configuration properties: { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/fido2/restv1\", \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"useLocalCache\": true, \"disableJdkLogger\": true, \"loggingLevel\": \"INFO\", \"loggingLayout\": \"text\", \"externalLoggerConfiguration\": \"\", \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": true, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"fido2Configuration\": { \"authenticatorCertsFolder\": \"/etc/jans/conf/fido2/authenticator_cert\", \"mdsCertsFolder\": \"/etc/jans/conf/fido2/mds/cert\", \"mdsTocsFolder\": \"/etc/jans/conf/fido2/mds/toc\", \"serverMetadataFolder\": \"/etc/jans/conf/fido2/server_metadata\", \"requestedParties\": [ { \"name\": \"https://testjans.gluu.com\", \"domains\": [ \"testjans.gluu.com\" ] } ], \"userAutoEnrollment\": false, \"unfinishedRequestExpiration\": 180, \"authenticationHistoryExpiration\": 1296000, \"requestedCredentialTypes\": [ \"RS256\", \"ES256\" ] } } If you want to update the fido2 configuration, you can choose the 2nd option. It will ask to fill each property, skip for default values. For example, if you want to change logginglevel INFO to DEBUG , simply enter DEBUG when it will ask to enter a value. Add RequestedParties? ; If you want to add any requested domains then enter y , it will ask name and domains information of requested parties. Otherwise, enter n to skip. Continue? y Getting access token for scope https://jans.io/oauth/config/fido2.write Please wait while posting data ... { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/fido2/restv1\", \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"useLocalCache\": false, \"disableJdkLogger\": false, \"loggingLevel\": \"DEBUG\", \"loggingLayout\": \"text\", \"externalLoggerConfiguration\": null, \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": false, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"fido2Configuration\": { \"authenticatorCertsFolder\": null, \"mdsCertsFolder\": null, \"mdsTocsFolder\": null, \"serverMetadataFolder\": null, \"requestedParties\": [ { \"name\": null, \"domains\": [] } ], \"userAutoEnrollment\": false, \"unfinishedRequestExpiration\": null, \"authenticationHistoryExpiration\": null, \"requestedCredentialTypes\": [] } }","title":"FIDO2 Configuration"},{"location":"admin/config-guide/jans-cli/im/im-janssen-fido2/#janssen-fido2-configuration","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode Janssen includes a FIDO2 component to implement a two-step, two-factor authentication (2FA) with a username/password as the first step, and any FIDO2 device as the second step. During Janssen installation, the administrator will have an option to install the FIDO2 component. Using Janssen CLI, you can view/update details of the FIDO2 configuration. From the main menu select option 9, you will get two options. Configuration \u2013 Fido2 --------------------- 1 Gets Jans Authorization Server Fido2 configuration properties 2 Updates Fido2 configuration properties If you chose the first option, You will get some details of fido2 configuration properties: { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/fido2/restv1\", \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"useLocalCache\": true, \"disableJdkLogger\": true, \"loggingLevel\": \"INFO\", \"loggingLayout\": \"text\", \"externalLoggerConfiguration\": \"\", \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": true, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"fido2Configuration\": { \"authenticatorCertsFolder\": \"/etc/jans/conf/fido2/authenticator_cert\", \"mdsCertsFolder\": \"/etc/jans/conf/fido2/mds/cert\", \"mdsTocsFolder\": \"/etc/jans/conf/fido2/mds/toc\", \"serverMetadataFolder\": \"/etc/jans/conf/fido2/server_metadata\", \"requestedParties\": [ { \"name\": \"https://testjans.gluu.com\", \"domains\": [ \"testjans.gluu.com\" ] } ], \"userAutoEnrollment\": false, \"unfinishedRequestExpiration\": 180, \"authenticationHistoryExpiration\": 1296000, \"requestedCredentialTypes\": [ \"RS256\", \"ES256\" ] } } If you want to update the fido2 configuration, you can choose the 2nd option. It will ask to fill each property, skip for default values. For example, if you want to change logginglevel INFO to DEBUG , simply enter DEBUG when it will ask to enter a value. Add RequestedParties? ; If you want to add any requested domains then enter y , it will ask name and domains information of requested parties. Otherwise, enter n to skip. Continue? y Getting access token for scope https://jans.io/oauth/config/fido2.write Please wait while posting data ... { \"issuer\": \"https://testjans.gluu.com\", \"baseEndpoint\": \"https://testjans.gluu.com/fido2/restv1\", \"cleanServiceInterval\": 60, \"cleanServiceBatchChunkSize\": 10000, \"useLocalCache\": false, \"disableJdkLogger\": false, \"loggingLevel\": \"DEBUG\", \"loggingLayout\": \"text\", \"externalLoggerConfiguration\": null, \"metricReporterInterval\": 300, \"metricReporterKeepDataDays\": 15, \"metricReporterEnabled\": false, \"personCustomObjectClassList\": [ \"jansCustomPerson\", \"jansPerson\" ], \"fido2Configuration\": { \"authenticatorCertsFolder\": null, \"mdsCertsFolder\": null, \"mdsTocsFolder\": null, \"serverMetadataFolder\": null, \"requestedParties\": [ { \"name\": null, \"domains\": [] } ], \"userAutoEnrollment\": false, \"unfinishedRequestExpiration\": null, \"authenticationHistoryExpiration\": null, \"requestedCredentialTypes\": [] } }","title":"Janssen FIDO2 Configuration"},{"location":"admin/config-guide/jans-cli/im/im-janssen-logging-configuration/","tags":["administration","configuration","cli","interactive"],"text":"Log Management # Prerequisite: Know how to use the Janssen CLI in interactive mode Using Janssen CLI, you can easily update the logging configuration. Just go with option 11 from Main Menu, It will display two options. Configuration \u2013 Logging ----------------------- 1 Returns Jans Authorization Server logging settings 2 Updates Jans Authorization Server logging settings The first option returns the current logging configuration. Re turns Ja ns Au t horiza t io n Server loggi n g se tt i n gs -------------------------------------------------- Please wai t while re tre ivi n g da ta ... Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/logging.readonly { \"loggingLevel\" : \"INFO\" , \"loggingLayout\" : \"text\" , \"httpLoggingEnabled\" : false , \"disableJdkLogger\" : true , \"enabledOAuthAuditLogging\" : false , \"externalLoggerConfiguration\" : null , \"httpLoggingExcludePaths\" : null } To update the current logging configuration select option 2. For example, I have updated logging level INFO to DEBUG and enabled enabledOAuthAuditLogging . Re turns Ja ns Au t horiza t io n Server loggi n g se tt i n gs -------------------------------------------------- Please wai t while re tre ivi n g da ta ... Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/logging.readonly \u00abLoggi n g level f or Ja ns Au t horiza t io n Server logger. Type : s tr i n g\u00bb loggi n gLevel [ INFO ]: DEBUG \u00abLoggi n g layou t used f or Ja ns Au t horiza t io n Server loggers. Type : s tr i n g\u00bb loggi n gLayou t [ te x t ]: \u00abTo e na ble h tt p reques t /respo nse loggi n g. Type : boolea n \u00bb h tt pLoggi n gE na bled [ false ]: \u00abTo e na ble/disable Jdk loggi n g. Type : boolea n \u00bb disableJdkLogger [ true ]: \u00abTo e na ble/disable OAu t h audi t loggi n g. Type : boolea n \u00bb e na bledOAu t hAudi t Loggi n g [ false ]: true Please e nter a( n ) boolea n value : _ true , _ false e na bledOAu t hAudi t Loggi n g [ false ]: _ true \u00abPa t h t o ex ternal log 4 j 2 co nf igura t io n f ile. Type : s tr i n g\u00bb ex ternal LoggerCo nf igura t io n : \u00abLis t o f pa t hs t o exclude fr om logger. Type : array o f s tr i n g separa te d by _ , \u00bb Example : /au t h/img , /au t h/s t yleshee t h tt pLoggi n gExcludePa t hs : Ob ta i ne d Da ta : { \"loggingLevel\" : \"DEBUG\" , \"loggingLayout\" : \"text\" , \"httpLoggingEnabled\" : false , \"disableJdkLogger\" : true , \"enabledOAuthAuditLogging\" : true , \"externalLoggerConfiguration\" : null , \"httpLoggingExcludePaths\" : null } Co nt i nue ? y Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/logging.write Please wai t while pos t i n g da ta ... { \"loggingLevel\" : \"DEBUG\" , \"loggingLayout\" : \"text\" , \"httpLoggingEnabled\" : false , \"disableJdkLogger\" : true , \"enabledOAuthAuditLogging\" : true , \"externalLoggerConfiguration\" : null , \"httpLoggingExcludePaths\" : null }","title":"Logging"},{"location":"admin/config-guide/jans-cli/im/im-janssen-logging-configuration/#log-management","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode Using Janssen CLI, you can easily update the logging configuration. Just go with option 11 from Main Menu, It will display two options. Configuration \u2013 Logging ----------------------- 1 Returns Jans Authorization Server logging settings 2 Updates Jans Authorization Server logging settings The first option returns the current logging configuration. Re turns Ja ns Au t horiza t io n Server loggi n g se tt i n gs -------------------------------------------------- Please wai t while re tre ivi n g da ta ... Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/logging.readonly { \"loggingLevel\" : \"INFO\" , \"loggingLayout\" : \"text\" , \"httpLoggingEnabled\" : false , \"disableJdkLogger\" : true , \"enabledOAuthAuditLogging\" : false , \"externalLoggerConfiguration\" : null , \"httpLoggingExcludePaths\" : null } To update the current logging configuration select option 2. For example, I have updated logging level INFO to DEBUG and enabled enabledOAuthAuditLogging . Re turns Ja ns Au t horiza t io n Server loggi n g se tt i n gs -------------------------------------------------- Please wai t while re tre ivi n g da ta ... Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/logging.readonly \u00abLoggi n g level f or Ja ns Au t horiza t io n Server logger. Type : s tr i n g\u00bb loggi n gLevel [ INFO ]: DEBUG \u00abLoggi n g layou t used f or Ja ns Au t horiza t io n Server loggers. Type : s tr i n g\u00bb loggi n gLayou t [ te x t ]: \u00abTo e na ble h tt p reques t /respo nse loggi n g. Type : boolea n \u00bb h tt pLoggi n gE na bled [ false ]: \u00abTo e na ble/disable Jdk loggi n g. Type : boolea n \u00bb disableJdkLogger [ true ]: \u00abTo e na ble/disable OAu t h audi t loggi n g. Type : boolea n \u00bb e na bledOAu t hAudi t Loggi n g [ false ]: true Please e nter a( n ) boolea n value : _ true , _ false e na bledOAu t hAudi t Loggi n g [ false ]: _ true \u00abPa t h t o ex ternal log 4 j 2 co nf igura t io n f ile. Type : s tr i n g\u00bb ex ternal LoggerCo nf igura t io n : \u00abLis t o f pa t hs t o exclude fr om logger. Type : array o f s tr i n g separa te d by _ , \u00bb Example : /au t h/img , /au t h/s t yleshee t h tt pLoggi n gExcludePa t hs : Ob ta i ne d Da ta : { \"loggingLevel\" : \"DEBUG\" , \"loggingLayout\" : \"text\" , \"httpLoggingEnabled\" : false , \"disableJdkLogger\" : true , \"enabledOAuthAuditLogging\" : true , \"externalLoggerConfiguration\" : null , \"httpLoggingExcludePaths\" : null } Co nt i nue ? y Ge tt i n g access t oke n f or scope h tt ps : //jans.io/oauth/config/logging.write Please wai t while pos t i n g da ta ... { \"loggingLevel\" : \"DEBUG\" , \"loggingLayout\" : \"text\" , \"httpLoggingEnabled\" : false , \"disableJdkLogger\" : true , \"enabledOAuthAuditLogging\" : true , \"externalLoggerConfiguration\" : null , \"httpLoggingExcludePaths\" : null }","title":"Log Management"},{"location":"admin/config-guide/jans-cli/im/im-json-web-key/","tags":["administration","configuration","cli","interactive"],"text":"JWT Management # Prerequisite: Know how to use the Janssen CLI in interactive mode This operation is used to get the JSON Web Key Set (JWKS) from OP host. The JWKS is a set of keys containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server. From the Main Menu, select option 12, It returns some options as stated below: Configuration \u2013 JWK - JSON Web Key (JWK) ---------------------------------------- 1 Gets a list of JSON Web Key (JWK) used by a server 2 Puts/replaces JWKS 3 Patch JWKS You can view the list of JSON Web Key, add/replace and patch using Janssen CLI. Get list of JSON Web Key # Select option 1 from JSON Web Key Menu and it will return a list of key with details information as below: Gets list of JSON Web Key (JWK) used by server Gets list of JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627]. --------------------------------------------------------------------------------------------------------------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/jwks.readonly { \"keys\": [ { \"kid\": \"a1d120af-d4c1-45aa-8cff-034e00f13d2b_sig_rs256\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS256\", \"crv\": \"\", \"exp\": 1610923149000, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAKefzbtkilZu5nn6G1WHSbJZu/PIdKpR9U5QA58DXN6GMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzODU5WhcNMjEwMTE3MjIzOTA5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxmm58zzhORBJkyxcjyfFUrRO06V4PwDZT/ObroQOQDuN8KbOzqkGdZX6BkZiFPNHuWdnUp0/2Fxf2LM1z5nhyCG4Wy92rUqHL6ispNtPfWOe3mWwQlFJk/Z/87gqJZ00ss3vnSk+05j4AsgvnPoKZJtgJPAEjZ8+bBSNExpqWdHBFcqJJsLhyjE5o7hQFQplMevQLyVvrzxsY8YwZuoTZA+bUo7//vsrHUe/PyZP0+0FHRbFzwo+ArxrdFcFlEhTqjKijo7pyh8gmZkgvXG8D1Zi1Fmstnf9yiF36ZBlN+RSr+JHxPAvwU2O/aMmFhvZNJ9aOzP0dienSZo72xSiRwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAGB6JFBWpIAux87xE1GL1iY+LrcxC7T6ITRb+mwhtsA0bOTx9CISNLhuFUIcOBrB+2LQD7asVvbo7I2zJ9enIR0QJbO4Z3niSCVULWeBhPACh5a+HgkpZ7mlFLJyD1hpw+pEfobasvoJLzvyuVpL/EXCgMYoi0qmrkwZfYXoajjZAhsT6Y5mTBd25xYGcatglQZutaVOgneQxZb2vjAH4h3H14EHdKPh3viXbpyXe6MP+DqX1kIqFHX3rYbhvLXdALHkRsqlcoHMW7jQuQyyfXNbwddg6H/IR0VV5yliOsoHP8BxHS9vIGHroGpZarpCwkxgsRKL+Uib1+wBN1GLu6o=\" ], \"n\": \"xmm58zzhORBJkyxcjyfFUrRO06V4PwDZT_ObroQOQDuN8KbOzqkGdZX6BkZiFPNHuWdnUp0_2Fxf2LM1z5nhyCG4Wy92rUqHL6ispNtPfWOe3mWwQlFJk_Z_87gqJZ00ss3vnSk-05j4AsgvnPoKZJtgJPAEjZ8-bBSNExpqWdHBFcqJJsLhyjE5o7hQFQplMevQLyVvrzxsY8YwZuoTZA-bUo7__vsrHUe_PyZP0-0FHRbFzwo-ArxrdFcFlEhTqjKijo7pyh8gmZkgvXG8D1Zi1Fmstnf9yiF36ZBlN-RSr-JHxPAvwU2O_aMmFhvZNJ9aOzP0dienSZo72xSiRw\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, { \"kid\": \"5841b726-4a62-4a91-9b14-2c4e774b8187_sig_rs384\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS384\", \"crv\": \"\", \"exp\": 1610923149000, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAK29kWeoIZxzuN9D5Bi+TJOSkxSMyK+9O6sFHH9UG6KTMA0GCSqGSIb3DQEBDAUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTAwWhcNMjEwMTE3MjIzOTA5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtegG/5p4hXBV8BhPE7bUYgCXYnwFY9J9yVNjMI306qnN1sRrTvqH88SCLg2/sY2gWI+Y8lmqXYsLbsmCoCXMUAHU6ujqrwWZsiubucyb6wmE2yWdkSgIcT1jpepnfvm4oyKnhZVqn6hOuDx+/vBNk/RJfPibBrhJp/+uiZFc86at3JIgqXB5RqV9ryXGSXpL7tj5cST2HFU+2WzoutHRze7T3XLcA0bIiiQUfHzssxElfSbrUZRY36mpoaqm2WDMEhBEwu2B1L2Jwx76LIn7dWszwaIHkqLMy7PSl3Hit0MdO7SD5bqHnMHHmSjj+9XmYBg5oErfOKJOWAevLlksgQIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQEMBQADggEBACSX/4j+sd5TGsM1e3ISJHxjDlWhvsurPQhadaDu49NdCP/9hrwo7Th48q8Q8o99DnDBOIV0AE7VORYC4xRWHXlGJV84YAQRhHi1rL8L5YWheNeR0/ibanLhaTMb4Ecw8CRJWplslKmt78bn/J1xl4cWilDTVeB+LAYrpmDJNXSx/3QHtIc2PoIKn3dE8cHhHvQ+zHmd52TxGdBR08+TqZDcwZT9XvjrOwyUkk5LIXp8Di9oqPtcDM2vqrgZna40cZAtXHzY1x6PKlwRoMSEZ+olYjjy2OlqsotORc+fbQIkLkUUnhyHTAiobZT1N55LjYkhwjXV+Ps1Qm0Q2px9uMs=\" ], \"n\": \"tegG_5p4hXBV8BhPE7bUYgCXYnwFY9J9yVNjMI306qnN1sRrTvqH88SCLg2_sY2gWI-Y8lmqXYsLbsmCoCXMUAHU6ujqrwWZsiubucyb6wmE2yWdkSgIcT1jpepnfvm4oyKnhZVqn6hOuDx-_vBNk_RJfPibBrhJp_-uiZFc86at3JIgqXB5RqV9ryXGSXpL7tj5cST2HFU-2WzoutHRze7T3XLcA0bIiiQUfHzssxElfSbrUZRY36mpoaqm2WDMEhBEwu2B1L2Jwx76LIn7dWszwaIHkqLMy7PSl3Hit0MdO7SD5bqHnMHHmSjj-9XmYBg5oErfOKJOWAevLlksgQ\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, ... ... ... { \"kid\": \"e6e8ccc4-708b-4a83-bbd2-7a9e0181734f_enc_rsa-oaep\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": 1610923149000, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAIfkfNwuxlcdhdiAKvWrX+LbYKvZwRC9aEn9tOqCZLunMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTAyWhcNMjEwMTE3MjIzOTA5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw6p2QLwHKwPA+W9oTjTAkYn1iRQVXdPsNIu18Lao11Fbp0krMKSsnVcBIuO8zjsERf8b/awTN9zJQpKO3LqHHcGIjZJdAfH42CPgyUMjn6laF8iO0S+kI8RCocRLoPP2PVbqPjYD6kvK0mlSSLu+t9bU7mgEsYF5y8r05hX1ROdLUTFuHMa2g4cuD0HEEJMzewK1TzPikNiThsQv0yzwkwGZrBldWeB1E8BGWha2jwVom/Noo6vimtN8Le1XeYq5PvRVaS4AtLup4K0SaVetL0mAiCWKUTudWNDCRWB/Z4lJCJGOCCfk6bPp0TsjOcDjGkPzP05G9FFWndOpQ49UcwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAJ6zGYZqI4rwBJri7v3XSLvKrUgU19xLq6aik6h3DMylzHFEydnMdgyYU23GWP/rcvM1K4whhiopUcoj/FHQ0uaQV67zb6/NvCbIxiGjQs08ZcYnMtZ0zwm9hj7YeafsVQVI3qo1VdJfPWYHEW4IUfaqIlWdsj/CW1HeKWOrw0+WC1JYwD5Ka13bwYtC3jgt8yHwn3XoOhbINzFsVdRA5pfJKCvZN5IteHhpkmeOkvOlRFaPrqlGM2rukCzo2aBakC8F8SwaQje6prm2wSRJp/qjJKxKO8fMklcBT/FMD2zdYeHb4+YFRo8/CzjRNPEmMSI4LHdFkmjGDrLQYjrxOsY=\" ], \"n\": \"w6p2QLwHKwPA-W9oTjTAkYn1iRQVXdPsNIu18Lao11Fbp0krMKSsnVcBIuO8zjsERf8b_awTN9zJQpKO3LqHHcGIjZJdAfH42CPgyUMjn6laF8iO0S-kI8RCocRLoPP2PVbqPjYD6kvK0mlSSLu-t9bU7mgEsYF5y8r05hX1ROdLUTFuHMa2g4cuD0HEEJMzewK1TzPikNiThsQv0yzwkwGZrBldWeB1E8BGWha2jwVom_Noo6vimtN8Le1XeYq5PvRVaS4AtLup4K0SaVetL0mAiCWKUTudWNDCRWB_Z4lJCJGOCCfk6bPp0TsjOcDjGkPzP05G9FFWndOpQ49Ucw\", \"e\": \"AQAB\", \"x\": null, \"y\": null } ] } Creating or Replacing - JWK # You can add a new JWK or replace an old JWK with new value through this Interactive Mode option. When it will ask Add JwonWebKey? just press y to confirm. Fill each property with a value, keep empty to skip. kid : Unique Key Identifier [String]. kty : Cryptographic algorithm name used with the key [String]. use : Key usage, [enc, sig,..] alg : The cryptographic algorithm name that is going to be used. exp : time validation Gets list of JSON Web Key (JWK) used by server Gets list of JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627]. --------------------------------------------------------------------------------------------------------------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/jwks.readonly \u00abJsonWebKey. \u00bb Add JsonWebKey? y \u00abThe unique identifier for the key. Type: string\u00bb kid: aabb \u00abThe family of cryptographic algorithms used with the key. Type: string\u00bb kty: RSA \u00abHow the key was meant to be used; sig represents the signature. Type: string\u00bb use: enc \u00abThe specific cryptographic algorithm used with the key. Type: string\u00bb alg: RSA-OAEP \u00abThe crv member identifies the cryptographic curve used with the key. Values defined by this specification are P-256, P-384 and P-521. Additional crv values MAY be used, provided they are understood by implementations using that Elliptic Curve key. The crv value is case sensitive. Type: string\u00bb crv: \u00abContains the token expiration timestamp. Type: integer\u00bb exp: \u00abThe x.509 certificate chain. The first entry in the array is the certificate to use for token verification; the other certificates can be used to verify this first certificate. Type: array of string separated by _,\u00bb x5c: \u00abThe modulus for the RSA public key. Type: string\u00bb n: \u00abThe exponent for the RSA public key. Type: string\u00bb e: \u00abThe x member contains the x coordinate for the elliptic curve point. It is represented as the base64url encoding of the coordinate's big endian representation. Type: string\u00bb x: \u00abThe y member contains the y coordinate for the elliptic curve point. It is represented as the base64url encoding of the coordinate's big endian representation. Type: string\u00bb y: Add another JsonWebKey? n Obtained Data: { \"keys\": [ { \"kid\": \"aabb\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": null, \"exp\": null, \"x5c\": [], \"n\": null, \"e\": null, \"x\": null, \"y\": null } ] } Continue? y Getting access token for scope https://jans.io/oauth/config/jwks.write Please wait while posting data ... { \"keys\": [ { \"kid\": \"aabb\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": null, \"x5c\": null, \"n\": null, \"e\": null, \"x\": null, \"y\": null } ] } Update an Existing JWK Configuration # Just choose this option and fill the value for op , path , and value to patch JSON Web Key.","title":"JSON Web Key"},{"location":"admin/config-guide/jans-cli/im/im-json-web-key/#jwt-management","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode This operation is used to get the JSON Web Key Set (JWKS) from OP host. The JWKS is a set of keys containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server. From the Main Menu, select option 12, It returns some options as stated below: Configuration \u2013 JWK - JSON Web Key (JWK) ---------------------------------------- 1 Gets a list of JSON Web Key (JWK) used by a server 2 Puts/replaces JWKS 3 Patch JWKS You can view the list of JSON Web Key, add/replace and patch using Janssen CLI.","title":"JWT Management"},{"location":"admin/config-guide/jans-cli/im/im-json-web-key/#get-list-of-json-web-key","text":"Select option 1 from JSON Web Key Menu and it will return a list of key with details information as below: Gets list of JSON Web Key (JWK) used by server Gets list of JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627]. --------------------------------------------------------------------------------------------------------------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/jwks.readonly { \"keys\": [ { \"kid\": \"a1d120af-d4c1-45aa-8cff-034e00f13d2b_sig_rs256\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS256\", \"crv\": \"\", \"exp\": 1610923149000, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAKefzbtkilZu5nn6G1WHSbJZu/PIdKpR9U5QA58DXN6GMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzODU5WhcNMjEwMTE3MjIzOTA5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxmm58zzhORBJkyxcjyfFUrRO06V4PwDZT/ObroQOQDuN8KbOzqkGdZX6BkZiFPNHuWdnUp0/2Fxf2LM1z5nhyCG4Wy92rUqHL6ispNtPfWOe3mWwQlFJk/Z/87gqJZ00ss3vnSk+05j4AsgvnPoKZJtgJPAEjZ8+bBSNExpqWdHBFcqJJsLhyjE5o7hQFQplMevQLyVvrzxsY8YwZuoTZA+bUo7//vsrHUe/PyZP0+0FHRbFzwo+ArxrdFcFlEhTqjKijo7pyh8gmZkgvXG8D1Zi1Fmstnf9yiF36ZBlN+RSr+JHxPAvwU2O/aMmFhvZNJ9aOzP0dienSZo72xSiRwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAGB6JFBWpIAux87xE1GL1iY+LrcxC7T6ITRb+mwhtsA0bOTx9CISNLhuFUIcOBrB+2LQD7asVvbo7I2zJ9enIR0QJbO4Z3niSCVULWeBhPACh5a+HgkpZ7mlFLJyD1hpw+pEfobasvoJLzvyuVpL/EXCgMYoi0qmrkwZfYXoajjZAhsT6Y5mTBd25xYGcatglQZutaVOgneQxZb2vjAH4h3H14EHdKPh3viXbpyXe6MP+DqX1kIqFHX3rYbhvLXdALHkRsqlcoHMW7jQuQyyfXNbwddg6H/IR0VV5yliOsoHP8BxHS9vIGHroGpZarpCwkxgsRKL+Uib1+wBN1GLu6o=\" ], \"n\": \"xmm58zzhORBJkyxcjyfFUrRO06V4PwDZT_ObroQOQDuN8KbOzqkGdZX6BkZiFPNHuWdnUp0_2Fxf2LM1z5nhyCG4Wy92rUqHL6ispNtPfWOe3mWwQlFJk_Z_87gqJZ00ss3vnSk-05j4AsgvnPoKZJtgJPAEjZ8-bBSNExpqWdHBFcqJJsLhyjE5o7hQFQplMevQLyVvrzxsY8YwZuoTZA-bUo7__vsrHUe_PyZP0-0FHRbFzwo-ArxrdFcFlEhTqjKijo7pyh8gmZkgvXG8D1Zi1Fmstnf9yiF36ZBlN-RSr-JHxPAvwU2O_aMmFhvZNJ9aOzP0dienSZo72xSiRw\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, { \"kid\": \"5841b726-4a62-4a91-9b14-2c4e774b8187_sig_rs384\", \"kty\": \"RSA\", \"use\": \"sig\", \"alg\": \"RS384\", \"crv\": \"\", \"exp\": 1610923149000, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAK29kWeoIZxzuN9D5Bi+TJOSkxSMyK+9O6sFHH9UG6KTMA0GCSqGSIb3DQEBDAUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTAwWhcNMjEwMTE3MjIzOTA5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtegG/5p4hXBV8BhPE7bUYgCXYnwFY9J9yVNjMI306qnN1sRrTvqH88SCLg2/sY2gWI+Y8lmqXYsLbsmCoCXMUAHU6ujqrwWZsiubucyb6wmE2yWdkSgIcT1jpepnfvm4oyKnhZVqn6hOuDx+/vBNk/RJfPibBrhJp/+uiZFc86at3JIgqXB5RqV9ryXGSXpL7tj5cST2HFU+2WzoutHRze7T3XLcA0bIiiQUfHzssxElfSbrUZRY36mpoaqm2WDMEhBEwu2B1L2Jwx76LIn7dWszwaIHkqLMy7PSl3Hit0MdO7SD5bqHnMHHmSjj+9XmYBg5oErfOKJOWAevLlksgQIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQEMBQADggEBACSX/4j+sd5TGsM1e3ISJHxjDlWhvsurPQhadaDu49NdCP/9hrwo7Th48q8Q8o99DnDBOIV0AE7VORYC4xRWHXlGJV84YAQRhHi1rL8L5YWheNeR0/ibanLhaTMb4Ecw8CRJWplslKmt78bn/J1xl4cWilDTVeB+LAYrpmDJNXSx/3QHtIc2PoIKn3dE8cHhHvQ+zHmd52TxGdBR08+TqZDcwZT9XvjrOwyUkk5LIXp8Di9oqPtcDM2vqrgZna40cZAtXHzY1x6PKlwRoMSEZ+olYjjy2OlqsotORc+fbQIkLkUUnhyHTAiobZT1N55LjYkhwjXV+Ps1Qm0Q2px9uMs=\" ], \"n\": \"tegG_5p4hXBV8BhPE7bUYgCXYnwFY9J9yVNjMI306qnN1sRrTvqH88SCLg2_sY2gWI-Y8lmqXYsLbsmCoCXMUAHU6ujqrwWZsiubucyb6wmE2yWdkSgIcT1jpepnfvm4oyKnhZVqn6hOuDx-_vBNk_RJfPibBrhJp_-uiZFc86at3JIgqXB5RqV9ryXGSXpL7tj5cST2HFU-2WzoutHRze7T3XLcA0bIiiQUfHzssxElfSbrUZRY36mpoaqm2WDMEhBEwu2B1L2Jwx76LIn7dWszwaIHkqLMy7PSl3Hit0MdO7SD5bqHnMHHmSjj-9XmYBg5oErfOKJOWAevLlksgQ\", \"e\": \"AQAB\", \"x\": null, \"y\": null }, ... ... ... { \"kid\": \"e6e8ccc4-708b-4a83-bbd2-7a9e0181734f_enc_rsa-oaep\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": 1610923149000, \"x5c\": [ \"MIIDCjCCAfKgAwIBAgIhAIfkfNwuxlcdhdiAKvWrX+LbYKvZwRC9aEn9tOqCZLunMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNVBAMMGUphbnMgQXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMjEwMTE1MjIzOTAyWhcNMjEwMTE3MjIzOTA5WjAkMSIwIAYDVQQDDBlKYW5zIEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw6p2QLwHKwPA+W9oTjTAkYn1iRQVXdPsNIu18Lao11Fbp0krMKSsnVcBIuO8zjsERf8b/awTN9zJQpKO3LqHHcGIjZJdAfH42CPgyUMjn6laF8iO0S+kI8RCocRLoPP2PVbqPjYD6kvK0mlSSLu+t9bU7mgEsYF5y8r05hX1ROdLUTFuHMa2g4cuD0HEEJMzewK1TzPikNiThsQv0yzwkwGZrBldWeB1E8BGWha2jwVom/Noo6vimtN8Le1XeYq5PvRVaS4AtLup4K0SaVetL0mAiCWKUTudWNDCRWB/Z4lJCJGOCCfk6bPp0TsjOcDjGkPzP05G9FFWndOpQ49UcwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAJ6zGYZqI4rwBJri7v3XSLvKrUgU19xLq6aik6h3DMylzHFEydnMdgyYU23GWP/rcvM1K4whhiopUcoj/FHQ0uaQV67zb6/NvCbIxiGjQs08ZcYnMtZ0zwm9hj7YeafsVQVI3qo1VdJfPWYHEW4IUfaqIlWdsj/CW1HeKWOrw0+WC1JYwD5Ka13bwYtC3jgt8yHwn3XoOhbINzFsVdRA5pfJKCvZN5IteHhpkmeOkvOlRFaPrqlGM2rukCzo2aBakC8F8SwaQje6prm2wSRJp/qjJKxKO8fMklcBT/FMD2zdYeHb4+YFRo8/CzjRNPEmMSI4LHdFkmjGDrLQYjrxOsY=\" ], \"n\": \"w6p2QLwHKwPA-W9oTjTAkYn1iRQVXdPsNIu18Lao11Fbp0krMKSsnVcBIuO8zjsERf8b_awTN9zJQpKO3LqHHcGIjZJdAfH42CPgyUMjn6laF8iO0S-kI8RCocRLoPP2PVbqPjYD6kvK0mlSSLu-t9bU7mgEsYF5y8r05hX1ROdLUTFuHMa2g4cuD0HEEJMzewK1TzPikNiThsQv0yzwkwGZrBldWeB1E8BGWha2jwVom_Noo6vimtN8Le1XeYq5PvRVaS4AtLup4K0SaVetL0mAiCWKUTudWNDCRWB_Z4lJCJGOCCfk6bPp0TsjOcDjGkPzP05G9FFWndOpQ49Ucw\", \"e\": \"AQAB\", \"x\": null, \"y\": null } ] }","title":"Get list of JSON Web Key"},{"location":"admin/config-guide/jans-cli/im/im-json-web-key/#creating-or-replacing-jwk","text":"You can add a new JWK or replace an old JWK with new value through this Interactive Mode option. When it will ask Add JwonWebKey? just press y to confirm. Fill each property with a value, keep empty to skip. kid : Unique Key Identifier [String]. kty : Cryptographic algorithm name used with the key [String]. use : Key usage, [enc, sig,..] alg : The cryptographic algorithm name that is going to be used. exp : time validation Gets list of JSON Web Key (JWK) used by server Gets list of JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627]. --------------------------------------------------------------------------------------------------------------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/jwks.readonly \u00abJsonWebKey. \u00bb Add JsonWebKey? y \u00abThe unique identifier for the key. Type: string\u00bb kid: aabb \u00abThe family of cryptographic algorithms used with the key. Type: string\u00bb kty: RSA \u00abHow the key was meant to be used; sig represents the signature. Type: string\u00bb use: enc \u00abThe specific cryptographic algorithm used with the key. Type: string\u00bb alg: RSA-OAEP \u00abThe crv member identifies the cryptographic curve used with the key. Values defined by this specification are P-256, P-384 and P-521. Additional crv values MAY be used, provided they are understood by implementations using that Elliptic Curve key. The crv value is case sensitive. Type: string\u00bb crv: \u00abContains the token expiration timestamp. Type: integer\u00bb exp: \u00abThe x.509 certificate chain. The first entry in the array is the certificate to use for token verification; the other certificates can be used to verify this first certificate. Type: array of string separated by _,\u00bb x5c: \u00abThe modulus for the RSA public key. Type: string\u00bb n: \u00abThe exponent for the RSA public key. Type: string\u00bb e: \u00abThe x member contains the x coordinate for the elliptic curve point. It is represented as the base64url encoding of the coordinate's big endian representation. Type: string\u00bb x: \u00abThe y member contains the y coordinate for the elliptic curve point. It is represented as the base64url encoding of the coordinate's big endian representation. Type: string\u00bb y: Add another JsonWebKey? n Obtained Data: { \"keys\": [ { \"kid\": \"aabb\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": null, \"exp\": null, \"x5c\": [], \"n\": null, \"e\": null, \"x\": null, \"y\": null } ] } Continue? y Getting access token for scope https://jans.io/oauth/config/jwks.write Please wait while posting data ... { \"keys\": [ { \"kid\": \"aabb\", \"kty\": \"RSA\", \"use\": \"enc\", \"alg\": \"RSA-OAEP\", \"crv\": \"\", \"exp\": null, \"x5c\": null, \"n\": null, \"e\": null, \"x\": null, \"y\": null } ] }","title":"Creating or Replacing - JWK"},{"location":"admin/config-guide/jans-cli/im/im-json-web-key/#update-an-existing-jwk-configuration","text":"Just choose this option and fill the value for op , path , and value to patch JSON Web Key.","title":"Update an Existing JWK Configuration"},{"location":"admin/config-guide/jans-cli/im/im-ldap-configuration/","tags":["administration","configuration","cli","interactive"],"text":"LDAP Configuration # Prerequisite: Know how to use the Janssen CLI in interactive mode Using Janssen CLI, the Following list of actions can be performed in LDAP. Database - LDAP configuration ----------------------------- 1 Gets list of existing LDAP configurations 2 Adds a new LDAP configuration 3 Updates LDAP configuration 4 Gets an LDAP configuration by name 5 Deletes an LDAP configuration 6 Partially modify an LDAP configuration 7 Tests an LDAP configuration Gets List of Existing LDAP Configuration # To get a list of existing LDAP configurations, select option 1 and press enter, you will get a list of existing LDAP configurations in your Janssen server. Gets list of existing LDAP configurations ----------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/database/ldap.readonly [ { \"configId\": \"auth_ldap_server\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"gD63aUTvvS4=\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 1000, \"useSSL\": true, \"baseDNs\": [ \"ou=people,o=jans\" ], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 } ] Adding new LDAP Configuration # To add a new LDAP configuration, choose option 2 and add the following properties: { \"configId\":, \"bindDN\": , \"bindPassword\":, \"servers\": [], \"maxConnections\": 2, \"useSSL\": false, \"baseDNs\": [], \"primaryKey\":, \"localPrimaryKey\":, \"useAnonymousBind\": false, \"enabled\": false, \"version\": null, \"level\": null } Then enter y to confirm. Update an Existing LDAP configuration # To update an existing LDAP configuration, select option 3 and enter the LDAP configuration name. If it matches to the existing configuration then It will ask to enter a value for each properties. Delete an Existing LDAP configuration # To delete an existing ldap configuration, enter a name of an existing ldap configuration and enter yes/y to confirm.","title":"LDAP Configuration"},{"location":"admin/config-guide/jans-cli/im/im-ldap-configuration/#ldap-configuration","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode Using Janssen CLI, the Following list of actions can be performed in LDAP. Database - LDAP configuration ----------------------------- 1 Gets list of existing LDAP configurations 2 Adds a new LDAP configuration 3 Updates LDAP configuration 4 Gets an LDAP configuration by name 5 Deletes an LDAP configuration 6 Partially modify an LDAP configuration 7 Tests an LDAP configuration","title":"LDAP Configuration"},{"location":"admin/config-guide/jans-cli/im/im-ldap-configuration/#gets-list-of-existing-ldap-configuration","text":"To get a list of existing LDAP configurations, select option 1 and press enter, you will get a list of existing LDAP configurations in your Janssen server. Gets list of existing LDAP configurations ----------------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/database/ldap.readonly [ { \"configId\": \"auth_ldap_server\", \"bindDN\": \"cn=directory manager\", \"bindPassword\": \"gD63aUTvvS4=\", \"servers\": [ \"localhost:1636\" ], \"maxConnections\": 1000, \"useSSL\": true, \"baseDNs\": [ \"ou=people,o=jans\" ], \"primaryKey\": \"uid\", \"localPrimaryKey\": \"uid\", \"useAnonymousBind\": false, \"enabled\": false, \"version\": 0, \"level\": 0 } ]","title":"Gets List of Existing LDAP Configuration"},{"location":"admin/config-guide/jans-cli/im/im-ldap-configuration/#adding-new-ldap-configuration","text":"To add a new LDAP configuration, choose option 2 and add the following properties: { \"configId\":, \"bindDN\": , \"bindPassword\":, \"servers\": [], \"maxConnections\": 2, \"useSSL\": false, \"baseDNs\": [], \"primaryKey\":, \"localPrimaryKey\":, \"useAnonymousBind\": false, \"enabled\": false, \"version\": null, \"level\": null } Then enter y to confirm.","title":"Adding new LDAP Configuration"},{"location":"admin/config-guide/jans-cli/im/im-ldap-configuration/#update-an-existing-ldap-configuration","text":"To update an existing LDAP configuration, select option 3 and enter the LDAP configuration name. If it matches to the existing configuration then It will ask to enter a value for each properties.","title":"Update an Existing LDAP configuration"},{"location":"admin/config-guide/jans-cli/im/im-ldap-configuration/#delete-an-existing-ldap-configuration","text":"To delete an existing ldap configuration, enter a name of an existing ldap configuration and enter yes/y to confirm.","title":"Delete an Existing LDAP configuration"},{"location":"admin/config-guide/jans-cli/im/im-oauth-scopes/","tags":["administration","configuration","cli","interactive"],"text":"OAuth Scopes # Prerequisite: Know how to use the Janssen CLI in interactive mode In OAuth, scopes are used to specify the extent of access. For an OpenID Connect sign-in flow, scopes correspond to the release of user claims. jans-cli supports the following operations through Interactive Mode. OAuth - Scopes -------------- 1 Gets list of Scopes 2 Create Scope 3 Updates existing Scope 4 Get Scope by Inum 5 Delete Scope 6 Update modified attributes of existing Scope by Inum Selection: Gets list of Scopes # To view the current list of scopes of the Janssen Server, choose the first option from the following menu. It will ask to enter type , limit & pattern to filter in searching. You may skip by pressing 'Enter' key to get all the scopes of the server. In my case, I have set limit upto 5. \u00abScope type. Type: string\u00bb type: \u00abSearch size - max size of the results to return. Type: integer\u00bb limit [50]: 5 \u00abSearch pattern. Type: string\u00bb pattern: Calling Api with parameters: {'limit': 5} Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/scopes.readonly [ { \"dn\": \"inum=F0C4,ou=scopes,o=jans\", \"inum\": \"F0C4\", \"displayName\": \"authenticate_openid_connect\", \"id\": \"openid\", \"iconUrl\": null, \"description\": \"Authenticate using OpenID Connect.\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": true, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null }, { \"dn\": \"inum=43F1,ou=scopes,o=jans\", \"inum\": \"43F1\", \"displayName\": \"view_profile\", \"id\": \"profile\", \"iconUrl\": null, \"description\": \"View your basic profile info.\", \"scopeType\": \"openid\", \"claims\": [ \"inum=2B29,ou=attributes,o=jans\", \"inum=0C85,ou=attributes,o=jans\", \"inum=B4B0,ou=attributes,o=jans\", \"inum=A0E8,ou=attributes,o=jans\", \"inum=5EC6,ou=attributes,o=jans\", \"inum=B52A,ou=attributes,o=jans\", \"inum=64A0,ou=attributes,o=jans\", \"inum=EC3A,ou=attributes,o=jans\", \"inum=3B47,ou=attributes,o=jans\", \"inum=3692,ou=attributes,o=jans\", \"inum=98FC,ou=attributes,o=jans\", \"inum=A901,ou=attributes,o=jans\", \"inum=36D9,ou=attributes,o=jans\", \"inum=BE64,ou=attributes,o=jans\", \"inum=6493,ou=attributes,o=jans\" ], \"defaultScope\": false, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null }, { \"dn\": \"inum=D491,ou=scopes,o=jans\", \"inum\": \"D491\", \"displayName\": \"view_phone_number\", \"id\": \"phone\", \"iconUrl\": null, \"description\": \"View your phone number.\", \"scopeType\": \"openid\", \"claims\": [ \"inum=B17A,ou=attributes,o=jans\", \"inum=0C18,ou=attributes,o=jans\" ], \"defaultScope\": false, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null }, { \"dn\": \"inum=C17A,ou=scopes,o=jans\", \"inum\": \"C17A\", \"displayName\": \"view_address\", \"id\": \"address\", \"iconUrl\": null, \"description\": \"View your address.\", \"scopeType\": \"openid\", \"claims\": [ \"inum=27DB,ou=attributes,o=jans\", \"inum=2A3D,ou=attributes,o=jans\", \"inum=6609,ou=attributes,o=jans\", \"inum=6EEB,ou=attributes,o=jans\", \"inum=BCE8,ou=attributes,o=jans\", \"inum=D90B,ou=attributes,o=jans\", \"inum=E6B8,ou=attributes,o=jans\", \"inum=E999,ou=attributes,o=jans\" ], \"defaultScope\": false, \"groupClaims\": true, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null }, { \"dn\": \"inum=764C,ou=scopes,o=jans\", \"inum\": \"764C\", \"displayName\": \"view_email_address\", \"id\": \"email\", \"iconUrl\": null, \"description\": \"View your email address.\", \"scopeType\": \"openid\", \"claims\": [ \"inum=8F88,ou=attributes,o=jans\", \"inum=CAE3,ou=attributes,o=jans\" ], \"defaultScope\": false, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } ] Selection: Creating Scopes # You can create a scope through the command line interface. It will ask to enter value for each property. Selection: 2 \u00abA human-readable name of the scope. Type: string\u00bb displayName: testScope \u00abThe base64url encoded id. Type: string\u00bb id: tScope \u00abA human-readable string describing the scope. Type: string\u00bb description: creating scope \u00abThe scopes type associated with Access Tokens determine what resources will. Type: string\u00bb scopeType: openid Populate optional fields? n Obtained Data: { \"dn\": null, \"inum\": null, \"displayName\": \"testScope\", \"id\": \"tScope\", \"iconUrl\": null, \"description\": \"creating scope\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": null, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": null, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } Continue? y Getting access token for scope https://jans.io/oauth/config/scopes.write Please wait while posting data ... { \"dn\": \"inum=070daa9e-4a8f-423a-8681-f578673a2781,ou=scopes,o=jans\", \"inum\": \"070daa9e-4a8f-423a-8681-f578673a2781\", \"displayName\": \"testScope\", \"id\": \"tScope\", \"iconUrl\": null, \"description\": \"creating scope\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": null, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } Selection:","title":"OAuth Scope Management"},{"location":"admin/config-guide/jans-cli/im/im-oauth-scopes/#oauth-scopes","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode In OAuth, scopes are used to specify the extent of access. For an OpenID Connect sign-in flow, scopes correspond to the release of user claims. jans-cli supports the following operations through Interactive Mode. OAuth - Scopes -------------- 1 Gets list of Scopes 2 Create Scope 3 Updates existing Scope 4 Get Scope by Inum 5 Delete Scope 6 Update modified attributes of existing Scope by Inum Selection:","title":"OAuth Scopes"},{"location":"admin/config-guide/jans-cli/im/im-oauth-scopes/#gets-list-of-scopes","text":"To view the current list of scopes of the Janssen Server, choose the first option from the following menu. It will ask to enter type , limit & pattern to filter in searching. You may skip by pressing 'Enter' key to get all the scopes of the server. In my case, I have set limit upto 5. \u00abScope type. Type: string\u00bb type: \u00abSearch size - max size of the results to return. Type: integer\u00bb limit [50]: 5 \u00abSearch pattern. Type: string\u00bb pattern: Calling Api with parameters: {'limit': 5} Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/scopes.readonly [ { \"dn\": \"inum=F0C4,ou=scopes,o=jans\", \"inum\": \"F0C4\", \"displayName\": \"authenticate_openid_connect\", \"id\": \"openid\", \"iconUrl\": null, \"description\": \"Authenticate using OpenID Connect.\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": true, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null }, { \"dn\": \"inum=43F1,ou=scopes,o=jans\", \"inum\": \"43F1\", \"displayName\": \"view_profile\", \"id\": \"profile\", \"iconUrl\": null, \"description\": \"View your basic profile info.\", \"scopeType\": \"openid\", \"claims\": [ \"inum=2B29,ou=attributes,o=jans\", \"inum=0C85,ou=attributes,o=jans\", \"inum=B4B0,ou=attributes,o=jans\", \"inum=A0E8,ou=attributes,o=jans\", \"inum=5EC6,ou=attributes,o=jans\", \"inum=B52A,ou=attributes,o=jans\", \"inum=64A0,ou=attributes,o=jans\", \"inum=EC3A,ou=attributes,o=jans\", \"inum=3B47,ou=attributes,o=jans\", \"inum=3692,ou=attributes,o=jans\", \"inum=98FC,ou=attributes,o=jans\", \"inum=A901,ou=attributes,o=jans\", \"inum=36D9,ou=attributes,o=jans\", \"inum=BE64,ou=attributes,o=jans\", \"inum=6493,ou=attributes,o=jans\" ], \"defaultScope\": false, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null }, { \"dn\": \"inum=D491,ou=scopes,o=jans\", \"inum\": \"D491\", \"displayName\": \"view_phone_number\", \"id\": \"phone\", \"iconUrl\": null, \"description\": \"View your phone number.\", \"scopeType\": \"openid\", \"claims\": [ \"inum=B17A,ou=attributes,o=jans\", \"inum=0C18,ou=attributes,o=jans\" ], \"defaultScope\": false, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null }, { \"dn\": \"inum=C17A,ou=scopes,o=jans\", \"inum\": \"C17A\", \"displayName\": \"view_address\", \"id\": \"address\", \"iconUrl\": null, \"description\": \"View your address.\", \"scopeType\": \"openid\", \"claims\": [ \"inum=27DB,ou=attributes,o=jans\", \"inum=2A3D,ou=attributes,o=jans\", \"inum=6609,ou=attributes,o=jans\", \"inum=6EEB,ou=attributes,o=jans\", \"inum=BCE8,ou=attributes,o=jans\", \"inum=D90B,ou=attributes,o=jans\", \"inum=E6B8,ou=attributes,o=jans\", \"inum=E999,ou=attributes,o=jans\" ], \"defaultScope\": false, \"groupClaims\": true, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null }, { \"dn\": \"inum=764C,ou=scopes,o=jans\", \"inum\": \"764C\", \"displayName\": \"view_email_address\", \"id\": \"email\", \"iconUrl\": null, \"description\": \"View your email address.\", \"scopeType\": \"openid\", \"claims\": [ \"inum=8F88,ou=attributes,o=jans\", \"inum=CAE3,ou=attributes,o=jans\" ], \"defaultScope\": false, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } ] Selection:","title":"Gets list of Scopes"},{"location":"admin/config-guide/jans-cli/im/im-oauth-scopes/#creating-scopes","text":"You can create a scope through the command line interface. It will ask to enter value for each property. Selection: 2 \u00abA human-readable name of the scope. Type: string\u00bb displayName: testScope \u00abThe base64url encoded id. Type: string\u00bb id: tScope \u00abA human-readable string describing the scope. Type: string\u00bb description: creating scope \u00abThe scopes type associated with Access Tokens determine what resources will. Type: string\u00bb scopeType: openid Populate optional fields? n Obtained Data: { \"dn\": null, \"inum\": null, \"displayName\": \"testScope\", \"id\": \"tScope\", \"iconUrl\": null, \"description\": \"creating scope\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": null, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": null, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } Continue? y Getting access token for scope https://jans.io/oauth/config/scopes.write Please wait while posting data ... { \"dn\": \"inum=070daa9e-4a8f-423a-8681-f578673a2781,ou=scopes,o=jans\", \"inum\": \"070daa9e-4a8f-423a-8681-f578673a2781\", \"displayName\": \"testScope\", \"id\": \"tScope\", \"iconUrl\": null, \"description\": \"creating scope\", \"scopeType\": \"openid\", \"claims\": null, \"defaultScope\": null, \"groupClaims\": null, \"dynamicScopeScripts\": null, \"umaAuthorizationPolicies\": null, \"attributes\": { \"spontaneousClientId\": null, \"spontaneousClientScopes\": null, \"showInConfigurationEndpoint\": true }, \"umaType\": false, \"deletable\": false, \"expirationDate\": null } Selection:","title":"Creating Scopes"},{"location":"admin/config-guide/jans-cli/im/im-openid-connect-clients/","tags":["administration","configuration","cli","interactive"],"text":"OpenID Connect Configuration # Prerequisite: Know how to use the Janssen CLI in interactive mode OpenID Connect Interactive Mode supports the following list of actions: OAuth - OpenID Connect - Clients -------------------------------- 1 Gets list of OpenID Connect clients 2 Create new OpenId connect client 3 Update OpenId Connect client 4 Get OpenId Connect Client by Inum 5 Delete OpenId Connect client 6 Update modified properties of OpenId Connect client by Inum Using Janssen CLI, the Administrator can easily create/update/delete OpenID Connect without any interruption. Get list of OpenID Connect clients # By selecting option '1' you will get a list of OpenID Connect clients. You may enter limit[50] and pattern to filter in searching. Gets list of OpenID Connect clients ----------------------------------- \u00abSearch size - max size of the results to return. Type: integer\u00bb limit [50]: \u00abSearch pattern. Type: string\u00bb pattern: Calling Api with parameters: {'limit': 50} Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly [ { \"dn\": \"inum=1801.d361f68d-8200-4ba2-a0bb-ca7fea79e805,ou=clients,o=jans\", \"inum\": \"1801.d361f68d-8200-4ba2-a0bb-ca7fea79e805\", \"clientSecret\": \"KfwZeAfq4jrL\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.gluu.com/admin-ui\", \"http//:localhost:4100\" ], \"claimRedirectUris\": null, \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"refresh_token\", \"client_credentials\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"Jans Config Api Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": \"RS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=1800.F6E877,ou=scopes,o=jans\", \"inum=1800.D4F3E7,ou=scopes,o=jans\", \"inum=1800.2FD7EF,ou=scopes,o=jans\", \"inum=1800.97B23C,ou=scopes,o=jans\", \"inum=1800.8FC2C7,ou=scopes,o=jans\", \"inum=1800.1FFDF2,ou=scopes,o=jans\", \"inum=1800.5CF44C,ou=scopes,o=jans\", \"inum=1800.CCA518,ou=scopes,o=jans\", \"inum=1800.E62D6E,ou=scopes,o=jans\", \"inum=1800.11CB33,ou=scopes,o=jans\", \"inum=1800.781FA2,ou=scopes,o=jans\", \"inum=1800.ADAD8F,ou=scopes,o=jans\", \"inum=1800.40F22F,ou=scopes,o=jans\", \"inum=1800.7619BA,ou=scopes,o=jans\", \"inum=1800.E0DAF5,ou=scopes,o=jans\", \"inum=1800.7F45B0,ou=scopes,o=jans\", \"inum=1800.778C57,ou=scopes,o=jans\", \"inum=1800.E39293,ou=scopes,o=jans\", \"inum=1800.939483,ou=scopes,o=jans\", \"inum=1800.0ED2E8,ou=scopes,o=jans\", \"inum=1800.66CA59,ou=scopes,o=jans\", \"inum=1800.A4DBE5,ou=scopes,o=jans\", \"inum=1800.9AF358,ou=scopes,o=jans\", \"inum=1800.478CCF,ou=scopes,o=jans\", \"inum=1800.450A9A,ou=scopes,o=jans\", \"inum=1800.27A193,ou=scopes,o=jans\", \"inum=1800.3971D5,ou=scopes,o=jans\", \"inum=1800.891693,ou=scopes,o=jans\", \"inum=1800.A35DFD,ou=scopes,o=jans\", \"inum=1800.3516DE,ou=scopes,o=jans\", \"inum=F0C4,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": true, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"RS256\", \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null }, { \"dn\": \"inum=1001.0e964ce7-7670-44a4-a2d1-d0a5f689a34f,ou=clients,o=jans\", \"inum\": \"1001.0e964ce7-7670-44a4-a2d1-d0a5f689a34f\", \"clientSecret\": \"4OJLToBXav0P\", \"frontChannelLogoutUri\": \"https://testjans.gluu.com/identity/ssologout.htm\", \"frontChannelLogoutSessionRequired\": true, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.gluu.com/identity/scim/auth\", \"https://testjans.gluu.com/identity/authcode.htm\", \"https://testjans.gluu.com/jans-auth/restv1/uma/gather_claims?authentication=true\" ], \"claimRedirectUris\": [ \"https://testjans.gluu.com/jans-auth/restv1/uma/gather_claims\" ], \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"implicit\", \"refresh_token\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"oxTrust Admin GUI\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": [ \"https://testjans.gluu.com/identity/finishlogout.htm\" ], \"requestUris\": null, \"scopes\": [ \"inum=F0C4,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": true, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null }, { \"dn\": \"inum=1201.d71e6b84-b637-4e26-b8d3-34c80934c097,ou=clients,o=jans\", \"inum\": \"1201.d71e6b84-b637-4e26-b8d3-34c80934c097\", \"clientSecret\": \"0vFoEhc7Zut2\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [ \"client_credentials\" ], \"applicationType\": \"native\", \"contacts\": null, \"clientName\": \"SCIM client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=1200.841184,ou=scopes,o=jans\", \"inum=1200.98DDA5,ou=scopes,o=jans\", \"inum=1200.F40A49,ou=scopes,o=jans\", \"inum=1200.B609F0,ou=scopes,o=jans\", \"inum=1200.492980,ou=scopes,o=jans\", \"inum=1200.F7EC4A,ou=scopes,o=jans\", \"inum=1200.280C97,ou=scopes,o=jans\", \"inum=1200.E236BB,ou=scopes,o=jans\", \"inum=1200.DC0FDE,ou=scopes,o=jans\", \"inum=1200.2483ED,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"RS256\", \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } ] Selection: Create a New OpenID Client # To create a new OpenID client, you need to enter '2' from OpenID Menu. It will ask to enter below information: frontChannelLogoutSessionRequired[false, true] applicationType[web, native] clientName subjectType[pairwise, public] includeClaimsInIdToken[false, true] Populate optional fields?[y, n] If you enter y to Populate optional fields? then you will get a lot of optional fields are listed below: Populate optional fields? y Optional Fields: 1 clientSecret 2 frontChannelLogoutUri 3 registrationAccessToken 4 clientIdIssuedAt 5 clientSecretExpiresAt 6 redirectUris 7 claimRedirectUris 8 responseTypes 9 grantTypes 10 contacts 11 idTokenTokenBindingCnf 12 logoUri 13 clientUri 14 policyUri 15 tosUri 16 jwksUri 17 jwks 18 sectorIdentifierUri 19 idTokenSignedResponseAlg 20 idTokenEncryptedResponseAlg 21 idTokenEncryptedResponseEnc 22 userInfoSignedResponseAlg 23 userInfoEncryptedResponseAlg 24 userInfoEncryptedResponseEnc 25 requestObjectSigningAlg 26 requestObjectEncryptionAlg 27 requestObjectEncryptionEnc 28 tokenEndpointAuthMethod 29 tokenEndpointAuthSigningAlg 30 defaultMaxAge 31 requireAuthTime 32 defaultAcrValues 33 initiateLoginUri 34 postLogoutRedirectUris 35 requestUris 36 scopes 37 claims 38 trustedClient 39 lastAccessTime 40 lastLogonTime 41 persistClientAuthorizations 42 refreshTokenLifetime 43 accessTokenLifetime 44 customAttributes 45 customObjectClasses 46 rptAsJwt 47 accessTokenAsJwt 48 accessTokenSigningAlg 49 disabled 50 authorizedOrigins 51 softwareId 52 softwareVersion 53 softwareStatement 54 attributes 55 backchannelTokenDeliveryMode 56 backchannelClientNotificationEndpoint 57 backchannelAuthenticationRequestSigningAlg 58 backchannelUserCodeParameter 59 expirationDate 60 deletable 61 jansId \u00abc: continue, #: populate filed. \u00bb Selection: 1 \u00abThe client secret. The client MAY omit the parameter if the client secret is an empty string. Type: string\u00bb clientSecret: aabbccdd \u00abc: continue, #: populate filed. \u00bb Selection: c Obtained Data: { \"dn\": null, \"inum\": null, \"clientSecret\": \"aabbccdd\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": null, \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"newOID\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": null, \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": null, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": null, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": null, \"customObjectClasses\": null, \"rptAsJwt\": null, \"accessTokenAsJwt\": null, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": null, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } Continue? y Getting access token for scope https://jans.io/oauth/config/openid/clients.write Please wait while posting data ... { \"dn\": \"inum=1929a64c-6f67-4399-bdd3-6a8d44cc04ae,ou=clients,o=jans\", \"inum\": \"1929a64c-6f67-4399-bdd3-6a8d44cc04ae\", \"clientSecret\": \"B3ziSqU8gWTAXICdYfNxw2cP4LmwDqrG1koRqzFxQc0=\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"newOID\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": null, \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } Selection: Update an OpenID Client by its inum # If anything you want to update of an OpenID client, you can choose option '3' and enter the inum of the OpenID client. Here I've used the inum=1929a64c-6f67-4399-bdd3-6a8d44cc04ae of the above OpenID client. After then, You will get a list of fields to choose which one you are going to update. Here is what you can see in return: Get OpenId Connect Client by Inum --------------------------------- \u00abinum. Type: string\u00bb inum: 1929a64c-6f67-4399-bdd3-6a8d44cc04ae Calling Api with parameters: {'inum': '1929a64c-6f67-4399-bdd3-6a8d44cc04ae'} Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly Fields: 1 accessTokenAsJwt 2 accessTokenLifetime 3 accessTokenSigningAlg 4 applicationType 5 attributes 6 authorizedOrigins 7 backchannelAuthenticationRequestSigningAlg 8 backchannelClientNotificationEndpoint 9 backchannelTokenDeliveryMode 10 backchannelUserCodeParameter 11 claimRedirectUris 12 claims 13 clientIdIssuedAt 14 clientName 15 clientSecret 16 clientSecretExpiresAt 17 clientUri 18 contacts 19 customAttributes 20 customObjectClasses 21 defaultAcrValues 22 defaultMaxAge 23 deletable 24 disabled 25 expirationDate 26 frontChannelLogoutSessionRequired 27 frontChannelLogoutUri 28 grantTypes 29 idTokenEncryptedResponseAlg 30 idTokenEncryptedResponseEnc 31 idTokenSignedResponseAlg 32 idTokenTokenBindingCnf 33 includeClaimsInIdToken 34 initiateLoginUri 35 inum 36 jansId 37 jwks 38 jwksUri 39 lastAccessTime 40 lastLogonTime 41 logoUri 42 persistClientAuthorizations 43 policyUri 44 postLogoutRedirectUris 45 redirectUris 46 refreshTokenLifetime 47 registrationAccessToken 48 requestObjectEncryptionAlg 49 requestObjectEncryptionEnc 50 requestObjectSigningAlg 51 requestUris 52 requireAuthTime 53 responseTypes 54 rptAsJwt 55 scopes 56 sectorIdentifierUri 57 softwareId 58 softwareStatement 59 softwareVersion 60 subjectType 61 tokenEndpointAuthMethod 62 tokenEndpointAuthSigningAlg 63 tosUri 64 trustedClient 65 userInfoEncryptedResponseAlg 66 userInfoEncryptedResponseEnc 67 userInfoSignedResponseAlg \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: q to quit v to view each attribute with updated data l to get list of fields # to update filed attribute id number of an attribute to identify which one you want to update Get OpenID client by its inum # inum is a unique identity of an OpenID client. You can use inum of an OpenID client to get more details. In my case, I'm using the inum of the above created OpenID client: Get OpenId Connect Client by Inum --------------------------------- \u00abinum. Type: string\u00bb inum: 1929a64c-6f67-4399-bdd3-6a8d44cc04ae Calling Api with parameters: {'inum': '1929a64c-6f67-4399-bdd3-6a8d44cc04ae'} Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly { \"dn\": \"inum=1929a64c-6f67-4399-bdd3-6a8d44cc04ae,ou=clients,o=jans\", \"inum\": \"1929a64c-6f67-4399-bdd3-6a8d44cc04ae\", \"clientSecret\": \"CpTCvlZZsQDWShGrMXFBzQ==\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"newOID\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": null, \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } Selection:","title":"OpenID Connect Client Configuration"},{"location":"admin/config-guide/jans-cli/im/im-openid-connect-clients/#openid-connect-configuration","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode OpenID Connect Interactive Mode supports the following list of actions: OAuth - OpenID Connect - Clients -------------------------------- 1 Gets list of OpenID Connect clients 2 Create new OpenId connect client 3 Update OpenId Connect client 4 Get OpenId Connect Client by Inum 5 Delete OpenId Connect client 6 Update modified properties of OpenId Connect client by Inum Using Janssen CLI, the Administrator can easily create/update/delete OpenID Connect without any interruption.","title":"OpenID Connect Configuration"},{"location":"admin/config-guide/jans-cli/im/im-openid-connect-clients/#get-list-of-openid-connect-clients","text":"By selecting option '1' you will get a list of OpenID Connect clients. You may enter limit[50] and pattern to filter in searching. Gets list of OpenID Connect clients ----------------------------------- \u00abSearch size - max size of the results to return. Type: integer\u00bb limit [50]: \u00abSearch pattern. Type: string\u00bb pattern: Calling Api with parameters: {'limit': 50} Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly [ { \"dn\": \"inum=1801.d361f68d-8200-4ba2-a0bb-ca7fea79e805,ou=clients,o=jans\", \"inum\": \"1801.d361f68d-8200-4ba2-a0bb-ca7fea79e805\", \"clientSecret\": \"KfwZeAfq4jrL\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.gluu.com/admin-ui\", \"http//:localhost:4100\" ], \"claimRedirectUris\": null, \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"refresh_token\", \"client_credentials\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"Jans Config Api Client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": \"RS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=1800.F6E877,ou=scopes,o=jans\", \"inum=1800.D4F3E7,ou=scopes,o=jans\", \"inum=1800.2FD7EF,ou=scopes,o=jans\", \"inum=1800.97B23C,ou=scopes,o=jans\", \"inum=1800.8FC2C7,ou=scopes,o=jans\", \"inum=1800.1FFDF2,ou=scopes,o=jans\", \"inum=1800.5CF44C,ou=scopes,o=jans\", \"inum=1800.CCA518,ou=scopes,o=jans\", \"inum=1800.E62D6E,ou=scopes,o=jans\", \"inum=1800.11CB33,ou=scopes,o=jans\", \"inum=1800.781FA2,ou=scopes,o=jans\", \"inum=1800.ADAD8F,ou=scopes,o=jans\", \"inum=1800.40F22F,ou=scopes,o=jans\", \"inum=1800.7619BA,ou=scopes,o=jans\", \"inum=1800.E0DAF5,ou=scopes,o=jans\", \"inum=1800.7F45B0,ou=scopes,o=jans\", \"inum=1800.778C57,ou=scopes,o=jans\", \"inum=1800.E39293,ou=scopes,o=jans\", \"inum=1800.939483,ou=scopes,o=jans\", \"inum=1800.0ED2E8,ou=scopes,o=jans\", \"inum=1800.66CA59,ou=scopes,o=jans\", \"inum=1800.A4DBE5,ou=scopes,o=jans\", \"inum=1800.9AF358,ou=scopes,o=jans\", \"inum=1800.478CCF,ou=scopes,o=jans\", \"inum=1800.450A9A,ou=scopes,o=jans\", \"inum=1800.27A193,ou=scopes,o=jans\", \"inum=1800.3971D5,ou=scopes,o=jans\", \"inum=1800.891693,ou=scopes,o=jans\", \"inum=1800.A35DFD,ou=scopes,o=jans\", \"inum=1800.3516DE,ou=scopes,o=jans\", \"inum=F0C4,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": true, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"RS256\", \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null }, { \"dn\": \"inum=1001.0e964ce7-7670-44a4-a2d1-d0a5f689a34f,ou=clients,o=jans\", \"inum\": \"1001.0e964ce7-7670-44a4-a2d1-d0a5f689a34f\", \"clientSecret\": \"4OJLToBXav0P\", \"frontChannelLogoutUri\": \"https://testjans.gluu.com/identity/ssologout.htm\", \"frontChannelLogoutSessionRequired\": true, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": [ \"https://testjans.gluu.com/identity/scim/auth\", \"https://testjans.gluu.com/identity/authcode.htm\", \"https://testjans.gluu.com/jans-auth/restv1/uma/gather_claims?authentication=true\" ], \"claimRedirectUris\": [ \"https://testjans.gluu.com/jans-auth/restv1/uma/gather_claims\" ], \"responseTypes\": [ \"code\" ], \"grantTypes\": [ \"authorization_code\", \"implicit\", \"refresh_token\" ], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"oxTrust Admin GUI\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": \"HS256\", \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": [ \"https://testjans.gluu.com/identity/finishlogout.htm\" ], \"requestUris\": null, \"scopes\": [ \"inum=F0C4,ou=scopes,o=jans\", \"inum=10B2,ou=scopes,o=jans\", \"inum=764C,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": true, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null }, { \"dn\": \"inum=1201.d71e6b84-b637-4e26-b8d3-34c80934c097,ou=clients,o=jans\", \"inum\": \"1201.d71e6b84-b637-4e26-b8d3-34c80934c097\", \"clientSecret\": \"0vFoEhc7Zut2\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [ \"client_credentials\" ], \"applicationType\": \"native\", \"contacts\": null, \"clientName\": \"SCIM client\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": \"client_secret_basic\", \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": [ \"inum=1200.841184,ou=scopes,o=jans\", \"inum=1200.98DDA5,ou=scopes,o=jans\", \"inum=1200.F40A49,ou=scopes,o=jans\", \"inum=1200.B609F0,ou=scopes,o=jans\", \"inum=1200.492980,ou=scopes,o=jans\", \"inum=1200.F7EC4A,ou=scopes,o=jans\", \"inum=1200.280C97,ou=scopes,o=jans\", \"inum=1200.E236BB,ou=scopes,o=jans\", \"inum=1200.DC0FDE,ou=scopes,o=jans\", \"inum=1200.2483ED,ou=scopes,o=jans\" ], \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": \"RS256\", \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } ] Selection:","title":"Get list of OpenID Connect clients"},{"location":"admin/config-guide/jans-cli/im/im-openid-connect-clients/#create-a-new-openid-client","text":"To create a new OpenID client, you need to enter '2' from OpenID Menu. It will ask to enter below information: frontChannelLogoutSessionRequired[false, true] applicationType[web, native] clientName subjectType[pairwise, public] includeClaimsInIdToken[false, true] Populate optional fields?[y, n] If you enter y to Populate optional fields? then you will get a lot of optional fields are listed below: Populate optional fields? y Optional Fields: 1 clientSecret 2 frontChannelLogoutUri 3 registrationAccessToken 4 clientIdIssuedAt 5 clientSecretExpiresAt 6 redirectUris 7 claimRedirectUris 8 responseTypes 9 grantTypes 10 contacts 11 idTokenTokenBindingCnf 12 logoUri 13 clientUri 14 policyUri 15 tosUri 16 jwksUri 17 jwks 18 sectorIdentifierUri 19 idTokenSignedResponseAlg 20 idTokenEncryptedResponseAlg 21 idTokenEncryptedResponseEnc 22 userInfoSignedResponseAlg 23 userInfoEncryptedResponseAlg 24 userInfoEncryptedResponseEnc 25 requestObjectSigningAlg 26 requestObjectEncryptionAlg 27 requestObjectEncryptionEnc 28 tokenEndpointAuthMethod 29 tokenEndpointAuthSigningAlg 30 defaultMaxAge 31 requireAuthTime 32 defaultAcrValues 33 initiateLoginUri 34 postLogoutRedirectUris 35 requestUris 36 scopes 37 claims 38 trustedClient 39 lastAccessTime 40 lastLogonTime 41 persistClientAuthorizations 42 refreshTokenLifetime 43 accessTokenLifetime 44 customAttributes 45 customObjectClasses 46 rptAsJwt 47 accessTokenAsJwt 48 accessTokenSigningAlg 49 disabled 50 authorizedOrigins 51 softwareId 52 softwareVersion 53 softwareStatement 54 attributes 55 backchannelTokenDeliveryMode 56 backchannelClientNotificationEndpoint 57 backchannelAuthenticationRequestSigningAlg 58 backchannelUserCodeParameter 59 expirationDate 60 deletable 61 jansId \u00abc: continue, #: populate filed. \u00bb Selection: 1 \u00abThe client secret. The client MAY omit the parameter if the client secret is an empty string. Type: string\u00bb clientSecret: aabbccdd \u00abc: continue, #: populate filed. \u00bb Selection: c Obtained Data: { \"dn\": null, \"inum\": null, \"clientSecret\": \"aabbccdd\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": null, \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"newOID\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": null, \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": null, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": null, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": null, \"customObjectClasses\": null, \"rptAsJwt\": null, \"accessTokenAsJwt\": null, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": null, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } Continue? y Getting access token for scope https://jans.io/oauth/config/openid/clients.write Please wait while posting data ... { \"dn\": \"inum=1929a64c-6f67-4399-bdd3-6a8d44cc04ae,ou=clients,o=jans\", \"inum\": \"1929a64c-6f67-4399-bdd3-6a8d44cc04ae\", \"clientSecret\": \"B3ziSqU8gWTAXICdYfNxw2cP4LmwDqrG1koRqzFxQc0=\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"newOID\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": null, \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } Selection:","title":"Create a New OpenID Client"},{"location":"admin/config-guide/jans-cli/im/im-openid-connect-clients/#update-an-openid-client-by-its-inum","text":"If anything you want to update of an OpenID client, you can choose option '3' and enter the inum of the OpenID client. Here I've used the inum=1929a64c-6f67-4399-bdd3-6a8d44cc04ae of the above OpenID client. After then, You will get a list of fields to choose which one you are going to update. Here is what you can see in return: Get OpenId Connect Client by Inum --------------------------------- \u00abinum. Type: string\u00bb inum: 1929a64c-6f67-4399-bdd3-6a8d44cc04ae Calling Api with parameters: {'inum': '1929a64c-6f67-4399-bdd3-6a8d44cc04ae'} Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly Fields: 1 accessTokenAsJwt 2 accessTokenLifetime 3 accessTokenSigningAlg 4 applicationType 5 attributes 6 authorizedOrigins 7 backchannelAuthenticationRequestSigningAlg 8 backchannelClientNotificationEndpoint 9 backchannelTokenDeliveryMode 10 backchannelUserCodeParameter 11 claimRedirectUris 12 claims 13 clientIdIssuedAt 14 clientName 15 clientSecret 16 clientSecretExpiresAt 17 clientUri 18 contacts 19 customAttributes 20 customObjectClasses 21 defaultAcrValues 22 defaultMaxAge 23 deletable 24 disabled 25 expirationDate 26 frontChannelLogoutSessionRequired 27 frontChannelLogoutUri 28 grantTypes 29 idTokenEncryptedResponseAlg 30 idTokenEncryptedResponseEnc 31 idTokenSignedResponseAlg 32 idTokenTokenBindingCnf 33 includeClaimsInIdToken 34 initiateLoginUri 35 inum 36 jansId 37 jwks 38 jwksUri 39 lastAccessTime 40 lastLogonTime 41 logoUri 42 persistClientAuthorizations 43 policyUri 44 postLogoutRedirectUris 45 redirectUris 46 refreshTokenLifetime 47 registrationAccessToken 48 requestObjectEncryptionAlg 49 requestObjectEncryptionEnc 50 requestObjectSigningAlg 51 requestUris 52 requireAuthTime 53 responseTypes 54 rptAsJwt 55 scopes 56 sectorIdentifierUri 57 softwareId 58 softwareStatement 59 softwareVersion 60 subjectType 61 tokenEndpointAuthMethod 62 tokenEndpointAuthSigningAlg 63 tosUri 64 trustedClient 65 userInfoEncryptedResponseAlg 66 userInfoEncryptedResponseEnc 67 userInfoSignedResponseAlg \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: q to quit v to view each attribute with updated data l to get list of fields # to update filed attribute id number of an attribute to identify which one you want to update","title":"Update an OpenID Client by its inum"},{"location":"admin/config-guide/jans-cli/im/im-openid-connect-clients/#get-openid-client-by-its-inum","text":"inum is a unique identity of an OpenID client. You can use inum of an OpenID client to get more details. In my case, I'm using the inum of the above created OpenID client: Get OpenId Connect Client by Inum --------------------------------- \u00abinum. Type: string\u00bb inum: 1929a64c-6f67-4399-bdd3-6a8d44cc04ae Calling Api with parameters: {'inum': '1929a64c-6f67-4399-bdd3-6a8d44cc04ae'} Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/openid/clients.readonly { \"dn\": \"inum=1929a64c-6f67-4399-bdd3-6a8d44cc04ae,ou=clients,o=jans\", \"inum\": \"1929a64c-6f67-4399-bdd3-6a8d44cc04ae\", \"clientSecret\": \"CpTCvlZZsQDWShGrMXFBzQ==\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"newOID\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"pairwise\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": null, \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": [ \"top\" ], \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } Selection:","title":"Get OpenID client by its inum"},{"location":"admin/config-guide/jans-cli/im/im-smtp-server-configuration/","tags":["administration","configuration","cli","interactive"],"text":"SMTP Configuration # Prerequisite: Know how to use the Janssen CLI in interactive mode Janssen CLI also supports SMTP configuration. You can do the following things as stated below: - View/Get - Add/Delete - Update - Test Simply select option '10' from Main Menu, It will show some options as below: Configuration \u2013 SMTP -------------------- 1 Returns SMTP server configuration 2 Adds SMTP server configuration 3 Updates SMTP server configuration 4 Deletes SMTP server configuration 5 Test SMTP server configuration Just go with the option and perform operation. Get Current SMTP Server Configuration # To view the current SMTP server configuration on your Janssen server, please select option 1, it will return as below: Returns SMTP server configuration --------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/smtp.readonly { \"host\": null, \"port\": 0, \"requiresSsl\": null, \"serverTrust\": null, \"fromName\": null, \"fromEmailAddress\": null, \"requiresAuthentication\": null, \"userName\": null, \"password\": null } Setup new SMTP server # To add a smtp server, chose option 2 from SMTP Configuration Menu. It will ask few things to fill each property. host port requiresSsl[true, false] serverTrust[true, false] fromName fromEmailAddress requireAuthentication [true, false] username password Obtained Data: { \"host\": null, \"port\": null, \"requiresSsl\": false, \"serverTrust\": false, \"fromName\": null, \"fromEmailAddress\": null, \"requiresAuthentication\": false, \"userName\": null, \"password\": null } Continue? Test SMTP Configuration # If the server is running, and all the information you have entered is correct. You can test SMTP server from the following option 5, it will respond if the server is configured properly.","title":"SMTP Configuration"},{"location":"admin/config-guide/jans-cli/im/im-smtp-server-configuration/#smtp-configuration","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode Janssen CLI also supports SMTP configuration. You can do the following things as stated below: - View/Get - Add/Delete - Update - Test Simply select option '10' from Main Menu, It will show some options as below: Configuration \u2013 SMTP -------------------- 1 Returns SMTP server configuration 2 Adds SMTP server configuration 3 Updates SMTP server configuration 4 Deletes SMTP server configuration 5 Test SMTP server configuration Just go with the option and perform operation.","title":"SMTP Configuration"},{"location":"admin/config-guide/jans-cli/im/im-smtp-server-configuration/#get-current-smtp-server-configuration","text":"To view the current SMTP server configuration on your Janssen server, please select option 1, it will return as below: Returns SMTP server configuration --------------------------------- Please wait while retreiving data ... Getting access token for scope https://jans.io/oauth/config/smtp.readonly { \"host\": null, \"port\": 0, \"requiresSsl\": null, \"serverTrust\": null, \"fromName\": null, \"fromEmailAddress\": null, \"requiresAuthentication\": null, \"userName\": null, \"password\": null }","title":"Get Current SMTP Server Configuration"},{"location":"admin/config-guide/jans-cli/im/im-smtp-server-configuration/#setup-new-smtp-server","text":"To add a smtp server, chose option 2 from SMTP Configuration Menu. It will ask few things to fill each property. host port requiresSsl[true, false] serverTrust[true, false] fromName fromEmailAddress requireAuthentication [true, false] username password Obtained Data: { \"host\": null, \"port\": null, \"requiresSsl\": false, \"serverTrust\": false, \"fromName\": null, \"fromEmailAddress\": null, \"requiresAuthentication\": false, \"userName\": null, \"password\": null } Continue?","title":"Setup new SMTP server"},{"location":"admin/config-guide/jans-cli/im/im-smtp-server-configuration/#test-smtp-configuration","text":"If the server is running, and all the information you have entered is correct. You can test SMTP server from the following option 5, it will respond if the server is configured properly.","title":"Test SMTP Configuration"},{"location":"admin/config-guide/jans-cli/im/im-uma-resources/","tags":["administration","configuration","cli","interactive"],"text":"UMA # Prerequisite: Know how to use the Janssen CLI in interactive mode UMA helps to manage user authorization. Using IM, you can easily maintain UMA resources. If you select 16 option on the IM Menu, you will get a list as below: you can perform such operations: - view/find - create - update / partially update - delete To get a list of UMA resources of your Janssen Server, you can select option 1. It will ask search limit[50] by default set up to 50 and pattern of string.","title":"UMA Management"},{"location":"admin/config-guide/jans-cli/im/im-uma-resources/#uma","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode UMA helps to manage user authorization. Using IM, you can easily maintain UMA resources. If you select 16 option on the IM Menu, you will get a list as below: you can perform such operations: - view/find - create - update / partially update - delete To get a list of UMA resources of your Janssen Server, you can select option 1. It will ask search limit[50] by default set up to 50 and pattern of string.","title":"UMA"},{"location":"admin/config-guide/jans-cli/im/im-user/","tags":["administration","configuration","cli","interactive"],"text":"User Resources # Prerequisite: Know how to use the Janssen CLI in interactive mode This option can be used to perform such operations to modfiy user resources. If you select the first option from the SCIM Menu, You will get a list of sub-menu as same as below. user ---- 1 Query User resources (see section 3.4.2 of RFC 7644) 2 Allows creating a User resource via POST (see section 3.3 of RFC 7644) 3 Retrieves a User resource by Id (see section 3.4.1 of RFC 7644) 4 Updates a User resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. 5 Deletes a user resource 6 Updates one or more attributes of a User resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 7 Query User resources (see section 3.4.2 of RFC 7644) Selection: Query User Resources # Query User Resources presents all the user information and its attributes. It supports query with filter by a list of attributes: 1. ** attributes ** : Use comma (,) for multiple attributes 2. ** excludeAttributes ** : Use comma (,) for multiple attributes 3. ** filter ** : an attribute with val ue to return as same type of resources 4. ** startIndex ** : an int eger val ue indicate a starting pos ition 5. ** count ** : an int eger val ue def ine the maximum search results 6. ** sortBy ** : sort list of search results by an attribute 7. ** sortOrder ** : [' asc end ing ' , ' descending '] A simple query where everything is skipped for default value. Query User resources (see section 3.4.2 of RFC 7644) ---------------------------------------------------- \u00abA comma-separated list of attribute names to return in the response. Type: string\u00bb attributes: \u00abWhen specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list). Type: string\u00bb excludedAttributes: \u00abAn expression specifying the search criteria. See section 3.4.2.2 of RFC 7644. Type: string\u00bb filter: \u00abThe 1-based index of the first query result. Type: integer\u00bb startIndex: \u00abSpecifies the desired maximum number of query results per page. Type: integer\u00bb count: 1 \u00abThe attribute whose value will be used to order the returned responses. Type: string\u00bb sortBy: \u00abOrder in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\". Type: string\u00bb sortOrder: Calling Api with parameters: {'count': 1} Please wait while retreiving data ... Getting access token for scope https://jans.io/scim/users.read \"Resources\": [ { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"User\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": null, \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 } Selection: Creating an User # With this option, An adminstration can create user resources easily. To create an user, you need to provide user value for its attributes. List of attributes are given below: 1. familyName 2. givenName 3. middleName 4. honorificPrefix 5. honorificSuffix 6. displayName 7. password 8. Email Optional Fields: 1 schemas 2 id 3 meta 4 externalId 5 nickName 6 profileUrl 7 title 8 userType 9 preferredLanguage 10 locale 11 timezone 12 active 13 phoneNumbers 14 ims 15 photos 16 addresses 17 groups 18 entitlements 19 roles 20 x509Certificates 21 urn:ietf:params:scim:schemas:extension:gluu:2.0:User You can skip less important attributes if you want. Please see below follow-up method to create an user. Selection: 2 \u00abIdentifier for the user, typically used by the user to directly authenticate (id and externalId are opaque identifiers generally not known by users). Type: string\u00bb userName: shakil Data for object name. See section 4.1.1 of RFC 7643 \u00abType: string\u00bb familyName: shakil \u00abType: string\u00bb givenName: shakil \u00abType: string\u00bb middleName: shakil \u00abA \"title\" like \"Ms.\", \"Mrs.\". Type: string\u00bb honorificPrefix: Mr. \u00abName suffix, like \"Junior\", \"The great\", \"III\". Type: string\u00bb honorificSuffix: Miah \u00abFull name, including all middle names, titles, and suffixes as appropriate. Type: string\u00bb formatted: \u00abName of the user suitable for display to end-users. Type: string\u00bb displayName: shakil \u00abType: string\u00bb password: password \u00abSee section 4.1.2 of RFC 7643. \u00bb Add Email? shakil@gluu.org Please enter one of y, n Add Email? n Populate optional fields? y Optional Fields: 1 schemas 2 id 3 meta 4 externalId 5 nickName 6 profileUrl 7 title 8 userType 9 preferredLanguage 10 locale 11 timezone 12 active 13 phoneNumbers 14 ims 15 photos 16 addresses 17 groups 18 entitlements 19 roles 20 x509Certificates 21 urn:ietf:params:scim:schemas:extension:gluu:2.0:User \u00abc: continue, #: populate filed. \u00bb Selection: c Obtained Data: { \"externalId\": null, \"userName\": \"shakil\", \"name\": { \"familyName\": \"shakil\", \"givenName\": \"shakil\", \"middleName\": \"shakil\", \"honorificPrefix\": \"Mr.\", \"honorificSuffix\": \"Miah\", \"formatted\": null }, \"displayName\": \"shakil\", \"nickName\": null, \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": null, \"password\": \"12345678\", \"emails\": [], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": null, \"id\": null, \"meta\": null } Continue? y Getting access token for scope https://jans.io/scim/users.write Please wait while posting data ... { \"externalId\": null, \"userName\": \"shakil\", \"name\": { \"familyName\": \"shakil\", \"givenName\": \"shakil\", \"middleName\": \"shakil\", \"honorificPrefix\": \"Mr.\", \"honorificSuffix\": \"Miah\", \"formatted\": \"Mr. shakil shakil shakil Miah\" }, \"displayName\": \"shakil\", \"nickName\": null, \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": null, \"password\": null, \"emails\": [], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"7881ed5c-1dad-4265-9b74-ee6c3932c11f\", \"meta\": { \"resourceType\": \"User\", \"created\": \"2021-03-29T19:04:52.353Z\", \"lastModified\": \"2021-03-29T19:04:52.353Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/7881ed5c-1dad-4265-9b74-ee6c3932c11f\" } } Selection: Retrieves an User Resources by its ID # You can retrieve an user resources by its ID. Also it supports filter in searching means you can choose list of attributes you want to retrieve and exclude list of attributes that you don't want to retrieve. Here, I have skipped for each property to retrieve all its attributes. Retrieves a User resource by Id (see section 3.4.1 of RFC 7644) --------------------------------------------------------------- \u00abid. Type: string\u00bb id: 7881ed5c-1dad-4265-9b74-ee6c3932c11f \u00abA comma-separated list of attribute names to return in the response. Type: string\u00bb attributes: \u00abWhen specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list). Type: string\u00bb excludedAttributes: Calling Api with parameters: {'id': '7881ed5c-1dad-4265-9b74-ee6c3932c11f'} Please wait while retreiving data ... Getting access token for scope https://jans.io/scim/users.read { \"externalId\": null, \"userName\": \"shakil\", \"name\": { \"familyName\": \"shakil\", \"givenName\": \"shakil\", \"middleName\": \"shakil\", \"honorificPrefix\": \"Mr.\", \"honorificSuffix\": \"Miah\", \"formatted\": \"Mr. shakil shakil shakil Miah\" }, \"displayName\": \"shakil\", \"nickName\": null, \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": false, \"password\": null, \"emails\": null, \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"7881ed5c-1dad-4265-9b74-ee6c3932c11f\", \"meta\": { \"resourceType\": \"User\", \"created\": \"2021-03-29T19:04:52.353Z\", \"lastModified\": \"2021-03-29T19:04:52.353Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/7881ed5c-1dad-4265-9b74-ee6c3932c11f\" } } Selection: Update an User resource: # You can update an user resources by its ID also. If you enter an ID of an user resource, It will show a list of attributes. You can select any of theme one by one to update each value of its property. Retrieves a User resource by Id (see section 3.4.1 of RFC 7644) --------------------------------------------------------------- \u00abid. Type: string\u00bb id: 7881ed5c-1dad-4265-9b74-ee6c3932c11f Calling Api with parameters: {'id': '7881ed5c-1dad-4265-9b74-ee6c3932c11f'} Please wait while retreiving data ... Getting access token for scope https://jans.io/scim/users.read Fields: 1 active 2 addresses 3 displayName 4 emails 5 entitlements 6 externalId 7 groups 8 id 9 ims 10 locale 11 meta 12 name 13 nickName 14 password 15 phoneNumbers 16 photos 17 preferredLanguage 18 profileUrl 19 roles 20 schemas 21 timezone 22 title 23 urn:ietf:params:scim:schemas:extension:gluu:2.0:User 24 userName 25 userType 26 x509Certificates \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: Let's say we are going to change the user active status, there is a follow-up process: Selection: 1 \u00abType: boolean\u00bb active [false]: true Please enter a(n) boolean value: _true, _false active [false]: _true \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: s Changes: active: True Continue? y Please wait while posting data ... Getting access token for scope https://jans.io/scim/users.write { \"externalId\": null, \"userName\": \"shakil\", \"name\": { \"familyName\": \"shakil\", \"givenName\": \"shakil\", \"middleName\": \"shakil\", \"honorificPrefix\": \"Mr.\", \"honorificSuffix\": \"Miah\", \"formatted\": \"Mr. shakil shakil shakil Miah\" }, \"displayName\": \"shakil\", \"nickName\": null, \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": null, \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"7881ed5c-1dad-4265-9b74-ee6c3932c11f\", \"meta\": { \"resourceType\": \"User\", \"created\": \"2021-03-29T19:04:52.353Z\", \"lastModified\": \"2021-04-01T22:45:15.804Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/7881ed5c-1dad-4265-9b74-ee6c3932c11f\" } } Selection: This is how you can update each of its attributes. Delete an user resource # If you want to delete an entry from user resources, you can do that thing easily using the Interatice Mode of Janssen CLI. To delete an user entry, you need to provide its inum . In our case: It's id=7881ed5c-1dad-4265-9b74-ee6c3932c11f which one are going to be deleted. After then, it will ask for the confirmation, just enter 'y' to delete. Please see below result to better understand. Selection: 5 \u00abEntry to be deleted. \u00bb id: 7881ed5c-1dad-4265-9b74-ee6c3932c11f Are you sure want to delete 7881ed5c-1dad-4265-9b74-ee6c3932c11f ? y Getting access token for scope https://jans.io/scim/users.write Please wait while deleting 7881ed5c-1dad-4265-9b74-ee6c3932c11f ... Entry 7881ed5c-1dad-4265-9b74-ee6c3932c11f was deleted successfully Selection: Updates user resources using operation mode # This is an alternative option to update user resources. To use this option, you need to consider the following things: - ** id **: a unique id of user resources - ** op **: one operation to be done from [ add , remove , replace ] - ** path **: an attribute path where this operation to be done . - ** value **: any string type value to `add` or `replace` . This is an example to add title which id: 18ca6089-42fb-410a-a5b5-c2631d75dc7d Selection: 6 \u00abEntry to be patched. \u00bb id: 18ca6089-42fb-410a-a5b5-c2631d75dc7d \u00abThe kind of operation to perform. Type: string\u00bb op: add \u00abRequired when op is remove, optional otherwise. Type: string\u00bb path: title \u00abOnly required when op is add or replace. Type: string\u00bb value: Admin Patch another param? n [ { \"op\": \"add\", \"path\": \"title\", \"value\": \"Admin\" } ] Continue? y Getting access token for scope https://jans.io/scim/users.write Please wait patching... { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"User\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": \"Admin\", \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": \"2021-04-05T17:56:40.502Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } Selection: There is another example to update user resource on a sub-path: Selection: 6 \u00abEntry to be patch id: 18ca6089-42fb-410a-a5b5-c2631d75dc7d \u00abThe kind of operation to perform. Type: string\u00bb op: replace \u00abRequired when op is remove, optional otherwise. Type: string\u00bb path: name/familyName \u00abOnly required when op is add or replace. Type: string\u00bb value: MH Shakil Patch another param? n [ { \"op\": \"replace\", \"path\": \"name.familyName\", \"value\": \"MH Shakil\" } ] Continue? y Getting access token for scope https://jans.io/scim/users.write Please wait patching... { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"MH Shakil\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": \"MH Shakil\", \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": \"2021-04-07T17:57:11.250Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } Selection: Please note : you can use any of them between dot (.) and slash (/) to add a sub-path in the operation.","title":"SCIM User Resources"},{"location":"admin/config-guide/jans-cli/im/im-user/#user-resources","text":"Prerequisite: Know how to use the Janssen CLI in interactive mode This option can be used to perform such operations to modfiy user resources. If you select the first option from the SCIM Menu, You will get a list of sub-menu as same as below. user ---- 1 Query User resources (see section 3.4.2 of RFC 7644) 2 Allows creating a User resource via POST (see section 3.3 of RFC 7644) 3 Retrieves a User resource by Id (see section 3.4.1 of RFC 7644) 4 Updates a User resource (see section 3.5.1 of RFC 7644). Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes not passed in the payload will be left intact. 5 Deletes a user resource 6 Updates one or more attributes of a User resource using a sequence of additions, removals, and replacements operations. See section 3.5.2 of RFC 7644 7 Query User resources (see section 3.4.2 of RFC 7644) Selection:","title":"User Resources"},{"location":"admin/config-guide/jans-cli/im/im-user/#query-user-resources","text":"Query User Resources presents all the user information and its attributes. It supports query with filter by a list of attributes: 1. ** attributes ** : Use comma (,) for multiple attributes 2. ** excludeAttributes ** : Use comma (,) for multiple attributes 3. ** filter ** : an attribute with val ue to return as same type of resources 4. ** startIndex ** : an int eger val ue indicate a starting pos ition 5. ** count ** : an int eger val ue def ine the maximum search results 6. ** sortBy ** : sort list of search results by an attribute 7. ** sortOrder ** : [' asc end ing ' , ' descending '] A simple query where everything is skipped for default value. Query User resources (see section 3.4.2 of RFC 7644) ---------------------------------------------------- \u00abA comma-separated list of attribute names to return in the response. Type: string\u00bb attributes: \u00abWhen specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list). Type: string\u00bb excludedAttributes: \u00abAn expression specifying the search criteria. See section 3.4.2.2 of RFC 7644. Type: string\u00bb filter: \u00abThe 1-based index of the first query result. Type: integer\u00bb startIndex: \u00abSpecifies the desired maximum number of query results per page. Type: integer\u00bb count: 1 \u00abThe attribute whose value will be used to order the returned responses. Type: string\u00bb sortBy: \u00abOrder in which the sortBy param is applied. Allowed values are \"ascending\" and \"descending\". Type: string\u00bb sortOrder: Calling Api with parameters: {'count': 1} Please wait while retreiving data ... Getting access token for scope https://jans.io/scim/users.read \"Resources\": [ { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"User\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": null, \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } ], \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"totalResults\": 1, \"startIndex\": 1, \"itemsPerPage\": 1 } Selection:","title":"Query User Resources"},{"location":"admin/config-guide/jans-cli/im/im-user/#creating-an-user","text":"With this option, An adminstration can create user resources easily. To create an user, you need to provide user value for its attributes. List of attributes are given below: 1. familyName 2. givenName 3. middleName 4. honorificPrefix 5. honorificSuffix 6. displayName 7. password 8. Email Optional Fields: 1 schemas 2 id 3 meta 4 externalId 5 nickName 6 profileUrl 7 title 8 userType 9 preferredLanguage 10 locale 11 timezone 12 active 13 phoneNumbers 14 ims 15 photos 16 addresses 17 groups 18 entitlements 19 roles 20 x509Certificates 21 urn:ietf:params:scim:schemas:extension:gluu:2.0:User You can skip less important attributes if you want. Please see below follow-up method to create an user. Selection: 2 \u00abIdentifier for the user, typically used by the user to directly authenticate (id and externalId are opaque identifiers generally not known by users). Type: string\u00bb userName: shakil Data for object name. See section 4.1.1 of RFC 7643 \u00abType: string\u00bb familyName: shakil \u00abType: string\u00bb givenName: shakil \u00abType: string\u00bb middleName: shakil \u00abA \"title\" like \"Ms.\", \"Mrs.\". Type: string\u00bb honorificPrefix: Mr. \u00abName suffix, like \"Junior\", \"The great\", \"III\". Type: string\u00bb honorificSuffix: Miah \u00abFull name, including all middle names, titles, and suffixes as appropriate. Type: string\u00bb formatted: \u00abName of the user suitable for display to end-users. Type: string\u00bb displayName: shakil \u00abType: string\u00bb password: password \u00abSee section 4.1.2 of RFC 7643. \u00bb Add Email? shakil@gluu.org Please enter one of y, n Add Email? n Populate optional fields? y Optional Fields: 1 schemas 2 id 3 meta 4 externalId 5 nickName 6 profileUrl 7 title 8 userType 9 preferredLanguage 10 locale 11 timezone 12 active 13 phoneNumbers 14 ims 15 photos 16 addresses 17 groups 18 entitlements 19 roles 20 x509Certificates 21 urn:ietf:params:scim:schemas:extension:gluu:2.0:User \u00abc: continue, #: populate filed. \u00bb Selection: c Obtained Data: { \"externalId\": null, \"userName\": \"shakil\", \"name\": { \"familyName\": \"shakil\", \"givenName\": \"shakil\", \"middleName\": \"shakil\", \"honorificPrefix\": \"Mr.\", \"honorificSuffix\": \"Miah\", \"formatted\": null }, \"displayName\": \"shakil\", \"nickName\": null, \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": null, \"password\": \"12345678\", \"emails\": [], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": null, \"id\": null, \"meta\": null } Continue? y Getting access token for scope https://jans.io/scim/users.write Please wait while posting data ... { \"externalId\": null, \"userName\": \"shakil\", \"name\": { \"familyName\": \"shakil\", \"givenName\": \"shakil\", \"middleName\": \"shakil\", \"honorificPrefix\": \"Mr.\", \"honorificSuffix\": \"Miah\", \"formatted\": \"Mr. shakil shakil shakil Miah\" }, \"displayName\": \"shakil\", \"nickName\": null, \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": null, \"password\": null, \"emails\": [], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"7881ed5c-1dad-4265-9b74-ee6c3932c11f\", \"meta\": { \"resourceType\": \"User\", \"created\": \"2021-03-29T19:04:52.353Z\", \"lastModified\": \"2021-03-29T19:04:52.353Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/7881ed5c-1dad-4265-9b74-ee6c3932c11f\" } } Selection:","title":"Creating an User"},{"location":"admin/config-guide/jans-cli/im/im-user/#retrieves-an-user-resources-by-its-id","text":"You can retrieve an user resources by its ID. Also it supports filter in searching means you can choose list of attributes you want to retrieve and exclude list of attributes that you don't want to retrieve. Here, I have skipped for each property to retrieve all its attributes. Retrieves a User resource by Id (see section 3.4.1 of RFC 7644) --------------------------------------------------------------- \u00abid. Type: string\u00bb id: 7881ed5c-1dad-4265-9b74-ee6c3932c11f \u00abA comma-separated list of attribute names to return in the response. Type: string\u00bb attributes: \u00abWhen specified, the response will contain a default set of attributes minus those listed here (as a comma-separated list). Type: string\u00bb excludedAttributes: Calling Api with parameters: {'id': '7881ed5c-1dad-4265-9b74-ee6c3932c11f'} Please wait while retreiving data ... Getting access token for scope https://jans.io/scim/users.read { \"externalId\": null, \"userName\": \"shakil\", \"name\": { \"familyName\": \"shakil\", \"givenName\": \"shakil\", \"middleName\": \"shakil\", \"honorificPrefix\": \"Mr.\", \"honorificSuffix\": \"Miah\", \"formatted\": \"Mr. shakil shakil shakil Miah\" }, \"displayName\": \"shakil\", \"nickName\": null, \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": false, \"password\": null, \"emails\": null, \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"7881ed5c-1dad-4265-9b74-ee6c3932c11f\", \"meta\": { \"resourceType\": \"User\", \"created\": \"2021-03-29T19:04:52.353Z\", \"lastModified\": \"2021-03-29T19:04:52.353Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/7881ed5c-1dad-4265-9b74-ee6c3932c11f\" } } Selection:","title":"Retrieves an User Resources by its ID"},{"location":"admin/config-guide/jans-cli/im/im-user/#update-an-user-resource","text":"You can update an user resources by its ID also. If you enter an ID of an user resource, It will show a list of attributes. You can select any of theme one by one to update each value of its property. Retrieves a User resource by Id (see section 3.4.1 of RFC 7644) --------------------------------------------------------------- \u00abid. Type: string\u00bb id: 7881ed5c-1dad-4265-9b74-ee6c3932c11f Calling Api with parameters: {'id': '7881ed5c-1dad-4265-9b74-ee6c3932c11f'} Please wait while retreiving data ... Getting access token for scope https://jans.io/scim/users.read Fields: 1 active 2 addresses 3 displayName 4 emails 5 entitlements 6 externalId 7 groups 8 id 9 ims 10 locale 11 meta 12 name 13 nickName 14 password 15 phoneNumbers 16 photos 17 preferredLanguage 18 profileUrl 19 roles 20 schemas 21 timezone 22 title 23 urn:ietf:params:scim:schemas:extension:gluu:2.0:User 24 userName 25 userType 26 x509Certificates \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: Let's say we are going to change the user active status, there is a follow-up process: Selection: 1 \u00abType: boolean\u00bb active [false]: true Please enter a(n) boolean value: _true, _false active [false]: _true \u00abq: quit, v: view, s: save, l: list fields #: update filed. \u00bb Selection: s Changes: active: True Continue? y Please wait while posting data ... Getting access token for scope https://jans.io/scim/users.write { \"externalId\": null, \"userName\": \"shakil\", \"name\": { \"familyName\": \"shakil\", \"givenName\": \"shakil\", \"middleName\": \"shakil\", \"honorificPrefix\": \"Mr.\", \"honorificSuffix\": \"Miah\", \"formatted\": \"Mr. shakil shakil shakil Miah\" }, \"displayName\": \"shakil\", \"nickName\": null, \"profileUrl\": null, \"title\": null, \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": null, \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": null, \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"7881ed5c-1dad-4265-9b74-ee6c3932c11f\", \"meta\": { \"resourceType\": \"User\", \"created\": \"2021-03-29T19:04:52.353Z\", \"lastModified\": \"2021-04-01T22:45:15.804Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/7881ed5c-1dad-4265-9b74-ee6c3932c11f\" } } Selection: This is how you can update each of its attributes.","title":"Update an User resource:"},{"location":"admin/config-guide/jans-cli/im/im-user/#delete-an-user-resource","text":"If you want to delete an entry from user resources, you can do that thing easily using the Interatice Mode of Janssen CLI. To delete an user entry, you need to provide its inum . In our case: It's id=7881ed5c-1dad-4265-9b74-ee6c3932c11f which one are going to be deleted. After then, it will ask for the confirmation, just enter 'y' to delete. Please see below result to better understand. Selection: 5 \u00abEntry to be deleted. \u00bb id: 7881ed5c-1dad-4265-9b74-ee6c3932c11f Are you sure want to delete 7881ed5c-1dad-4265-9b74-ee6c3932c11f ? y Getting access token for scope https://jans.io/scim/users.write Please wait while deleting 7881ed5c-1dad-4265-9b74-ee6c3932c11f ... Entry 7881ed5c-1dad-4265-9b74-ee6c3932c11f was deleted successfully Selection:","title":"Delete an user resource"},{"location":"admin/config-guide/jans-cli/im/im-user/#updates-user-resources-using-operation-mode","text":"This is an alternative option to update user resources. To use this option, you need to consider the following things: - ** id **: a unique id of user resources - ** op **: one operation to be done from [ add , remove , replace ] - ** path **: an attribute path where this operation to be done . - ** value **: any string type value to `add` or `replace` . This is an example to add title which id: 18ca6089-42fb-410a-a5b5-c2631d75dc7d Selection: 6 \u00abEntry to be patched. \u00bb id: 18ca6089-42fb-410a-a5b5-c2631d75dc7d \u00abThe kind of operation to perform. Type: string\u00bb op: add \u00abRequired when op is remove, optional otherwise. Type: string\u00bb path: title \u00abOnly required when op is add or replace. Type: string\u00bb value: Admin Patch another param? n [ { \"op\": \"add\", \"path\": \"title\", \"value\": \"Admin\" } ] Continue? y Getting access token for scope https://jans.io/scim/users.write Please wait patching... { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"User\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": \"Admin\", \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": \"2021-04-05T17:56:40.502Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } Selection: There is another example to update user resource on a sub-path: Selection: 6 \u00abEntry to be patch id: 18ca6089-42fb-410a-a5b5-c2631d75dc7d \u00abThe kind of operation to perform. Type: string\u00bb op: replace \u00abRequired when op is remove, optional otherwise. Type: string\u00bb path: name/familyName \u00abOnly required when op is add or replace. Type: string\u00bb value: MH Shakil Patch another param? n [ { \"op\": \"replace\", \"path\": \"name.familyName\", \"value\": \"MH Shakil\" } ] Continue? y Getting access token for scope https://jans.io/scim/users.write Please wait patching... { \"externalId\": null, \"userName\": \"admin\", \"name\": { \"familyName\": \"MH Shakil\", \"givenName\": \"Admin\", \"middleName\": \"Admin\", \"honorificPrefix\": null, \"honorificSuffix\": null, \"formatted\": \"Admin Admin User\" }, \"displayName\": \"Default Admin User\", \"nickName\": \"Admin\", \"profileUrl\": null, \"title\": \"MH Shakil\", \"userType\": null, \"preferredLanguage\": null, \"locale\": null, \"timezone\": null, \"active\": true, \"password\": null, \"emails\": [ { \"value\": \"admin@testjans.gluu.com\", \"display\": null, \"type\": null, \"primary\": false } ], \"phoneNumbers\": null, \"ims\": null, \"photos\": null, \"addresses\": null, \"groups\": [ { \"value\": \"60B7\", \"$ref\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Groups/60B7\", \"display\": \"Jannsen Manager Group\", \"type\": \"direct\" } ], \"entitlements\": null, \"roles\": null, \"x509Certificates\": null, \"urn:ietf:params:scim:schemas:extension:gluu:2.0:User\": null, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\" ], \"id\": \"18ca6089-42fb-410a-a5b5-c2631d75dc7d\", \"meta\": { \"resourceType\": \"User\", \"created\": null, \"lastModified\": \"2021-04-07T17:57:11.250Z\", \"location\": \"https://testjans.gluu.com/jans-scim/restv1/v2/Users/18ca6089-42fb-410a-a5b5-c2631d75dc7d\" } } Selection: Please note : you can use any of them between dot (.) and slash (/) to add a sub-path in the operation.","title":"Updates user resources using operation mode"},{"location":"admin/developer/","tags":["administration","developer"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/developer/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/developer/back-channel-scripts/","tags":["administration","developer"],"text":"This is a placeholder","title":"Back Channel Scripts"},{"location":"admin/developer/external-libraries/","tags":["administration","developer"],"text":"This is a placeholder","title":"External Libraries"},{"location":"admin/developer/front-channel-scripts/","tags":["administration","developer"],"text":"This is a placeholder","title":"Front Channel Scripts"},{"location":"admin/developer/interception-scripts-debug/","tags":["administration","developer"],"text":"Setup # For development the kubernetes setup must be local and accessible to the debug server address. The following steps will walk you trough a setup using Minikube with docker driver, and ksync for syncing the files between local, and the container. The following instructions assume a fresh ubuntu 20.04, however the setup can be done on a different operating systems such as macOS or Windows. System Requirements # The minimum system requirement for running all jans services are 8GB RAM , 4 CPU , and 50GB disk . This can be dropped to 4GB RAM , 4CPU and 20GB disk space if operating with required services auth-server, and LDAP. Setup Minikube # Install Docker 18.09 or higher. For other operating systems follow the appropriate docs . Install minikube , but do not start it yet. Install kubectl . Once Minikube is installed start it with the docker driver. minikube start --driver = docker If not automatically set configure kubectl to use the cluster: kubectl config use-context minikube Enable ingress on minikube minikube addons enable ingress Install Janssen # Install Helm3 Install Janssen helm repo add jans https://janssenproject.github.io/jans-cloud-native/charts kubectl create ns jans helm install jans-auth jans/jans -n jans --set global.lbIp = \" $( minikube ip ) \" --set global.provisioner = \"k8s.io/minikube-hostpath\" --devel Install Ksync # Once Janssen is fully running we want to create an active sync between a local folder, and the folder that will hold the interception scripts inside the auth server container. Create a folder that will hold the interception script inside the auth server container. Place the namespace where jans is installed in the env JANS_NAMESPACE and execute: JANS_NAMESPACE = <jans-namespace> for pod in $( kubectl get pods -n $JANS_NAMESPACE --selector = APP_NAME = auth-server --output = jsonpath ={ .items..metadata.name } ) ; do kubectl exec -ti $pod -n $JANS_NAMESPACE -- mkdir -p /deploy/interception-scripts-ksync done Install ksync curl https://ksync.github.io/gimme-that/gimme.sh | bash Initialize ksync ksync init -n <jans-namespace> Start ksync. ksync watch -n <jans-namespace> & Open a new terminal and create a folder called interception-scripts-ksync mkdir -p $( pwd ) /interception-scripts-ksync Create a spec to start syncing folders between the local system and auth server container. ksync create --selector = APP_NAME = auth-server $( pwd ) /interception-scripts-ksync /deploy/interception-scripts-ksync -n <jans-namespace> Check the status. Also check the terminal where the watch command is running. ksync get 1. Move the interception script to the local folder $(pwd)/interception-scripts-ksync . In the below example we copied the following script as basic.py : # oxAuth is available under the MIT License (2008). See http://opensource.org/licenses/MIT for full text. # Copyright (c) 2016, Janssen # # Author: Yuriy Movchan # from io.jans.service.cdi.util import CdiUtil from io.jans.as.server.security import Identity from io.jans.model.custom.script.type.auth import PersonAuthenticationType from io.jans.as.server.service import AuthenticationService from io.jans.util import StringHelper import java class PersonAuthentication ( PersonAuthenticationType ): def __init__ ( self , currentTimeMillis ): self . currentTimeMillis = currentTimeMillis def init ( self , customScript , configurationAttributes ): print \"Basic. Initialization\" print \"Basic. Initialized successfully\" return True def destroy ( self , configurationAttributes ): print \"Basic. Destroy\" print \"Basic. Destroyed successfully\" return True def getAuthenticationMethodClaims ( self , requestParameters ): return None def getApiVersion ( self ): return 11 def isValidAuthenticationMethod ( self , usageType , configurationAttributes ): return True def getAlternativeAuthenticationMethod ( self , usageType , configurationAttributes ): return None def authenticate ( self , configurationAttributes , requestParameters , step ): authenticationService = CdiUtil . bean ( AuthenticationService ) if ( step == 1 ): print \"Basic. Authenticate for step 1\" identity = CdiUtil . bean ( Identity ) credentials = identity . getCredentials () user_name = credentials . getUsername () user_password = credentials . getPassword () logged_in = False if ( StringHelper . isNotEmptyString ( user_name ) and StringHelper . isNotEmptyString ( user_password )): logged_in = authenticationService . authenticate ( user_name , user_password ) if ( not logged_in ): return False return True else : return False def prepareForStep ( self , configurationAttributes , requestParameters , step ): if ( step == 1 ): print \"Basic. Prepare for Step 1\" return True else : return False def getExtraParametersForStep ( self , configurationAttributes , step ): return None def getCountAuthenticationSteps ( self , configurationAttributes ): return 1 def getPageForStep ( self , configurationAttributes , step ): return \"\" def getNextStep ( self , configurationAttributes , requestParameters , step ): return - 1 def getLogoutExternalUrl ( self , configurationAttributes , requestParameters ): print \"Get external logout URL call\" return None def logout ( self , configurationAttributes , requestParameters ): return True Install an IDE # The IDE can be of choice but must contain PyDev. We chose Liclipse for this demonstration. Once complete, start the PyDev debug server: Open Liclipse Install the jython jar for the interpreter. wget https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.2/jython-standalone-2.7.2.jar From the menu: go to File -> Open File and choose the interception script that will be debugged in $(pwd)/interception-scripts-ksync . When opening the Python file for the first time, we need to instruct Liclipse to use a specific interpreter. Follow these steps: Press the \"Manual Config\" button in the dialog box after opening the Python file Open \"PyDev->Interpreters->Jython Interpreters\" Click the \"New...\" button in the right panel. Name it \"Jython\" and specify the interpreter executable that was downloaded previously \"jython-standalone-2.7.2.jar\" Click \"OK\", then confirm the settings by clicking \"OK\" again, then \"Apply and Close\" In the final dialog, confirm the settings by clicking \"OK\" From the menu: go to Window -> Perspective -> Open Perspective -> Other.. -> Debug From the menu: go to Pydev > Start Debug Server . Now the server should have started at port 5678 . Take a note of the ip of the computer running Liclipse and save it for later use. Remember that the auth server pod must be able to communicate with this ip. If you have followed the instructions above and installed minikube on your local computer which is the same computer Liclipse is operating on you should be able to reach it from within the pods. Development & Debugging # Now we are ready to perform script development and debugging. Here is a quick overview: Instruct the auth server to load the script from the file system instead of LDAP. Follow the example scenario below to learn how to do this. Add debug instructions to the script, as specified in the next section Execute the script Enable Remote Debug in Custom Script # After the import section, add: REMOTE_DEBUG = True if REMOTE_DEBUG: try: import sys import pydevd except ImportError as ex: print \"Failed to import pydevd: %s\" % ex raise Add the following lines wherever breakpoints are needed: if REMOTE_DEBUG: pydevd.settrace('localhost', port=5678, stdoutToServer=True, stderrToServer=True) Sample Scenario # Copy the below script to $(pwd)/interception-scripts-ksync/basic.py # oxAuth is available under the MIT License (2008). See http://opensource.org/licenses/MIT for full text. # Copyright (c) 2016, Janssen # # Author: Yuriy Movchan # from io.jans.service.cdi.util import CdiUtil from io.jans.as.server.security import Identity from io.jans.model.custom.script.type.auth import PersonAuthenticationType from io.jans.as.server.service import AuthenticationService from io.jans.util import StringHelper import java class PersonAuthentication ( PersonAuthenticationType ): def __init__ ( self , currentTimeMillis ): self . currentTimeMillis = currentTimeMillis def init ( self , customScript , configurationAttributes ): print \"Basic. Initialization\" print \"Basic. Initialized successfully\" return True def destroy ( self , configurationAttributes ): print \"Basic. Destroy\" print \"Basic. Destroyed successfully\" return True def getAuthenticationMethodClaims ( self , requestParameters ): return None def getApiVersion ( self ): return 11 def isValidAuthenticationMethod ( self , usageType , configurationAttributes ): return True def getAlternativeAuthenticationMethod ( self , usageType , configurationAttributes ): return None def authenticate ( self , configurationAttributes , requestParameters , step ): authenticationService = CdiUtil . bean ( AuthenticationService ) if ( step == 1 ): print \"Basic. Authenticate for step 1\" identity = CdiUtil . bean ( Identity ) credentials = identity . getCredentials () user_name = credentials . getUsername () user_password = credentials . getPassword () logged_in = False if ( StringHelper . isNotEmptyString ( user_name ) and StringHelper . isNotEmptyString ( user_password )): logged_in = authenticationService . authenticate ( user_name , user_password ) if ( not logged_in ): return False return True else : return False def prepareForStep ( self , configurationAttributes , requestParameters , step ): if ( step == 1 ): print \"Basic. Prepare for Step 1\" return True else : return False def getExtraParametersForStep ( self , configurationAttributes , step ): return None def getCountAuthenticationSteps ( self , configurationAttributes ): return 1 def getPageForStep ( self , configurationAttributes , step ): return \"\" def getNextStep ( self , configurationAttributes , requestParameters , step ): return - 1 def getLogoutExternalUrl ( self , configurationAttributes , requestParameters ): print \"Get external logout URL call\" return None def logout ( self , configurationAttributes , requestParameters ): return True Make sure to have an LDAP browser available. We recommend Apache Directory Studio . Port forward the opendj pod. kubectl port-forward jans-opendj-0 -n <jans-namespace> 1636 :1636 --address 0 .0.0.0 1. Create a connection to the ldap browser. The default password will be Test1234# if not changed in the helm install command. Inside the browser navigate to o=jans, ou=scripts . Right click on ou=scripts and click on Quick Search . Inside the pop up box that appears fill Returning Attributes with displayName , and press Apply and Close In the results that appear click on the Dn that has a displayName of basic . Choose to load the script from file instead of ldap. Inside the browser change jansModuleProperty with value {\"value1\":\"location_type\",\"value2\":\"ldap\",\"description\":\"\"} to {\"value1\":\"location_type\",\"value2\":\"file\",\"description\":\"\"} Specify the Script Path location to the location of the folder inside auth server pods: /deploy/interception-scripts-ksync/basic.py . Right click the upper jansModuleProperty and click New Value . A new entry for jansModuleProperty will be created. Insert the following for the value: {\"value1\":\"location_path\",\"value2\":\"/deploy/interception-scripts-ksync/basic.py\",\"description\":\"\"} Enable the script by settings jansEnabled to true . The following is an example of how the basic script entry should look. Check the following log inside the the auth-server container to verify that auth server loaded the script properly: /opt/jans/jetty/jans-auth/logs/jans-auth_script.log . It should look like this: kubectl exec -ti <auth-server-pod-name> -n <jans-namespace> -- tail -f /opt/jans/jetty/jans-auth/logs/jans-auth_script.log You should find the following in the log: ... (PythonService.java:239) - Basic. Initialization ... (PythonService.java:239) - Basic. Initialized successfully Download the jython jar for the interpreter. wget https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.2/jython-standalone-2.7.2.jar From the IDE (Liclipse) menu: navigate to File -> Open File and choose the interception script that will be debugged in $(pwd)/interception-scripts-ksync/basic.py When opening the Python file for the first time, we need to instruct Liclipse to use a specific interpreter. Follow these steps: Press the \"Manual Config\" button in the dialog box after opening the Python file Open \"PyDev->Interpreters->Jython Interpreters\" Click the \"New...\" button in the right panel. Name it \"Jython\" and specify the interpreter executable that was downloaded previously \"jython-standalone-2.7.2.jar\" Click \"OK\", then confirm the settings by clicking \"OK\" again, then \"Apply and Close\" In the final dialog, confirm the settings by clicking \"OK\" Open basic.py in a file editor. After the import section, add the following lines to load the PyDev libraries: REMOTE_DEBUG = True if REMOTE_DEBUG: try: import sys import pydevd except ImportError as ex: print \"Failed to import pydevd: %s\" % ex raise Add this break condition to the first line in the authenticate method. Place the ip of the maching running the ide , here liclipse i.e 192.168.140.2 . if REMOTE_DEBUG: pydevd.settrace ( '<ip-of-machine-running-ide>' , port = 5678 , stdoutToServer = True, stderrToServer = True ) Save basic.py Within one minute, the auth server should load the changed file. Check the following log file again to make sure there are no load errors: /opt/jans/jetty/jans-auth/logs/jans-auth_script.log To check if the script works, update the default authentication method to Basic Authentication. Preform this in the LDAP browser. Navigate to o=jans,ou=configuration . Change the jansAuthMode to basic instead of simple_password_auth . After executing pydevd.settrace the script will transfer execution control to the PyDev server in Liclipse. You can use any debug commands. For example: Step Over (F6), Resume (F8), etc After debugging is finished, resume script execution to transfer execution control back to the auth server.","title":"Script Debugging"},{"location":"admin/developer/interception-scripts-debug/#setup","text":"For development the kubernetes setup must be local and accessible to the debug server address. The following steps will walk you trough a setup using Minikube with docker driver, and ksync for syncing the files between local, and the container. The following instructions assume a fresh ubuntu 20.04, however the setup can be done on a different operating systems such as macOS or Windows.","title":"Setup"},{"location":"admin/developer/interception-scripts-debug/#system-requirements","text":"The minimum system requirement for running all jans services are 8GB RAM , 4 CPU , and 50GB disk . This can be dropped to 4GB RAM , 4CPU and 20GB disk space if operating with required services auth-server, and LDAP.","title":"System Requirements"},{"location":"admin/developer/interception-scripts-debug/#setup-minikube","text":"Install Docker 18.09 or higher. For other operating systems follow the appropriate docs . Install minikube , but do not start it yet. Install kubectl . Once Minikube is installed start it with the docker driver. minikube start --driver = docker If not automatically set configure kubectl to use the cluster: kubectl config use-context minikube Enable ingress on minikube minikube addons enable ingress","title":"Setup Minikube"},{"location":"admin/developer/interception-scripts-debug/#install-janssen","text":"Install Helm3 Install Janssen helm repo add jans https://janssenproject.github.io/jans-cloud-native/charts kubectl create ns jans helm install jans-auth jans/jans -n jans --set global.lbIp = \" $( minikube ip ) \" --set global.provisioner = \"k8s.io/minikube-hostpath\" --devel","title":"Install Janssen"},{"location":"admin/developer/interception-scripts-debug/#install-ksync","text":"Once Janssen is fully running we want to create an active sync between a local folder, and the folder that will hold the interception scripts inside the auth server container. Create a folder that will hold the interception script inside the auth server container. Place the namespace where jans is installed in the env JANS_NAMESPACE and execute: JANS_NAMESPACE = <jans-namespace> for pod in $( kubectl get pods -n $JANS_NAMESPACE --selector = APP_NAME = auth-server --output = jsonpath ={ .items..metadata.name } ) ; do kubectl exec -ti $pod -n $JANS_NAMESPACE -- mkdir -p /deploy/interception-scripts-ksync done Install ksync curl https://ksync.github.io/gimme-that/gimme.sh | bash Initialize ksync ksync init -n <jans-namespace> Start ksync. ksync watch -n <jans-namespace> & Open a new terminal and create a folder called interception-scripts-ksync mkdir -p $( pwd ) /interception-scripts-ksync Create a spec to start syncing folders between the local system and auth server container. ksync create --selector = APP_NAME = auth-server $( pwd ) /interception-scripts-ksync /deploy/interception-scripts-ksync -n <jans-namespace> Check the status. Also check the terminal where the watch command is running. ksync get 1. Move the interception script to the local folder $(pwd)/interception-scripts-ksync . In the below example we copied the following script as basic.py : # oxAuth is available under the MIT License (2008). See http://opensource.org/licenses/MIT for full text. # Copyright (c) 2016, Janssen # # Author: Yuriy Movchan # from io.jans.service.cdi.util import CdiUtil from io.jans.as.server.security import Identity from io.jans.model.custom.script.type.auth import PersonAuthenticationType from io.jans.as.server.service import AuthenticationService from io.jans.util import StringHelper import java class PersonAuthentication ( PersonAuthenticationType ): def __init__ ( self , currentTimeMillis ): self . currentTimeMillis = currentTimeMillis def init ( self , customScript , configurationAttributes ): print \"Basic. Initialization\" print \"Basic. Initialized successfully\" return True def destroy ( self , configurationAttributes ): print \"Basic. Destroy\" print \"Basic. Destroyed successfully\" return True def getAuthenticationMethodClaims ( self , requestParameters ): return None def getApiVersion ( self ): return 11 def isValidAuthenticationMethod ( self , usageType , configurationAttributes ): return True def getAlternativeAuthenticationMethod ( self , usageType , configurationAttributes ): return None def authenticate ( self , configurationAttributes , requestParameters , step ): authenticationService = CdiUtil . bean ( AuthenticationService ) if ( step == 1 ): print \"Basic. Authenticate for step 1\" identity = CdiUtil . bean ( Identity ) credentials = identity . getCredentials () user_name = credentials . getUsername () user_password = credentials . getPassword () logged_in = False if ( StringHelper . isNotEmptyString ( user_name ) and StringHelper . isNotEmptyString ( user_password )): logged_in = authenticationService . authenticate ( user_name , user_password ) if ( not logged_in ): return False return True else : return False def prepareForStep ( self , configurationAttributes , requestParameters , step ): if ( step == 1 ): print \"Basic. Prepare for Step 1\" return True else : return False def getExtraParametersForStep ( self , configurationAttributes , step ): return None def getCountAuthenticationSteps ( self , configurationAttributes ): return 1 def getPageForStep ( self , configurationAttributes , step ): return \"\" def getNextStep ( self , configurationAttributes , requestParameters , step ): return - 1 def getLogoutExternalUrl ( self , configurationAttributes , requestParameters ): print \"Get external logout URL call\" return None def logout ( self , configurationAttributes , requestParameters ): return True","title":"Install Ksync"},{"location":"admin/developer/interception-scripts-debug/#install-an-ide","text":"The IDE can be of choice but must contain PyDev. We chose Liclipse for this demonstration. Once complete, start the PyDev debug server: Open Liclipse Install the jython jar for the interpreter. wget https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.2/jython-standalone-2.7.2.jar From the menu: go to File -> Open File and choose the interception script that will be debugged in $(pwd)/interception-scripts-ksync . When opening the Python file for the first time, we need to instruct Liclipse to use a specific interpreter. Follow these steps: Press the \"Manual Config\" button in the dialog box after opening the Python file Open \"PyDev->Interpreters->Jython Interpreters\" Click the \"New...\" button in the right panel. Name it \"Jython\" and specify the interpreter executable that was downloaded previously \"jython-standalone-2.7.2.jar\" Click \"OK\", then confirm the settings by clicking \"OK\" again, then \"Apply and Close\" In the final dialog, confirm the settings by clicking \"OK\" From the menu: go to Window -> Perspective -> Open Perspective -> Other.. -> Debug From the menu: go to Pydev > Start Debug Server . Now the server should have started at port 5678 . Take a note of the ip of the computer running Liclipse and save it for later use. Remember that the auth server pod must be able to communicate with this ip. If you have followed the instructions above and installed minikube on your local computer which is the same computer Liclipse is operating on you should be able to reach it from within the pods.","title":"Install an IDE"},{"location":"admin/developer/interception-scripts-debug/#development-debugging","text":"Now we are ready to perform script development and debugging. Here is a quick overview: Instruct the auth server to load the script from the file system instead of LDAP. Follow the example scenario below to learn how to do this. Add debug instructions to the script, as specified in the next section Execute the script","title":"Development &amp; Debugging"},{"location":"admin/developer/interception-scripts-debug/#enable-remote-debug-in-custom-script","text":"After the import section, add: REMOTE_DEBUG = True if REMOTE_DEBUG: try: import sys import pydevd except ImportError as ex: print \"Failed to import pydevd: %s\" % ex raise Add the following lines wherever breakpoints are needed: if REMOTE_DEBUG: pydevd.settrace('localhost', port=5678, stdoutToServer=True, stderrToServer=True)","title":"Enable Remote Debug in Custom Script"},{"location":"admin/developer/interception-scripts-debug/#sample-scenario","text":"Copy the below script to $(pwd)/interception-scripts-ksync/basic.py # oxAuth is available under the MIT License (2008). See http://opensource.org/licenses/MIT for full text. # Copyright (c) 2016, Janssen # # Author: Yuriy Movchan # from io.jans.service.cdi.util import CdiUtil from io.jans.as.server.security import Identity from io.jans.model.custom.script.type.auth import PersonAuthenticationType from io.jans.as.server.service import AuthenticationService from io.jans.util import StringHelper import java class PersonAuthentication ( PersonAuthenticationType ): def __init__ ( self , currentTimeMillis ): self . currentTimeMillis = currentTimeMillis def init ( self , customScript , configurationAttributes ): print \"Basic. Initialization\" print \"Basic. Initialized successfully\" return True def destroy ( self , configurationAttributes ): print \"Basic. Destroy\" print \"Basic. Destroyed successfully\" return True def getAuthenticationMethodClaims ( self , requestParameters ): return None def getApiVersion ( self ): return 11 def isValidAuthenticationMethod ( self , usageType , configurationAttributes ): return True def getAlternativeAuthenticationMethod ( self , usageType , configurationAttributes ): return None def authenticate ( self , configurationAttributes , requestParameters , step ): authenticationService = CdiUtil . bean ( AuthenticationService ) if ( step == 1 ): print \"Basic. Authenticate for step 1\" identity = CdiUtil . bean ( Identity ) credentials = identity . getCredentials () user_name = credentials . getUsername () user_password = credentials . getPassword () logged_in = False if ( StringHelper . isNotEmptyString ( user_name ) and StringHelper . isNotEmptyString ( user_password )): logged_in = authenticationService . authenticate ( user_name , user_password ) if ( not logged_in ): return False return True else : return False def prepareForStep ( self , configurationAttributes , requestParameters , step ): if ( step == 1 ): print \"Basic. Prepare for Step 1\" return True else : return False def getExtraParametersForStep ( self , configurationAttributes , step ): return None def getCountAuthenticationSteps ( self , configurationAttributes ): return 1 def getPageForStep ( self , configurationAttributes , step ): return \"\" def getNextStep ( self , configurationAttributes , requestParameters , step ): return - 1 def getLogoutExternalUrl ( self , configurationAttributes , requestParameters ): print \"Get external logout URL call\" return None def logout ( self , configurationAttributes , requestParameters ): return True Make sure to have an LDAP browser available. We recommend Apache Directory Studio . Port forward the opendj pod. kubectl port-forward jans-opendj-0 -n <jans-namespace> 1636 :1636 --address 0 .0.0.0 1. Create a connection to the ldap browser. The default password will be Test1234# if not changed in the helm install command. Inside the browser navigate to o=jans, ou=scripts . Right click on ou=scripts and click on Quick Search . Inside the pop up box that appears fill Returning Attributes with displayName , and press Apply and Close In the results that appear click on the Dn that has a displayName of basic . Choose to load the script from file instead of ldap. Inside the browser change jansModuleProperty with value {\"value1\":\"location_type\",\"value2\":\"ldap\",\"description\":\"\"} to {\"value1\":\"location_type\",\"value2\":\"file\",\"description\":\"\"} Specify the Script Path location to the location of the folder inside auth server pods: /deploy/interception-scripts-ksync/basic.py . Right click the upper jansModuleProperty and click New Value . A new entry for jansModuleProperty will be created. Insert the following for the value: {\"value1\":\"location_path\",\"value2\":\"/deploy/interception-scripts-ksync/basic.py\",\"description\":\"\"} Enable the script by settings jansEnabled to true . The following is an example of how the basic script entry should look. Check the following log inside the the auth-server container to verify that auth server loaded the script properly: /opt/jans/jetty/jans-auth/logs/jans-auth_script.log . It should look like this: kubectl exec -ti <auth-server-pod-name> -n <jans-namespace> -- tail -f /opt/jans/jetty/jans-auth/logs/jans-auth_script.log You should find the following in the log: ... (PythonService.java:239) - Basic. Initialization ... (PythonService.java:239) - Basic. Initialized successfully Download the jython jar for the interpreter. wget https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.2/jython-standalone-2.7.2.jar From the IDE (Liclipse) menu: navigate to File -> Open File and choose the interception script that will be debugged in $(pwd)/interception-scripts-ksync/basic.py When opening the Python file for the first time, we need to instruct Liclipse to use a specific interpreter. Follow these steps: Press the \"Manual Config\" button in the dialog box after opening the Python file Open \"PyDev->Interpreters->Jython Interpreters\" Click the \"New...\" button in the right panel. Name it \"Jython\" and specify the interpreter executable that was downloaded previously \"jython-standalone-2.7.2.jar\" Click \"OK\", then confirm the settings by clicking \"OK\" again, then \"Apply and Close\" In the final dialog, confirm the settings by clicking \"OK\" Open basic.py in a file editor. After the import section, add the following lines to load the PyDev libraries: REMOTE_DEBUG = True if REMOTE_DEBUG: try: import sys import pydevd except ImportError as ex: print \"Failed to import pydevd: %s\" % ex raise Add this break condition to the first line in the authenticate method. Place the ip of the maching running the ide , here liclipse i.e 192.168.140.2 . if REMOTE_DEBUG: pydevd.settrace ( '<ip-of-machine-running-ide>' , port = 5678 , stdoutToServer = True, stderrToServer = True ) Save basic.py Within one minute, the auth server should load the changed file. Check the following log file again to make sure there are no load errors: /opt/jans/jetty/jans-auth/logs/jans-auth_script.log To check if the script works, update the default authentication method to Basic Authentication. Preform this in the LDAP browser. Navigate to o=jans,ou=configuration . Change the jansAuthMode to basic instead of simple_password_auth . After executing pydevd.settrace the script will transfer execution control to the PyDev server in Liclipse. You can use any debug commands. For example: Step Over (F6), Resume (F8), etc After debugging is finished, resume script execution to transfer execution control back to the auth server.","title":"Sample Scenario"},{"location":"admin/developer/interception-scripts/","tags":["administration","developer"],"text":"Interception Scripts (or custom scripts) # Interception scripts (or custom scripts) allow you to define custom business logic for various features offered by the OpenID Provider (Jans-auth server). Some examples of features which can be customized are - implementing a 2FA authentication method, consent gathering, client registration, adding business specific claims to ID token or Access token etc. Scripts can easily be upgraded and doesn't require forking the Jans Server code or re-building it. Types of Interception scripts in Jans server # Listed below, are custom scripts classified into various types, each of which represents a feature of the Jans server that can be extended as per the business need. Each script type is described by a java interface whose methods should be overridden to implement your business case. 1. Person Authentication : Allows the definition of multi-step authentication workflows, including adaptive authentication - where the number of steps varies depending on the context. 1. Consent Gathering : Allows exact customization of the authorization (or consent) process. By default, the OP will request authorization for each scope, and display the respective scope description. 1. User Registration 1. Update User 1. Client Registration 1. Dynamic scopes : Enables admin to generate scopes on the fly, for example by calling external APIs 1. ID Generator 1. Cache Refresh 1. Session Management 1. SCIM 1. Inrospection 1. Resource Owner Password Credentials 1. UMA 2 RPT Authorization Policies 1. UMA 2 Claims-Gathering Implementation languages - Jython or pure Java # Interception scripts are written in Jython or in pure Java , enabling Java or Python libraries to be imported. Implementation in Pure Java # A script in Java refers to a java source file (e.g. Discovery.java ) which is compiled by AS and executed at runtime. Some rules: * The java class file containing the script should not have a package set. * The name of the class must match to the name set in CustomScriptType source code (e.g. for discovery script it is \"Discovery\") * Scripts must implement predefined interface which can be found against the CustomScriptType . For e.g. if you are writing a Person authentication script then your class should implement the following interface * All libraries available at runtime to server are available also to pure java script * To log to jans-auth_script.log use scriptLogger * Normal log will log in to jans-auth.log Example pure java script import io.jans.model.SimpleCustomProperty; import io.jans.model.custom.script.model.CustomScript; import io.jans.model.custom.script.type.discovery.DiscoveryType; import io.jans.service.custom.script.CustomScriptManager; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.json.JSONObject; import java.util.Map; /** * @author Yuriy Zabrovarnyy */ public class Discovery implements DiscoveryType { private static final Logger log = LoggerFactory.getLogger(Discovery.class); private static final Logger scriptLogger = LoggerFactory.getLogger(CustomScriptManager.class); @Override public boolean init(Map<String, SimpleCustomProperty> configurationAttributes) { log.info(\"Init of Discovery Java custom script\"); return true; } @Override public boolean init(CustomScript customScript, Map<String, SimpleCustomProperty> configurationAttributes) { log.info(\"Init of Discovery Java custom script\"); return true; } @Override public boolean destroy(Map<String, SimpleCustomProperty> configurationAttributes) { log.info(\"Destroy of Discovery Java custom script\"); return true; } @Override public int getApiVersion() { log.info(\"getApiVersion Discovery Java custom script: 11\"); return 11; } @Override public boolean modifyResponse(Object responseAsJsonObject, Object context) { scriptLogger.info(\"write to script logger\"); JSONObject response = (JSONObject) responseAsJsonObject; response.accumulate(\"key_from_java\", \"value_from_script_on_java\"); return true; } } Using Java libraries in a script: # Steps: 1. Add library jars to /opt/jans/jetty/jans-auth/custom/libs/ 2. Edit /opt/jans/jetty/jans-auth/webapps/jans-auth.xml and add the following line replacing the word library-name with the actual name of the library: <Set name=\"extraClasspath\">/opt/jans/jetty/jans-auth/custom/libs/library-name.jar</Set> 3. Restart jans-auth service systemctl restart jans-auth Implementation in Jython # The example below is only meant to convey the concept, we will cover the details in later parts of the documentation. Suppose, we are implementing an Openbanking Identity platform and we have to add business specific claims say openbanking_intent_id to the ID token. The custom script which will help us accomplish our goal is of the type UpdateTokenType where the modifyIdToken method has to be implemented. A sample custom script with this business logic will be as stated below : class UpdateToken(UpdateTokenType): def __init__(self, currentTimeMillis): self.currentTimeMillis = currentTimeMillis def init(self, customScript, configurationAttributes): < initialization code comes here > return True def destroy(self, configurationAttributes): < clean up code comes here> return True def getApiVersion(self): return <version number> def modifyIdToken(self, jsonWebResponse, context): # Step1: <get openbanking_intent_id from session > sessionId = context.getSession() openbanking_intent_id = sessionId.getSessionAttributes().get(\"openbanking_intent_id \") # Step2: <add custom claims to ID token here> jsonWebResponse.getClaims().setClaim(\"openbanking_intent_id \", openbanking_intent_id ) Using Java libraries in a Jython script: # Steps: 1. Add library jars to /opt/jans/jetty/jans-auth/custom/libs/ 2. Edit /opt/jans/jetty/jans-auth/webapps/jans-auth.xml and add the following line replacing the word library-name with the actual name of the library: <Set name=\"extraClasspath\">/opt/jans/jetty/jans-auth/custom/libs/library-name.jar</Set> 3. Restart jans-auth service systemctl restart jans-auth Using Python libraries in a script: # You can only use libraries (packages and modules) that are written in Pure Python . Importing a Python class which is a wrapper around a library written in C is not supported by the Jans server. As an example, the psycopg2 library used to connect to PostgreSQL from Python. Since it is a C wrapper around libpq, it won't work with Jython. Python 3 packages / modules are not supported. Steps: 1. Pure Python libraries should be added to /opt/jans/python/libs Using pip to install additional Python packages: Find out about your Jython version first. cd into the /opt directory in your Jans Server container and run ls. A directory named jython- should be listed too where will correspond to the Jython version. Note the version. Open the file /etc/jans/conf/jans.properties and look for the line starting with pythonModulesDir= . Append the value /opt/jython-<version>/Lib/site-packages to any existing value. Each value is separater by a colon (:). It should look something like this pythonModulesDir=/opt/jans/python/libs:/opt/jython-2.7.2a/Lib/site-packages Run the following command /opt/jython-<version>/bin/jython -m ensurepip Install your library with /opt/jython-<version>/bin/pip install <library_name> where is the name of the library to install. Restart the jans-auth service : systemctl restart jans-auth Debugging a Jython script # This article covers the details. Mandatory methods to be overridden # This is the base class of all custom script types and all custom scripts should implement the following methods. * init(self, customScript, configurationAttributes) : This method is only called once during the script initialization (or jans-auth service restarts). It can be used for global script initialization, initiate objects etc destroy(self, configurationAttributes) : This method is called when a custom script fails to initialize or upon jans-auth service restarts. It can be used to free resource and objects created in the init() method getApiVersion(self, configurationAttributes, customScript) : The getApiVersion method allows API changes in order to do transparent migration from an old script to a new API. Only include the customScript variable if the value for getApiVersion is greater than 10 Configurable properties of a custom script # Name unique identifier(name) for the custom script e.g. person_authentication_google Description Description text Programming Languages Python Level Used in Person Authentication script type, the strength of the credential is a numerical value assigned to the custom script that is tied to the authentication method. The higher the value, the stronger it is considered. Thus, if a user has several credentials enrolled, he will be asked to present the one of them having the highest strength associated. Location type Database - Stored in persistence (LDAP, MYSQL or PLSQL whichever applicable ) File - stored as a file Interactive Web - web application native - mobile application both Custom properties Key - value pairs for configurable parameters like Third Party API keys, location of configuration files etc Building business logic in a custom script # Jans-auth server uses Weld 3.0 (JSR-365 aka CDI 2.0) for managed beans. The most important aspects of business logic are implemented through a set of beans. This article presents many ready-to-use beans which can be used to build a script. Operations on custom scripts using jans-cli # Jans-cli supports the following six operations on custom scripts: get-config-scripts , gets a list of custom scripts. post-config-scripts , adds a new custom script. put-config-scripts , updates a custom script. get-config-scripts-by-type , requires an argument --url-suffix TYPE: ______ . You can specify the following types: PERSON_AUTHENTICATION, INTROSPECTION, RESOURCE_OWNER_PASSWORD_CREDENTIALS, APPLICATION_SESSION, CACHE_REFRESH, UPDATE_USER, USER_REGISTRATION, CLIENT_REGISTRATION, ID_GENERATOR, UMA_RPT_POLICY, UMA_RPT_CLAIMS, UMA_CLAIMS_GATHERING, CONSENT_GATHERING, DYNAMIC_SCOPE, SPONTANEOUS_SCOPE, END_SESSION, POST_AUTHN, SCIM, CIBA_END_USER_NOTIFICATION, PERSISTENCE_EXTENSION, IDP, or UPDATE_TOKEN. get-config-scripts-by-inum , requires an argument --url-suffix inum: _____ delete-config-scripts-by-inum , requires an argument --url-suffix inum: _____ The post-config-scripts and put-config-scripts require various details about the scripts. The following command gives the basic schema of the custom scripts to pass to these operations. Basic schema of a custom script # Command: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript Output: { \"dn\": null, \"inum\": null, \"name\": \"string\", \"aliases\": [], \"description\": null, \"script\": \"string\", \"scriptType\": \"IDP\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": { \"value1\": null, \"value2\": null, \"description\": null, \"hide\": true }, \"level\": \"integer\", \"revision\": 0, \"enabled\": false, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } To add or modify a script first, we need to create the script's python file (e.g. /tmp/sample.py) and then create a JSON file by following the above schema and update the fields as : /tmp/sample.json { \"name\": \"mySampleScript\", \"aliases\": null, \"description\": \"This is a sample script\", \"script\": \"_file /tmp/sample.py\", \"scriptType\": \"PERSON_AUTHENTICATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [ { \"value1\": \"mayvalue1\", \"value2\": \"myvalues2\", \"description\": \"description for property\" } ], \"configurationProperties\": null, \"level\": 1, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false } Add, Modify and Delete a script # The following command will add a new script with details given in /tmp/sample.json file. The jans-cli will generate a unique inum of this new script if we skip inum in the json file. /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/sampleadd.json The following command will modify/update the existing script with details given in /tmp/samplemodify.json file. Remember to set inum field in samplemodify.json to the inum of the script to update. /opt/jans/jans-cli/config-cli.py --operation-id put-config-scripts --data /tmp/samplemodify.json To delete a custom script by its inum, use the following command: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-scripts-by-inum --url-suffix inum:SAMPLE-TEST-INUM List existing custom scripts # These commands to print the details are important, as using them we can get the inum of these scripts which is required to perform update or delete operation. The following command will display the details of all the existing custom scripts. This will be helpful to get the inum of scripts to perform the update and delete operation. /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts Following command displays the details of selected custom script (by inum). /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:_____ Use the following command to display the details of existing custom scripts of a given type (for example: INTROSPECTION). /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:INTROSPECTION :memo: Note: Incase the AS's Access token is bound to the client's MTLS certificate, you need to add the certificate and key files to the above commands. E.g: /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/sampleadd.json -cert-file sampleCert.pem -key-file sampleKey.key Client specific implementations # Useful links # Custom scripts and jans-cli","title":"Interception Script Overview"},{"location":"admin/developer/interception-scripts/#interception-scripts-or-custom-scripts","text":"Interception scripts (or custom scripts) allow you to define custom business logic for various features offered by the OpenID Provider (Jans-auth server). Some examples of features which can be customized are - implementing a 2FA authentication method, consent gathering, client registration, adding business specific claims to ID token or Access token etc. Scripts can easily be upgraded and doesn't require forking the Jans Server code or re-building it.","title":"Interception Scripts (or custom scripts)"},{"location":"admin/developer/interception-scripts/#types-of-interception-scripts-in-jans-server","text":"Listed below, are custom scripts classified into various types, each of which represents a feature of the Jans server that can be extended as per the business need. Each script type is described by a java interface whose methods should be overridden to implement your business case. 1. Person Authentication : Allows the definition of multi-step authentication workflows, including adaptive authentication - where the number of steps varies depending on the context. 1. Consent Gathering : Allows exact customization of the authorization (or consent) process. By default, the OP will request authorization for each scope, and display the respective scope description. 1. User Registration 1. Update User 1. Client Registration 1. Dynamic scopes : Enables admin to generate scopes on the fly, for example by calling external APIs 1. ID Generator 1. Cache Refresh 1. Session Management 1. SCIM 1. Inrospection 1. Resource Owner Password Credentials 1. UMA 2 RPT Authorization Policies 1. UMA 2 Claims-Gathering","title":"Types of Interception scripts in Jans server"},{"location":"admin/developer/interception-scripts/#implementation-languages-jython-or-pure-java","text":"Interception scripts are written in Jython or in pure Java , enabling Java or Python libraries to be imported.","title":"Implementation languages - Jython or pure Java"},{"location":"admin/developer/interception-scripts/#implementation-in-pure-java","text":"A script in Java refers to a java source file (e.g. Discovery.java ) which is compiled by AS and executed at runtime. Some rules: * The java class file containing the script should not have a package set. * The name of the class must match to the name set in CustomScriptType source code (e.g. for discovery script it is \"Discovery\") * Scripts must implement predefined interface which can be found against the CustomScriptType . For e.g. if you are writing a Person authentication script then your class should implement the following interface * All libraries available at runtime to server are available also to pure java script * To log to jans-auth_script.log use scriptLogger * Normal log will log in to jans-auth.log Example pure java script import io.jans.model.SimpleCustomProperty; import io.jans.model.custom.script.model.CustomScript; import io.jans.model.custom.script.type.discovery.DiscoveryType; import io.jans.service.custom.script.CustomScriptManager; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.json.JSONObject; import java.util.Map; /** * @author Yuriy Zabrovarnyy */ public class Discovery implements DiscoveryType { private static final Logger log = LoggerFactory.getLogger(Discovery.class); private static final Logger scriptLogger = LoggerFactory.getLogger(CustomScriptManager.class); @Override public boolean init(Map<String, SimpleCustomProperty> configurationAttributes) { log.info(\"Init of Discovery Java custom script\"); return true; } @Override public boolean init(CustomScript customScript, Map<String, SimpleCustomProperty> configurationAttributes) { log.info(\"Init of Discovery Java custom script\"); return true; } @Override public boolean destroy(Map<String, SimpleCustomProperty> configurationAttributes) { log.info(\"Destroy of Discovery Java custom script\"); return true; } @Override public int getApiVersion() { log.info(\"getApiVersion Discovery Java custom script: 11\"); return 11; } @Override public boolean modifyResponse(Object responseAsJsonObject, Object context) { scriptLogger.info(\"write to script logger\"); JSONObject response = (JSONObject) responseAsJsonObject; response.accumulate(\"key_from_java\", \"value_from_script_on_java\"); return true; } }","title":"Implementation in Pure Java"},{"location":"admin/developer/interception-scripts/#using-java-libraries-in-a-script","text":"Steps: 1. Add library jars to /opt/jans/jetty/jans-auth/custom/libs/ 2. Edit /opt/jans/jetty/jans-auth/webapps/jans-auth.xml and add the following line replacing the word library-name with the actual name of the library: <Set name=\"extraClasspath\">/opt/jans/jetty/jans-auth/custom/libs/library-name.jar</Set> 3. Restart jans-auth service systemctl restart jans-auth","title":"Using Java libraries in a script:"},{"location":"admin/developer/interception-scripts/#implementation-in-jython","text":"The example below is only meant to convey the concept, we will cover the details in later parts of the documentation. Suppose, we are implementing an Openbanking Identity platform and we have to add business specific claims say openbanking_intent_id to the ID token. The custom script which will help us accomplish our goal is of the type UpdateTokenType where the modifyIdToken method has to be implemented. A sample custom script with this business logic will be as stated below : class UpdateToken(UpdateTokenType): def __init__(self, currentTimeMillis): self.currentTimeMillis = currentTimeMillis def init(self, customScript, configurationAttributes): < initialization code comes here > return True def destroy(self, configurationAttributes): < clean up code comes here> return True def getApiVersion(self): return <version number> def modifyIdToken(self, jsonWebResponse, context): # Step1: <get openbanking_intent_id from session > sessionId = context.getSession() openbanking_intent_id = sessionId.getSessionAttributes().get(\"openbanking_intent_id \") # Step2: <add custom claims to ID token here> jsonWebResponse.getClaims().setClaim(\"openbanking_intent_id \", openbanking_intent_id )","title":"Implementation in Jython"},{"location":"admin/developer/interception-scripts/#using-java-libraries-in-a-jython-script","text":"Steps: 1. Add library jars to /opt/jans/jetty/jans-auth/custom/libs/ 2. Edit /opt/jans/jetty/jans-auth/webapps/jans-auth.xml and add the following line replacing the word library-name with the actual name of the library: <Set name=\"extraClasspath\">/opt/jans/jetty/jans-auth/custom/libs/library-name.jar</Set> 3. Restart jans-auth service systemctl restart jans-auth","title":"Using Java libraries in a Jython script:"},{"location":"admin/developer/interception-scripts/#using-python-libraries-in-a-script","text":"You can only use libraries (packages and modules) that are written in Pure Python . Importing a Python class which is a wrapper around a library written in C is not supported by the Jans server. As an example, the psycopg2 library used to connect to PostgreSQL from Python. Since it is a C wrapper around libpq, it won't work with Jython. Python 3 packages / modules are not supported. Steps: 1. Pure Python libraries should be added to /opt/jans/python/libs Using pip to install additional Python packages: Find out about your Jython version first. cd into the /opt directory in your Jans Server container and run ls. A directory named jython- should be listed too where will correspond to the Jython version. Note the version. Open the file /etc/jans/conf/jans.properties and look for the line starting with pythonModulesDir= . Append the value /opt/jython-<version>/Lib/site-packages to any existing value. Each value is separater by a colon (:). It should look something like this pythonModulesDir=/opt/jans/python/libs:/opt/jython-2.7.2a/Lib/site-packages Run the following command /opt/jython-<version>/bin/jython -m ensurepip Install your library with /opt/jython-<version>/bin/pip install <library_name> where is the name of the library to install. Restart the jans-auth service : systemctl restart jans-auth","title":"Using Python libraries in a script:"},{"location":"admin/developer/interception-scripts/#debugging-a-jython-script","text":"This article covers the details.","title":"Debugging a Jython script"},{"location":"admin/developer/interception-scripts/#mandatory-methods-to-be-overridden","text":"This is the base class of all custom script types and all custom scripts should implement the following methods. * init(self, customScript, configurationAttributes) : This method is only called once during the script initialization (or jans-auth service restarts). It can be used for global script initialization, initiate objects etc destroy(self, configurationAttributes) : This method is called when a custom script fails to initialize or upon jans-auth service restarts. It can be used to free resource and objects created in the init() method getApiVersion(self, configurationAttributes, customScript) : The getApiVersion method allows API changes in order to do transparent migration from an old script to a new API. Only include the customScript variable if the value for getApiVersion is greater than 10","title":"Mandatory methods to be overridden"},{"location":"admin/developer/interception-scripts/#configurable-properties-of-a-custom-script","text":"Name unique identifier(name) for the custom script e.g. person_authentication_google Description Description text Programming Languages Python Level Used in Person Authentication script type, the strength of the credential is a numerical value assigned to the custom script that is tied to the authentication method. The higher the value, the stronger it is considered. Thus, if a user has several credentials enrolled, he will be asked to present the one of them having the highest strength associated. Location type Database - Stored in persistence (LDAP, MYSQL or PLSQL whichever applicable ) File - stored as a file Interactive Web - web application native - mobile application both Custom properties Key - value pairs for configurable parameters like Third Party API keys, location of configuration files etc","title":"Configurable properties of a custom script"},{"location":"admin/developer/interception-scripts/#building-business-logic-in-a-custom-script","text":"Jans-auth server uses Weld 3.0 (JSR-365 aka CDI 2.0) for managed beans. The most important aspects of business logic are implemented through a set of beans. This article presents many ready-to-use beans which can be used to build a script.","title":"Building business logic in a custom script"},{"location":"admin/developer/interception-scripts/#operations-on-custom-scripts-using-jans-cli","text":"Jans-cli supports the following six operations on custom scripts: get-config-scripts , gets a list of custom scripts. post-config-scripts , adds a new custom script. put-config-scripts , updates a custom script. get-config-scripts-by-type , requires an argument --url-suffix TYPE: ______ . You can specify the following types: PERSON_AUTHENTICATION, INTROSPECTION, RESOURCE_OWNER_PASSWORD_CREDENTIALS, APPLICATION_SESSION, CACHE_REFRESH, UPDATE_USER, USER_REGISTRATION, CLIENT_REGISTRATION, ID_GENERATOR, UMA_RPT_POLICY, UMA_RPT_CLAIMS, UMA_CLAIMS_GATHERING, CONSENT_GATHERING, DYNAMIC_SCOPE, SPONTANEOUS_SCOPE, END_SESSION, POST_AUTHN, SCIM, CIBA_END_USER_NOTIFICATION, PERSISTENCE_EXTENSION, IDP, or UPDATE_TOKEN. get-config-scripts-by-inum , requires an argument --url-suffix inum: _____ delete-config-scripts-by-inum , requires an argument --url-suffix inum: _____ The post-config-scripts and put-config-scripts require various details about the scripts. The following command gives the basic schema of the custom scripts to pass to these operations.","title":"Operations on custom scripts using jans-cli"},{"location":"admin/developer/interception-scripts/#basic-schema-of-a-custom-script","text":"Command: /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript Output: { \"dn\": null, \"inum\": null, \"name\": \"string\", \"aliases\": [], \"description\": null, \"script\": \"string\", \"scriptType\": \"IDP\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": { \"value1\": null, \"value2\": null, \"description\": null, \"hide\": true }, \"level\": \"integer\", \"revision\": 0, \"enabled\": false, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } To add or modify a script first, we need to create the script's python file (e.g. /tmp/sample.py) and then create a JSON file by following the above schema and update the fields as : /tmp/sample.json { \"name\": \"mySampleScript\", \"aliases\": null, \"description\": \"This is a sample script\", \"script\": \"_file /tmp/sample.py\", \"scriptType\": \"PERSON_AUTHENTICATION\", \"programmingLanguage\": \"PYTHON\", \"moduleProperties\": [ { \"value1\": \"mayvalue1\", \"value2\": \"myvalues2\", \"description\": \"description for property\" } ], \"configurationProperties\": null, \"level\": 1, \"revision\": 0, \"enabled\": false, \"scriptError\": null, \"modified\": false, \"internal\": false }","title":"Basic schema of a custom script"},{"location":"admin/developer/interception-scripts/#add-modify-and-delete-a-script","text":"The following command will add a new script with details given in /tmp/sample.json file. The jans-cli will generate a unique inum of this new script if we skip inum in the json file. /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/sampleadd.json The following command will modify/update the existing script with details given in /tmp/samplemodify.json file. Remember to set inum field in samplemodify.json to the inum of the script to update. /opt/jans/jans-cli/config-cli.py --operation-id put-config-scripts --data /tmp/samplemodify.json To delete a custom script by its inum, use the following command: /opt/jans/jans-cli/config-cli.py --operation-id delete-config-scripts-by-inum --url-suffix inum:SAMPLE-TEST-INUM","title":"Add, Modify and Delete a script"},{"location":"admin/developer/interception-scripts/#list-existing-custom-scripts","text":"These commands to print the details are important, as using them we can get the inum of these scripts which is required to perform update or delete operation. The following command will display the details of all the existing custom scripts. This will be helpful to get the inum of scripts to perform the update and delete operation. /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts Following command displays the details of selected custom script (by inum). /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:_____ Use the following command to display the details of existing custom scripts of a given type (for example: INTROSPECTION). /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:INTROSPECTION :memo: Note: Incase the AS's Access token is bound to the client's MTLS certificate, you need to add the certificate and key files to the above commands. E.g: /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/sampleadd.json -cert-file sampleCert.pem -key-file sampleKey.key","title":"List existing custom scripts"},{"location":"admin/developer/interception-scripts/#client-specific-implementations","text":"","title":"Client specific implementations"},{"location":"admin/developer/interception-scripts/#useful-links","text":"Custom scripts and jans-cli","title":"Useful links"},{"location":"admin/developer/managed-beans/","tags":["administration","developer"],"text":"Ready-to-use code in Custom script: # Jans-auth server uses Weld 3.0 (JSR-365 aka CDI 2.0) for managed beans. The most important aspects of business logic are implemented through a set of beans some of which are listed below: 1. AuthenticationService # Allows to authenticate a user or obtain the current authenticated user Relevant methods: Signature Description boolean authenticate(String userName) Performs authentication for the user whose identifier ( userName ) is passed as parameter boolean authenticate(String userName, String password) Performs authentication for the user whose identifier ( userName ) is passed as parameter. The password supplied must be the correct password of the user in question User getAuthenticatedUser() Returns a representation of the currently authenticated user. null if no user is currently authenticated. See User data object 2. Authenticator # This class is mainly used in facelets templates for authentication flows to proceed in the sequence of steps. Relevant methods: Signature Description boolean authenticate() Makes the authentication flow proceed by calling the authenticate method of the custom script String prepareAuthenticationForStep() Makes the authentication flow proceed by calling the prepareForStep method of the custom script 3. UserService # Allows CRUD of users in the local persistence. Relevant methods: Signature Description User addUser(User user, boolean active) Creates a new user based on the representation passed as parameter. active parameter denotes whether user status ( gluuStatus attribute) will be active or register User addUserAttribute(String userId, String attributeName, String attributeValue) Adds an attribute to the user identified by userId in the database with the name and value passed. Returns a representation of the modified user or null in case of failure or if such name/attribute is already part of such user boolean addUserAttribute(User user, String attributeName, String attributeValue) Adds an attribute to the user object with the name and value passed. This method only alters the user argument and does not persist changes. Returns false if such name/attribute is already part of user User addUserAttributeByUserInum(String userInum, String attributeName, String attributeValue) Adds an attribute to the user whose inum attribute (in the database) equals to userInum using the name and value passed. Returns a representation of the modified user or null in case of failure or if such name/attribute is already part of such user CustomAttribute getCustomAttribute(User user, String attributeName) Gets a representation of the attribute whose name is passed for the user in question ( user ). Returns null if no such attribute is populated String getDnForUser(String inum) Obtains the DN (distinguished name) of the user whose inum attribute equals to userInum (no check that such user may exist is actually made) User getUser(String userId, String... returnAttributes) Retrieves a user representation for the user identified with userId containing only the attributes requested ( returnAttributes ). null is returned if no such user exists User getUserByAttribute(String attributeName, String attributeValue) Retrieves a user (first available) such that the attribute referenced ( attributeName ) has the value passed ( attributeValue ). null is returned if no such user exists String getUserInum(String userId) Retrieves the inum database attribute for the user identified with userId . null is returned if no such user exists User removeUserAttribute(String userId, String attributeName, String attributeValue) Removes attributeValue from the values of the attribute whose name is passed ( attributeName ) for the user identified with userId User replaceUserAttribute(String userId, String attributeName, String oldAttributeValue, String newAttributeValue) Updates the user identified with userId by replacing the value of the attribute attributeName with the value passed. null is returned if no such user exists void setCustomAttribute(User user, String attributeName, String attributeValue) Sets the value of the attribute attributeName with the single value attributeValue for the user representation passes as parameter. This method does not persist changes User updateUser(User user) Updates the user represented by user object in the database 4. User # A class employed to represent a user entry in the persistence. Provides getters and setters to retrieve and assign value(s) for attributes 5. CustomAttribute # A class that models an attribute. An attribute has a name and a collection of associated values 6. Identity # Mainly used to carry data between steps of authentication flows. Signature Description Object getWorkingParameter(String name) Retrieves a working parameter by name previously set via setWorkingParameter void setWorkingParameter(String name, Object value) Binds data to a name for further use in an authentication flow. Recommended values to store are String s SessionId getSessionId() Retrieves a reference to the associated server session object, see SessionId 7. HttpService: HttpService # Provides utility methods to execute HTTP requests, manipulate responses, etc Relevant methods: Signature Description HttpClient getHttpsClient() Returns an instance of org.apache.http.client.HttpClient (see oxcore-util class SslDefaultHttpClient ) HttpServiceResponse executeGet(HttpClient httpClient, String requestUri) Perform a GET on the URI requested. Returns an instance of io.jans.as.server.model.net.HttpServiceResponse (a wrapper on org.apache.http.HttpResponse ) byte[] getResponseContent(HttpResponse httpResponse) Consumes the bytes of the associated response. Returns null if the response status code is not 200 (OK) 8. CacheService # Provides a unified means to interact with the underlying cache provider configured in the Jans-auth Server Relevant methods: Signature Description void clear() Flushes the whole cache Object get(String key) Retrieves the value of key in the cache. null if there is no such key present void put(int expirationInSeconds, String key, Object object) Puts an object in the cache associated to the key passed. An expiration in seconds can be provided put(String key, Object object) Puts an object in the cache associated to the key passed. The expiration used is the default expiration configured in Gluu void remove(String key) Removes an entry from the cache 9. FacesService : Provides utilities to properly build encoded URLs and make redirections. This class is used a great deal in custom scripts # Relevant methods: Signature Description void redirectToExternalURL(String url) Redirects the user's browser to the URL passed as parameter String encodeParameters(String url, Map<String, Object> parameters) Builds a URL by appending query parameters as supplied in parameters map. Every value in the map is properly URL-encoded 10. FacesMessages # Allows manipulation of JSF context messages Relevant methods: Signature Description void add(Severity severity, String message) Adds a message to the JSF context with the severity ( javax.faces.application.FacesMessage.Severity ) specified void clear() Clears the messages of the JSF context String evalAsString(String expression) Evaluates an EL expression using the JSF context and returns the result as a String void setKeepMessages() Sets the \"keep messages\" property of the JSF flash 11. CdiUtil : Allows to obtain references of managed beans. This is particularly useful in custom scripts # Relevant methods: Signature Description T bean(Class clazz) Gets the managed bean belonging to the class passed as parameter Example (jython code): from org.gluu.oxauth.service import UserService from org.gluu.oxauth.service import AuthenticationService ... userService = CdiUtil.bean(UserService) authenticationService = CdiUtil.bean(AuthenticationService) 12. StringHelper # Provides many utility methods that often arise in the manipulation of Strings 13. EncryptionService # Allows to encrypt/decrypt strings using a 3DES cipher whose salt is found in /etc/jans/conf/salt Relevant methods: Signature Description String decrypt(String encryptedString) Decrypts the encrypted string supplied Properties decryptAllProperties(Properties connectionProperties) Returns a java.util.Properties object with all decrypted values found in connectionProperties String encrypt(String unencryptedString) Encrypts the string supplied","title":"Managed Beans"},{"location":"admin/developer/managed-beans/#ready-to-use-code-in-custom-script","text":"Jans-auth server uses Weld 3.0 (JSR-365 aka CDI 2.0) for managed beans. The most important aspects of business logic are implemented through a set of beans some of which are listed below:","title":"Ready-to-use code in Custom script:"},{"location":"admin/developer/managed-beans/#1-authenticationservice","text":"Allows to authenticate a user or obtain the current authenticated user Relevant methods: Signature Description boolean authenticate(String userName) Performs authentication for the user whose identifier ( userName ) is passed as parameter boolean authenticate(String userName, String password) Performs authentication for the user whose identifier ( userName ) is passed as parameter. The password supplied must be the correct password of the user in question User getAuthenticatedUser() Returns a representation of the currently authenticated user. null if no user is currently authenticated. See User data object","title":"1. AuthenticationService"},{"location":"admin/developer/managed-beans/#2-authenticator","text":"This class is mainly used in facelets templates for authentication flows to proceed in the sequence of steps. Relevant methods: Signature Description boolean authenticate() Makes the authentication flow proceed by calling the authenticate method of the custom script String prepareAuthenticationForStep() Makes the authentication flow proceed by calling the prepareForStep method of the custom script","title":"2.  Authenticator"},{"location":"admin/developer/managed-beans/#3-userservice","text":"Allows CRUD of users in the local persistence. Relevant methods: Signature Description User addUser(User user, boolean active) Creates a new user based on the representation passed as parameter. active parameter denotes whether user status ( gluuStatus attribute) will be active or register User addUserAttribute(String userId, String attributeName, String attributeValue) Adds an attribute to the user identified by userId in the database with the name and value passed. Returns a representation of the modified user or null in case of failure or if such name/attribute is already part of such user boolean addUserAttribute(User user, String attributeName, String attributeValue) Adds an attribute to the user object with the name and value passed. This method only alters the user argument and does not persist changes. Returns false if such name/attribute is already part of user User addUserAttributeByUserInum(String userInum, String attributeName, String attributeValue) Adds an attribute to the user whose inum attribute (in the database) equals to userInum using the name and value passed. Returns a representation of the modified user or null in case of failure or if such name/attribute is already part of such user CustomAttribute getCustomAttribute(User user, String attributeName) Gets a representation of the attribute whose name is passed for the user in question ( user ). Returns null if no such attribute is populated String getDnForUser(String inum) Obtains the DN (distinguished name) of the user whose inum attribute equals to userInum (no check that such user may exist is actually made) User getUser(String userId, String... returnAttributes) Retrieves a user representation for the user identified with userId containing only the attributes requested ( returnAttributes ). null is returned if no such user exists User getUserByAttribute(String attributeName, String attributeValue) Retrieves a user (first available) such that the attribute referenced ( attributeName ) has the value passed ( attributeValue ). null is returned if no such user exists String getUserInum(String userId) Retrieves the inum database attribute for the user identified with userId . null is returned if no such user exists User removeUserAttribute(String userId, String attributeName, String attributeValue) Removes attributeValue from the values of the attribute whose name is passed ( attributeName ) for the user identified with userId User replaceUserAttribute(String userId, String attributeName, String oldAttributeValue, String newAttributeValue) Updates the user identified with userId by replacing the value of the attribute attributeName with the value passed. null is returned if no such user exists void setCustomAttribute(User user, String attributeName, String attributeValue) Sets the value of the attribute attributeName with the single value attributeValue for the user representation passes as parameter. This method does not persist changes User updateUser(User user) Updates the user represented by user object in the database","title":"3.  UserService"},{"location":"admin/developer/managed-beans/#4-user","text":"A class employed to represent a user entry in the persistence. Provides getters and setters to retrieve and assign value(s) for attributes","title":"4.  User"},{"location":"admin/developer/managed-beans/#5-customattribute","text":"A class that models an attribute. An attribute has a name and a collection of associated values","title":"5. CustomAttribute"},{"location":"admin/developer/managed-beans/#6-identity","text":"Mainly used to carry data between steps of authentication flows. Signature Description Object getWorkingParameter(String name) Retrieves a working parameter by name previously set via setWorkingParameter void setWorkingParameter(String name, Object value) Binds data to a name for further use in an authentication flow. Recommended values to store are String s SessionId getSessionId() Retrieves a reference to the associated server session object, see SessionId","title":"6. Identity"},{"location":"admin/developer/managed-beans/#7-httpservice-httpservice","text":"Provides utility methods to execute HTTP requests, manipulate responses, etc Relevant methods: Signature Description HttpClient getHttpsClient() Returns an instance of org.apache.http.client.HttpClient (see oxcore-util class SslDefaultHttpClient ) HttpServiceResponse executeGet(HttpClient httpClient, String requestUri) Perform a GET on the URI requested. Returns an instance of io.jans.as.server.model.net.HttpServiceResponse (a wrapper on org.apache.http.HttpResponse ) byte[] getResponseContent(HttpResponse httpResponse) Consumes the bytes of the associated response. Returns null if the response status code is not 200 (OK)","title":"7. HttpService: HttpService"},{"location":"admin/developer/managed-beans/#8-cacheservice","text":"Provides a unified means to interact with the underlying cache provider configured in the Jans-auth Server Relevant methods: Signature Description void clear() Flushes the whole cache Object get(String key) Retrieves the value of key in the cache. null if there is no such key present void put(int expirationInSeconds, String key, Object object) Puts an object in the cache associated to the key passed. An expiration in seconds can be provided put(String key, Object object) Puts an object in the cache associated to the key passed. The expiration used is the default expiration configured in Gluu void remove(String key) Removes an entry from the cache","title":"8.  CacheService"},{"location":"admin/developer/managed-beans/#9-facesservice-provides-utilities-to-properly-build-encoded-urls-and-make-redirections-this-class-is-used-a-great-deal-in-custom-scripts","text":"Relevant methods: Signature Description void redirectToExternalURL(String url) Redirects the user's browser to the URL passed as parameter String encodeParameters(String url, Map<String, Object> parameters) Builds a URL by appending query parameters as supplied in parameters map. Every value in the map is properly URL-encoded","title":"9. FacesService : Provides utilities to properly build encoded URLs and make redirections. This class is used a great deal in custom scripts"},{"location":"admin/developer/managed-beans/#10-facesmessages","text":"Allows manipulation of JSF context messages Relevant methods: Signature Description void add(Severity severity, String message) Adds a message to the JSF context with the severity ( javax.faces.application.FacesMessage.Severity ) specified void clear() Clears the messages of the JSF context String evalAsString(String expression) Evaluates an EL expression using the JSF context and returns the result as a String void setKeepMessages() Sets the \"keep messages\" property of the JSF flash","title":"10.  FacesMessages"},{"location":"admin/developer/managed-beans/#11-cdiutil-allows-to-obtain-references-of-managed-beans-this-is-particularly-useful-in-custom-scripts","text":"Relevant methods: Signature Description T bean(Class clazz) Gets the managed bean belonging to the class passed as parameter Example (jython code): from org.gluu.oxauth.service import UserService from org.gluu.oxauth.service import AuthenticationService ... userService = CdiUtil.bean(UserService) authenticationService = CdiUtil.bean(AuthenticationService)","title":"11. CdiUtil : Allows to obtain references of managed beans. This is particularly useful in custom scripts"},{"location":"admin/developer/managed-beans/#12-stringhelper","text":"Provides many utility methods that often arise in the manipulation of Strings","title":"12. StringHelper"},{"location":"admin/developer/managed-beans/#13-encryptionservice","text":"Allows to encrypt/decrypt strings using a 3DES cipher whose salt is found in /etc/jans/conf/salt Relevant methods: Signature Description String decrypt(String encryptedString) Decrypts the encrypted string supplied Properties decryptAllProperties(Properties connectionProperties) Returns a java.util.Properties object with all decrypted values found in connectionProperties String encrypt(String unencryptedString) Encrypts the string supplied","title":"13. EncryptionService"},{"location":"admin/developer/agama/","tags":["administration","developer","agama"],"text":"Agama introduction # Overview # Agama is a component of the Janssen authentication server that offers an alternative way to build web-based authentication flows. Typically, person authentication flows are defined in the server by means of jython scripts that adhere to a predefined API. With Agama, flows are coded using a DSL (domain specific language) designed for the sole purpose of writing web flows. Important Here, a web flow is understood as a process composed by one or more stages, where at each stage an actor - normally a person - provides some kind of data or response by using a web browser or similar client. Throughout the process only a single actor is involved Some of the advantages of using Agama include: Ability to express authentication flows in a clean and concise way Flow composition is supported out-of-the-box: reuse of an existing flow in another requires no effort Reasoning about flows behavior is straightforward (as consequence of points 1 and 2). This makes flow modifications easy Small cognitive load. Agama DSL is a very small language with simple, non-distracting syntax Friendly UI templating engine. No complexities when authoring web pages - stay focused on writing HTML markup Scope and intended audience # Agama brings a lot of power to the table. In general, developers will be able to write arbitrary flows, ranging from very simple to multi-step non-linear dynamic flows. The effort required varies widely and depends on the underlying complexity and developer ability. According to the current status of this project, the minimum skills required are: Principles of the Java programming language Basic knowledge of web authoring: HTML, CSS, Javascript. Required for browser-based flows only HTTP dialect. A tool like curl, postman, HTTPie, etc. Starter knowledge of any of the OpenId Connect authorization flows As expected, the more sophisticated the flow, the more specialized knowlege is demanded from the developer. In the future, we are hoping to bring visual tools to lower the barriers and make flow building a more expedite experience. Jython flows vs. Agama # With respect to jython-based flows, Agama differs radically in two aspects: A DSL is used to structure flows where business logic and computations are delegated to Java Flow execution proceeds in a traditional, sequential manner. With jython scripts, an inversion of control (IoC) mechanism is employed where control jumps from one method to another in a script Despite the above, if you have coded jython authentication scripts in the past, this may represent an advantage since you will probably have acquaintance with some of the auth-server Java APIs. Agama engine # The Agama engine (a.k.a the \" engine \") is the piece of software in charge of reading flows written in Agama DSL and put them into action. Among others, the engine does the following: Compile flows' DSL code and issue associated errors if any Render (e.g. convert to HTML markup) UI templates and send them to the user's browser Maintain flows' state Properly drive flows navigation (in HTTP terms) Locate and invoke Java code involved Note the engine itself does not implement an authentication protocol. It only offers a safe way for short-lived web journeys to materialize. Hence, another piece is required to put flows in the context of a standard authorization framework like OpenId Connect. This where the \" bridge \" pitches in. The \"bridge\" is a regular jython script that temporarily hands control to the engine and receives control back once the Agama flow has finished. This script is in charge of doing the actual user authentication and leads to the completion of the process by taking the user's browser to a predetermined URL - the so-called redirect_uri where an access token or a code can be obtained. Account that by default, the engine is disabled in the authentication server. The quick start page explains how to enable it. Where to start? # Readers are encouraged to begin at the quick start guide to learn the basics of Agama. The FAQ page provides useful information for beginners as well.","title":"Agama introduction"},{"location":"admin/developer/agama/#agama-introduction","text":"","title":"Agama introduction"},{"location":"admin/developer/agama/#overview","text":"Agama is a component of the Janssen authentication server that offers an alternative way to build web-based authentication flows. Typically, person authentication flows are defined in the server by means of jython scripts that adhere to a predefined API. With Agama, flows are coded using a DSL (domain specific language) designed for the sole purpose of writing web flows. Important Here, a web flow is understood as a process composed by one or more stages, where at each stage an actor - normally a person - provides some kind of data or response by using a web browser or similar client. Throughout the process only a single actor is involved Some of the advantages of using Agama include: Ability to express authentication flows in a clean and concise way Flow composition is supported out-of-the-box: reuse of an existing flow in another requires no effort Reasoning about flows behavior is straightforward (as consequence of points 1 and 2). This makes flow modifications easy Small cognitive load. Agama DSL is a very small language with simple, non-distracting syntax Friendly UI templating engine. No complexities when authoring web pages - stay focused on writing HTML markup","title":"Overview"},{"location":"admin/developer/agama/#scope-and-intended-audience","text":"Agama brings a lot of power to the table. In general, developers will be able to write arbitrary flows, ranging from very simple to multi-step non-linear dynamic flows. The effort required varies widely and depends on the underlying complexity and developer ability. According to the current status of this project, the minimum skills required are: Principles of the Java programming language Basic knowledge of web authoring: HTML, CSS, Javascript. Required for browser-based flows only HTTP dialect. A tool like curl, postman, HTTPie, etc. Starter knowledge of any of the OpenId Connect authorization flows As expected, the more sophisticated the flow, the more specialized knowlege is demanded from the developer. In the future, we are hoping to bring visual tools to lower the barriers and make flow building a more expedite experience.","title":"Scope and intended audience"},{"location":"admin/developer/agama/#jython-flows-vs-agama","text":"With respect to jython-based flows, Agama differs radically in two aspects: A DSL is used to structure flows where business logic and computations are delegated to Java Flow execution proceeds in a traditional, sequential manner. With jython scripts, an inversion of control (IoC) mechanism is employed where control jumps from one method to another in a script Despite the above, if you have coded jython authentication scripts in the past, this may represent an advantage since you will probably have acquaintance with some of the auth-server Java APIs.","title":"Jython flows vs. Agama"},{"location":"admin/developer/agama/#agama-engine","text":"The Agama engine (a.k.a the \" engine \") is the piece of software in charge of reading flows written in Agama DSL and put them into action. Among others, the engine does the following: Compile flows' DSL code and issue associated errors if any Render (e.g. convert to HTML markup) UI templates and send them to the user's browser Maintain flows' state Properly drive flows navigation (in HTTP terms) Locate and invoke Java code involved Note the engine itself does not implement an authentication protocol. It only offers a safe way for short-lived web journeys to materialize. Hence, another piece is required to put flows in the context of a standard authorization framework like OpenId Connect. This where the \" bridge \" pitches in. The \"bridge\" is a regular jython script that temporarily hands control to the engine and receives control back once the Agama flow has finished. This script is in charge of doing the actual user authentication and leads to the completion of the process by taking the user's browser to a predetermined URL - the so-called redirect_uri where an access token or a code can be obtained. Account that by default, the engine is disabled in the authentication server. The quick start page explains how to enable it.","title":"Agama engine"},{"location":"admin/developer/agama/#where-to-start","text":"Readers are encouraged to begin at the quick start guide to learn the basics of Agama. The FAQ page provides useful information for beginners as well.","title":"Where to start?"},{"location":"admin/developer/agama/dsl-full/","tags":["administration","developer","agama"],"text":"Agama DSL reference # This document surveys the different constructs of the Agama domain-specific language. Code comments # There is support for single line comments only (no block comments). Use // to start a comment. Comments can start anywhere in a line. Data types # In practice, values would fit into any of: string , boolean , number , list or map . Since Java methods can be invoked (more on this later), returned values might not match up exactly with these categories, however this is not too relevant because there is no strict type enforcement in Agama. Literals # Strings # They are surrounded by double quotes. Examples: \"Agama\" , \"blah\" , \"\" (empty string) Backslash can be used to escape chars, like \"Hello\\nGluu\" (line feed), \"Hi\\u0040\" (unicode character) Including double quotes in strings requires unicode escaping, like \"\\u0022\" . Using \"\\\"\" won't work Booleans # Only true or false allowed (notice they are lowercased) Numbers # They are expressed in base 10 only Can be signed or unsigned, with or without decimal: 0 , -1 , 2.0 , 2.3 , -3.000001 , etc. No exponential notation allowed (e.g. 1E-05 ) The following are not valid: .1 , -.1 , +1 . These are their OK equivalents: 0.1 , -0.1 , 1 Null # The \u201cspecial\u201d value null can be used (responsibly) to represent the absence of a value. It is a direct consequence of supporting Java in the DSL. Lists # They are finite sequences. Elements are separated by commas Examples: [ 1, 2, 3 ] , [ \"bah!\", \"humbug\" ] , [ ] (empty list) Elements of a list do not have to be of the same type: [ false, [ 0, 1], \"?\" ] is legal but generally discouraged Commas can be surrounded by any combination of spaces and new lines. This is handy when a list takes up some space. This is legal: [ \"no\", \"such\", \"thing\" , \"as\", \"a\", \"stupid\",\"question\"] Maps # They are in essence associative arrays (a.k.a. dictionaries): unordered collections of key/value pairs Example: { brand: \"Ford\", color: null, model: 1963, overhaulsIn: [ 1979, 1999 ] } . This map keys are brand , color , model , and overhaulsIn In literal notation, keys names must follow the pattern [a-zA-Z]( _ | [a-zA-Z] | [0-9] )* so these are all valid key names: a , Agama , b_a , a0_0 ; on the contrary, _a , 9 , -a , and \"aha\" are invalid key names As with lists, commas can be surrounded by any combination of spaces and new lines Variables # Variable names follow the pattern: [a-zA-Z]( _ | [a-zA-Z] | [0-9] )* camelCase naming is recommended Variables are not declared, just used freely. Variables are always global in a given flow They can be assigned a value using the equal sign. Example: colors = [ \"red\", \"blue\" ] They can be assigned several times in the same flow Accessing and mutating data in variables # Strings # Suppose x is a string. Individual characters can be accessed by zero-based indexes: x[0] , x[1] , etc. and they are themselves considered strings of size 1 x.length returns the string size (number of characters in it). Strings are not modifiable (neither size nor individual characters can be altered) Lists # Suppose x is a list. Elements can be accessed by zero-based indexes: x[0] , x[1] , etc. Elements of a list can be assigned (and re-assigned) using indexes too. Example: x[2] = false x.length returns the list size. This value can be updated in order to shrink or grow a list (e.g. x.length = 10 ). When extending a list beyond its current length, the \u201cgap\u201d created is filled with null values An attempt to access an index position greater than or equal to the list size returns null (most general-purpose languages would raise a runtime error in this situation) Using expressions for indexing is not allowed, like x[person.age] , x[y[0]] Click here to learn more about access in lists Maps # Suppose x is map. Values can be accessed by using \u201cdot notation\u201d Say x = { brand: \"Ford\", color: null, model: 1963, overhaulsIn: [ 1979, 1999 ] } , then x.model evaluates to 1963 , and x.overhaulsIn[1] evaluates to 1999 Setting the color would be like x.color = \"white\" A new key/value pair can be appended too: x.maxSpeed = 90 Access of an unknown property evaluates to null : x.owner If a key name does not follow the pattern [a-zA-Z]( _ | [a-zA-Z] | [0-9] )* an alternative notation must be employed to retrieve or modify the associated value. Click here to learn more Java objects # The following table relates Java types to Agama types. Java values are obtained through Call invocations (this will be visited in section Java interaction ). Java value ( x ) Agama equivalent Notes x is a Java array or implements java.util.List list Changing the list contents (includes updates on x.length) can only be achieved if the Java list is modifiable x implements java.util.Map and keys are of type java.lang.String map Changing the map contents can only be achieved if the Java map is modifiable x is a java.lang.(Double|Float|Long|Integer|Short|Byte) or an equivalent primitive number x is a java.lang.(Double|Float|Long|Integer|Short|Byte) or an equivalent primitive number x is a (non-null) java.lang.Boolean or equivalent primitive boolean x is a java.lang.String string (limited) Neither indexing nor x.length can be used null null Except for maps, the following holds for a value x obtained through a Java Call : If x 's class has getters and/or setters for some fields, they can be called. As an example if age and name are available fields, x.age can be used to get the value of age Likewise, setting a value is possible too: x.name = \"Larry\" (if a suitable setter exists) In general, a no-args method starting with get or is can be invoked. This is useful for instance to get the (Java) class name of your object ( x.class.name ) or determine if a list has no elements ( x.empty ) In real flows developers would like to prefix a variable name with j when its value originates in a java call and does not match any of Agama types. Example: jCustomerDetail . Flow structure # A flow written in Agama consists of a header and one or more statements following. Header basics # A header is declarative by nature. It starts with the Flow keyword followed by the qualified name of the flow, e.g. Flow com.acme.FoodSurvey . A qualified name is a sequence of one or more fragments separated by dot ( . ) where a fragment follows the pattern [a-zA-Z]( _ | [a-zA-Z] | [0-9] )* . By convention, qualified names shall adhere to a reverse Internet domain name notation. In a header, at minimum, a base path literal string must be provided (in an indented block). This sets the relative directory where flow assets will reside: Flow com.acme.FoodSurvey Basepath \"mydir\" Next, flow timeout may be specified. This is the maximum amount of time available the end-user can take to fully complete a flow. For instance: Flow com.acme.FoodSurvey Basepath \"mydir\" Timeout 100 seconds An unsigned integer literal value must be specified after the Timeout keyword, if present. The timeout topic is regarded in Flows lifecycle . The Configs keyword may be used to designate a variable so the flow's properties can be accessed in the code. These properties are part of the flow metadata and are usually provided when the flow is created - whether manually or through an administrative tool. Often, these are used to supply configuration parameters to the flow. As an example, suppose a flow that sends a confirmation e-mail has to be implemented. Properties are a good place to hold the configuration of the outgoing mail server to employ: name, port, authentication credentials, etc. For instance, this is how the configuration properties would be bound to variable conf : Flow com.acme.FoodSurvey Basepath \"mydir\" Timeout 100 seconds Configs conf Inputs # In addition to the above, and optionally too, flows may receive inputs from their callers. Input names can be listed using the Inputs keyword: Flow com.acme.FoodSurvey Basepath \"mydir\" Inputs salutation askGender promptRealName Input names follow the same naming conventions (patterns) of variables and can be treated as such in code. Important Note the difference between properties and inputs. Properties are parameters that callers of the flow should not control or be interested in. On the other hand, inputs are parameters that callers supply explicitly to make the flow exhibit certain behaviors. To learn how callers can pass values to input parameters of a flow check: Subflows , or Authentication request (when the flow is launched directly from a web browser) Flow statements # The statements that make up a flow - body - come after the header and start at column 1, ie. aligned with the Flow keyword: Flow com.acme.FoodSurvey Basepath \"mydir\" Timeout 100 seconds Configs conf Inputs salutation askGender promptRealName x = \"Hi\" y = false ... There are several types of statements: branching, looping, web interaction, etc. They will be regarded in the subsequent sections of this document. Note Agama does not support the concept of subroutines/procedures; this is not needed because functional decomposition is carried out by calling subflows . Logging # To append data to the flows log, use the Log instruction. Examples: Code Message appended Notes Log \"Hi there\" Hi there Log \"Hello\" \"world\" Hello world Log can be passed a variable number of parameters Log \"Hello\" \"world\" 0 false Hello world 0 false Log [1, 2, 3, 4, 5] 1, 2, 3, ...more Lists and maps are not traversed wholly Log \"Hell%% 0 %\" \"o\" \" world\" false Hello world 0 false Placeholders usage Log \"% % % yes\" 1 \"two\" 1 two % yes Log \"3\" \"%\" 0 3 % 0 Log \"@warn Today is Friday %th\" 13 Today is Friday 13th Message logged as warning Log \"@w Today's Armageddon \\u263A\" Today's Armageddon \u263a Message logged as warning By default messages are logged at the INFO level. Valid log levels are: Name shortcut error e warn w info i debug d trace t Conditionals and branching # Keywords When and Otherwise allow to write conditionals. With and , or , is , and is not , logical (boolean) expressions can be built. Examples: car = { brand: \"Ford\", color: null, model: 1963 } When car.color is null car.color = \"pink\" ... Nested conditionals: ... When car.color is \"pink\" When car.brand is \"Ford\" Log \"Weird-looking car\" ... Use of Otherwise : ... When car.color is not null Log \"you have a regular painted car\" ... Otherwise ... Boolean expressions can span several lines: and and or can be at the start or end of a line as long as the whole expression is left-aligned with its corresponding When . Examples: //legal: When day is cloudy When there is hope and there is mercy Log \"let's rock n' roll\" ... When day is cloudy When there is hope and // :D there is mercy or fear is null Log \"let's rock n' roll\" ... //illegal: When day is cloudy When there is hope and // :D there is mercy or fear is null Log \"let's rock n' roll\" ... When day is cloudy When there is hope and // :D there is mercy or fear is null Log \"let's rock n' roll\" ... Notes: Equality is designed to work with null , numbers, strings, and boolean values only. More exactly, a number should only be compared to a number, a string to a string, etc., otherwise the equality test evaluates to false . Comparing a value with itself evaluates to true regardless of type, i.e. car is car , null is null , false is false are all truthy. Comparisons are limited to equality ( is ) or inequality ( is not ). For other forms of comparison you can resort to Java. As expected and has higher priority than or when evaluating expressions. There is no way to group expressions to override the precedence: there are no parenthesis in Agama. Assigning the result of a boolean expression to a variable is not supported. These restrictions are important when writing conditionals. Advanced matching # Agama's Match ... to is a construct similar to C/Java switch . Example: car = ... x = ... y = ... // Assume x and y hold numbers z = [ 3.1416, 2.71828 ] Match car.model to x //Code in this block will be executed if car.model is equal to the value of x ... -y //Here we use minus y ... z[0] ... 1.618 //Literal values can be used too for matching ... null ... Otherwise //optional block //Instructions here are executed if there was no match at all Flow finish # Finish is used to terminate a flow's execution. A flow can finish successfully, failed, or aborted. Examples: Code Meaning Finish true Shorthand for flow finished successfully Finish false Shorthand for failed flow it = { success: true, data: { userId: \"as9233Qz\", ... }} Finish it Flow finished successfully. Some relevant data attached it = { success: false, error: \"User entered a wrong password 3 times\" } Finish it Flow failed. Error description attached Finish \"as9233Qz\" Shorthand for { success: true, data: { userId: \"as9233Qz\" } } it = { nonsense: [ null ] } Finish it.nonsense This causes the flow to crash. Note this is not equivalent to Finish false (which means the flow ended with a negative outcome). Notes: Any statements found after Finish is not reached and thus, not executed If no Finish statement is found in a flow's execution, this will degenerate in flow crash When a flow is finished and was used as subflow (part of the execution of a bigger parent flow), the parent does not terminate. Execution continues at the following instruction that triggered the subflow. More on Trigger later A flow cannot be aborted by itself. This can only be achieved through a parent flow. Learn more about aborted flows here Check the best practices on finishing flows here Web interaction # Web interaction constructs bring the most value to Agama. Developers can express the concepts of \u201dredirect a user to an external site and retrieve any data later provided\u201d or \u201cshow a page and grab user data after interaction\u201d using atomic instructions. RFAC # RFAC (stands for Redirect and Fetch at callback ) abstracts the process of redirecting the user's browser to an external site and then collect the data presented later at a designated callback URL. This feature is useful in inbound identity scenarios (e.g. to support social login). Example Details RFAC \"https://login.twitter.com/?blah..&boo=...\" Redirects to the given location. Once the user browser is taken to the callback URL by the external site (twitter.com), the flow continues ignoring any data included map = { twitter: { loginUrl: \"https://...\", ... }, ... } result = RFAC map.twitter.loginUrl Redirects to the given location. Once the user browser is taken to the callback URL by the external site, the data included in the query string or payload is stored in result (a map) for further processing Agama engine's callback URL is https://<your-server>/jans-auth/fl/callback . This resource is only available for a given browser session while RFAC is in execution. Once the callback is visited or the flow times out (whichever occurs first), subsequent requests will respond with an HTTP 404 error. RRF # RRF (stands for Render-Reply-Fetch ) abstracts the process of rendering a UI template, send the produced markup to the browser and grab user-provided data back at the server side. Example Details RRF \"survey.ftl\" Renders the template survey.ftl (located in this flow's base path) and resulting markup is replied to user's browser. Data submitted by the user is ignored obj = { salutation: \"Hey!\", ... } result = RRF \"survey.ftl\" obj Renders the template survey.ftl by injecting the data passed in obj and the resulting markup is replied to user's browser. Data submitted by the user is stored in variable result : a map whose keys are named according to the form fields present in survey.ftl Notes: The template location must be specified with a string literal only (not a variable). Normally the template must submit a POST to the current URL with the desired data. In HTML terms, it would look like <form method=\"post\" enctype=\"application/x-www-form-urlencoded\">... for instance. Use map variables - not literals - for the second argument of RRF . Objects obtained from Java can be used except collections, arrays, strings, numbers, or boolean values. RRF can be passed a third parameter, that is, RRF templatePath variable boolean . When the boolean value is false , it exhibits the regular two-param behavior. Otherwise (truthy value) the callback URL (see RFAC ) will be available while RRF is in execution. In this case, if the callback is visited, data passed to it will be set as the result of the RRF call unless a POST to the current URL is received first, where behavior will be as usual. Finally, the callback resource is disabled. The three-param variant can be used when: The decision to redirect to an external site can only be done from the browser itself The external site expects to receive an HTTP POST Looping # There are two constructs available for looping in Agama: Repeat and Iterate over . Repeat # Repeat was designed with the concept of attempts/retries in mind: a set of statements are executed, a condition can optionally be supplied in order to abort the loop early, and (optionally too) a block of statements can be executed before the next iteration is started if the condition evaluated to false . A loop is given a maximum number of iterations. Examples: Example Notes month = \"\u2026\" Repeat 3 times max data = RRF \"guess_birthday_month.ftl\" //Quit is optional in loops Quit When data.guess is month A loop that runs 3 iterations at most. A page is shown at every iteration. If the value entered by the user matches that of `month` variable, the loop is aborted earlier x = \u2026 // an integer value month = \"\u2026\" obj = { error: null } Repeat x times max data = RRF \"guess_birthday_month.ftl\" obj Quit When data.guess is month obj.error = \"Wrong! try again\" Similar to previous example This time the max no. of iterations is set using a variable When there is a miss a message error is set (which the UI template may potentially use) x = \u2026 // an integer value month = \"\u2026\" obj = { error: null } y = Repeat x times max data = RRF \"guess_birthday_month.ftl\" obj Quit When data.guess is month obj.error = \"Wrong! try again\" Log \"Attempt number:\" idx[0] Similar to previous example After the loop finishes, variable y will contain the total number of iterations made to completion. This excludes partial iterations aborted by Quit , thus, y < = x Note the usage of implicit variable idx which holds the current (zero-based) iteration number Iterate over # Iterate over is used to traverse the items of a string, list, or the keys of a map. At every iteration, a variable is set with the current item or key name. As with Repeat , a loop may be aborted earlier, an optional block of statements can be specified after Quit , and the total number of iterations can be stored in a variable. Example Notes seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] Iterate over seasons using sn Log \"There is nothing like\" sn A loop running over a simple list. Every element visited is referenced with variable sn human = { weight: 100, height: 5.9, age: 26 } Iterate over human using attribute Log attribute \"is\" human.$attribute Iterates over the keys of the map printing both the key and its associated value. To learn about the .$ notation see [Maps and dot notation](#maps-and-dot-notation) seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] sports = [ \"soccer\", \"golf\", \"tennis\" ] Iterate over seasons using sn Iterate over sports using sport Log \"There is nothing like playing % in %\" sport sn Nested loops seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] sports = [ \"soccer,\" \"golf\", \"tenis\" ] Iterate over seasons using sn y = Iterate over sports using sport Log \"Shall we play % in % ?\" sport sn Quit When sn is \"winter\" Log \"yes!\" Log \"We played % sports in %\" y sn Similar to the previous example. The inner loop is aborted upon a given condition. Note the total number of complete iterations is recorded in y every time the inner loop finishes. seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] sports = [ \"soccer,\" \"golf\", \"tenis\" ] Iterate over seasons using sn Iterate over sports using sport Log idx[0] idx[1] Prints iteration numbers: 0 0, 0 1, 0 2, 1 0, 1 1, 1 2, ... 3 2 The index used in idx is 0 for the outermost loop and increases by one at every level of loop nesting Subflows # A flow can Trigger another flow (a.k.a subflow) and grab its response when Finish ed. This feature materializes flow composition and re-use in Agama. Example Notes Trigger jo.jo.PersonalInfoGathering Starts the flow with qualified name jo.jo.PersonalInfoGathering . Returned data is ignored outcome = Trigger jo.jo.PersonalInfoGathering null false Log \"subflow returned with success?\" outcome.success Starts a flow passing parameters (assuming PersonalInfoGathering receives two inputs). outcome will contain the map used when the subflow ended userPrefs = { otp: \"...\", ... } Match userPrefs.otp to \"e-mail\" flow = \"co.acme.EmailOTP\" \"sms\" flow = \"co.acme.SmsOTP\" Trigger $flow Starts a flow whose qualified name is determined at runtime Input parameters # The values passed after the Trigger keyword are supplied as input parameters in the order declared by the subflow's Inputs . When not enough values are passed, the unassigned inputs will hold a null value. Note list and map literals cannot be passed as arguments to Trigger : Illegal: Trigger subflow { key: [ 1, 2 , 3] } [ \"Yeeha!\" ] Legal: Trigger subflow x car.model list[1] null false -3 \"Sam\" Template overrides # When re-using flows, existing templates may not match the required look-and-feel or layout of the flow that is being built, or may require minor adjustments to fit better the parent's needs. These can be overcome by declaring which templates the developer would like to override for a given subflow call. Example: outcome = Trigger jo.jo.PersonalInfoGathering Override templates \"path/basic.ftl\" \"\" \"path2/dir/detail.ftl\" \"tmp/mydetail.ftl\" Log \"subflow returned with success?\" outcome.success In an indented block using the Override templates keyword, several string literals can be provided. They specify the paths of the (subflows) templates that will be overriden by the parent and the corresponding new paths. In the example above, templates path/basic.ftl and path2/dir/detail.ftl rendered by flow PersonalInfoGathering (or its subflows) won't be picked from these locations but from the base path of the current (parent) flow using names basic.ftl and tmp/mydetail.ftl respectively. Usage of empty string denotes reusing the same file name than the original file. Alternatively, every pair of original vs. overriden path can be specified in a single line for more clarity, like this: outcome = Trigger jo.jo.PersonalInfoGathering Override templates \"path/basic.ftl\" \"\" \"path2/dir/detail.ftl\" \"tmp/mydetail.ftl\" ... To learn more about how paths in template overrides work, see writing UI pages . About recursive invocations # A flow cannot trigger itself. Also, mutual calls (e.g. A triggering B , and B triggering A ) must be avoided at all cost. Java interaction # Note Java language background is required for this section. In Agama, Java or Groovy code can be called by means of the Call instruction. Specifically, public methods from public classes or static methods from public interfaces. Example Notes Call java.lang.Integer#parseInt \"FF\" 16 Invokes the parseInt method of Integer class passing the given arguments (i.e. conversion of hexadecimal string to a primitive int ). The returned value is ignored numbers = [ 2, -2, 0, 3, -3, 4 ] small = Call java.util.Collections#min numbers Invokes the min method of the Collections class. Supplies a list of numbers as argument. The smallest number is stored in variable small jLocale = Call java.util.Locale#getDefault localeName = jLocale.displayName Computes the display name of the JVM default locale car = { brand: \"Ford\", model: 1963 } sidecar = Call java.util.Map#copyOf car Makes a deep clone of a map number | E = Call java.lang.Integer#parseInt \"AGA\" 16 When E is not null Log \"An error occurred:\" E.message Similar to the first example. If an exception is thrown by the invocation, it's caught and assigned to variable E . Note both checked and unchecked exceptions are caught | E = Call com.acme.NotifyExternalSystem //Do something with E //... If exception catching is required when calling a method that returns void , there is no need to put a variable before the pipe p1 = Call java.awt.Point#new p2 = Call java.awt.Point#new 1 3 Call p2 translate -1 1 Creates instances of class java.awt.Point with different constructors. For p1 the no-args constructor is used. Method translate is invoked on the p2 instance. Note usage of a space here instead of hash ( # ) cls1 = Call java.lang.CharSequence#class cls2 = Call java.lang.Integer#class Call cls2 parseInt \"FF\" 16 Stores in cls1 a reference to interface class CharSequence.class . Stores in cls2 a reference to Integer.class . The 3rd line statement achieves the same effect of Call java.lang.Integer#parseInt \"FF\" 16 L = [ \"A\", \"B\", \"C\" ] S = Call java.util.Set#of 0 2 4 6 map = { numbers: S, letters: L } hasOne = Call map.numbers contains 1 Calls the contains method of the java.util.Set object stored in map.numbers passing 1 as argument and storing the result in hasOne The usage of a hash sign (or spaces) before a method name helps disambiguate whether the invocation is on a static class method or an object method. This is so because an expression like hey.You may reference the class You on package hey , or the value of key You in a map named hey . Highlights # Any method that meets the conditions above (public or interface static) and that is reachable in the JVM classpath can be called; developers are not restricted solely to java.* packages. When using Call , the method to execute is picked based on the name (e.g. after the # sign) and the number of arguments supplied. If a class/interface exhibits several methods with the same name and arity (number of parameters), there is no way to know which of the available variants will be called. The java.util.Arrays class has several methods of this kind for instance. Once a concrete method is picked, a best effort is made to convert (if required) the values passed as arguments so that they match the expected parameter types in the method signature. If a conversion fails, this will degenerate in an IllegalArgumentException . Limitations: list and map literals cannot be passed as arguments to method calls directly. This means the following is illegal: Call co.Utils#myMethod { key: [ 1, 2 , 3] } [ \"Yeeha!\" ] . To achieve the same effect assign the literal value to a variable and pass that instead Call ing a method that mutates one or more of the arguments passed will not work properly if the corresponding parameters in the method signature have type information attached. For example, copying a list into another using java.util.Collections#copy\u200b(List<? super T> dest, List<? extends T> src) may not behave as expected. Conversely, calling java.lang.reflect.Array#set\u200b(Object array, int index, Object value) works fine because array does not have a parameterized type. The practice of mutating passed arguments is unusual and sometimes discouraged in programming Exception handling # As seen in the examples Agama can deal with Java exceptions, however, this feature should be used sparingly. When exception handling is really required, create wrapper methods in Java to do it instead of delegating that to the DSL. OOP prose warning # Java support adds the ability to execute pieces of business logic required to build up a flow. These \u201cpieces of logic\u201d match well to Java methods, however situations like this must be avoided: x = \u2026 // A java object obtained in some way y = \u2026 // A java object obtained in some way Call x methodA arg1 arg2 \u2026 Call x methodB arg1 arg2 arg3 \u2026 z = Call y methodC \u2026 Call x methodD \u2026 z \u2026 If all those calls represent a meaningful unit of work they should be abstracted out and grouped into a single method invocation which should be thoroughly implemented in Java. Note Agama should not be used to do object-oriented programming but to make a clear, concise representation of a flow. As a rule of thumb, let Java do the heavy work; this is wiser, safer, and faster. Advanced and special cases in variable manipulation # Indexing in lists # Accessing/modifying list elements requires providing a numeric index between the brackets, e.g. x[ 0 ] . Note variables can also be used for indexing, like x[ y ] where y is a positive integer or zero. For the below table, assume x = [ \"one\", \"two\", \"three\" ] . x[1] //\"two\" y = 1 x[y] //\"two\" x[\"1\"] //illegal x[ z[0] ] //illegal: variable expressions not allowed for indexes x[obj.property] //illegal: variable expressions not allowed for indexes Maps and dot notation # The regular \u201cdot\u201d notation is limited in the sense it is fairly static: developers have to have prior knowledge about the keys' names, in other words, about the structure of maps and nested submaps, like in person.homeAddress.postalCode . Also, there might be cases where a key name does not fit the required pattern, like in person.street-address or persona.direcci\u00f3n ; even worse, there might be cases where the actual key is only known at runtime. There are ways to overcome this: Example Notes x.\"- wow!\" Access the value associated to the key named -wow! prop = ... x.$prop Access the value associated to the key whose name is contained in the variable prop (that holds a string value). Note actual value of prop may be originated from a Java call or another form of computation propA = ... propB = ... x.$propA.c.\"d\".$propB A mix of notations is valid. For example, if x= { a: { b: 0, c: { c: true, d: { e: null, f: \"hello\" } } } } , propA is equal to \"a\" , and propB to \"f\" , the expression on the left evaluates \"hello\" Usage of .$ requires to supply a variable after the dollar sign: grouped variable expressions are not supported. Thus, it is not possible to achieve something like x.a.c.($map.mykey).f in order to obtain \"hello\" if map = { mykey: \"d\" } . Indexing in maps # For convenience, when a key name \u201clooks like\u201d a positive integer (or zero), e.g. \"2\" , \"10\" , etc., numeric values can directly be used to get/set data in a map: x = { } x.\"1\" = \"golf\" x[1] //retrieves \"golf\" x[2] = \"polo\" //adds the key/value pair \"2\" / \"polo\" Language keywords # The following is a list of reserved words and as such, cannot be used as variable names or maps keys (in literal notation). Keyword Purpose/usage Basepath header declaration Call Java interaction Configs header declaration Finish termination Flow header declaration Inputs header declaration Iterate over loops Log logging Match conditionals Otherwise conditionals Override templates web interaction Quit conditionals and loops Repeat loops RFAC web interaction RRF web interaction seconds header declaration times max loops to conditionals Timeout header declaration Trigger subflow calls using loops When conditionals Operator and is is not or Special literals true false null","title":"DSL Reference"},{"location":"admin/developer/agama/dsl-full/#agama-dsl-reference","text":"This document surveys the different constructs of the Agama domain-specific language.","title":"Agama DSL reference"},{"location":"admin/developer/agama/dsl-full/#code-comments","text":"There is support for single line comments only (no block comments). Use // to start a comment. Comments can start anywhere in a line.","title":"Code comments"},{"location":"admin/developer/agama/dsl-full/#data-types","text":"In practice, values would fit into any of: string , boolean , number , list or map . Since Java methods can be invoked (more on this later), returned values might not match up exactly with these categories, however this is not too relevant because there is no strict type enforcement in Agama.","title":"Data types"},{"location":"admin/developer/agama/dsl-full/#literals","text":"","title":"Literals"},{"location":"admin/developer/agama/dsl-full/#strings","text":"They are surrounded by double quotes. Examples: \"Agama\" , \"blah\" , \"\" (empty string) Backslash can be used to escape chars, like \"Hello\\nGluu\" (line feed), \"Hi\\u0040\" (unicode character) Including double quotes in strings requires unicode escaping, like \"\\u0022\" . Using \"\\\"\" won't work","title":"Strings"},{"location":"admin/developer/agama/dsl-full/#booleans","text":"Only true or false allowed (notice they are lowercased)","title":"Booleans"},{"location":"admin/developer/agama/dsl-full/#numbers","text":"They are expressed in base 10 only Can be signed or unsigned, with or without decimal: 0 , -1 , 2.0 , 2.3 , -3.000001 , etc. No exponential notation allowed (e.g. 1E-05 ) The following are not valid: .1 , -.1 , +1 . These are their OK equivalents: 0.1 , -0.1 , 1","title":"Numbers"},{"location":"admin/developer/agama/dsl-full/#null","text":"The \u201cspecial\u201d value null can be used (responsibly) to represent the absence of a value. It is a direct consequence of supporting Java in the DSL.","title":"Null"},{"location":"admin/developer/agama/dsl-full/#lists","text":"They are finite sequences. Elements are separated by commas Examples: [ 1, 2, 3 ] , [ \"bah!\", \"humbug\" ] , [ ] (empty list) Elements of a list do not have to be of the same type: [ false, [ 0, 1], \"?\" ] is legal but generally discouraged Commas can be surrounded by any combination of spaces and new lines. This is handy when a list takes up some space. This is legal: [ \"no\", \"such\", \"thing\" , \"as\", \"a\", \"stupid\",\"question\"]","title":"Lists"},{"location":"admin/developer/agama/dsl-full/#maps","text":"They are in essence associative arrays (a.k.a. dictionaries): unordered collections of key/value pairs Example: { brand: \"Ford\", color: null, model: 1963, overhaulsIn: [ 1979, 1999 ] } . This map keys are brand , color , model , and overhaulsIn In literal notation, keys names must follow the pattern [a-zA-Z]( _ | [a-zA-Z] | [0-9] )* so these are all valid key names: a , Agama , b_a , a0_0 ; on the contrary, _a , 9 , -a , and \"aha\" are invalid key names As with lists, commas can be surrounded by any combination of spaces and new lines","title":"Maps"},{"location":"admin/developer/agama/dsl-full/#variables","text":"Variable names follow the pattern: [a-zA-Z]( _ | [a-zA-Z] | [0-9] )* camelCase naming is recommended Variables are not declared, just used freely. Variables are always global in a given flow They can be assigned a value using the equal sign. Example: colors = [ \"red\", \"blue\" ] They can be assigned several times in the same flow","title":"Variables"},{"location":"admin/developer/agama/dsl-full/#accessing-and-mutating-data-in-variables","text":"","title":"Accessing and mutating data in variables"},{"location":"admin/developer/agama/dsl-full/#strings_1","text":"Suppose x is a string. Individual characters can be accessed by zero-based indexes: x[0] , x[1] , etc. and they are themselves considered strings of size 1 x.length returns the string size (number of characters in it). Strings are not modifiable (neither size nor individual characters can be altered)","title":"Strings"},{"location":"admin/developer/agama/dsl-full/#lists_1","text":"Suppose x is a list. Elements can be accessed by zero-based indexes: x[0] , x[1] , etc. Elements of a list can be assigned (and re-assigned) using indexes too. Example: x[2] = false x.length returns the list size. This value can be updated in order to shrink or grow a list (e.g. x.length = 10 ). When extending a list beyond its current length, the \u201cgap\u201d created is filled with null values An attempt to access an index position greater than or equal to the list size returns null (most general-purpose languages would raise a runtime error in this situation) Using expressions for indexing is not allowed, like x[person.age] , x[y[0]] Click here to learn more about access in lists","title":"Lists"},{"location":"admin/developer/agama/dsl-full/#maps_1","text":"Suppose x is map. Values can be accessed by using \u201cdot notation\u201d Say x = { brand: \"Ford\", color: null, model: 1963, overhaulsIn: [ 1979, 1999 ] } , then x.model evaluates to 1963 , and x.overhaulsIn[1] evaluates to 1999 Setting the color would be like x.color = \"white\" A new key/value pair can be appended too: x.maxSpeed = 90 Access of an unknown property evaluates to null : x.owner If a key name does not follow the pattern [a-zA-Z]( _ | [a-zA-Z] | [0-9] )* an alternative notation must be employed to retrieve or modify the associated value. Click here to learn more","title":"Maps"},{"location":"admin/developer/agama/dsl-full/#java-objects","text":"The following table relates Java types to Agama types. Java values are obtained through Call invocations (this will be visited in section Java interaction ). Java value ( x ) Agama equivalent Notes x is a Java array or implements java.util.List list Changing the list contents (includes updates on x.length) can only be achieved if the Java list is modifiable x implements java.util.Map and keys are of type java.lang.String map Changing the map contents can only be achieved if the Java map is modifiable x is a java.lang.(Double|Float|Long|Integer|Short|Byte) or an equivalent primitive number x is a java.lang.(Double|Float|Long|Integer|Short|Byte) or an equivalent primitive number x is a (non-null) java.lang.Boolean or equivalent primitive boolean x is a java.lang.String string (limited) Neither indexing nor x.length can be used null null Except for maps, the following holds for a value x obtained through a Java Call : If x 's class has getters and/or setters for some fields, they can be called. As an example if age and name are available fields, x.age can be used to get the value of age Likewise, setting a value is possible too: x.name = \"Larry\" (if a suitable setter exists) In general, a no-args method starting with get or is can be invoked. This is useful for instance to get the (Java) class name of your object ( x.class.name ) or determine if a list has no elements ( x.empty ) In real flows developers would like to prefix a variable name with j when its value originates in a java call and does not match any of Agama types. Example: jCustomerDetail .","title":"Java objects"},{"location":"admin/developer/agama/dsl-full/#flow-structure","text":"A flow written in Agama consists of a header and one or more statements following.","title":"Flow structure"},{"location":"admin/developer/agama/dsl-full/#header-basics","text":"A header is declarative by nature. It starts with the Flow keyword followed by the qualified name of the flow, e.g. Flow com.acme.FoodSurvey . A qualified name is a sequence of one or more fragments separated by dot ( . ) where a fragment follows the pattern [a-zA-Z]( _ | [a-zA-Z] | [0-9] )* . By convention, qualified names shall adhere to a reverse Internet domain name notation. In a header, at minimum, a base path literal string must be provided (in an indented block). This sets the relative directory where flow assets will reside: Flow com.acme.FoodSurvey Basepath \"mydir\" Next, flow timeout may be specified. This is the maximum amount of time available the end-user can take to fully complete a flow. For instance: Flow com.acme.FoodSurvey Basepath \"mydir\" Timeout 100 seconds An unsigned integer literal value must be specified after the Timeout keyword, if present. The timeout topic is regarded in Flows lifecycle . The Configs keyword may be used to designate a variable so the flow's properties can be accessed in the code. These properties are part of the flow metadata and are usually provided when the flow is created - whether manually or through an administrative tool. Often, these are used to supply configuration parameters to the flow. As an example, suppose a flow that sends a confirmation e-mail has to be implemented. Properties are a good place to hold the configuration of the outgoing mail server to employ: name, port, authentication credentials, etc. For instance, this is how the configuration properties would be bound to variable conf : Flow com.acme.FoodSurvey Basepath \"mydir\" Timeout 100 seconds Configs conf","title":"Header basics"},{"location":"admin/developer/agama/dsl-full/#inputs","text":"In addition to the above, and optionally too, flows may receive inputs from their callers. Input names can be listed using the Inputs keyword: Flow com.acme.FoodSurvey Basepath \"mydir\" Inputs salutation askGender promptRealName Input names follow the same naming conventions (patterns) of variables and can be treated as such in code. Important Note the difference between properties and inputs. Properties are parameters that callers of the flow should not control or be interested in. On the other hand, inputs are parameters that callers supply explicitly to make the flow exhibit certain behaviors. To learn how callers can pass values to input parameters of a flow check: Subflows , or Authentication request (when the flow is launched directly from a web browser)","title":"Inputs"},{"location":"admin/developer/agama/dsl-full/#flow-statements","text":"The statements that make up a flow - body - come after the header and start at column 1, ie. aligned with the Flow keyword: Flow com.acme.FoodSurvey Basepath \"mydir\" Timeout 100 seconds Configs conf Inputs salutation askGender promptRealName x = \"Hi\" y = false ... There are several types of statements: branching, looping, web interaction, etc. They will be regarded in the subsequent sections of this document. Note Agama does not support the concept of subroutines/procedures; this is not needed because functional decomposition is carried out by calling subflows .","title":"Flow statements"},{"location":"admin/developer/agama/dsl-full/#logging","text":"To append data to the flows log, use the Log instruction. Examples: Code Message appended Notes Log \"Hi there\" Hi there Log \"Hello\" \"world\" Hello world Log can be passed a variable number of parameters Log \"Hello\" \"world\" 0 false Hello world 0 false Log [1, 2, 3, 4, 5] 1, 2, 3, ...more Lists and maps are not traversed wholly Log \"Hell%% 0 %\" \"o\" \" world\" false Hello world 0 false Placeholders usage Log \"% % % yes\" 1 \"two\" 1 two % yes Log \"3\" \"%\" 0 3 % 0 Log \"@warn Today is Friday %th\" 13 Today is Friday 13th Message logged as warning Log \"@w Today's Armageddon \\u263A\" Today's Armageddon \u263a Message logged as warning By default messages are logged at the INFO level. Valid log levels are: Name shortcut error e warn w info i debug d trace t","title":"Logging"},{"location":"admin/developer/agama/dsl-full/#conditionals-and-branching","text":"Keywords When and Otherwise allow to write conditionals. With and , or , is , and is not , logical (boolean) expressions can be built. Examples: car = { brand: \"Ford\", color: null, model: 1963 } When car.color is null car.color = \"pink\" ... Nested conditionals: ... When car.color is \"pink\" When car.brand is \"Ford\" Log \"Weird-looking car\" ... Use of Otherwise : ... When car.color is not null Log \"you have a regular painted car\" ... Otherwise ... Boolean expressions can span several lines: and and or can be at the start or end of a line as long as the whole expression is left-aligned with its corresponding When . Examples: //legal: When day is cloudy When there is hope and there is mercy Log \"let's rock n' roll\" ... When day is cloudy When there is hope and // :D there is mercy or fear is null Log \"let's rock n' roll\" ... //illegal: When day is cloudy When there is hope and // :D there is mercy or fear is null Log \"let's rock n' roll\" ... When day is cloudy When there is hope and // :D there is mercy or fear is null Log \"let's rock n' roll\" ... Notes: Equality is designed to work with null , numbers, strings, and boolean values only. More exactly, a number should only be compared to a number, a string to a string, etc., otherwise the equality test evaluates to false . Comparing a value with itself evaluates to true regardless of type, i.e. car is car , null is null , false is false are all truthy. Comparisons are limited to equality ( is ) or inequality ( is not ). For other forms of comparison you can resort to Java. As expected and has higher priority than or when evaluating expressions. There is no way to group expressions to override the precedence: there are no parenthesis in Agama. Assigning the result of a boolean expression to a variable is not supported. These restrictions are important when writing conditionals.","title":"Conditionals and branching"},{"location":"admin/developer/agama/dsl-full/#advanced-matching","text":"Agama's Match ... to is a construct similar to C/Java switch . Example: car = ... x = ... y = ... // Assume x and y hold numbers z = [ 3.1416, 2.71828 ] Match car.model to x //Code in this block will be executed if car.model is equal to the value of x ... -y //Here we use minus y ... z[0] ... 1.618 //Literal values can be used too for matching ... null ... Otherwise //optional block //Instructions here are executed if there was no match at all","title":"Advanced matching"},{"location":"admin/developer/agama/dsl-full/#flow-finish","text":"Finish is used to terminate a flow's execution. A flow can finish successfully, failed, or aborted. Examples: Code Meaning Finish true Shorthand for flow finished successfully Finish false Shorthand for failed flow it = { success: true, data: { userId: \"as9233Qz\", ... }} Finish it Flow finished successfully. Some relevant data attached it = { success: false, error: \"User entered a wrong password 3 times\" } Finish it Flow failed. Error description attached Finish \"as9233Qz\" Shorthand for { success: true, data: { userId: \"as9233Qz\" } } it = { nonsense: [ null ] } Finish it.nonsense This causes the flow to crash. Note this is not equivalent to Finish false (which means the flow ended with a negative outcome). Notes: Any statements found after Finish is not reached and thus, not executed If no Finish statement is found in a flow's execution, this will degenerate in flow crash When a flow is finished and was used as subflow (part of the execution of a bigger parent flow), the parent does not terminate. Execution continues at the following instruction that triggered the subflow. More on Trigger later A flow cannot be aborted by itself. This can only be achieved through a parent flow. Learn more about aborted flows here Check the best practices on finishing flows here","title":"Flow finish"},{"location":"admin/developer/agama/dsl-full/#web-interaction","text":"Web interaction constructs bring the most value to Agama. Developers can express the concepts of \u201dredirect a user to an external site and retrieve any data later provided\u201d or \u201cshow a page and grab user data after interaction\u201d using atomic instructions.","title":"Web interaction"},{"location":"admin/developer/agama/dsl-full/#rfac","text":"RFAC (stands for Redirect and Fetch at callback ) abstracts the process of redirecting the user's browser to an external site and then collect the data presented later at a designated callback URL. This feature is useful in inbound identity scenarios (e.g. to support social login). Example Details RFAC \"https://login.twitter.com/?blah..&boo=...\" Redirects to the given location. Once the user browser is taken to the callback URL by the external site (twitter.com), the flow continues ignoring any data included map = { twitter: { loginUrl: \"https://...\", ... }, ... } result = RFAC map.twitter.loginUrl Redirects to the given location. Once the user browser is taken to the callback URL by the external site, the data included in the query string or payload is stored in result (a map) for further processing Agama engine's callback URL is https://<your-server>/jans-auth/fl/callback . This resource is only available for a given browser session while RFAC is in execution. Once the callback is visited or the flow times out (whichever occurs first), subsequent requests will respond with an HTTP 404 error.","title":"RFAC"},{"location":"admin/developer/agama/dsl-full/#rrf","text":"RRF (stands for Render-Reply-Fetch ) abstracts the process of rendering a UI template, send the produced markup to the browser and grab user-provided data back at the server side. Example Details RRF \"survey.ftl\" Renders the template survey.ftl (located in this flow's base path) and resulting markup is replied to user's browser. Data submitted by the user is ignored obj = { salutation: \"Hey!\", ... } result = RRF \"survey.ftl\" obj Renders the template survey.ftl by injecting the data passed in obj and the resulting markup is replied to user's browser. Data submitted by the user is stored in variable result : a map whose keys are named according to the form fields present in survey.ftl Notes: The template location must be specified with a string literal only (not a variable). Normally the template must submit a POST to the current URL with the desired data. In HTML terms, it would look like <form method=\"post\" enctype=\"application/x-www-form-urlencoded\">... for instance. Use map variables - not literals - for the second argument of RRF . Objects obtained from Java can be used except collections, arrays, strings, numbers, or boolean values. RRF can be passed a third parameter, that is, RRF templatePath variable boolean . When the boolean value is false , it exhibits the regular two-param behavior. Otherwise (truthy value) the callback URL (see RFAC ) will be available while RRF is in execution. In this case, if the callback is visited, data passed to it will be set as the result of the RRF call unless a POST to the current URL is received first, where behavior will be as usual. Finally, the callback resource is disabled. The three-param variant can be used when: The decision to redirect to an external site can only be done from the browser itself The external site expects to receive an HTTP POST","title":"RRF"},{"location":"admin/developer/agama/dsl-full/#looping","text":"There are two constructs available for looping in Agama: Repeat and Iterate over .","title":"Looping"},{"location":"admin/developer/agama/dsl-full/#repeat","text":"Repeat was designed with the concept of attempts/retries in mind: a set of statements are executed, a condition can optionally be supplied in order to abort the loop early, and (optionally too) a block of statements can be executed before the next iteration is started if the condition evaluated to false . A loop is given a maximum number of iterations. Examples: Example Notes month = \"\u2026\" Repeat 3 times max data = RRF \"guess_birthday_month.ftl\" //Quit is optional in loops Quit When data.guess is month A loop that runs 3 iterations at most. A page is shown at every iteration. If the value entered by the user matches that of `month` variable, the loop is aborted earlier x = \u2026 // an integer value month = \"\u2026\" obj = { error: null } Repeat x times max data = RRF \"guess_birthday_month.ftl\" obj Quit When data.guess is month obj.error = \"Wrong! try again\" Similar to previous example This time the max no. of iterations is set using a variable When there is a miss a message error is set (which the UI template may potentially use) x = \u2026 // an integer value month = \"\u2026\" obj = { error: null } y = Repeat x times max data = RRF \"guess_birthday_month.ftl\" obj Quit When data.guess is month obj.error = \"Wrong! try again\" Log \"Attempt number:\" idx[0] Similar to previous example After the loop finishes, variable y will contain the total number of iterations made to completion. This excludes partial iterations aborted by Quit , thus, y < = x Note the usage of implicit variable idx which holds the current (zero-based) iteration number","title":"Repeat"},{"location":"admin/developer/agama/dsl-full/#iterate-over","text":"Iterate over is used to traverse the items of a string, list, or the keys of a map. At every iteration, a variable is set with the current item or key name. As with Repeat , a loop may be aborted earlier, an optional block of statements can be specified after Quit , and the total number of iterations can be stored in a variable. Example Notes seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] Iterate over seasons using sn Log \"There is nothing like\" sn A loop running over a simple list. Every element visited is referenced with variable sn human = { weight: 100, height: 5.9, age: 26 } Iterate over human using attribute Log attribute \"is\" human.$attribute Iterates over the keys of the map printing both the key and its associated value. To learn about the .$ notation see [Maps and dot notation](#maps-and-dot-notation) seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] sports = [ \"soccer\", \"golf\", \"tennis\" ] Iterate over seasons using sn Iterate over sports using sport Log \"There is nothing like playing % in %\" sport sn Nested loops seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] sports = [ \"soccer,\" \"golf\", \"tenis\" ] Iterate over seasons using sn y = Iterate over sports using sport Log \"Shall we play % in % ?\" sport sn Quit When sn is \"winter\" Log \"yes!\" Log \"We played % sports in %\" y sn Similar to the previous example. The inner loop is aborted upon a given condition. Note the total number of complete iterations is recorded in y every time the inner loop finishes. seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] sports = [ \"soccer,\" \"golf\", \"tenis\" ] Iterate over seasons using sn Iterate over sports using sport Log idx[0] idx[1] Prints iteration numbers: 0 0, 0 1, 0 2, 1 0, 1 1, 1 2, ... 3 2 The index used in idx is 0 for the outermost loop and increases by one at every level of loop nesting","title":"Iterate over"},{"location":"admin/developer/agama/dsl-full/#subflows","text":"A flow can Trigger another flow (a.k.a subflow) and grab its response when Finish ed. This feature materializes flow composition and re-use in Agama. Example Notes Trigger jo.jo.PersonalInfoGathering Starts the flow with qualified name jo.jo.PersonalInfoGathering . Returned data is ignored outcome = Trigger jo.jo.PersonalInfoGathering null false Log \"subflow returned with success?\" outcome.success Starts a flow passing parameters (assuming PersonalInfoGathering receives two inputs). outcome will contain the map used when the subflow ended userPrefs = { otp: \"...\", ... } Match userPrefs.otp to \"e-mail\" flow = \"co.acme.EmailOTP\" \"sms\" flow = \"co.acme.SmsOTP\" Trigger $flow Starts a flow whose qualified name is determined at runtime","title":"Subflows"},{"location":"admin/developer/agama/dsl-full/#input-parameters","text":"The values passed after the Trigger keyword are supplied as input parameters in the order declared by the subflow's Inputs . When not enough values are passed, the unassigned inputs will hold a null value. Note list and map literals cannot be passed as arguments to Trigger : Illegal: Trigger subflow { key: [ 1, 2 , 3] } [ \"Yeeha!\" ] Legal: Trigger subflow x car.model list[1] null false -3 \"Sam\"","title":"Input parameters"},{"location":"admin/developer/agama/dsl-full/#template-overrides","text":"When re-using flows, existing templates may not match the required look-and-feel or layout of the flow that is being built, or may require minor adjustments to fit better the parent's needs. These can be overcome by declaring which templates the developer would like to override for a given subflow call. Example: outcome = Trigger jo.jo.PersonalInfoGathering Override templates \"path/basic.ftl\" \"\" \"path2/dir/detail.ftl\" \"tmp/mydetail.ftl\" Log \"subflow returned with success?\" outcome.success In an indented block using the Override templates keyword, several string literals can be provided. They specify the paths of the (subflows) templates that will be overriden by the parent and the corresponding new paths. In the example above, templates path/basic.ftl and path2/dir/detail.ftl rendered by flow PersonalInfoGathering (or its subflows) won't be picked from these locations but from the base path of the current (parent) flow using names basic.ftl and tmp/mydetail.ftl respectively. Usage of empty string denotes reusing the same file name than the original file. Alternatively, every pair of original vs. overriden path can be specified in a single line for more clarity, like this: outcome = Trigger jo.jo.PersonalInfoGathering Override templates \"path/basic.ftl\" \"\" \"path2/dir/detail.ftl\" \"tmp/mydetail.ftl\" ... To learn more about how paths in template overrides work, see writing UI pages .","title":"Template overrides"},{"location":"admin/developer/agama/dsl-full/#about-recursive-invocations","text":"A flow cannot trigger itself. Also, mutual calls (e.g. A triggering B , and B triggering A ) must be avoided at all cost.","title":"About recursive invocations"},{"location":"admin/developer/agama/dsl-full/#java-interaction","text":"Note Java language background is required for this section. In Agama, Java or Groovy code can be called by means of the Call instruction. Specifically, public methods from public classes or static methods from public interfaces. Example Notes Call java.lang.Integer#parseInt \"FF\" 16 Invokes the parseInt method of Integer class passing the given arguments (i.e. conversion of hexadecimal string to a primitive int ). The returned value is ignored numbers = [ 2, -2, 0, 3, -3, 4 ] small = Call java.util.Collections#min numbers Invokes the min method of the Collections class. Supplies a list of numbers as argument. The smallest number is stored in variable small jLocale = Call java.util.Locale#getDefault localeName = jLocale.displayName Computes the display name of the JVM default locale car = { brand: \"Ford\", model: 1963 } sidecar = Call java.util.Map#copyOf car Makes a deep clone of a map number | E = Call java.lang.Integer#parseInt \"AGA\" 16 When E is not null Log \"An error occurred:\" E.message Similar to the first example. If an exception is thrown by the invocation, it's caught and assigned to variable E . Note both checked and unchecked exceptions are caught | E = Call com.acme.NotifyExternalSystem //Do something with E //... If exception catching is required when calling a method that returns void , there is no need to put a variable before the pipe p1 = Call java.awt.Point#new p2 = Call java.awt.Point#new 1 3 Call p2 translate -1 1 Creates instances of class java.awt.Point with different constructors. For p1 the no-args constructor is used. Method translate is invoked on the p2 instance. Note usage of a space here instead of hash ( # ) cls1 = Call java.lang.CharSequence#class cls2 = Call java.lang.Integer#class Call cls2 parseInt \"FF\" 16 Stores in cls1 a reference to interface class CharSequence.class . Stores in cls2 a reference to Integer.class . The 3rd line statement achieves the same effect of Call java.lang.Integer#parseInt \"FF\" 16 L = [ \"A\", \"B\", \"C\" ] S = Call java.util.Set#of 0 2 4 6 map = { numbers: S, letters: L } hasOne = Call map.numbers contains 1 Calls the contains method of the java.util.Set object stored in map.numbers passing 1 as argument and storing the result in hasOne The usage of a hash sign (or spaces) before a method name helps disambiguate whether the invocation is on a static class method or an object method. This is so because an expression like hey.You may reference the class You on package hey , or the value of key You in a map named hey .","title":"Java interaction"},{"location":"admin/developer/agama/dsl-full/#highlights","text":"Any method that meets the conditions above (public or interface static) and that is reachable in the JVM classpath can be called; developers are not restricted solely to java.* packages. When using Call , the method to execute is picked based on the name (e.g. after the # sign) and the number of arguments supplied. If a class/interface exhibits several methods with the same name and arity (number of parameters), there is no way to know which of the available variants will be called. The java.util.Arrays class has several methods of this kind for instance. Once a concrete method is picked, a best effort is made to convert (if required) the values passed as arguments so that they match the expected parameter types in the method signature. If a conversion fails, this will degenerate in an IllegalArgumentException . Limitations: list and map literals cannot be passed as arguments to method calls directly. This means the following is illegal: Call co.Utils#myMethod { key: [ 1, 2 , 3] } [ \"Yeeha!\" ] . To achieve the same effect assign the literal value to a variable and pass that instead Call ing a method that mutates one or more of the arguments passed will not work properly if the corresponding parameters in the method signature have type information attached. For example, copying a list into another using java.util.Collections#copy\u200b(List<? super T> dest, List<? extends T> src) may not behave as expected. Conversely, calling java.lang.reflect.Array#set\u200b(Object array, int index, Object value) works fine because array does not have a parameterized type. The practice of mutating passed arguments is unusual and sometimes discouraged in programming","title":"Highlights"},{"location":"admin/developer/agama/dsl-full/#exception-handling","text":"As seen in the examples Agama can deal with Java exceptions, however, this feature should be used sparingly. When exception handling is really required, create wrapper methods in Java to do it instead of delegating that to the DSL.","title":"Exception handling"},{"location":"admin/developer/agama/dsl-full/#oop-prose-warning","text":"Java support adds the ability to execute pieces of business logic required to build up a flow. These \u201cpieces of logic\u201d match well to Java methods, however situations like this must be avoided: x = \u2026 // A java object obtained in some way y = \u2026 // A java object obtained in some way Call x methodA arg1 arg2 \u2026 Call x methodB arg1 arg2 arg3 \u2026 z = Call y methodC \u2026 Call x methodD \u2026 z \u2026 If all those calls represent a meaningful unit of work they should be abstracted out and grouped into a single method invocation which should be thoroughly implemented in Java. Note Agama should not be used to do object-oriented programming but to make a clear, concise representation of a flow. As a rule of thumb, let Java do the heavy work; this is wiser, safer, and faster.","title":"OOP prose warning"},{"location":"admin/developer/agama/dsl-full/#advanced-and-special-cases-in-variable-manipulation","text":"","title":"Advanced and special cases in variable manipulation"},{"location":"admin/developer/agama/dsl-full/#indexing-in-lists","text":"Accessing/modifying list elements requires providing a numeric index between the brackets, e.g. x[ 0 ] . Note variables can also be used for indexing, like x[ y ] where y is a positive integer or zero. For the below table, assume x = [ \"one\", \"two\", \"three\" ] . x[1] //\"two\" y = 1 x[y] //\"two\" x[\"1\"] //illegal x[ z[0] ] //illegal: variable expressions not allowed for indexes x[obj.property] //illegal: variable expressions not allowed for indexes","title":"Indexing in lists"},{"location":"admin/developer/agama/dsl-full/#maps-and-dot-notation","text":"The regular \u201cdot\u201d notation is limited in the sense it is fairly static: developers have to have prior knowledge about the keys' names, in other words, about the structure of maps and nested submaps, like in person.homeAddress.postalCode . Also, there might be cases where a key name does not fit the required pattern, like in person.street-address or persona.direcci\u00f3n ; even worse, there might be cases where the actual key is only known at runtime. There are ways to overcome this: Example Notes x.\"- wow!\" Access the value associated to the key named -wow! prop = ... x.$prop Access the value associated to the key whose name is contained in the variable prop (that holds a string value). Note actual value of prop may be originated from a Java call or another form of computation propA = ... propB = ... x.$propA.c.\"d\".$propB A mix of notations is valid. For example, if x= { a: { b: 0, c: { c: true, d: { e: null, f: \"hello\" } } } } , propA is equal to \"a\" , and propB to \"f\" , the expression on the left evaluates \"hello\" Usage of .$ requires to supply a variable after the dollar sign: grouped variable expressions are not supported. Thus, it is not possible to achieve something like x.a.c.($map.mykey).f in order to obtain \"hello\" if map = { mykey: \"d\" } .","title":"Maps and dot notation"},{"location":"admin/developer/agama/dsl-full/#indexing-in-maps","text":"For convenience, when a key name \u201clooks like\u201d a positive integer (or zero), e.g. \"2\" , \"10\" , etc., numeric values can directly be used to get/set data in a map: x = { } x.\"1\" = \"golf\" x[1] //retrieves \"golf\" x[2] = \"polo\" //adds the key/value pair \"2\" / \"polo\"","title":"Indexing in maps"},{"location":"admin/developer/agama/dsl-full/#language-keywords","text":"The following is a list of reserved words and as such, cannot be used as variable names or maps keys (in literal notation). Keyword Purpose/usage Basepath header declaration Call Java interaction Configs header declaration Finish termination Flow header declaration Inputs header declaration Iterate over loops Log logging Match conditionals Otherwise conditionals Override templates web interaction Quit conditionals and loops Repeat loops RFAC web interaction RRF web interaction seconds header declaration times max loops to conditionals Timeout header declaration Trigger subflow calls using loops When conditionals Operator and is is not or Special literals true false null","title":"Language keywords"},{"location":"admin/developer/agama/dsl/","tags":["administration","developer","agama"],"text":"Agama DSL # Note This document presents a view of the most relevant aspects and constructs of the language. The Full reference provides a more detailed insight on the different DSL elements. Introduction # Agama flows are written using a small DSL (domain specific language) designed purposedly for writing web flows. Some remarkable features of the DSL include: It helps depicting the structure of web flows in a natural way It is closer to human language than general-purpose programming languages It has a clean, concise, non-distracting syntax It has by design limited computational power forcing computations to occur in a more formal, general-purpose language like Java Intrinsic properties to highlight: It follows the imperative paradigm mainly, and makes use of a few declarative elements Execution takes place in a traditional sequential manner Flows can be treated as functions (reusable routines with well-defined inputs) It has no special constructs focused on authentication semantics: a flow simply finishes with a positive or negative result (plus optional extra data), however It provides dedicated contructs for common patterns in web flows like: \"show a page\" and \"retrieve the data user provided in that page\" \"redirect a user to an external site\" and later \"retrieve the data provided at the callback url\" It supports typical language elements like assignments, conditionals, loops, etc. Important In the process of flow writing, the DSL should be mainly used to structure a flow and collect user data while delegating more intensive tasks like querying databases, invoking web services, and so on, to Java. Language compiler # Agama is not a compiled language. Code is transpiled to an intermediate representation which is then interpreted at runtime. Developers don't need to issue special commands for transpilation to occur. This is automatically executed in the background by the engine some seconds after a flow has been added or modified. The process of checking and fixing potential syntax errors is described here . Syntactic features # Agama is case sensitive, e.g. X and x are two different things With a few exceptions, instructions always have to be written in a single line There are no parenthesis or semicolons Nesting of blocks takes place by using indented blocks Single line comments are supported. Use // to start a comment anywhere in a given line Data types, literals and variables # Agama is a dynamically typed language. Data types are not explicit in code and variables are not declared, just used. Type checks occur at runtime. Values fit into any of: string , boolean , number , list or map . Also, the \"special\" value null can be used to represent the absence of a value. The table below presents examples of literals: Type Valid literals Invalid literals string \"Agama\"; \"\"; \"Hello\\nGluu\" (line feed usage) \"\"\" boolean true; false True; yes; FALSE number 0.1; -0.1; 1; 1000; 255 .1; -.1; +1; 1e+03; 0xFF list []; [1, 2, 3]; [1, [2, 3]]; [\"Agama\", false] [1..3]; [1..] map {}; { Color: \"blue\" }, { a: { a_b: [\"foo\"] } } { _a: 2 }; { 2: 2 }; See the full reference to learn more about literals. A variable is global in the flow where it is being used. Examples of valid variable names are: x , mom , Yes , A_ha , B52 . The following are invalid: 4 , \"red\" , _oh , A-ha . Variables can be assigned a value several times in the same flow. Examples of valid assignments: x = 0 , mom = \"love\" , Yes = true , A_ha = [ 2.718, 3.141 ] , B52 = { rock: \"lobster\" } Depending on the data type of a variable, its underlying value(s) can be accessed or modified in a variety of ways. As shown in the table bellow Agama feels pretty natural: Sample assignment Access/Mutation example Result x = \"Hi\" x[0] \"H\" x = \"Hi\" x.length 2 x = \"Hi\" x[1] = \"o\" Strings are immutable x = [1, 2, 3] x[1] 2 x = [1, 2, 3] x[3] null x = [1, 2, 3] x[0] = \"zero\" [\"zero\", 2, 3] x = [1, 2, 3] x.length = 5 [\"zero\", 2, 3, null, null] x = { a: true } x.a true x = { a: true } x.b null x = { a: true } x.c = false { a: true, c: false } A variable whose value is the product of a Java call can be accessed and manipulated as described here . See the full reference to learn more about accessing and mutating data in variables. Flow structure # A flow consists of a header and one or more statements following. The header starts with the Flow keyword followed by the qualified name of the flow, e.g. Flow com.acme.FoodSurvey . Next, in an indented block several aspects can be provided (in this specific order): The base directory to use for this flow's assets Flow timeout A variable to hold flow configurations Variables to receive flow inputs Except for the base directory, all of these are optional. The following is an example of a flow header, where the folder mydir should hold the assets of the flow (more info on assets here ). The flow may receive three parameters: salutation , askGender , and promptRealName from their callers (when used as subflow ) or from the authentication request when the flow is launched directly from a web browser. Flow com.acme.FoodSurvey Basepath \"mydir\" Inputs salutation askGender promptRealName The statements that make up the flow (body) come after the header and start at column 1, ie. aligned with the Flow keyword: Flow com.acme.FoodSurvey Basepath \"mydir\" Inputs salutation askGender promptRealName x = \"Hi\" y = false ... See the full reference to learn more about flow structure. Logging # With the Log instruction data can be sent to the flows log. Check the logging page for more details. Some illustrative examples follow: Code Message appended Notes Log \"Hi there\" Hi there Log \"Hello\" \"world\" 0 false Hello world 0 false Log can be passed a variable number of parameters Log [1, 2, 3, 4, 5] 1, 2, 3, ...more Lists and maps are not traversed wholly Log \"Hell%% 0 %\" \"o\" \" world\" false Hello world 0 false Placeholders usage Log \"@warn Today is Friday %th\" 13 Today is Friday 13th Message logged as warning By default messages are logged at the INFO level. This can be customized as in the last row. Conditionals and branching # When and Otherwise allow to write conditionals. With and , or , is and is not , logical (boolean) expressions can be built. Examples: car = { brand: \"Ford\", color: null, model: 1963 } When car.color is null car.color = \"pink\" ... Nested conditionals: ... When car.color is \"pink\" When car.brand is \"Ford\" Log \"Weird-looking car\" ... Use of Otherwise : ... When car.color is not null Log \"you have a regular painted car\" ... Otherwise ... Notes: Equality is designed to work with null , numbers, strings, and boolean values only. More exactly, a number should only be compared to a number, a string to a string, etc., otherwise the equality test evaluates to false. Comparisons are limited to equality ( is ) or inequality ( is not ). For other forms of comparison you can resort to Java. Agama also has Match ... to , a construct similar to C/Java switch . See the full reference to learn more about conditionals and branching. Flow finish # Finish is used to terminate a flow's execution. In general, a flow can finish successfully or failed. Examples: Code Meaning it = { success: true, data: { userId: \"as9233Qz\", ... }} Finish it Flow finished successfully. Some relevant data attached it = { success: false, error: \"User entered a wrong password 3 times\" } Finish it Flow failed. Error description attached Finish \"as9233Qz\" Shorthand for { success: true, data: { userId: \"as9233Qz\" } } See the full reference to learn more about flows termination. Web interaction # RFAC # The RFAC (Redirect and Fetch at callback) instruction abstracts the process of redirecting the user's browser to an external site and collect the data presented later at a designated callback URL. Important Agama engine's callback URL is https://<your-server>/jans-auth/fl/callback . Example: result = RFAC \"https://login.twitter.com/?blah..&boo=...\" This redirects to the given URL. Once the user browser is taken to the callback by the external site (e.g. twitter.com), the data included in the query string or payload is stored in result (a map ) for further processing. See the full reference to learn more. RRF # The RRF (Render-Reply-Fetch) instruction expresses the concept of \"show a page and grab user data after interaction\". It takes the path to a template and injects a value into it. The produced ( R endered) markup is sent ( R eplied) to the browser and finally, the result of the interaction of the user with the page can be retrieved ( F etched). Example Details RRF \"survey.ftl\" Renders the template survey.ftl (located in this flow's base path) and resulting markup is replied to user's browser. Data submitted by the user is ignored obj = { salutation: \"Hey!\", ... } result = RRF \"survey.ftl\" obj Renders the template survey.ftl by injecting the data passed in obj and the resulting markup is replied to user's browser. Data submitted by the user is stored in variable result : a map whose keys are named according to the form fields present in survey.ftl Notes: The template location must be specified with a string literal only (not variables) RRF has more capabilities. See the full reference to learn more. Looping # Repeat # Repeat was designed with the concept of attempts/retries in mind: a set of statements are executed, a condition can optionally be supplied in order to abort the loop early, and (optionally too) a block of statements can be executed before the next iteration is started if the condition evaluated to false . Example: x = ... // an integer value month = \"...\" obj = { error: null } y = Repeat x times max data = RRF \"guess_birthday_month.ftl\" obj Quit When data.guess is month obj.error = \"Wrong! try again\" This loop runs x iterations at most. At every iteration the template guess_birthday_month.ftl is RRF'ed. If the value provided at the browser matches that of month variable the loop is aborted earlier, otherwise an error message is set - and template may potentially use it. After the loop finishes, variable y will contain the total number of iterations made to completion. This excludes partial iterations aborted by Quit . Notes: - Quit and the statements following are optional - The variable assignment before the Repeat keyword is optional - See the full reference to learn more about Repeat Iterate over # Iterate over is used to traverse the items of a string, list, or the keys of a map. At every iteration, a variable is set with the current item or key name. As with Repeat , a loop may be aborted earlier, an optional block of statements can be specified after Quit , and the total number of iterations can be stored in a variable. Example: seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] sports = [ \"soccer,\" \"golf\", \"tenis\" ] Iterate over seasons using sn y = Iterate over sports using sport Log \"Shall we play % in % ?\" sport sn Quit When sn is \"winter\" Log \"yes!\" Log \"We played % sports in %\" y sn The above features loop nesting. The outer loop iterates over seasons list and the inner one over sports . The variables sn and sport hold the current visited element. The inner loop is aborted upon a given condition. The total number of complete iterations is recorded in y every time the inner loop finishes. See the full reference to learn more about Iterate over . Subflows # A flow can Trigger another flow (a.k.a subflow) and grab its response when Finish ed. This feature materializes flow composition and re-use in Agama. Example: outcome = Trigger jo.jo.PersonalInfoGathering null false Log \"subflow returned with success?\" outcome.success The above starts the flow identified by jo.jo.PersonalInfoGathering passing the given parameters (assuming it receives two inputs). When done, outcome will reference the map that was employed to Finish the subflow, in other words, its response. See the full reference to learn more about Trigger . Java interaction # Agama interfaces seemlessly with Java or Groovy by means of the Call instruction. Recall the DSL is designed to force developers use Java when the task at hand cannot be implemented by simple data manipulation or comparison of values. This way a flow written in Agama DSL serves fundamentally as a depiction of the flow itself, hiding most of the internal details and low-level computations. See the full reference to learn more about Call .","title":"DSL Guide"},{"location":"admin/developer/agama/dsl/#agama-dsl","text":"Note This document presents a view of the most relevant aspects and constructs of the language. The Full reference provides a more detailed insight on the different DSL elements.","title":"Agama DSL"},{"location":"admin/developer/agama/dsl/#introduction","text":"Agama flows are written using a small DSL (domain specific language) designed purposedly for writing web flows. Some remarkable features of the DSL include: It helps depicting the structure of web flows in a natural way It is closer to human language than general-purpose programming languages It has a clean, concise, non-distracting syntax It has by design limited computational power forcing computations to occur in a more formal, general-purpose language like Java Intrinsic properties to highlight: It follows the imperative paradigm mainly, and makes use of a few declarative elements Execution takes place in a traditional sequential manner Flows can be treated as functions (reusable routines with well-defined inputs) It has no special constructs focused on authentication semantics: a flow simply finishes with a positive or negative result (plus optional extra data), however It provides dedicated contructs for common patterns in web flows like: \"show a page\" and \"retrieve the data user provided in that page\" \"redirect a user to an external site\" and later \"retrieve the data provided at the callback url\" It supports typical language elements like assignments, conditionals, loops, etc. Important In the process of flow writing, the DSL should be mainly used to structure a flow and collect user data while delegating more intensive tasks like querying databases, invoking web services, and so on, to Java.","title":"Introduction"},{"location":"admin/developer/agama/dsl/#language-compiler","text":"Agama is not a compiled language. Code is transpiled to an intermediate representation which is then interpreted at runtime. Developers don't need to issue special commands for transpilation to occur. This is automatically executed in the background by the engine some seconds after a flow has been added or modified. The process of checking and fixing potential syntax errors is described here .","title":"Language compiler"},{"location":"admin/developer/agama/dsl/#syntactic-features","text":"Agama is case sensitive, e.g. X and x are two different things With a few exceptions, instructions always have to be written in a single line There are no parenthesis or semicolons Nesting of blocks takes place by using indented blocks Single line comments are supported. Use // to start a comment anywhere in a given line","title":"Syntactic features"},{"location":"admin/developer/agama/dsl/#data-types-literals-and-variables","text":"Agama is a dynamically typed language. Data types are not explicit in code and variables are not declared, just used. Type checks occur at runtime. Values fit into any of: string , boolean , number , list or map . Also, the \"special\" value null can be used to represent the absence of a value. The table below presents examples of literals: Type Valid literals Invalid literals string \"Agama\"; \"\"; \"Hello\\nGluu\" (line feed usage) \"\"\" boolean true; false True; yes; FALSE number 0.1; -0.1; 1; 1000; 255 .1; -.1; +1; 1e+03; 0xFF list []; [1, 2, 3]; [1, [2, 3]]; [\"Agama\", false] [1..3]; [1..] map {}; { Color: \"blue\" }, { a: { a_b: [\"foo\"] } } { _a: 2 }; { 2: 2 }; See the full reference to learn more about literals. A variable is global in the flow where it is being used. Examples of valid variable names are: x , mom , Yes , A_ha , B52 . The following are invalid: 4 , \"red\" , _oh , A-ha . Variables can be assigned a value several times in the same flow. Examples of valid assignments: x = 0 , mom = \"love\" , Yes = true , A_ha = [ 2.718, 3.141 ] , B52 = { rock: \"lobster\" } Depending on the data type of a variable, its underlying value(s) can be accessed or modified in a variety of ways. As shown in the table bellow Agama feels pretty natural: Sample assignment Access/Mutation example Result x = \"Hi\" x[0] \"H\" x = \"Hi\" x.length 2 x = \"Hi\" x[1] = \"o\" Strings are immutable x = [1, 2, 3] x[1] 2 x = [1, 2, 3] x[3] null x = [1, 2, 3] x[0] = \"zero\" [\"zero\", 2, 3] x = [1, 2, 3] x.length = 5 [\"zero\", 2, 3, null, null] x = { a: true } x.a true x = { a: true } x.b null x = { a: true } x.c = false { a: true, c: false } A variable whose value is the product of a Java call can be accessed and manipulated as described here . See the full reference to learn more about accessing and mutating data in variables.","title":"Data types, literals and variables"},{"location":"admin/developer/agama/dsl/#flow-structure","text":"A flow consists of a header and one or more statements following. The header starts with the Flow keyword followed by the qualified name of the flow, e.g. Flow com.acme.FoodSurvey . Next, in an indented block several aspects can be provided (in this specific order): The base directory to use for this flow's assets Flow timeout A variable to hold flow configurations Variables to receive flow inputs Except for the base directory, all of these are optional. The following is an example of a flow header, where the folder mydir should hold the assets of the flow (more info on assets here ). The flow may receive three parameters: salutation , askGender , and promptRealName from their callers (when used as subflow ) or from the authentication request when the flow is launched directly from a web browser. Flow com.acme.FoodSurvey Basepath \"mydir\" Inputs salutation askGender promptRealName The statements that make up the flow (body) come after the header and start at column 1, ie. aligned with the Flow keyword: Flow com.acme.FoodSurvey Basepath \"mydir\" Inputs salutation askGender promptRealName x = \"Hi\" y = false ... See the full reference to learn more about flow structure.","title":"Flow structure"},{"location":"admin/developer/agama/dsl/#logging","text":"With the Log instruction data can be sent to the flows log. Check the logging page for more details. Some illustrative examples follow: Code Message appended Notes Log \"Hi there\" Hi there Log \"Hello\" \"world\" 0 false Hello world 0 false Log can be passed a variable number of parameters Log [1, 2, 3, 4, 5] 1, 2, 3, ...more Lists and maps are not traversed wholly Log \"Hell%% 0 %\" \"o\" \" world\" false Hello world 0 false Placeholders usage Log \"@warn Today is Friday %th\" 13 Today is Friday 13th Message logged as warning By default messages are logged at the INFO level. This can be customized as in the last row.","title":"Logging"},{"location":"admin/developer/agama/dsl/#conditionals-and-branching","text":"When and Otherwise allow to write conditionals. With and , or , is and is not , logical (boolean) expressions can be built. Examples: car = { brand: \"Ford\", color: null, model: 1963 } When car.color is null car.color = \"pink\" ... Nested conditionals: ... When car.color is \"pink\" When car.brand is \"Ford\" Log \"Weird-looking car\" ... Use of Otherwise : ... When car.color is not null Log \"you have a regular painted car\" ... Otherwise ... Notes: Equality is designed to work with null , numbers, strings, and boolean values only. More exactly, a number should only be compared to a number, a string to a string, etc., otherwise the equality test evaluates to false. Comparisons are limited to equality ( is ) or inequality ( is not ). For other forms of comparison you can resort to Java. Agama also has Match ... to , a construct similar to C/Java switch . See the full reference to learn more about conditionals and branching.","title":"Conditionals and branching"},{"location":"admin/developer/agama/dsl/#flow-finish","text":"Finish is used to terminate a flow's execution. In general, a flow can finish successfully or failed. Examples: Code Meaning it = { success: true, data: { userId: \"as9233Qz\", ... }} Finish it Flow finished successfully. Some relevant data attached it = { success: false, error: \"User entered a wrong password 3 times\" } Finish it Flow failed. Error description attached Finish \"as9233Qz\" Shorthand for { success: true, data: { userId: \"as9233Qz\" } } See the full reference to learn more about flows termination.","title":"Flow finish"},{"location":"admin/developer/agama/dsl/#web-interaction","text":"","title":"Web interaction"},{"location":"admin/developer/agama/dsl/#rfac","text":"The RFAC (Redirect and Fetch at callback) instruction abstracts the process of redirecting the user's browser to an external site and collect the data presented later at a designated callback URL. Important Agama engine's callback URL is https://<your-server>/jans-auth/fl/callback . Example: result = RFAC \"https://login.twitter.com/?blah..&boo=...\" This redirects to the given URL. Once the user browser is taken to the callback by the external site (e.g. twitter.com), the data included in the query string or payload is stored in result (a map ) for further processing. See the full reference to learn more.","title":"RFAC"},{"location":"admin/developer/agama/dsl/#rrf","text":"The RRF (Render-Reply-Fetch) instruction expresses the concept of \"show a page and grab user data after interaction\". It takes the path to a template and injects a value into it. The produced ( R endered) markup is sent ( R eplied) to the browser and finally, the result of the interaction of the user with the page can be retrieved ( F etched). Example Details RRF \"survey.ftl\" Renders the template survey.ftl (located in this flow's base path) and resulting markup is replied to user's browser. Data submitted by the user is ignored obj = { salutation: \"Hey!\", ... } result = RRF \"survey.ftl\" obj Renders the template survey.ftl by injecting the data passed in obj and the resulting markup is replied to user's browser. Data submitted by the user is stored in variable result : a map whose keys are named according to the form fields present in survey.ftl Notes: The template location must be specified with a string literal only (not variables) RRF has more capabilities. See the full reference to learn more.","title":"RRF"},{"location":"admin/developer/agama/dsl/#looping","text":"","title":"Looping"},{"location":"admin/developer/agama/dsl/#repeat","text":"Repeat was designed with the concept of attempts/retries in mind: a set of statements are executed, a condition can optionally be supplied in order to abort the loop early, and (optionally too) a block of statements can be executed before the next iteration is started if the condition evaluated to false . Example: x = ... // an integer value month = \"...\" obj = { error: null } y = Repeat x times max data = RRF \"guess_birthday_month.ftl\" obj Quit When data.guess is month obj.error = \"Wrong! try again\" This loop runs x iterations at most. At every iteration the template guess_birthday_month.ftl is RRF'ed. If the value provided at the browser matches that of month variable the loop is aborted earlier, otherwise an error message is set - and template may potentially use it. After the loop finishes, variable y will contain the total number of iterations made to completion. This excludes partial iterations aborted by Quit . Notes: - Quit and the statements following are optional - The variable assignment before the Repeat keyword is optional - See the full reference to learn more about Repeat","title":"Repeat"},{"location":"admin/developer/agama/dsl/#iterate-over","text":"Iterate over is used to traverse the items of a string, list, or the keys of a map. At every iteration, a variable is set with the current item or key name. As with Repeat , a loop may be aborted earlier, an optional block of statements can be specified after Quit , and the total number of iterations can be stored in a variable. Example: seasons = [ \"spring\", \"winter\", \"fall\", \"summer\" ] sports = [ \"soccer,\" \"golf\", \"tenis\" ] Iterate over seasons using sn y = Iterate over sports using sport Log \"Shall we play % in % ?\" sport sn Quit When sn is \"winter\" Log \"yes!\" Log \"We played % sports in %\" y sn The above features loop nesting. The outer loop iterates over seasons list and the inner one over sports . The variables sn and sport hold the current visited element. The inner loop is aborted upon a given condition. The total number of complete iterations is recorded in y every time the inner loop finishes. See the full reference to learn more about Iterate over .","title":"Iterate over"},{"location":"admin/developer/agama/dsl/#subflows","text":"A flow can Trigger another flow (a.k.a subflow) and grab its response when Finish ed. This feature materializes flow composition and re-use in Agama. Example: outcome = Trigger jo.jo.PersonalInfoGathering null false Log \"subflow returned with success?\" outcome.success The above starts the flow identified by jo.jo.PersonalInfoGathering passing the given parameters (assuming it receives two inputs). When done, outcome will reference the map that was employed to Finish the subflow, in other words, its response. See the full reference to learn more about Trigger .","title":"Subflows"},{"location":"admin/developer/agama/dsl/#java-interaction","text":"Agama interfaces seemlessly with Java or Groovy by means of the Call instruction. Recall the DSL is designed to force developers use Java when the task at hand cannot be implemented by simple data manipulation or comparison of values. This way a flow written in Agama DSL serves fundamentally as a depiction of the flow itself, hiding most of the internal details and low-level computations. See the full reference to learn more about Call .","title":"Java interaction"},{"location":"admin/developer/agama/engine-config/","tags":["administration","developer","agama"],"text":"Agama engine configuration # The engine is a piece of software in charge of parsing flows written in Agama DSL and put them into action. Some aspects of the engine are configurable and this is integral part of the general authentication server's JSON configuration. To learn how to perform changes in the server's configuration click here . The properties of Agama engine configuration are described in the following: enabled : A boolean value that specifies if the engine is enabled. Default value is false templatesPath : A path relative to /opt/jans/jetty/jans-auth/server/agama that servers as the root of Agama flow pages. Default value is /ftl scriptsPath : A path relative to /opt/jans/jetty/jans-auth/server/agama that servers as the root of the hierarchy of (Java/Groovy) classes added on the fly. Default value is /scripts serializerType : A low-level property related to continuations serialization. Set this to null if your flows present crashes due to issues with Java serialization. Default value is KRYO maxItemsLoggedInCollections : When a list or map is logged in a flow, only the first few items are included in the output. You can use this property to increase that limit. Default value is 3 pageMismatchErrorPage : A path relative to /opt/jans/jetty/jans-auth/server/agama containing the location of the page shown when an unexpected URL is requested while a flow is in course. Default value is mismatch.ftlh interruptionErrorPage : A path relative to /opt/jans/jetty/jans-auth/server/agama containing the location of the page shown when a user exceeds the amount of time allowed to take a flow to completion. Note that in order to preserve resources, the engine holds references to unfinished flows only for a small period of time (usually less than two minutes). Once the reference is lost, the error page regarded here won't be shown but pageMismatchErrorPage . Default value is timeout.ftlh crashErrorPage : A path relative to /opt/jans/jetty/jans-auth/server/agama containing the location of the page shown when an error has occured while running the flow. It contains a brief description of the problem for troubleshooting. Default value is crash.ftlh finishedFlowPage : A path relative to /opt/jans/jetty/jans-auth/server/agama containing the location of the page shown when a flow has finished (whether successfully or not) in the phase handled exclusively by the engine (see Stage 2 here ). This page features an auto-submitting form that users don't notice in practice. This page will rarely need modifications. Default value is finished.ftlh bridgeScriptPage : This is a facelets (JSF) page the bridge uses (see Stage 1 here ). This page resides in the authentication server WAR file and will rarely need modifications. Default value is agama.xhtml","title":"Engine Configuration"},{"location":"admin/developer/agama/engine-config/#agama-engine-configuration","text":"The engine is a piece of software in charge of parsing flows written in Agama DSL and put them into action. Some aspects of the engine are configurable and this is integral part of the general authentication server's JSON configuration. To learn how to perform changes in the server's configuration click here . The properties of Agama engine configuration are described in the following: enabled : A boolean value that specifies if the engine is enabled. Default value is false templatesPath : A path relative to /opt/jans/jetty/jans-auth/server/agama that servers as the root of Agama flow pages. Default value is /ftl scriptsPath : A path relative to /opt/jans/jetty/jans-auth/server/agama that servers as the root of the hierarchy of (Java/Groovy) classes added on the fly. Default value is /scripts serializerType : A low-level property related to continuations serialization. Set this to null if your flows present crashes due to issues with Java serialization. Default value is KRYO maxItemsLoggedInCollections : When a list or map is logged in a flow, only the first few items are included in the output. You can use this property to increase that limit. Default value is 3 pageMismatchErrorPage : A path relative to /opt/jans/jetty/jans-auth/server/agama containing the location of the page shown when an unexpected URL is requested while a flow is in course. Default value is mismatch.ftlh interruptionErrorPage : A path relative to /opt/jans/jetty/jans-auth/server/agama containing the location of the page shown when a user exceeds the amount of time allowed to take a flow to completion. Note that in order to preserve resources, the engine holds references to unfinished flows only for a small period of time (usually less than two minutes). Once the reference is lost, the error page regarded here won't be shown but pageMismatchErrorPage . Default value is timeout.ftlh crashErrorPage : A path relative to /opt/jans/jetty/jans-auth/server/agama containing the location of the page shown when an error has occured while running the flow. It contains a brief description of the problem for troubleshooting. Default value is crash.ftlh finishedFlowPage : A path relative to /opt/jans/jetty/jans-auth/server/agama containing the location of the page shown when a flow has finished (whether successfully or not) in the phase handled exclusively by the engine (see Stage 2 here ). This page features an auto-submitting form that users don't notice in practice. This page will rarely need modifications. Default value is finished.ftlh bridgeScriptPage : This is a facelets (JSF) page the bridge uses (see Stage 1 here ). This page resides in the authentication server WAR file and will rarely need modifications. Default value is agama.xhtml","title":"Agama engine configuration"},{"location":"admin/developer/agama/faq/","tags":["administration","developer","agama"],"text":"Frequently asked questions # Common errors # Source code of flow ... has errors # Details here . Source code of flow ... has not been parsed yet # This may happen when a flow is launched right after its creation and transpilation has not occurred yet. Try again in the next few seconds. Unable to find a constructor with arity ... in class ... # A Java invocation of the form Call package.className#new ... is passing a number of parameters that does not match any of the existing constructors for that class. Unable to find a method called ... with arity ... in class ... # A java invocation is attempting to call a method that is not part of the given class or the number of parameters passed for the method is not correct. No Finish instruction was reached # This occurs when no Finish statement has been found in the execution of a flow and there are no remaining instructions. Serialization errors # Agama engine saves the state of a flow (see continuations here ) every time an RRF or RFAC instruction is reached. For this purpose the KRYO library is employed. If kryo is unable to serialize a variable in use by your flow, a serialization error will appear in the screen or in the logs. Normally the problematic (Java) class is logged and this helps reveal the variable that is causing the issue. Note variables that hold \"native\" Agama values like strings or maps are never troublesome; the problems may originate from values obtained via Call . To fix a serialization problem, try some of the following: Check if the value held by the variable is needed for RRF/RFAC or some upcoming statement. If that's not the case, simply set it to null before RRF/RFAC occurs Adjust the given class so it is \"serialization\" friendlier. With kryo, classes are not required to implement the java.io.Serializable interface Find a replacement for the problematic class As a last resort, set serializerType property of the engine to null . Note this will switch to standard Java serialization. This setting applies globally for all your flows Classes added on the fly # A class does not \"see\" other classes in its own package # This is a limitation of the scripting engine. Here, classes have to be imported even if they belong to the same package, or the fully qualified name used. How to append data to a flow's log directly? # Call method log of class io.jans.agama.engine.script.LogUtils . This method receives a variable number of arguments as DSL's Log does. Thus you can do LogUtils.log(\"@w Today is Friday %th\", 13) , as in the logging examples . What Groovy and Java versions are supported? # Groovy 4.0 and Java 11. The runtime is Amazon Corretto 11. Templates # How to implement localization? # Store all messages that your templates may show in the jans-auth resource bundle. This can be done by creating files named jans-auth_xx.properties or jans-auth_xx_YY.properties in /opt/jans/jetty/jans-auth/custom/i18n . As an example, use jans-auth_ja.properties to hold the messages translated to Japanese, or jans-auth_de_CH.properties for German localized to Switzerland. The syntax of these files adhere to that of Java properties files. The suffixes xx and YY are driven by RFC 4647 and RFC 5646. Agama engine will pick the messages from the bundle that best matches the language settings of the end-user browser. Normally, this is supplied through the HTTP header Accept-Language . A file with no suffix, i.e. jans-auth.properties is used as fallback when a message cannot be found in specific language/country combination. To learn how to reference a message in a template, visit this page. How to modify the built-in error pages? # Agama features some error pages out-of-the-box. They can be customized by editing the corresponding files referenced in the configuration doc page. Is Javascript supported? # Yes, the template engine is not concerned about the kind of contents linked in markup. It does not even care if your markup makes any sense. For FreeMarker, templates just produce a textual output. A flow page is not rendered as HTML, the browser just shows the source code as text # This is due to lack of proper Content-Type response header. This occurs if your template has filename extension other than ftlh . If you don't want to rename your template, insert <#ftl output_format=\"HTML\"> at the beginning of the file. How to produce JSON instead of HTML? # In your templates use <#ftl output_format=\"JSON\"> in the first line. Take a look at the templates whose name start with json_ in folder /opt/jans/jetty/jans-auth/agama . Particularly check how JSON content can be escaped - unfortunately FreeMarker does not support escaping for JSON out-of-the-box. Development tools # Are there any IDE or editor plugins available for coding flows? # Not yet unfortunately. We plan to offer tools in the future to ease the development process. How to debug flows? # We plan to offer a debugger in the future. In the meantime, you can do printf -like debugging using the Log instruction. See Agama logging . About Agama engine # Does it support AJAX? # If you require a flow with no page refreshes, it could be implemented using AJAX calls as long as they align to the POST-REDIRECT-GET pattern, where a form is submitted, and as response a 302/303 HTTP redirection is obtained. Your Javascript code must also render UI elements in accordance with the data obtained by following the redirect (GET). Also, care must be taken in order to process server errors, timeouts, etc. In general, this requires a considerable amount of effort. If you require AJAX to consume a resource (service) residing in the same domain of your server, there is no restriction - the engine is not involved. Interaction with external domains may require to setup CORS configuration appropriately in the authentication server. I want/need to understand the internals, where to start? # The quick start guide is a must, followed by A closer look to Hello world flow . In the end a complete sweep over all the docs is needed. Miscellaneous # Does flow execution timeout? # Yes. The maximum amount of time an end-user can take to fully complete a flow is driven by the configuration of the authentication server and can be constrained even more in the flow itself. Read about timeouts here . How to prevent launching a flow directly from the browser? # Disable the flow. It will still be callable from other flows. Updates in a flow's code are not reflected in its execution # Ensure the engine is enabled . Use the REST API (PUT method) to update the flow's code. Wait one minute and then retrieve (GET) this flow's data. The property codeError in the response should have the cause. Why are the contents of a list or map logged partially? # This is to avoid traversing big structures fully. You can increase the value of maxItemsLoggedInCollections in the engine configuration . How to add two numbers or compare numeric values in Agama? # Agama only provides operators for boolean comparison in conditional statements. The structure of an authentication flow will rarely have to deal with computations/comparisons of numbers, strings, etc. In case this is needed, developers have to resort to Java. How to concatenate strings in Agama? # See the previous answer. A two-lines solution could be: strings = [ s1, s2, ... ] Call java.lang.String#join \"\" strings How to know the index of a given loop iteration? # See the examples in the Looping section of the DSL full reference . Can Agama code be called from Java? # No. These two languages are supposed to play roles that should not be mixed, check here and here .","title":"FAQ"},{"location":"admin/developer/agama/faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"admin/developer/agama/faq/#common-errors","text":"","title":"Common errors"},{"location":"admin/developer/agama/faq/#source-code-of-flow-has-errors","text":"Details here .","title":"Source code of flow ... has errors"},{"location":"admin/developer/agama/faq/#source-code-of-flow-has-not-been-parsed-yet","text":"This may happen when a flow is launched right after its creation and transpilation has not occurred yet. Try again in the next few seconds.","title":"Source code of flow ... has not been parsed yet"},{"location":"admin/developer/agama/faq/#unable-to-find-a-constructor-with-arity-in-class","text":"A Java invocation of the form Call package.className#new ... is passing a number of parameters that does not match any of the existing constructors for that class.","title":"Unable to find a constructor with arity ... in class ..."},{"location":"admin/developer/agama/faq/#unable-to-find-a-method-called-with-arity-in-class","text":"A java invocation is attempting to call a method that is not part of the given class or the number of parameters passed for the method is not correct.","title":"Unable to find a method called ... with arity ... in class ..."},{"location":"admin/developer/agama/faq/#no-finish-instruction-was-reached","text":"This occurs when no Finish statement has been found in the execution of a flow and there are no remaining instructions.","title":"No Finish instruction was reached"},{"location":"admin/developer/agama/faq/#serialization-errors","text":"Agama engine saves the state of a flow (see continuations here ) every time an RRF or RFAC instruction is reached. For this purpose the KRYO library is employed. If kryo is unable to serialize a variable in use by your flow, a serialization error will appear in the screen or in the logs. Normally the problematic (Java) class is logged and this helps reveal the variable that is causing the issue. Note variables that hold \"native\" Agama values like strings or maps are never troublesome; the problems may originate from values obtained via Call . To fix a serialization problem, try some of the following: Check if the value held by the variable is needed for RRF/RFAC or some upcoming statement. If that's not the case, simply set it to null before RRF/RFAC occurs Adjust the given class so it is \"serialization\" friendlier. With kryo, classes are not required to implement the java.io.Serializable interface Find a replacement for the problematic class As a last resort, set serializerType property of the engine to null . Note this will switch to standard Java serialization. This setting applies globally for all your flows","title":"Serialization errors"},{"location":"admin/developer/agama/faq/#classes-added-on-the-fly","text":"","title":"Classes added on the fly"},{"location":"admin/developer/agama/faq/#a-class-does-not-see-other-classes-in-its-own-package","text":"This is a limitation of the scripting engine. Here, classes have to be imported even if they belong to the same package, or the fully qualified name used.","title":"A class does not \"see\" other classes in its own package"},{"location":"admin/developer/agama/faq/#how-to-append-data-to-a-flows-log-directly","text":"Call method log of class io.jans.agama.engine.script.LogUtils . This method receives a variable number of arguments as DSL's Log does. Thus you can do LogUtils.log(\"@w Today is Friday %th\", 13) , as in the logging examples .","title":"How to append data to a flow's log directly?"},{"location":"admin/developer/agama/faq/#what-groovy-and-java-versions-are-supported","text":"Groovy 4.0 and Java 11. The runtime is Amazon Corretto 11.","title":"What Groovy and Java versions are supported?"},{"location":"admin/developer/agama/faq/#templates","text":"","title":"Templates"},{"location":"admin/developer/agama/faq/#how-to-implement-localization","text":"Store all messages that your templates may show in the jans-auth resource bundle. This can be done by creating files named jans-auth_xx.properties or jans-auth_xx_YY.properties in /opt/jans/jetty/jans-auth/custom/i18n . As an example, use jans-auth_ja.properties to hold the messages translated to Japanese, or jans-auth_de_CH.properties for German localized to Switzerland. The syntax of these files adhere to that of Java properties files. The suffixes xx and YY are driven by RFC 4647 and RFC 5646. Agama engine will pick the messages from the bundle that best matches the language settings of the end-user browser. Normally, this is supplied through the HTTP header Accept-Language . A file with no suffix, i.e. jans-auth.properties is used as fallback when a message cannot be found in specific language/country combination. To learn how to reference a message in a template, visit this page.","title":"How to implement localization?"},{"location":"admin/developer/agama/faq/#how-to-modify-the-built-in-error-pages","text":"Agama features some error pages out-of-the-box. They can be customized by editing the corresponding files referenced in the configuration doc page.","title":"How to modify the built-in error pages?"},{"location":"admin/developer/agama/faq/#is-javascript-supported","text":"Yes, the template engine is not concerned about the kind of contents linked in markup. It does not even care if your markup makes any sense. For FreeMarker, templates just produce a textual output.","title":"Is Javascript supported?"},{"location":"admin/developer/agama/faq/#a-flow-page-is-not-rendered-as-html-the-browser-just-shows-the-source-code-as-text","text":"This is due to lack of proper Content-Type response header. This occurs if your template has filename extension other than ftlh . If you don't want to rename your template, insert <#ftl output_format=\"HTML\"> at the beginning of the file.","title":"A flow page is not rendered as HTML, the browser just shows the source code as text"},{"location":"admin/developer/agama/faq/#how-to-produce-json-instead-of-html","text":"In your templates use <#ftl output_format=\"JSON\"> in the first line. Take a look at the templates whose name start with json_ in folder /opt/jans/jetty/jans-auth/agama . Particularly check how JSON content can be escaped - unfortunately FreeMarker does not support escaping for JSON out-of-the-box.","title":"How to produce JSON instead of HTML?"},{"location":"admin/developer/agama/faq/#development-tools","text":"","title":"Development tools"},{"location":"admin/developer/agama/faq/#are-there-any-ide-or-editor-plugins-available-for-coding-flows","text":"Not yet unfortunately. We plan to offer tools in the future to ease the development process.","title":"Are there any IDE or editor plugins available for coding flows?"},{"location":"admin/developer/agama/faq/#how-to-debug-flows","text":"We plan to offer a debugger in the future. In the meantime, you can do printf -like debugging using the Log instruction. See Agama logging .","title":"How to debug flows?"},{"location":"admin/developer/agama/faq/#about-agama-engine","text":"","title":"About Agama engine"},{"location":"admin/developer/agama/faq/#does-it-support-ajax","text":"If you require a flow with no page refreshes, it could be implemented using AJAX calls as long as they align to the POST-REDIRECT-GET pattern, where a form is submitted, and as response a 302/303 HTTP redirection is obtained. Your Javascript code must also render UI elements in accordance with the data obtained by following the redirect (GET). Also, care must be taken in order to process server errors, timeouts, etc. In general, this requires a considerable amount of effort. If you require AJAX to consume a resource (service) residing in the same domain of your server, there is no restriction - the engine is not involved. Interaction with external domains may require to setup CORS configuration appropriately in the authentication server.","title":"Does it support AJAX?"},{"location":"admin/developer/agama/faq/#i-wantneed-to-understand-the-internals-where-to-start","text":"The quick start guide is a must, followed by A closer look to Hello world flow . In the end a complete sweep over all the docs is needed.","title":"I want/need to understand the internals, where to start?"},{"location":"admin/developer/agama/faq/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"admin/developer/agama/faq/#does-flow-execution-timeout","text":"Yes. The maximum amount of time an end-user can take to fully complete a flow is driven by the configuration of the authentication server and can be constrained even more in the flow itself. Read about timeouts here .","title":"Does flow execution timeout?"},{"location":"admin/developer/agama/faq/#how-to-prevent-launching-a-flow-directly-from-the-browser","text":"Disable the flow. It will still be callable from other flows.","title":"How to prevent launching a flow directly from the browser?"},{"location":"admin/developer/agama/faq/#updates-in-a-flows-code-are-not-reflected-in-its-execution","text":"Ensure the engine is enabled . Use the REST API (PUT method) to update the flow's code. Wait one minute and then retrieve (GET) this flow's data. The property codeError in the response should have the cause.","title":"Updates in a flow's code are not reflected in its execution"},{"location":"admin/developer/agama/faq/#why-are-the-contents-of-a-list-or-map-logged-partially","text":"This is to avoid traversing big structures fully. You can increase the value of maxItemsLoggedInCollections in the engine configuration .","title":"Why are the contents of a list or map logged partially?"},{"location":"admin/developer/agama/faq/#how-to-add-two-numbers-or-compare-numeric-values-in-agama","text":"Agama only provides operators for boolean comparison in conditional statements. The structure of an authentication flow will rarely have to deal with computations/comparisons of numbers, strings, etc. In case this is needed, developers have to resort to Java.","title":"How to add two numbers or compare numeric values in Agama?"},{"location":"admin/developer/agama/faq/#how-to-concatenate-strings-in-agama","text":"See the previous answer. A two-lines solution could be: strings = [ s1, s2, ... ] Call java.lang.String#join \"\" strings","title":"How to concatenate strings in Agama?"},{"location":"admin/developer/agama/faq/#how-to-know-the-index-of-a-given-loop-iteration","text":"See the examples in the Looping section of the DSL full reference .","title":"How to know the index of a given loop iteration?"},{"location":"admin/developer/agama/faq/#can-agama-code-be-called-from-java","text":"No. These two languages are supposed to play roles that should not be mixed, check here and here .","title":"Can Agama code be called from Java?"},{"location":"admin/developer/agama/flows-lifecycle/","tags":["administration","developer","agama"],"text":"Flows lifecycle # Important The reader is supposed to have checked the DSL basics before proceeding with this page. From a programming perspective, a flow is a lot like a function or subroutine in a regular program. Once a flow is triggered, it is executed from top to bottom until a Finish statement is encountered. There are no asynchronous calls, threads, event listeners or callbacks to deal with. There are no requirements on flow initialization or flow structure either. The RRF construct makes code look totally fluid despite there is a \"pause\" once the response (markup) is sent. When this occurs there is no server-side processing taking place at all. Only after the user submits data to the server the flow is \"resumed\" and execution continues. With RFAC a similar pause happens except resumption is triggered by means of a browser redirect. The above makes the lifecycle of a flow very simple: after triggered, it advances and terminates when it is finished , aborted , or times out . Flow advance and navigation # Once a web page (or a response in general) is replied to a web client (browser), a POST is required to make the flow proceed, see RRF . The POST is expected to be sent to the current URL only, otherwise, a 404 error will be thrown. The engine will then respond with a redirect (usually 301) so the client will GET the next URL to be rendered. This pattern of navigation is known as \"POST-REDIRECT-GET\". There is a clear correspondence of the \"current URL\" with the physical path of the template rendered. As an example, if the browser location shows https://<your-host>/jans-auth/fl/foo/bar.fls , the involved template is stored at /opt/jans/jetty/jans-auth/agama/ftl/foo and has name bar . This makes flows more predictable and easier to reason about. Note however URLs are not manipulable: an attempt to set the browser location to a URL corresponding to a different template will not make that template be rendered or provoke any unexpected jump in the flow control. Instead, an error page is shown that allows users to re-take where they left off or to restart from scratch. In other words, navigation honors the \"current flow URL\" avoiding attempts to re-visit past stages or make unexpected moves to future ones. Additionally, the engine by default sends responses with proper HTTP headers so page contents are not cached. This is key to prevent manipulation and allows a safe usage of the browser's back button, where it will not be possible to visit past stages. Finishing flows # Carefully decide how use the Finish directive in a flow. Specially when terminating sucessfully, many times developers would like to attach the identity of the user in question, as in Finish userId . This results in a successful authentication event and makes sense, but this is not always desired. Sometimes due to decomposition practices (in order to favor re-use and better organization), small flows can arise that should not carry the user identifier. As an example, suppose several flows exist for OTP (one-time passcode) authentication, like SMS, e-mail, token-based, etc. These would receive the user identifier as an input and act accordingly by verifying the passcode the user has entered at the browser. A parent flow can be used to prompt for a username and password first, and then forward the user to the OTP flow that better matches the user's preferences. This sounds fine, however, since any enabled flow can be triggered by means of an authentication request, a skilled individual might try to launch one of the OTP flows directly passing proper parameters. This would result in authentications using a single factor (i.e. no password) which is undesirable. Thus, it is recommended to include userId in Finish only when there is a reason to do so, that is, when the authentication carried out by the flow is strong enough. This largely depends on the defined organization policies, but using a two-factor authentication is often a good sign of strength. Another approach is disabling flows that should not be triggered from a browser directly. Disabled flows can still be used as subflows from other flows. Recall the simplest way to express a positive authentication outcome is just Finish true . Cancellation # This is a feature that in conjuction with template overrides allows developers to implement backtracking or alternative routing. Suppose a flow is designed to reuse two or more existing subflows. As expected these subflows are neither aware of each other nor of its parent. How can the parent make so that once the user has landed at a page belonging to a given subflow A be presented the alternative to take another route, say, to subflow B? Clearly a page at flow A can be overriden, however, how to abort A and make it jump to B? The answer is cancellation. Through flow cancellation, a running flow can be aborted and the control returned to one of its parents for further processing. This can achieved by overriding a template so that the POST to the current URL includes a form field named _abort . POSTing this way will provoke the associated Trigger call to return a value like { aborted: true, data: ... } where data is a map consisting of the payload (form fields) sent with the POST. Thus, developers can build custom pages and add for example a button to provoke the cancellation. Then, back in the flow implementation take the user to the desired path. As an example, suppose there exists two flows that allow users to enter and validate a one-time passcode (OTP), one flow sends the OTP via e-mail while the other through an SMS. Assume these flows receive a user identifier as input and render a single UI page each to enter the received OTP. If we are interested in building a flow that prompts for username/password credentials and use the SMS-based OTP flow with a customization that consists of showing a link like \"Didn't get an SMS?, send the passcode to my e-mail\", the following is a sketch of an implementation: ... //validate username/password ... result = Trigger co.acme.SmsOTP userId Override templates \"path/to/enter_otp.ftlh\" \"cust_enter_otp.ftlh\" When result.aborted is true //The user clicked on \"send the passcode to my e-mail\" result = Trigger co.acme.EmailOTP userId When result.success is true result.data = { userId: userId } Finish result The overriden template cust_enter_otp.ftlh would have a form like: ... <form method=\"post\" enctype=\"application/x-www-form-urlencoded\"> <button type=\"submit\" class=\"btn btn-link\" id=\"_abort\" name=\"_abort\" value=\"\"> Didn't get an SMS?, send the passcode to my e-mail</button> </form> Ideas for a good experience: SmsOTP and EmailOTP should account for retries in their implementation, e.g. give the user 2-3 opportunities to enter an OTP. This can be parameterized, for instance. These flows should not contain data: { userId: ... } when they finish successfully. If any of them are used standalone - not as subflows - the result will be a successful authentication for the given user. This means someone can have access to the protected resource (e.g. target application) with just entering a valid OTP and knowledge a valid user identifier. This is often weak in terms of security. An extra authentication factor should be required, like a password as in the example above Cancellation bubble-up # In order to override a page, the path to the corresponding template can be easily derived from the URL seen at the browser's address bar when the subflow is Trigger ed. Note the page may not necessarily belong directly to the subflow triggered but probably to another flow lying deep in a chain of Trigger invocations. As an example suppose you are interested in building a flow A that reuses flow B. You identify a page shown that needs to be overriden. It might happen this page is actually rendered by C - a flow that B in turn reuses. In scenarios like this cancellation still works transparently and developers need not be aware of flows dependencies. In practice, when cancellation occurs at A, it bubbles up to B and then to C, which is the target of this process. Note that even flow B (as is) may also be overriding A's templates. Resolution of a template path takes place from the inner to the outer flow, so it occurs this way in the example: path is as found in A's RRF instruction path is looked up on the list provided in B's Override templates . If a match is found, path is updated accordingly path is looked up on the list provided in C's Override templates . If a match is found, path is updated accordingly The page referenced by path is rendered When a page POSTs a cancellation as described earlier, the flow to return control to is determined by the path of the template that issued the given POST. Similarly a lookup on B's Override templates takes place followed by other on A's. Timeouts # Authentication flows are normally short-lived. They usually span no more than a few minutes. In Agama, the maximum amount of time an end-user can take to fully complete a flow is driven by the configuration of the authentication server , specifically the sessionIdUnauthenticatedUnusedLifetime property which is measured in seconds. As an example, if this value is 120, any attempt to authenticate taking more than two minutes will throw an error page. Moreover, a flow may specify its own timeout in the header . In practice, the effective timeout is the smallest value between sessionIdUnauthenticatedUnusedLifetime and the value supplied in the header, if any. Depending on specific needs, sessionIdUnauthenticatedUnusedLifetime may have to be set to a higher value than the server's default. This may be the case where flows send e-mail notifications with temporary codes.","title":"Flows Lifecycle"},{"location":"admin/developer/agama/flows-lifecycle/#flows-lifecycle","text":"Important The reader is supposed to have checked the DSL basics before proceeding with this page. From a programming perspective, a flow is a lot like a function or subroutine in a regular program. Once a flow is triggered, it is executed from top to bottom until a Finish statement is encountered. There are no asynchronous calls, threads, event listeners or callbacks to deal with. There are no requirements on flow initialization or flow structure either. The RRF construct makes code look totally fluid despite there is a \"pause\" once the response (markup) is sent. When this occurs there is no server-side processing taking place at all. Only after the user submits data to the server the flow is \"resumed\" and execution continues. With RFAC a similar pause happens except resumption is triggered by means of a browser redirect. The above makes the lifecycle of a flow very simple: after triggered, it advances and terminates when it is finished , aborted , or times out .","title":"Flows lifecycle"},{"location":"admin/developer/agama/flows-lifecycle/#flow-advance-and-navigation","text":"Once a web page (or a response in general) is replied to a web client (browser), a POST is required to make the flow proceed, see RRF . The POST is expected to be sent to the current URL only, otherwise, a 404 error will be thrown. The engine will then respond with a redirect (usually 301) so the client will GET the next URL to be rendered. This pattern of navigation is known as \"POST-REDIRECT-GET\". There is a clear correspondence of the \"current URL\" with the physical path of the template rendered. As an example, if the browser location shows https://<your-host>/jans-auth/fl/foo/bar.fls , the involved template is stored at /opt/jans/jetty/jans-auth/agama/ftl/foo and has name bar . This makes flows more predictable and easier to reason about. Note however URLs are not manipulable: an attempt to set the browser location to a URL corresponding to a different template will not make that template be rendered or provoke any unexpected jump in the flow control. Instead, an error page is shown that allows users to re-take where they left off or to restart from scratch. In other words, navigation honors the \"current flow URL\" avoiding attempts to re-visit past stages or make unexpected moves to future ones. Additionally, the engine by default sends responses with proper HTTP headers so page contents are not cached. This is key to prevent manipulation and allows a safe usage of the browser's back button, where it will not be possible to visit past stages.","title":"Flow advance and navigation"},{"location":"admin/developer/agama/flows-lifecycle/#finishing-flows","text":"Carefully decide how use the Finish directive in a flow. Specially when terminating sucessfully, many times developers would like to attach the identity of the user in question, as in Finish userId . This results in a successful authentication event and makes sense, but this is not always desired. Sometimes due to decomposition practices (in order to favor re-use and better organization), small flows can arise that should not carry the user identifier. As an example, suppose several flows exist for OTP (one-time passcode) authentication, like SMS, e-mail, token-based, etc. These would receive the user identifier as an input and act accordingly by verifying the passcode the user has entered at the browser. A parent flow can be used to prompt for a username and password first, and then forward the user to the OTP flow that better matches the user's preferences. This sounds fine, however, since any enabled flow can be triggered by means of an authentication request, a skilled individual might try to launch one of the OTP flows directly passing proper parameters. This would result in authentications using a single factor (i.e. no password) which is undesirable. Thus, it is recommended to include userId in Finish only when there is a reason to do so, that is, when the authentication carried out by the flow is strong enough. This largely depends on the defined organization policies, but using a two-factor authentication is often a good sign of strength. Another approach is disabling flows that should not be triggered from a browser directly. Disabled flows can still be used as subflows from other flows. Recall the simplest way to express a positive authentication outcome is just Finish true .","title":"Finishing flows"},{"location":"admin/developer/agama/flows-lifecycle/#cancellation","text":"This is a feature that in conjuction with template overrides allows developers to implement backtracking or alternative routing. Suppose a flow is designed to reuse two or more existing subflows. As expected these subflows are neither aware of each other nor of its parent. How can the parent make so that once the user has landed at a page belonging to a given subflow A be presented the alternative to take another route, say, to subflow B? Clearly a page at flow A can be overriden, however, how to abort A and make it jump to B? The answer is cancellation. Through flow cancellation, a running flow can be aborted and the control returned to one of its parents for further processing. This can achieved by overriding a template so that the POST to the current URL includes a form field named _abort . POSTing this way will provoke the associated Trigger call to return a value like { aborted: true, data: ... } where data is a map consisting of the payload (form fields) sent with the POST. Thus, developers can build custom pages and add for example a button to provoke the cancellation. Then, back in the flow implementation take the user to the desired path. As an example, suppose there exists two flows that allow users to enter and validate a one-time passcode (OTP), one flow sends the OTP via e-mail while the other through an SMS. Assume these flows receive a user identifier as input and render a single UI page each to enter the received OTP. If we are interested in building a flow that prompts for username/password credentials and use the SMS-based OTP flow with a customization that consists of showing a link like \"Didn't get an SMS?, send the passcode to my e-mail\", the following is a sketch of an implementation: ... //validate username/password ... result = Trigger co.acme.SmsOTP userId Override templates \"path/to/enter_otp.ftlh\" \"cust_enter_otp.ftlh\" When result.aborted is true //The user clicked on \"send the passcode to my e-mail\" result = Trigger co.acme.EmailOTP userId When result.success is true result.data = { userId: userId } Finish result The overriden template cust_enter_otp.ftlh would have a form like: ... <form method=\"post\" enctype=\"application/x-www-form-urlencoded\"> <button type=\"submit\" class=\"btn btn-link\" id=\"_abort\" name=\"_abort\" value=\"\"> Didn't get an SMS?, send the passcode to my e-mail</button> </form> Ideas for a good experience: SmsOTP and EmailOTP should account for retries in their implementation, e.g. give the user 2-3 opportunities to enter an OTP. This can be parameterized, for instance. These flows should not contain data: { userId: ... } when they finish successfully. If any of them are used standalone - not as subflows - the result will be a successful authentication for the given user. This means someone can have access to the protected resource (e.g. target application) with just entering a valid OTP and knowledge a valid user identifier. This is often weak in terms of security. An extra authentication factor should be required, like a password as in the example above","title":"Cancellation"},{"location":"admin/developer/agama/flows-lifecycle/#cancellation-bubble-up","text":"In order to override a page, the path to the corresponding template can be easily derived from the URL seen at the browser's address bar when the subflow is Trigger ed. Note the page may not necessarily belong directly to the subflow triggered but probably to another flow lying deep in a chain of Trigger invocations. As an example suppose you are interested in building a flow A that reuses flow B. You identify a page shown that needs to be overriden. It might happen this page is actually rendered by C - a flow that B in turn reuses. In scenarios like this cancellation still works transparently and developers need not be aware of flows dependencies. In practice, when cancellation occurs at A, it bubbles up to B and then to C, which is the target of this process. Note that even flow B (as is) may also be overriding A's templates. Resolution of a template path takes place from the inner to the outer flow, so it occurs this way in the example: path is as found in A's RRF instruction path is looked up on the list provided in B's Override templates . If a match is found, path is updated accordingly path is looked up on the list provided in C's Override templates . If a match is found, path is updated accordingly The page referenced by path is rendered When a page POSTs a cancellation as described earlier, the flow to return control to is determined by the path of the template that issued the given POST. Similarly a lookup on B's Override templates takes place followed by other on A's.","title":"Cancellation bubble-up"},{"location":"admin/developer/agama/flows-lifecycle/#timeouts","text":"Authentication flows are normally short-lived. They usually span no more than a few minutes. In Agama, the maximum amount of time an end-user can take to fully complete a flow is driven by the configuration of the authentication server , specifically the sessionIdUnauthenticatedUnusedLifetime property which is measured in seconds. As an example, if this value is 120, any attempt to authenticate taking more than two minutes will throw an error page. Moreover, a flow may specify its own timeout in the header . In practice, the effective timeout is the smallest value between sessionIdUnauthenticatedUnusedLifetime and the value supplied in the header, if any. Depending on specific needs, sessionIdUnauthenticatedUnusedLifetime may have to be set to a higher value than the server's default. This may be the case where flows send e-mail notifications with temporary codes.","title":"Timeouts"},{"location":"admin/developer/agama/hello-world-closer/","tags":["administration","developer","agama"],"text":"Hello world flow: a closer look # This document revisits the hello world flow of the quick start guide using an approach that serves as an introduction to the Agama engine internals. The course of this flow, and generally of any other, can be studied in three stages: From authentication request to bridge script Within Agama engine From bridge script to authentication server Stage 1 # In normal circumstances the flow is launched through a web browser via an OIDC authentication request which in turn activates the Agama bridge script. Its associated (facelet) page is agama.xhtml that invokes the prepareForStep method of that script. This method performs some initialization and makes a redirection to the URL /jans-auth/fl/agama.fls to hand the control to the Agama engine. Stage 2 # Note A preliminary reading of concepts presented in flows lifecycle is recommended before proceeding First request cycle # The GET request for agama.fls is processed by this servlet . Most of logic takes place at method startFlow of FlowService bean. Here, the associated data of the flow in question is retrieved from the database. Its transpiled code in addition to utility code ( util.js ) is loaded and the main entry point called - see invocation of callFunctionWithContinuations . This will throw a ContinuationPending exception once the equivalent instruction to RRF (or RFAC ) is found in the transpiled code. The above means that at line 6 of Hello world , the DSL code execution is interrupted: method processPause collects the required data for template rendering, like template location and its associated data model. This is saved to permanent storage in addition to the \"state of the program\", that is the values of all variables defined so far in the flow - this is known as the \"continuation\". Finally the ExecutionServlet sends a response consisting of a redirect. This completes the first request/response of this flow. Second request cycle # As a consequence of the HTTP redirect received, the browser will request the server a URL like /jans-auth/fl/hello/index.fls . Note how this is correlated to the template path defined in the flow. Here the GET handler of ExecutionServlet takes control again, this time calling the sendPageContents method defined in the parent class BaseServlet . sendPageContents performs the actual page rendering - specifically for hello/index.ftlh in this case - and the produced markup is sent to browser. So far we have \"covered\" the first two letters of the RRF instruction. Third cycle # Once the browser displays the page contents and the user hits the submit button, a new request cycle begins, this time POSTing to /jans-auth/fl/hello/index.fls . The method continueFlow of ExecutionServlet is called by the POST handler. Here the parameters of the payload are parsed and the continueFlow method of FlowService called in turn. At FlowService the continuation is restored and the transpiled flow code resumed (see resumeContinuation usage). This means that statements after the RRF instruction are all executed until another RRF or RFAC call is reached. However in this case, there are only a couple of statements left: Log and Finish . The value supplied for the latter, namely \"john_doe\" - a shortcut for { success: true, data: { userId: \"john_doe\" } } - is wrapped in the NativeObject instance resulting from the resumeContinuation call. Note If we had another RRF instruction in this flow, a ContinuationPending exception would have been thrown, as in the first request , and a redirection sent to browser. Finally, this result is persisted to database, and a finalization page sent to the browser, see sendFinishPage in ExecutionServlet . The page consists of an auto-submitting form that makes a POST to /postlogin.htm , a server URL employed to resume Jython-based authentication flows. This is how stage 2 ends. The engine now hands control back to the bridge. Stage 3 # The POST to /postlogin.htm provokes a call to the authenticate method of the bridge. Here, if the process finished successfully, the user gets authenticated in the server, and the browser is taken to the redirect_uri supplied in the original authentication request. There, the requesting party (RP) can make further processing for the user to get access according to the OpenId Connect protocol. Transpiled code # The engine has some timers running in the background. One of them transpiles code when a change is detected in a given flow's source (written in Agama DSL). The transpilation process generates vanilla Javascript code runnable through Mozilla Rhino by using a transformation chain like (DSL) flow code -> (ANTLR4) parse tree -> (XML) abstract syntax tree -> JS. The transformation chain guarantees that a flow written in Agama DSL cannot: Access Java classes/instances not specified in the original flow code (i.e. the only bridge to Java world is via Call s) Access/modify the standard javascript built-in objects directly Conflict with javascript keywords Notes You can find the (ANTLR4) DSL grammar here . The last step of the transformation chain is carried out by means of this Freemarker transformer Additional notes # The engine does not use asynchronous paradigms: no events, callbacks, extra threads, etc. All computations remain in the classic request/response servlet lifecycle familiar to most Java developers Continuations allow to express a flow as if it were a straight sequence of commands despite there are actual pauses in the middle: the gaps between an HTTP response and the next request Currently Mozilla Rhino seems to be the only mechanism that brings continuations into the Java language In order to preserve server statelessness, continuations are persisted to storage at every flow pause. This way the proper state can be restored when the continuation is resumed in the upcoming HTTP request","title":"A closer look to the engine"},{"location":"admin/developer/agama/hello-world-closer/#hello-world-flow-a-closer-look","text":"This document revisits the hello world flow of the quick start guide using an approach that serves as an introduction to the Agama engine internals. The course of this flow, and generally of any other, can be studied in three stages: From authentication request to bridge script Within Agama engine From bridge script to authentication server","title":"Hello world flow: a closer look"},{"location":"admin/developer/agama/hello-world-closer/#stage-1","text":"In normal circumstances the flow is launched through a web browser via an OIDC authentication request which in turn activates the Agama bridge script. Its associated (facelet) page is agama.xhtml that invokes the prepareForStep method of that script. This method performs some initialization and makes a redirection to the URL /jans-auth/fl/agama.fls to hand the control to the Agama engine.","title":"Stage 1"},{"location":"admin/developer/agama/hello-world-closer/#stage-2","text":"Note A preliminary reading of concepts presented in flows lifecycle is recommended before proceeding","title":"Stage 2"},{"location":"admin/developer/agama/hello-world-closer/#first-request-cycle","text":"The GET request for agama.fls is processed by this servlet . Most of logic takes place at method startFlow of FlowService bean. Here, the associated data of the flow in question is retrieved from the database. Its transpiled code in addition to utility code ( util.js ) is loaded and the main entry point called - see invocation of callFunctionWithContinuations . This will throw a ContinuationPending exception once the equivalent instruction to RRF (or RFAC ) is found in the transpiled code. The above means that at line 6 of Hello world , the DSL code execution is interrupted: method processPause collects the required data for template rendering, like template location and its associated data model. This is saved to permanent storage in addition to the \"state of the program\", that is the values of all variables defined so far in the flow - this is known as the \"continuation\". Finally the ExecutionServlet sends a response consisting of a redirect. This completes the first request/response of this flow.","title":"First request cycle"},{"location":"admin/developer/agama/hello-world-closer/#second-request-cycle","text":"As a consequence of the HTTP redirect received, the browser will request the server a URL like /jans-auth/fl/hello/index.fls . Note how this is correlated to the template path defined in the flow. Here the GET handler of ExecutionServlet takes control again, this time calling the sendPageContents method defined in the parent class BaseServlet . sendPageContents performs the actual page rendering - specifically for hello/index.ftlh in this case - and the produced markup is sent to browser. So far we have \"covered\" the first two letters of the RRF instruction.","title":"Second request cycle"},{"location":"admin/developer/agama/hello-world-closer/#third-cycle","text":"Once the browser displays the page contents and the user hits the submit button, a new request cycle begins, this time POSTing to /jans-auth/fl/hello/index.fls . The method continueFlow of ExecutionServlet is called by the POST handler. Here the parameters of the payload are parsed and the continueFlow method of FlowService called in turn. At FlowService the continuation is restored and the transpiled flow code resumed (see resumeContinuation usage). This means that statements after the RRF instruction are all executed until another RRF or RFAC call is reached. However in this case, there are only a couple of statements left: Log and Finish . The value supplied for the latter, namely \"john_doe\" - a shortcut for { success: true, data: { userId: \"john_doe\" } } - is wrapped in the NativeObject instance resulting from the resumeContinuation call. Note If we had another RRF instruction in this flow, a ContinuationPending exception would have been thrown, as in the first request , and a redirection sent to browser. Finally, this result is persisted to database, and a finalization page sent to the browser, see sendFinishPage in ExecutionServlet . The page consists of an auto-submitting form that makes a POST to /postlogin.htm , a server URL employed to resume Jython-based authentication flows. This is how stage 2 ends. The engine now hands control back to the bridge.","title":"Third cycle"},{"location":"admin/developer/agama/hello-world-closer/#stage-3","text":"The POST to /postlogin.htm provokes a call to the authenticate method of the bridge. Here, if the process finished successfully, the user gets authenticated in the server, and the browser is taken to the redirect_uri supplied in the original authentication request. There, the requesting party (RP) can make further processing for the user to get access according to the OpenId Connect protocol.","title":"Stage 3"},{"location":"admin/developer/agama/hello-world-closer/#transpiled-code","text":"The engine has some timers running in the background. One of them transpiles code when a change is detected in a given flow's source (written in Agama DSL). The transpilation process generates vanilla Javascript code runnable through Mozilla Rhino by using a transformation chain like (DSL) flow code -> (ANTLR4) parse tree -> (XML) abstract syntax tree -> JS. The transformation chain guarantees that a flow written in Agama DSL cannot: Access Java classes/instances not specified in the original flow code (i.e. the only bridge to Java world is via Call s) Access/modify the standard javascript built-in objects directly Conflict with javascript keywords Notes You can find the (ANTLR4) DSL grammar here . The last step of the transformation chain is carried out by means of this Freemarker transformer","title":"Transpiled code"},{"location":"admin/developer/agama/hello-world-closer/#additional-notes","text":"The engine does not use asynchronous paradigms: no events, callbacks, extra threads, etc. All computations remain in the classic request/response servlet lifecycle familiar to most Java developers Continuations allow to express a flow as if it were a straight sequence of commands despite there are actual pauses in the middle: the gaps between an HTTP response and the next request Currently Mozilla Rhino seems to be the only mechanism that brings continuations into the Java language In order to preserve server statelessness, continuations are persisted to storage at every flow pause. This way the proper state can be restored when the continuation is resumed in the upcoming HTTP request","title":"Additional notes"},{"location":"admin/developer/agama/java-classpath/","tags":["administration","developer","agama"],"text":"Java classpath # Any public method from a public class or static method from a public interface that belongs to the classpath of jans-auth webapp can be used in Agama flows. This means a class/interface is accessible as long as it is part of: jans-auth.war > WEB-INF/lib/*.jar or, jans-auth.war > WEB-INF/classes or, /opt/jans/jetty/jans-auth/custom/libs/*.jar (may require edition of jans-auth.xml ) Additionally, it is possible to upload source code on the fly to augment the classpath. Any valid Java or Groovy file is accepted and must be located under /opt/jans/jetty/jans-auth/agama/scripts . A class named com.acme.Person for instance, must reside in com/acme/Person under the scripts directory. Specifically, classes in scripts directory can only be accessed through Call directives. As an example suppose you added classes A and B to scripts , and A depends on B . Call s using class A will work and any change to files A and/or B will be picked automatically. On the contrary, trying to load this kind of classes using Class.forName either from a jar file in custom/libs or from Agama itself will degenerate in ClassNotFoundException . Note A and B can also depend on classes found in any of the three locations listed above. This \"hot\" reloading feature can be a big time saver while developing flows because there is no need to restart the jans-auth webapp. Also, only the files that get modified are effectively re-compiled.","title":"Java Classpath"},{"location":"admin/developer/agama/java-classpath/#java-classpath","text":"Any public method from a public class or static method from a public interface that belongs to the classpath of jans-auth webapp can be used in Agama flows. This means a class/interface is accessible as long as it is part of: jans-auth.war > WEB-INF/lib/*.jar or, jans-auth.war > WEB-INF/classes or, /opt/jans/jetty/jans-auth/custom/libs/*.jar (may require edition of jans-auth.xml ) Additionally, it is possible to upload source code on the fly to augment the classpath. Any valid Java or Groovy file is accepted and must be located under /opt/jans/jetty/jans-auth/agama/scripts . A class named com.acme.Person for instance, must reside in com/acme/Person under the scripts directory. Specifically, classes in scripts directory can only be accessed through Call directives. As an example suppose you added classes A and B to scripts , and A depends on B . Call s using class A will work and any change to files A and/or B will be picked automatically. On the contrary, trying to load this kind of classes using Class.forName either from a jar file in custom/libs or from Agama itself will degenerate in ClassNotFoundException . Note A and B can also depend on classes found in any of the three locations listed above. This \"hot\" reloading feature can be a big time saver while developing flows because there is no need to restart the jans-auth webapp. Also, only the files that get modified are effectively re-compiled.","title":"Java classpath"},{"location":"admin/developer/agama/lifecycle/","tags":["administration","developer","agama"],"text":"Development lifecycle # In this page an overview of the flow development process is presented. In short, the following are the steps required to build a flow: Design and code the flow Add the flow to the server Upload flow assets (templates, images, Java libs and classes, etc.) Trigger an authentication request Apply flow updates As usual, several iterations will take place until you get it right. Note Throughout this document it is assumed you have a standard single-VM Janssen installation Design and code # It is up to developers how to design. This will normally require identifying the several \"steps\" that make up a flow and the conditions upon which \"branching\" takes place. Also it is important to check already existing flows in the server that may be reused for the purpose. Agama DSL was made to structure flows only, not for doing general purpose programming. This means developers have to use Java for doing low-level computations. This way, the resulting implementation (in DSL) serves as a depiction of the flow itself, hiding most of the internal details. Knowledge of the DSL is a requirement as consequence of the above. Fortunately Agama is small and very easy to learn. Check the DSL basics here . Also the \"Hello World\" sample flow will give you a first impresssion on the language. Currently there are no IDE/editor plugins for coding in Agama available. We hope to deliver tools in the future to ease the development experience. About crashes # As a flow executes things can go wrong for reasons that developers cannot foresee. A database may have crashed, a connection to an external system may have failed, the flow engine may have some bug, etc. When an abnormal situation is presented, a flow simply crashes. If a flow crashes, its parent flows (or flow) if they exist, crash as well. Trying to handle crashes involves a lot of planning and work which is too costly and will unlikely account for the so many things that might fail in a real setting. Thus, coding defensively is not recommended. While in Agama is possible to deal with Java exceptions, that feature should be used sparingly. Creating a flow # In order to manage flows, developers interact with a small REST API. Click here to learn about the requisites to access this API and here to check the respective open API definition - locate the endpoints starting with /jans-config-api/api/v1/agama . There are two ways available to add a flow: Endpoint Payload's content type Method Description /jans-config-api/api/v1/agama/{qname} text/plain POST Creates a flow with the supplied qualified name ( qname ) and source code passed in the payload /jans-config-api/api/v1/agama application/json POST Creates a flow with the data supplied in the payload Notes: Ensure the tokens used have scope https://jans.io/oauth/config/agama.write The response of a successful operation returns a 201 status code (i.e. created) and a JSON representation of the created flow - source code not included. If some fields result unfamiliar to you, consult the swagger (open api) document linked above A 400 response (i.e. bad request) is generally obtained when the input source code has syntax problems Examples: Creates a flow named com.acme.myflow using as source the data stored in file flow.txt curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' --data-binary @flow.txt https://<your-host>/jans-config-api/api/v1/agama/com.acme.myflow Creates a flow based on the data stored in file flow.js curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: application/json' -d@flow.js https://<your-host>/jans-config-api/api/v1/agama where flow.js might look like this: { \"qname\": \"com.acme.myflow\", \"source\": \"Flow com.acme.myflow\\n\\tBasepath \\\"\\\"\\n\\nin = { name: \\\"John\\\" }\\nRRF \\\"index.ftlh\\\" in\\n\\nFinish \\\"john_doe\\\"\", \"enabled\": true, \"metadata\": { \"displayName\": \"Biometric authentication\", \"author\": \"John\", \"description\": \"This has not been written yet\", \"properties\": { \"api_key\": \"e2987c51\", \"secret\": \"change it\" } } } Notes: Only qname and source are required in the JSON payload properties in metadata refers to the configuration parameters of the flow. See Configs keyword here If enabled is absent, a false value is used by default in the JSON-based endpoint. The text-based version always assumes true . This property allows or prevents launching a flow directly from the browser Upload required assets # Note For convenience, references to the directory /opt/jans/jetty/jans-auth/agama will be replaced by <AGAMA-DIR> here onwards. The Basepath directive determines where flow assets reside. Ensure to create the given directory under <AGAMA-DIR>/ftl . Probably the same has to be done under <AGAMA-DIR>/fl . The difference between ftl and fl is subtle but important: the former directory must hold Freemarker templates while the latter assets like stylesheets, images and javascript code. This separation avoids Jetty server to expose the raw source code of your templates whose corresponding URL would be quite easy to guess. As an example, suppose your Basepath is foo and you have the instructions RRF index.ftlh and RRF bar/index2.ftlh somewhere in your code. Then your local <AGAMA-DIR>/ftl should look like: foo |- index.ftlh +- bar \\- index2.ftlh Say index.ftlh has markup like <img src=\"bar/me.png\"> and index2.ftlh has <link href=\"my/style.css\" rel=\"stylesheet\"> somewhere. This is how <AGAMA-DIR>/fl should look like: foo +- bar |- me.png \\- my \\- style.css Correspondence to URLs # In practice, assets will map directly under the URL https://<your-host>/jans-auth/fl . This means that to access me.png per the example above, is a matter of hitting https://<your-host>/jans-auth/fl/foo/bar/me.png in your browser. Trying to get access to templates in <AGAMA-DIR>/ftl directly is not possible. Running a flow # The quick start guide exemplifies how to run a flow and provides links to sample applications that can be used to play around with authentication in any OpenId Connect-compliant server like Janssen. If necessary, contact your server administrator for the settings required to trigger authentication requests using OpenId Conect (OIDC). Thinks to keep in mind when testing flows: Once you can successfully start your first flow, it is recommended to take a look at the log statements your flow may have produced. Click here to learn more. When a flow crashes for some reason, a page is shown summarizing the error details. Sometimes this is enough to fix the problems, however logs tend to offer quite a better insight. Authentication flows are usually short-lived. This means the \"journey\" has to finish within a defined timeframe. If exceeded, users will land at an error page. To learn more about this behavior and how to tweak, visit Flows lifetime . The engine often prevents manipulation of URLs so end users cannot mess with the navigation and provoke inconsistent states. This sometimes occurs in web applications when the browser's back button is used. Click here to learn more about flow navigation. Flow updates # Important Ensure you have read about the requisites to access the REST API You may like to make modifications and enhancements to your flow. There are two ways to do so: Endpoint Payload's content type Method Description /jans-config-api/api/v1/agama/source/{qname} text/plain PUT Updates the source code of the flow identified by the given qualified name ( qname ) with the value passed in the payload /jans-config-api/api/v1/agama/{qname} application/json-patch+json PATCH Modifies the flow identified by the given qualified name ( qname ) using the JSON patch provided in the payload. See RFC 6902 Notes: Ensure the tokens used have scope https://jans.io/oauth/config/agama.write Altering the source code of a flow via PATCH is possible but requires transforming the code into a (one liner) JSON string; this will be a repetitive burden. The PUT version is clearly more straightforward. If you still want to use PATCH, ensure to also modify the integer property revision increasing it by one. This will ensure the source changes are effectively picked. The response of a successful operation returns a 200 status code and a JSON representation of the updated flow - source code not included A 400 response (i.e. bad request) is generally obtained if the supplied source code was has syntax problems Examples: Modifies the flow com.acme.myflow replacing its source with the data stored in file flow.txt curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' -X PUT --data-binary @flow.txt https://<your-host>/jans-config-api/api/v1/agama/source/com.acme.myflow Applies a series of modifications to the flow com.acme.myflow : nullifies its description, sets the value of configuration properties, and modifies the creation timestamp to Aug 8th 23:06:40 UTC curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: application/json-patch+json' -X PATCH -d@patch.js https://<your-host>/jans-config-api/api/v1/agama/com.acme.myflow where patch.js contents are: [ { \"op\": \"remove\", \"path\": \"/metadata/description\" }, { \"op\":\"replace\", \"path\": \"/metadata/properties\", \"value\": { \"string_key1\": \"value_1\", \"number_key2\": 10 } }, { \"op\":\"replace\", \"path\": \"/metadata/timestamp\", \"value\": 1660000000000 } ] Flow retrieval and removal # Important Ensure you have read about the requisites to access the REST API There are two endpoints for retrieval: Endpoint Method Description /jans-config-api/api/v1/agama GET Retrieves all flows' data /jans-config-api/api/v1/agama/{qname} GET Retrieves the data of the flow identified by the given qualified name ( qname ) Notes: Ensure the tokens used have scope https://jans.io/oauth/config/agama.readonly The response of a successful operation returns a 200 status code with a JSON representation of the flow(s). If some fields result unfamiliar to you, consult the swagger (open api) document linked above By default the source code is not included (this may clutter the output considerably). Append ?includeSource=true to the endpoint URL to have the source in the output Example: Retrieve the data associated to the flow com.acme.myflow including its source code curl -k -i -H 'Authorization: Bearer <token>' https://<your-host>/jans-config-api/api/v1/agama/com.acme.myflow?includeSource=true There is one endpoint to remove a flow: Endpoint Method Description /jans-config-api/api/v1/agama/{qname} DELETE Removes the flow identified by the given qualified name ( qname ) Notes : Ensure the tokens used have scope https://jans.io/oauth/config/agama.delete The output of a successful removal is 204 (no content) Example: Remove the the flow com.acme.myflow curl -k -i -H 'Authorization: Bearer <token>' -X DELETE https://<your-host>/jans-config-api/api/v1/agama/com.acme.myflow About syntax errors # Every time a flow is created or updated, a preliminar syntax check on the flow code is performed. If an error is found, the response will contain details that include the location (line and column) of the problem in the source code. By design Agama is a transpiled language and transpilation occurs in the background - in the form of a timer task. This task involves processes that go beyond the checks applied upon flow creation or update. When an error is detected at transpilation time, two things can occur: If this was the first transpilation attempt, i.e. it's a recently created flow, a message like \"Source code has errors\" will appear in the browser when launching the flow Otherwise, no error is shown and the flow will behave as if no changes had been applied to the flow's code. This helps preserve the last known \"healthy\" state of your flow so end-users are not impacted In any case, the cause of the error can be inspected by retrieving the flow's data and checking the property codeError .","title":"Development Lifecycle"},{"location":"admin/developer/agama/lifecycle/#development-lifecycle","text":"In this page an overview of the flow development process is presented. In short, the following are the steps required to build a flow: Design and code the flow Add the flow to the server Upload flow assets (templates, images, Java libs and classes, etc.) Trigger an authentication request Apply flow updates As usual, several iterations will take place until you get it right. Note Throughout this document it is assumed you have a standard single-VM Janssen installation","title":"Development lifecycle"},{"location":"admin/developer/agama/lifecycle/#design-and-code","text":"It is up to developers how to design. This will normally require identifying the several \"steps\" that make up a flow and the conditions upon which \"branching\" takes place. Also it is important to check already existing flows in the server that may be reused for the purpose. Agama DSL was made to structure flows only, not for doing general purpose programming. This means developers have to use Java for doing low-level computations. This way, the resulting implementation (in DSL) serves as a depiction of the flow itself, hiding most of the internal details. Knowledge of the DSL is a requirement as consequence of the above. Fortunately Agama is small and very easy to learn. Check the DSL basics here . Also the \"Hello World\" sample flow will give you a first impresssion on the language. Currently there are no IDE/editor plugins for coding in Agama available. We hope to deliver tools in the future to ease the development experience.","title":"Design and code"},{"location":"admin/developer/agama/lifecycle/#about-crashes","text":"As a flow executes things can go wrong for reasons that developers cannot foresee. A database may have crashed, a connection to an external system may have failed, the flow engine may have some bug, etc. When an abnormal situation is presented, a flow simply crashes. If a flow crashes, its parent flows (or flow) if they exist, crash as well. Trying to handle crashes involves a lot of planning and work which is too costly and will unlikely account for the so many things that might fail in a real setting. Thus, coding defensively is not recommended. While in Agama is possible to deal with Java exceptions, that feature should be used sparingly.","title":"About crashes"},{"location":"admin/developer/agama/lifecycle/#creating-a-flow","text":"In order to manage flows, developers interact with a small REST API. Click here to learn about the requisites to access this API and here to check the respective open API definition - locate the endpoints starting with /jans-config-api/api/v1/agama . There are two ways available to add a flow: Endpoint Payload's content type Method Description /jans-config-api/api/v1/agama/{qname} text/plain POST Creates a flow with the supplied qualified name ( qname ) and source code passed in the payload /jans-config-api/api/v1/agama application/json POST Creates a flow with the data supplied in the payload Notes: Ensure the tokens used have scope https://jans.io/oauth/config/agama.write The response of a successful operation returns a 201 status code (i.e. created) and a JSON representation of the created flow - source code not included. If some fields result unfamiliar to you, consult the swagger (open api) document linked above A 400 response (i.e. bad request) is generally obtained when the input source code has syntax problems Examples: Creates a flow named com.acme.myflow using as source the data stored in file flow.txt curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' --data-binary @flow.txt https://<your-host>/jans-config-api/api/v1/agama/com.acme.myflow Creates a flow based on the data stored in file flow.js curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: application/json' -d@flow.js https://<your-host>/jans-config-api/api/v1/agama where flow.js might look like this: { \"qname\": \"com.acme.myflow\", \"source\": \"Flow com.acme.myflow\\n\\tBasepath \\\"\\\"\\n\\nin = { name: \\\"John\\\" }\\nRRF \\\"index.ftlh\\\" in\\n\\nFinish \\\"john_doe\\\"\", \"enabled\": true, \"metadata\": { \"displayName\": \"Biometric authentication\", \"author\": \"John\", \"description\": \"This has not been written yet\", \"properties\": { \"api_key\": \"e2987c51\", \"secret\": \"change it\" } } } Notes: Only qname and source are required in the JSON payload properties in metadata refers to the configuration parameters of the flow. See Configs keyword here If enabled is absent, a false value is used by default in the JSON-based endpoint. The text-based version always assumes true . This property allows or prevents launching a flow directly from the browser","title":"Creating a flow"},{"location":"admin/developer/agama/lifecycle/#upload-required-assets","text":"Note For convenience, references to the directory /opt/jans/jetty/jans-auth/agama will be replaced by <AGAMA-DIR> here onwards. The Basepath directive determines where flow assets reside. Ensure to create the given directory under <AGAMA-DIR>/ftl . Probably the same has to be done under <AGAMA-DIR>/fl . The difference between ftl and fl is subtle but important: the former directory must hold Freemarker templates while the latter assets like stylesheets, images and javascript code. This separation avoids Jetty server to expose the raw source code of your templates whose corresponding URL would be quite easy to guess. As an example, suppose your Basepath is foo and you have the instructions RRF index.ftlh and RRF bar/index2.ftlh somewhere in your code. Then your local <AGAMA-DIR>/ftl should look like: foo |- index.ftlh +- bar \\- index2.ftlh Say index.ftlh has markup like <img src=\"bar/me.png\"> and index2.ftlh has <link href=\"my/style.css\" rel=\"stylesheet\"> somewhere. This is how <AGAMA-DIR>/fl should look like: foo +- bar |- me.png \\- my \\- style.css","title":"Upload required assets"},{"location":"admin/developer/agama/lifecycle/#correspondence-to-urls","text":"In practice, assets will map directly under the URL https://<your-host>/jans-auth/fl . This means that to access me.png per the example above, is a matter of hitting https://<your-host>/jans-auth/fl/foo/bar/me.png in your browser. Trying to get access to templates in <AGAMA-DIR>/ftl directly is not possible.","title":"Correspondence to URLs"},{"location":"admin/developer/agama/lifecycle/#running-a-flow","text":"The quick start guide exemplifies how to run a flow and provides links to sample applications that can be used to play around with authentication in any OpenId Connect-compliant server like Janssen. If necessary, contact your server administrator for the settings required to trigger authentication requests using OpenId Conect (OIDC). Thinks to keep in mind when testing flows: Once you can successfully start your first flow, it is recommended to take a look at the log statements your flow may have produced. Click here to learn more. When a flow crashes for some reason, a page is shown summarizing the error details. Sometimes this is enough to fix the problems, however logs tend to offer quite a better insight. Authentication flows are usually short-lived. This means the \"journey\" has to finish within a defined timeframe. If exceeded, users will land at an error page. To learn more about this behavior and how to tweak, visit Flows lifetime . The engine often prevents manipulation of URLs so end users cannot mess with the navigation and provoke inconsistent states. This sometimes occurs in web applications when the browser's back button is used. Click here to learn more about flow navigation.","title":"Running a flow"},{"location":"admin/developer/agama/lifecycle/#flow-updates","text":"Important Ensure you have read about the requisites to access the REST API You may like to make modifications and enhancements to your flow. There are two ways to do so: Endpoint Payload's content type Method Description /jans-config-api/api/v1/agama/source/{qname} text/plain PUT Updates the source code of the flow identified by the given qualified name ( qname ) with the value passed in the payload /jans-config-api/api/v1/agama/{qname} application/json-patch+json PATCH Modifies the flow identified by the given qualified name ( qname ) using the JSON patch provided in the payload. See RFC 6902 Notes: Ensure the tokens used have scope https://jans.io/oauth/config/agama.write Altering the source code of a flow via PATCH is possible but requires transforming the code into a (one liner) JSON string; this will be a repetitive burden. The PUT version is clearly more straightforward. If you still want to use PATCH, ensure to also modify the integer property revision increasing it by one. This will ensure the source changes are effectively picked. The response of a successful operation returns a 200 status code and a JSON representation of the updated flow - source code not included A 400 response (i.e. bad request) is generally obtained if the supplied source code was has syntax problems Examples: Modifies the flow com.acme.myflow replacing its source with the data stored in file flow.txt curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' -X PUT --data-binary @flow.txt https://<your-host>/jans-config-api/api/v1/agama/source/com.acme.myflow Applies a series of modifications to the flow com.acme.myflow : nullifies its description, sets the value of configuration properties, and modifies the creation timestamp to Aug 8th 23:06:40 UTC curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: application/json-patch+json' -X PATCH -d@patch.js https://<your-host>/jans-config-api/api/v1/agama/com.acme.myflow where patch.js contents are: [ { \"op\": \"remove\", \"path\": \"/metadata/description\" }, { \"op\":\"replace\", \"path\": \"/metadata/properties\", \"value\": { \"string_key1\": \"value_1\", \"number_key2\": 10 } }, { \"op\":\"replace\", \"path\": \"/metadata/timestamp\", \"value\": 1660000000000 } ]","title":"Flow updates"},{"location":"admin/developer/agama/lifecycle/#flow-retrieval-and-removal","text":"Important Ensure you have read about the requisites to access the REST API There are two endpoints for retrieval: Endpoint Method Description /jans-config-api/api/v1/agama GET Retrieves all flows' data /jans-config-api/api/v1/agama/{qname} GET Retrieves the data of the flow identified by the given qualified name ( qname ) Notes: Ensure the tokens used have scope https://jans.io/oauth/config/agama.readonly The response of a successful operation returns a 200 status code with a JSON representation of the flow(s). If some fields result unfamiliar to you, consult the swagger (open api) document linked above By default the source code is not included (this may clutter the output considerably). Append ?includeSource=true to the endpoint URL to have the source in the output Example: Retrieve the data associated to the flow com.acme.myflow including its source code curl -k -i -H 'Authorization: Bearer <token>' https://<your-host>/jans-config-api/api/v1/agama/com.acme.myflow?includeSource=true There is one endpoint to remove a flow: Endpoint Method Description /jans-config-api/api/v1/agama/{qname} DELETE Removes the flow identified by the given qualified name ( qname ) Notes : Ensure the tokens used have scope https://jans.io/oauth/config/agama.delete The output of a successful removal is 204 (no content) Example: Remove the the flow com.acme.myflow curl -k -i -H 'Authorization: Bearer <token>' -X DELETE https://<your-host>/jans-config-api/api/v1/agama/com.acme.myflow","title":"Flow retrieval and removal"},{"location":"admin/developer/agama/lifecycle/#about-syntax-errors","text":"Every time a flow is created or updated, a preliminar syntax check on the flow code is performed. If an error is found, the response will contain details that include the location (line and column) of the problem in the source code. By design Agama is a transpiled language and transpilation occurs in the background - in the form of a timer task. This task involves processes that go beyond the checks applied upon flow creation or update. When an error is detected at transpilation time, two things can occur: If this was the first transpilation attempt, i.e. it's a recently created flow, a message like \"Source code has errors\" will appear in the browser when launching the flow Otherwise, no error is shown and the flow will behave as if no changes had been applied to the flow's code. This helps preserve the last known \"healthy\" state of your flow so end-users are not impacted In any case, the cause of the error can be inspected by retrieving the flow's data and checking the property codeError .","title":"About syntax errors"},{"location":"admin/developer/agama/logging/","tags":["administration","developer","agama"],"text":"Logging # There are two sources of log data that may be of interest to flow developers: the engine and the flows themselves. The engine logs information related to the processing of flows plus tasks that run in the background. This usually provides low-level information and only deserve to be inspected when an error or unexpected behavior occurs. On the other hand, flows add data by means of the Log instruction used in the definition (source code) of flows. Engine's log data is sent to the main log file of the authentication server, that is, file /opt/jans/jetty/jans-auth/log/jans-auth.log . Flows' log data is found in the scripting log of the server, namely /opt/jans/jetty/jans-auth/log/jans-auth_script.log . This log also contains the output of print statements used in standard Jython custom scripts. Depending on the specificity required, you may have to change the logging level of the server so more or less details appear. This can be done by altering the loggingLevel property of the auth server configuration . DEBUG usually suffices for troubleshooting. Useful resources: Log instruction from the full reference How to send data to the flows' log from Java","title":"Logging"},{"location":"admin/developer/agama/logging/#logging","text":"There are two sources of log data that may be of interest to flow developers: the engine and the flows themselves. The engine logs information related to the processing of flows plus tasks that run in the background. This usually provides low-level information and only deserve to be inspected when an error or unexpected behavior occurs. On the other hand, flows add data by means of the Log instruction used in the definition (source code) of flows. Engine's log data is sent to the main log file of the authentication server, that is, file /opt/jans/jetty/jans-auth/log/jans-auth.log . Flows' log data is found in the scripting log of the server, namely /opt/jans/jetty/jans-auth/log/jans-auth_script.log . This log also contains the output of print statements used in standard Jython custom scripts. Depending on the specificity required, you may have to change the logging level of the server so more or less details appear. This can be done by altering the loggingLevel property of the auth server configuration . DEBUG usually suffices for troubleshooting. Useful resources: Log instruction from the full reference How to send data to the flows' log from Java","title":"Logging"},{"location":"admin/developer/agama/quick-start/","tags":["administration","developer","agama"],"text":"Quick start # In this page a high-level overview of the flow development process is presented. Readers will be able to take a peep at the overall experience through a simple \"hello world\" example. The basics # These are key concepts to keep in mind before starting. Enable the engine # Ensure the Agama engine is enabled in your installation. Do the following: Enable Agama bridge script. You can find details on how to manage custom scripts in this page. Here, set property enabled to true and increase revision value by one Set enabled property in Agama configuration to true . This is located in the agamaConfiguration section of the auth server configuration Flow data # Every flow has some associated information. At minimum this is required: Qualified name: The flow identifer. This is normally expressed using an Internet domain reverse notation, e.g. co.acme.SmsOTP Source code: The flow implementation using Agama DSL Optional details include: Enabled status: Determines if the flow can be launched directly from a web browser Display name: A short descriptive name of the flow intended for humans, e.g. \"passwordless authentication\" Description Flow author Properties: A JSON document often used to supply configuration parameters More on how to supply this data later. Assets # These are elements used to build the user interface such as templates, images, stylesheets, and javascript code. Templates are written using FreeMarker Template Language (FTL). This is a simple and highly productive language to produce HTML and other forms of output. By convention templates generating HTML markup in Agama have the extension ftlh . In Agama, templates must reside in the filesystem under /opt/jans/jetty/jans-auth/agama/ftl directory. All the other assets (CSS, JS, etc.) are expected to be under /opt/jans/jetty/jans-auth/agama/fl . Java classes # Agama DSL supports calling Java code - it is designed to force developers use Java when tasks cannot be implemented by simple data manipulation or comparison of values. Any public class or interface in the classpath of jans-auth webapp can be used for this purpose. Additionally the classpath can be augmented by uploaded source files on the fly. Click here to learn more. Client application # This is the target application that end-users will get access to after a successful authentication. In OpenId Connect terms, a \"Relying Party\" or RP. It is advisable to have this application ready before proceeding to the next section of this document. Depending on the tools and acquaintance with OpenId Connect protocol, this may take some time for developers. Note it may also require to apply configurations in the (Janssen) server for this purpose. A low resistance path we recommend is trying the stripped down Javascript client example by Nat Sakimura. Here, the discovery URL is your server's URL. Another alternative is trying mod_auth_openidc , an Apache 2 server module that implements RP functionality. Hello world sample flow # Your first taste of Agama will be through a dummy \"hello world\" flow. Here, the end-user will be presented a salutation page with a submit button which once pressed, will finish the process. For the sake of simplicity, the user to be authenticated will be a hardcoded one. This way we avoid gathering data at the browser and any other further processing in order to keep the example as short and simple as possible. Note While in most cases flows need to externally \"receive\" data and configuration parameters to properly drive their behavior, this is not the case here. The flow will only show a static salutation message and will terminate logging in a certain user, if existing. Flow code # The source code (written in agama DSL dialect) is shown below. Note the absence of parenthesis and semicolons - in general the syntax is very lightweight. A line-by-line description follows: Line 2: every flow starts with the Flow keyword followed by a qualified name (think of it as the flow identifier) Line 3: Basepath specifies the directory where the assets of this flow reside. Note this is part of an indented block. There are more directives that may go here but they are beyond scope right now. Basepath is always mandatory. Line 4: empty. There can be any number of empty lines in a source file Line 5: an assignment to a variable. Agama is dynamically typed and variables are not declared. Here in is a map (a collection of key/value pairs). Note its resemblance to JSON. in has no special meaning, we could have used x , Soup , or whatever_123 . Line 6: RRF is used to send a response to the user's browser: it takes the path to a template ( hello/index.ftlh ) and injects a value into it ( in in this case). The produced ( R endered) markup is sent ( R eplied) to the browser. Finally, the result of the interaction of the user with the page can be retrieved ( F etched), however, this is skipped here because we are no capturing anything at the client side. The contents of index.ftlh should be familiar to web developers. The ${...} notation is used to dynamically insert values in the markup: the text John in this case. Expressions like this are integral part of Freemarker. Once form submission occurs, flow execution continues at line 8. Line 8: a logging statement. This appends the text Done! to the flow's log. The Log instruction is pretty versatile; it is used in its simplest form here. Line 9: marks the flow ending. Finish has several forms but here a shorthand notation is used where we always report a positive success and supply the identifier of a user. If it turns out your local user database contains a user identified by john_doe , this will be the subject that will get authenticated by the server, otherwise an error page will be shown. This flow is extremely static and unrealistic but showcases minimal key elements for flow building. Please do not try this flow in any of your production servers. Getting an access token # In order to add/modify flows, you will interact with a small REST API which is protected by bearer token. To be able to get tokens, SSH to your server and perform the following steps: Run python3 /opt/jans/jans-cli/config-cli.py In the menu enter to OAuth > OIDC clients > Get list of clients Accept the default parameters, for pattern enter config Follow the instructions (in a web browser) to get authorized access A list of results will be shown, pick the value in the inum column for the client with display name Jans Config Api Client Choose back , and enter to Get client by inum Enter the collected inum and grab the value of clientSecret in the resulting JSON document Finally, choose logout and quit The collected secret is encoded, run python3 /opt/jans/bin/encode.py -D <clientSecret> to decode it. The following is an example of how to get a token using curl . Replace data in the placeholders appropriately: curl -u '<client-inum:client-secret-decoded>' -d scope='https://jans.io/oauth/config/agama.write' -d grant_type=client_credentials https://<your-host>/jans-auth/restv1/token You can extract the token from the (JSON) response obtained which is a self-explanatory. Add the -k switch if your server uses a self-signed certificate. Tokens are required to have the right scopes depending on the operation to invoke, the following table summarizes this aspect: scope permission allowed https://jans.io/oauth/config/agama.readonly Retrieve flow data https://jans.io/oauth/config/agama.write Create or modify a flow https://jans.io/oauth/config/agama.delete Remove a flow You can find here the open API definition of the REST API - locate the endpoints starting with /jans-config-api/api/v1/agama . Notes : Tokens have expiration time measured in seconds. When expired, you'll have to re-request To get a token with more than one scope, supply the required scopes separated by whitespace in the scope parameter of the request above You don't have to necessarily use the jans-config-api client to get your tokens. Any client, including one registered yourself can be used here as long as it can provide the needed scopes Add the flow to the server # The easiest way to create a flow is issuing a POST passing the source code in the payload. For our example, if the flow's source code resides in a file named flow.txt , the request would look this way: curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' --data-binary @flow.txt https://<your-host>/jans-config-api/api/v1/agama/test (the -i switch is useful to check the HTTP headers sent with the response). Notes: test (the qualified named) was supplied as the last component of the URL to send the POST to The expected status code of the response is 201 (i.e. created) unless there was some problem to process the request. Particularly, if 401 (unauthorized) was obtained, it means your token is no longer valid A successful response contains a summary (in JSON format) of the flow created If we had to modify the code of this flow, a similar operation could be used: curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' -X PUT --data-binary @flow.txt https://<your-host>/jans-config-api/api/v1/agama/source/test /jans-config-api/api/v1/agama/source is a dedicated endpoint that replaces a flow's code whose name is supplied in the end of the URL. If things went wrong and you want to start all over again, you can easily remove the flow like this (ensuring the token has the right scope): curl -k -i -H 'Authorization: Bearer <token>' -X DELETE https://<your-host>/jans-config-api/api/v1/agama/test The status code of a successful removal is 204 (empty). To retrieve the flow's data, a request like the below can be used: curl -k -i -H 'Authorization: Bearer <token>' https://<your-host>/jans-config-api/api/v1/agama/test Note the source code is not part of the response by default. Append ?includeSource=true to the URL for the source to be included. Important There are different, more detailed ways to retrieve, create and update flows but they are regarded in the Development lifecycle doc page. Finally the flow assets must be uploaded. You can SFTP/SCP or use other means to do so. In our example, only two steps are required: Create a directory hello under /opt/jans/jetty/jans-auth/agama/ftl Upload the template there Craft an authentication request # This section assumes your client application is ready, or at least you have made the configurations required so that you can trigger an (OpendId Connect) authentication request. This usually boils down to create and launch a URL looking like https://<your-host>/jans-auth/restv1/authorize?acr_values=agama&customParam1=flow-qname&scope=...&response_type=...&redirect_uri=https...&client_id=...&state=... . You may like to check the spec for more details, however, keep in mind that: To trigger an Agama flow, the acr_values parameter must be equal to agama The qualified name (identifier) of the flow to trigger is passed using the parameter referenced in property cust_param_name of the Agama bridge script. customParam1 will work in most cases since this is the default value employed by the Jans installer. For the current example customParam1=test should be fine Note To use a different parameter name ensure to register the given parameter in the server configuration (property authorizationRequestCustomAllowedParameters ) and update the bridge accordingly If the flow to call receives input parameters, their values can be passed in the custom parameter as well. Use a hyphen to separate the flow name and the parameters expressed in JSON object format. For example, if the flow had inputs height and color , you can use test-{\"height\": 190, \"color\": \"blue\"} for the value of customParam1 . Ensure to apply proper URL-encoding beforehand. In this case, the actual value would be test-%7B%22height%22%3A+190%2C+%22color%22%3A+%22blue%22%7D . If certain inputs are not provided, null values will be assigned for them Testing # Launch the authentication request in a web browser - preferably in a private window, a.k.a. incognito. You will be taken to a plain HTML page with a salutation and a \"continue\" button. After submission, a quick \"Redirecting you\" page will be shown and you will be taken probably to an error page showing \"Unable to determine identity of user\". That's expected. Let's start by changing the salutation. Download the source code and template . In a text editor, modify line 5 of the source by changing the name surrounded by double quotes to a different word. Save the file and send the update as regarded in Add the flow to the server . Wait for one minute. Generate an authentication request again and launch it. You will be able to see the changes. Feel free to edit index.ftlh and re-upload - templates changes are picked up immediately. Now pick an existing username from your user base and alter the flow's code so that such user gets authenticated. Edit line 9 for this purpose, for example, Finish \"admin\" . If things went fine, after the form submission your browser should have been taken to the redirect_uri defined for the authentication request. Depending on how evolved your client application is, it may have created a session for such user and obtained profile data already!. Logs often bring useful information while testing or troubleshooting. Check this page to learn how check the logs. Next steps # We have barely scratched the surface so far. There is lots more to learn in order to unveil the real power of Agama. The following topics may be of your interest: Development lifecycle : a quick reference on how flows can be setup and run. Some of these steps were already performed for Hello World, however they are presented in a more detailed manner there. DSL basics : an introduction and quick reference to Agama language Agama logging Writing UI pages Flows lifecycle Engine configuration Sample flows","title":"Quick Start Guide"},{"location":"admin/developer/agama/quick-start/#quick-start","text":"In this page a high-level overview of the flow development process is presented. Readers will be able to take a peep at the overall experience through a simple \"hello world\" example.","title":"Quick start"},{"location":"admin/developer/agama/quick-start/#the-basics","text":"These are key concepts to keep in mind before starting.","title":"The basics"},{"location":"admin/developer/agama/quick-start/#enable-the-engine","text":"Ensure the Agama engine is enabled in your installation. Do the following: Enable Agama bridge script. You can find details on how to manage custom scripts in this page. Here, set property enabled to true and increase revision value by one Set enabled property in Agama configuration to true . This is located in the agamaConfiguration section of the auth server configuration","title":"Enable the engine"},{"location":"admin/developer/agama/quick-start/#flow-data","text":"Every flow has some associated information. At minimum this is required: Qualified name: The flow identifer. This is normally expressed using an Internet domain reverse notation, e.g. co.acme.SmsOTP Source code: The flow implementation using Agama DSL Optional details include: Enabled status: Determines if the flow can be launched directly from a web browser Display name: A short descriptive name of the flow intended for humans, e.g. \"passwordless authentication\" Description Flow author Properties: A JSON document often used to supply configuration parameters More on how to supply this data later.","title":"Flow data"},{"location":"admin/developer/agama/quick-start/#assets","text":"These are elements used to build the user interface such as templates, images, stylesheets, and javascript code. Templates are written using FreeMarker Template Language (FTL). This is a simple and highly productive language to produce HTML and other forms of output. By convention templates generating HTML markup in Agama have the extension ftlh . In Agama, templates must reside in the filesystem under /opt/jans/jetty/jans-auth/agama/ftl directory. All the other assets (CSS, JS, etc.) are expected to be under /opt/jans/jetty/jans-auth/agama/fl .","title":"Assets"},{"location":"admin/developer/agama/quick-start/#java-classes","text":"Agama DSL supports calling Java code - it is designed to force developers use Java when tasks cannot be implemented by simple data manipulation or comparison of values. Any public class or interface in the classpath of jans-auth webapp can be used for this purpose. Additionally the classpath can be augmented by uploaded source files on the fly. Click here to learn more.","title":"Java classes"},{"location":"admin/developer/agama/quick-start/#client-application","text":"This is the target application that end-users will get access to after a successful authentication. In OpenId Connect terms, a \"Relying Party\" or RP. It is advisable to have this application ready before proceeding to the next section of this document. Depending on the tools and acquaintance with OpenId Connect protocol, this may take some time for developers. Note it may also require to apply configurations in the (Janssen) server for this purpose. A low resistance path we recommend is trying the stripped down Javascript client example by Nat Sakimura. Here, the discovery URL is your server's URL. Another alternative is trying mod_auth_openidc , an Apache 2 server module that implements RP functionality.","title":"Client application"},{"location":"admin/developer/agama/quick-start/#hello-world-sample-flow","text":"Your first taste of Agama will be through a dummy \"hello world\" flow. Here, the end-user will be presented a salutation page with a submit button which once pressed, will finish the process. For the sake of simplicity, the user to be authenticated will be a hardcoded one. This way we avoid gathering data at the browser and any other further processing in order to keep the example as short and simple as possible. Note While in most cases flows need to externally \"receive\" data and configuration parameters to properly drive their behavior, this is not the case here. The flow will only show a static salutation message and will terminate logging in a certain user, if existing.","title":"Hello world sample flow"},{"location":"admin/developer/agama/quick-start/#flow-code","text":"The source code (written in agama DSL dialect) is shown below. Note the absence of parenthesis and semicolons - in general the syntax is very lightweight. A line-by-line description follows: Line 2: every flow starts with the Flow keyword followed by a qualified name (think of it as the flow identifier) Line 3: Basepath specifies the directory where the assets of this flow reside. Note this is part of an indented block. There are more directives that may go here but they are beyond scope right now. Basepath is always mandatory. Line 4: empty. There can be any number of empty lines in a source file Line 5: an assignment to a variable. Agama is dynamically typed and variables are not declared. Here in is a map (a collection of key/value pairs). Note its resemblance to JSON. in has no special meaning, we could have used x , Soup , or whatever_123 . Line 6: RRF is used to send a response to the user's browser: it takes the path to a template ( hello/index.ftlh ) and injects a value into it ( in in this case). The produced ( R endered) markup is sent ( R eplied) to the browser. Finally, the result of the interaction of the user with the page can be retrieved ( F etched), however, this is skipped here because we are no capturing anything at the client side. The contents of index.ftlh should be familiar to web developers. The ${...} notation is used to dynamically insert values in the markup: the text John in this case. Expressions like this are integral part of Freemarker. Once form submission occurs, flow execution continues at line 8. Line 8: a logging statement. This appends the text Done! to the flow's log. The Log instruction is pretty versatile; it is used in its simplest form here. Line 9: marks the flow ending. Finish has several forms but here a shorthand notation is used where we always report a positive success and supply the identifier of a user. If it turns out your local user database contains a user identified by john_doe , this will be the subject that will get authenticated by the server, otherwise an error page will be shown. This flow is extremely static and unrealistic but showcases minimal key elements for flow building. Please do not try this flow in any of your production servers.","title":"Flow code"},{"location":"admin/developer/agama/quick-start/#getting-an-access-token","text":"In order to add/modify flows, you will interact with a small REST API which is protected by bearer token. To be able to get tokens, SSH to your server and perform the following steps: Run python3 /opt/jans/jans-cli/config-cli.py In the menu enter to OAuth > OIDC clients > Get list of clients Accept the default parameters, for pattern enter config Follow the instructions (in a web browser) to get authorized access A list of results will be shown, pick the value in the inum column for the client with display name Jans Config Api Client Choose back , and enter to Get client by inum Enter the collected inum and grab the value of clientSecret in the resulting JSON document Finally, choose logout and quit The collected secret is encoded, run python3 /opt/jans/bin/encode.py -D <clientSecret> to decode it. The following is an example of how to get a token using curl . Replace data in the placeholders appropriately: curl -u '<client-inum:client-secret-decoded>' -d scope='https://jans.io/oauth/config/agama.write' -d grant_type=client_credentials https://<your-host>/jans-auth/restv1/token You can extract the token from the (JSON) response obtained which is a self-explanatory. Add the -k switch if your server uses a self-signed certificate. Tokens are required to have the right scopes depending on the operation to invoke, the following table summarizes this aspect: scope permission allowed https://jans.io/oauth/config/agama.readonly Retrieve flow data https://jans.io/oauth/config/agama.write Create or modify a flow https://jans.io/oauth/config/agama.delete Remove a flow You can find here the open API definition of the REST API - locate the endpoints starting with /jans-config-api/api/v1/agama . Notes : Tokens have expiration time measured in seconds. When expired, you'll have to re-request To get a token with more than one scope, supply the required scopes separated by whitespace in the scope parameter of the request above You don't have to necessarily use the jans-config-api client to get your tokens. Any client, including one registered yourself can be used here as long as it can provide the needed scopes","title":"Getting an access token"},{"location":"admin/developer/agama/quick-start/#add-the-flow-to-the-server","text":"The easiest way to create a flow is issuing a POST passing the source code in the payload. For our example, if the flow's source code resides in a file named flow.txt , the request would look this way: curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' --data-binary @flow.txt https://<your-host>/jans-config-api/api/v1/agama/test (the -i switch is useful to check the HTTP headers sent with the response). Notes: test (the qualified named) was supplied as the last component of the URL to send the POST to The expected status code of the response is 201 (i.e. created) unless there was some problem to process the request. Particularly, if 401 (unauthorized) was obtained, it means your token is no longer valid A successful response contains a summary (in JSON format) of the flow created If we had to modify the code of this flow, a similar operation could be used: curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' -X PUT --data-binary @flow.txt https://<your-host>/jans-config-api/api/v1/agama/source/test /jans-config-api/api/v1/agama/source is a dedicated endpoint that replaces a flow's code whose name is supplied in the end of the URL. If things went wrong and you want to start all over again, you can easily remove the flow like this (ensuring the token has the right scope): curl -k -i -H 'Authorization: Bearer <token>' -X DELETE https://<your-host>/jans-config-api/api/v1/agama/test The status code of a successful removal is 204 (empty). To retrieve the flow's data, a request like the below can be used: curl -k -i -H 'Authorization: Bearer <token>' https://<your-host>/jans-config-api/api/v1/agama/test Note the source code is not part of the response by default. Append ?includeSource=true to the URL for the source to be included. Important There are different, more detailed ways to retrieve, create and update flows but they are regarded in the Development lifecycle doc page. Finally the flow assets must be uploaded. You can SFTP/SCP or use other means to do so. In our example, only two steps are required: Create a directory hello under /opt/jans/jetty/jans-auth/agama/ftl Upload the template there","title":"Add the flow to the server"},{"location":"admin/developer/agama/quick-start/#craft-an-authentication-request","text":"This section assumes your client application is ready, or at least you have made the configurations required so that you can trigger an (OpendId Connect) authentication request. This usually boils down to create and launch a URL looking like https://<your-host>/jans-auth/restv1/authorize?acr_values=agama&customParam1=flow-qname&scope=...&response_type=...&redirect_uri=https...&client_id=...&state=... . You may like to check the spec for more details, however, keep in mind that: To trigger an Agama flow, the acr_values parameter must be equal to agama The qualified name (identifier) of the flow to trigger is passed using the parameter referenced in property cust_param_name of the Agama bridge script. customParam1 will work in most cases since this is the default value employed by the Jans installer. For the current example customParam1=test should be fine Note To use a different parameter name ensure to register the given parameter in the server configuration (property authorizationRequestCustomAllowedParameters ) and update the bridge accordingly If the flow to call receives input parameters, their values can be passed in the custom parameter as well. Use a hyphen to separate the flow name and the parameters expressed in JSON object format. For example, if the flow had inputs height and color , you can use test-{\"height\": 190, \"color\": \"blue\"} for the value of customParam1 . Ensure to apply proper URL-encoding beforehand. In this case, the actual value would be test-%7B%22height%22%3A+190%2C+%22color%22%3A+%22blue%22%7D . If certain inputs are not provided, null values will be assigned for them","title":"Craft an authentication request"},{"location":"admin/developer/agama/quick-start/#testing","text":"Launch the authentication request in a web browser - preferably in a private window, a.k.a. incognito. You will be taken to a plain HTML page with a salutation and a \"continue\" button. After submission, a quick \"Redirecting you\" page will be shown and you will be taken probably to an error page showing \"Unable to determine identity of user\". That's expected. Let's start by changing the salutation. Download the source code and template . In a text editor, modify line 5 of the source by changing the name surrounded by double quotes to a different word. Save the file and send the update as regarded in Add the flow to the server . Wait for one minute. Generate an authentication request again and launch it. You will be able to see the changes. Feel free to edit index.ftlh and re-upload - templates changes are picked up immediately. Now pick an existing username from your user base and alter the flow's code so that such user gets authenticated. Edit line 9 for this purpose, for example, Finish \"admin\" . If things went fine, after the form submission your browser should have been taken to the redirect_uri defined for the authentication request. Depending on how evolved your client application is, it may have created a session for such user and obtained profile data already!. Logs often bring useful information while testing or troubleshooting. Check this page to learn how check the logs.","title":"Testing"},{"location":"admin/developer/agama/quick-start/#next-steps","text":"We have barely scratched the surface so far. There is lots more to learn in order to unveil the real power of Agama. The following topics may be of your interest: Development lifecycle : a quick reference on how flows can be setup and run. Some of these steps were already performed for Hello World, however they are presented in a more detailed manner there. DSL basics : an introduction and quick reference to Agama language Agama logging Writing UI pages Flows lifecycle Engine configuration Sample flows","title":"Next steps"},{"location":"admin/developer/agama/samples/","tags":["administration","developer","agama"],"text":"Sample flows # This page provides some practical flow examples to help readers in their process of learning Agama. It is recommended to visit the quick start guide first. Warning Do not deploy any of these flows to production! Basic authentication # This is the simplest form of authentication where end-users gain access to a protected resource (e.g. an application) by providing a valid username and password combination. In this example users will be given three attempts at most to supply valid credentials, otherwise an error page will be shown. Implementation # Source code here . Lines 1-2. Flow declarations for qualified name ( io.jans.flow.sample.basic ) and assets folder ( samples/basic ) Lines 4-5. Obtains a reference to the server's CDI bean AuthenticationService . This object will allow to perform username/password validation. The object's class - AuthenticationService.class - is obtained at line 4 and the actual instance is obtained at line 5 by means of lookup carried out by method bean of CdiUtil class. For more information on the server CDI beans visit this page Line 6. Initializes an empty map. It will be passed as data model for the UI page later Line 8. Declares that the block of indented statements (lines 9-14) will be executed repeatedly three times at most Line 9. Renders the template login.ftlh passing obj as data model. The form fields the user will fill at the browser are to be stored at variable creds Line 10. Calls the authenticate method on asrv (the AuthenticationService bean) passing the username and password (sent by the user's browser) as parameters. Note the presence of form fields username and password in the UI template. The boolean value returned by this method is stored in the key success of map obj and determines if the username and password combination supplied was valid Line 11. The username is copied to key uid of map obj . Note the usage of uid in the template: this is used to populate the username field in the case the first authentication attempt is not successful Lines 13-14. If the credentials supplied were valid, the flow is finished successfully attaching the username of the user in question. This is needed for the authentication server to determine who is logging in Line 16. If this line is reached in a flow execution, it means the three attempts were invalid. In this case the flow is finished with failure UI template # login.ftlh is 99% HTML markup and will not be detailed here. There are only a couple of things to highlight: The conditional <#if !(success!true)> (around line 27) is used to determine if an error message should be included in the generated markup. It works this way: if the key success exists in this template data model, its value is negated (note the bang character before the left parenthesis) and the if condition is evaluated. If non-existing, a true value is assumed which is then negated and thus the if body will not be evaluated- Expressions of the form ${msgs[...]} are used to access string messages defined in the server resource bundle. For more information visit \"Writing UI pages\" . The expression ${uid!} (around line 35) is equivalent to ${uid!\"\"} and evaluates to the value of key uid . In case uid is not defined, an empty string value is used. Email OTP authentication # This is a two-stepped flow where the end-user initially is prompted to enter a username and corresponding password. Upon successful validation and assuming the user has an e-mail designated in his profile, a message with a one-time passcode (OTP) is sent to his inbox. The user is expected to enter the code in the browser to complete the authentication. Implementation # Note Acquaintance with the basic authentication flow is required to understand this flow Source code here . Lines 1-2. Flow declarations for qualified name ( io.jans.flow.sample.otp.email ) and assets folder ( samples/otp-email ) Line 5. The basic authentication flow is launched. Its output stored in variable obj Lines 6-7. If basic authentication didn't succeed, this flows finishes in the same way Line 9. The user identifier is grabbed from the basic flow output and stored in userId Line 10. The e-mail of the user identified by userId is obtained by calling method emailOf of class EmailOTPUtil . Source code here . This time the managed bean UserService is used. Copy EmailOTPUtil.java directly to folder /opt/jans/jetty/jans-auth/agama/scripts/io/jans/agama/samples of your server Lines 12-14. If the user does not have a designated e-mail address, the flow is finished Lines 16-18. Initializes utility variables and declares that the block of indented statements (lines 20-35) will be executed repeatedly three times at most Lines 20-22. Sends a message with a passcode to the e-mail of the user (stored in variable email ) by calling method send of class EmailOTPUtil . If delivery was successful this method returns the passcode sent, otherwise null . The value is store in otpCode variable Lines 24-26. If delivery failed, the flow is finished Line 28. Renders the template otp.ftlh passing obj as data model. After form submission, obj will have up to two keys: passcode and resend . The former will hold whatever the user entered in the passcode text field, and the latter will exist if the \"resend code\" link was clicked Line 31. Variable sendEmail is set to true if the user clicked on the \"resend code\" link Line 33-35. If the passcode entered in the text field matches the value of the passcode sent in the e-mail (variable otpCode ) the flow finishes successfully indicating the identity of the user (previously stored in userId ). Otherwise key matches is attached to map obj with value false . This key is employed in the template (around line 27) to show an error message in case the user entered a wrong code Lines 37-38. If execution reaches this point, it means the form was submitted three times and no matching code was entered. In this case, flow is finished accordingly (failed) UI template # otp.ftlh is on the same lines of the template used in the basic authentication flow. Here the form has three relevant elements: A textfield to enter the passcode (around line 35) A standard submission button (around line 41) A button with type=submit and id=resend rendered as a hypertext link (around line 47). Only when the link is clicked, resend parameter will be part of the request sent to the server If the user presses the enter key when the focus is on the text field, the form is submitted by means of the standard submission button. Combined registration and authentication flow # In this flow features like template overrides and flow cancellation are leveraged to bring a more sophisticated authentication journey. A description follows: A login form (username/password) is shown with an auxiliary link to offer account registration If the registration link is clicked, the user is shown a page that prompts personal details in order to create an account Upon successful account creation, a \"continue to login\" page is presented The OTP authentication flow of the previous section is reused: a standard login form is shown and then the user is prompted to enter a passcode. Registration # For the purposes of registration, a small flow was created: This flow is pretty simple and we are not going into the details here. Keep in mind the following: Upload confirmation.ftlh and index.ftlh files to folder /opt/jans/jetty/jans-auth/agama/ftl/samples/registration Copy the file RegistrationUtil.java to directory /opt/jans/jetty/jans-auth/agama/io/jans/agama/samples Keep this flow disabled. If used standalone, it will finish but no actual person will be authenticated. It is not designed to be used directly but by other flows. Main flow # Source code here . This flow is short and powerful. To start it launches the email OTP authentication flow (line 4). However, instead of the login.ftlh template used internally by the basic flow, a different version is used (line 5). The new template is located in this flow's basepath, i.e. samples/otp-email-registration , and the file name does not change. This new page simply adds a small link that reads \"Don't have an account?\" in a new HTML form. When clicked it will provoke the email-OTP flow to be aborted early and the condition at line 7 will be truthy. If that's not the case, the email-OTP flow will proceed as usual and the current flow will finish in the same way as email-OTP (line 16). If email-OTP is aborted, the registration flow that we just saw is launched (line 9). Here the template confirmation.ftlh is overriden too (line 10). This new page changes the label of the button that is shown after an account has been created: originally the text is \"Continue\" but for the current flow, \"Proceed to login\" is a better fit. If the registration flow finishes successfully (line 12), the email-OTP flow is triggered again (line 14) - this time without customizations. Then the user can supply his recently-created credentials to get past the basic authentication stage and finally move to the OTP challenge. Recall that via registration flow the user's e-mail address is already stored in the database. Finally, the current flow finishes identically as email-OTP did (line 16).","title":"Sample Flows"},{"location":"admin/developer/agama/samples/#sample-flows","text":"This page provides some practical flow examples to help readers in their process of learning Agama. It is recommended to visit the quick start guide first. Warning Do not deploy any of these flows to production!","title":"Sample flows"},{"location":"admin/developer/agama/samples/#basic-authentication","text":"This is the simplest form of authentication where end-users gain access to a protected resource (e.g. an application) by providing a valid username and password combination. In this example users will be given three attempts at most to supply valid credentials, otherwise an error page will be shown.","title":"Basic authentication"},{"location":"admin/developer/agama/samples/#implementation","text":"Source code here . Lines 1-2. Flow declarations for qualified name ( io.jans.flow.sample.basic ) and assets folder ( samples/basic ) Lines 4-5. Obtains a reference to the server's CDI bean AuthenticationService . This object will allow to perform username/password validation. The object's class - AuthenticationService.class - is obtained at line 4 and the actual instance is obtained at line 5 by means of lookup carried out by method bean of CdiUtil class. For more information on the server CDI beans visit this page Line 6. Initializes an empty map. It will be passed as data model for the UI page later Line 8. Declares that the block of indented statements (lines 9-14) will be executed repeatedly three times at most Line 9. Renders the template login.ftlh passing obj as data model. The form fields the user will fill at the browser are to be stored at variable creds Line 10. Calls the authenticate method on asrv (the AuthenticationService bean) passing the username and password (sent by the user's browser) as parameters. Note the presence of form fields username and password in the UI template. The boolean value returned by this method is stored in the key success of map obj and determines if the username and password combination supplied was valid Line 11. The username is copied to key uid of map obj . Note the usage of uid in the template: this is used to populate the username field in the case the first authentication attempt is not successful Lines 13-14. If the credentials supplied were valid, the flow is finished successfully attaching the username of the user in question. This is needed for the authentication server to determine who is logging in Line 16. If this line is reached in a flow execution, it means the three attempts were invalid. In this case the flow is finished with failure","title":"Implementation"},{"location":"admin/developer/agama/samples/#ui-template","text":"login.ftlh is 99% HTML markup and will not be detailed here. There are only a couple of things to highlight: The conditional <#if !(success!true)> (around line 27) is used to determine if an error message should be included in the generated markup. It works this way: if the key success exists in this template data model, its value is negated (note the bang character before the left parenthesis) and the if condition is evaluated. If non-existing, a true value is assumed which is then negated and thus the if body will not be evaluated- Expressions of the form ${msgs[...]} are used to access string messages defined in the server resource bundle. For more information visit \"Writing UI pages\" . The expression ${uid!} (around line 35) is equivalent to ${uid!\"\"} and evaluates to the value of key uid . In case uid is not defined, an empty string value is used.","title":"UI template"},{"location":"admin/developer/agama/samples/#email-otp-authentication","text":"This is a two-stepped flow where the end-user initially is prompted to enter a username and corresponding password. Upon successful validation and assuming the user has an e-mail designated in his profile, a message with a one-time passcode (OTP) is sent to his inbox. The user is expected to enter the code in the browser to complete the authentication.","title":"Email OTP authentication"},{"location":"admin/developer/agama/samples/#implementation_1","text":"Note Acquaintance with the basic authentication flow is required to understand this flow Source code here . Lines 1-2. Flow declarations for qualified name ( io.jans.flow.sample.otp.email ) and assets folder ( samples/otp-email ) Line 5. The basic authentication flow is launched. Its output stored in variable obj Lines 6-7. If basic authentication didn't succeed, this flows finishes in the same way Line 9. The user identifier is grabbed from the basic flow output and stored in userId Line 10. The e-mail of the user identified by userId is obtained by calling method emailOf of class EmailOTPUtil . Source code here . This time the managed bean UserService is used. Copy EmailOTPUtil.java directly to folder /opt/jans/jetty/jans-auth/agama/scripts/io/jans/agama/samples of your server Lines 12-14. If the user does not have a designated e-mail address, the flow is finished Lines 16-18. Initializes utility variables and declares that the block of indented statements (lines 20-35) will be executed repeatedly three times at most Lines 20-22. Sends a message with a passcode to the e-mail of the user (stored in variable email ) by calling method send of class EmailOTPUtil . If delivery was successful this method returns the passcode sent, otherwise null . The value is store in otpCode variable Lines 24-26. If delivery failed, the flow is finished Line 28. Renders the template otp.ftlh passing obj as data model. After form submission, obj will have up to two keys: passcode and resend . The former will hold whatever the user entered in the passcode text field, and the latter will exist if the \"resend code\" link was clicked Line 31. Variable sendEmail is set to true if the user clicked on the \"resend code\" link Line 33-35. If the passcode entered in the text field matches the value of the passcode sent in the e-mail (variable otpCode ) the flow finishes successfully indicating the identity of the user (previously stored in userId ). Otherwise key matches is attached to map obj with value false . This key is employed in the template (around line 27) to show an error message in case the user entered a wrong code Lines 37-38. If execution reaches this point, it means the form was submitted three times and no matching code was entered. In this case, flow is finished accordingly (failed)","title":"Implementation"},{"location":"admin/developer/agama/samples/#ui-template_1","text":"otp.ftlh is on the same lines of the template used in the basic authentication flow. Here the form has three relevant elements: A textfield to enter the passcode (around line 35) A standard submission button (around line 41) A button with type=submit and id=resend rendered as a hypertext link (around line 47). Only when the link is clicked, resend parameter will be part of the request sent to the server If the user presses the enter key when the focus is on the text field, the form is submitted by means of the standard submission button.","title":"UI template"},{"location":"admin/developer/agama/samples/#combined-registration-and-authentication-flow","text":"In this flow features like template overrides and flow cancellation are leveraged to bring a more sophisticated authentication journey. A description follows: A login form (username/password) is shown with an auxiliary link to offer account registration If the registration link is clicked, the user is shown a page that prompts personal details in order to create an account Upon successful account creation, a \"continue to login\" page is presented The OTP authentication flow of the previous section is reused: a standard login form is shown and then the user is prompted to enter a passcode.","title":"Combined registration and authentication flow"},{"location":"admin/developer/agama/samples/#registration","text":"For the purposes of registration, a small flow was created: This flow is pretty simple and we are not going into the details here. Keep in mind the following: Upload confirmation.ftlh and index.ftlh files to folder /opt/jans/jetty/jans-auth/agama/ftl/samples/registration Copy the file RegistrationUtil.java to directory /opt/jans/jetty/jans-auth/agama/io/jans/agama/samples Keep this flow disabled. If used standalone, it will finish but no actual person will be authenticated. It is not designed to be used directly but by other flows.","title":"Registration"},{"location":"admin/developer/agama/samples/#main-flow","text":"Source code here . This flow is short and powerful. To start it launches the email OTP authentication flow (line 4). However, instead of the login.ftlh template used internally by the basic flow, a different version is used (line 5). The new template is located in this flow's basepath, i.e. samples/otp-email-registration , and the file name does not change. This new page simply adds a small link that reads \"Don't have an account?\" in a new HTML form. When clicked it will provoke the email-OTP flow to be aborted early and the condition at line 7 will be truthy. If that's not the case, the email-OTP flow will proceed as usual and the current flow will finish in the same way as email-OTP (line 16). If email-OTP is aborted, the registration flow that we just saw is launched (line 9). Here the template confirmation.ftlh is overriden too (line 10). This new page changes the label of the button that is shown after an account has been created: originally the text is \"Continue\" but for the current flow, \"Proceed to login\" is a better fit. If the registration flow finishes successfully (line 12), the email-OTP flow is triggered again (line 14) - this time without customizations. Then the user can supply his recently-created credentials to get past the basic authentication stage and finally move to the OTP challenge. Recall that via registration flow the user's e-mail address is already stored in the database. Finally, the current flow finishes identically as email-OTP did (line 16).","title":"Main flow"},{"location":"admin/developer/agama/ui-pages/","tags":["administration","developer","agama"],"text":"Writing UI pages # Creating the pages that make up an Agama flow is rather straightforward for a developer. Depending on the sophistication required for the UI/UX, more effort might be demanded, however with Agama, developers focus more on writing HTML markup than dealing with complexities of a UI framework. Here, there is considerably less wrestling in comparison to using big frameworks like JSF. Template engine # To generate all output to be sent to the browser, the Apache FreeMarker template engine is used. This is a lightweight, versatile, and easy-to-learn open-source Java library. With FreeMarker any kind of text output can be produced, so Agama flows are not restricted to HTML markup exclusively. Developers are encouraged to take a peep at the FreeMarker manual before trying to write their first pages. The key concept there is Template + data-model = output which is pretty natural. The sumation in this equation is generally referred to as \"rendering a template\" in this documentation. The following resources are useful as introduction as well: The Hello World flow presented in the quick start guide. Pay attention to the RRF instruction there Agama sample flows As you will see, the task boils down to produce the desired markup plus adding some placeholders for information that is dynamic. Data model # In Agama, every template is generally \"injected\" some data, see RRF . This data in FreeMarker terms is known as \"data-model\". In practice, this will be an Agama map which can be accessed from the templates using standard FreeMarker notation. This map is attached a couple of additional keys for developer's convenience: webCtx . It gives easy access to often needed bits like current path, locale, etc. This is a Java object you can inspect here . Take a look at the getters; writing ${webCtx.contextPath} in a template will insert the result of calling method getContextPath - normally the string /jans-auth . msgs . It gives access to the localized messages of jans-auth application. Some developers might know this as the \"internationalization labels\" or \"resource bundle\" of an application. This is a collection of .properties files where common UI-related messages in different languages can be found. A message (label) is identified by a key, so in a template ${msgs.<KEY>} could be used. As most keys in resource bundles have dot characters, the alternative notation ${webCtx[\"KEY\"]} works better for FreeMarker, for example ${msgs[\"login.errorMessage\"]} . Output encoding # The character encoding of the response sent to browser is by default UTF-8 . To specify a different encoding the ftl directive can be used, for instance, <#ftl encoding=\"ISO-8859-5\"> . Place this at the top of the template. Reusable templates # A widespread practice in web page authoring is to compose pages based on reusable pieces. As an example, the need for a common header and footer is ubiquitous in HTML projects. With FreeMarker, composition can be achieved by means of macros . These are the equivalent to functions in programming, they can generate output based on parameters passed and can be called anywhere in a template. Agama already makes use of macros for this purpose. Take a look at the ftlh files found at /opt/jans/jetty/jans-auth/agama . These templates are used to present errors, like timeouts, flow crashes, etc. Example # Here, two pages will be built to demostrate the concept of composition in FreeMarker templates: a homepage and an \"about us\" page. These will be made up of a header, a sidebar, and their respective main content. Assume the sidebar should be shown only for the home page. Note FreeMarker comments are of the form <#-- This won't be printed in the output --> One way to structure the solution is the following: <#-- aside.ftlh --> <#macro sidebar> <aside> <h2>Recommended tracks</h2> <nav> <ul> <li><a href=\"#\">Efilnikufesin</a></li> <li><a href=\"#\">P.O.N.X.</a></li> <!--li><a href=\"#\">Planet caravan</a></li--> </ul> </nav> </aside> </#macro> aside.ftlh has static markup for a sidebar. It is defined inside a macro called sidebar . <#-- commons.ftlh --> <#import \"aside.ftlh\" as sbar> <#macro header> <header> <h1>Welcome</h1> <nav> <ul> <li><a href=\"#\">Home</a></li> <li><a href=\"#\">About</a></li> <li><a href=\"#\">Sign Up</a></li> </ul> </nav> </header> </#macro> <#macro main useSidebar=false> <!DOCTYPE html> <html> <body> <@header/> <#if useSidebar> <@sbar.sidebar/> </#if> <#nested> </body> </html> </#macro> commons.ftlh template imports aside.ftlh associating it with the shortname sbar . Additionally: It defines two macros: header and main . The macro header generates a static navigation menu main macro is the skeleton of a very simple HTML page main has a parameter named useSidebar whose default is false The sidebar macro is called using <@sbar.sidebar/> while header with <@header/> (local macro) <#-- index.ftlh --> <#import \"commons.ftlh\" as com> <@com.main useSidebar=true> <article> <h1>This is the index page!</h1> <p>Temporibus ut nisi quibusdam iusto vitae similique laudantium. Minima cumque ducimus sit ut dolores. Autem quam soluta illo et omnis expedita voluptas magnam. Sit aperiam laboriosam magnam et amet deleniti. Sit et velit unde quibusdam esse ullam voluptatem. Enim sint blanditiis dolores. Laborum velit eos dolor ad quaerat. Quo tempora excepturi enim dolor harum sunt ipsa. Quis sit dolorem harum ipsa fuga voluptatem commodi. </p> </article> </@com.main> index.ftlh is the homepage: Template commons.ftlh is imported and its macro main called passing true for useSidebar The markup between <@com.main... and <!--@com.main--> is the content of the homepage, which is \"inserted\" by the main macro when the <#nested> directive is reached <#-- about.ftlh --> <#import \"commons.ftlh\" as com> <@com.main> <article> <h1>About us</h1> <p>We don't know ourselves very well.</p> </article> </@com.main> about.ftlh is the \"about us\" page. It works like the homepage except the sidebar will not be shown. Assets # Web pages need their assets, be they stylesheets, images, or javascript. The template engine has no restrictions in this regard. The main concern is producing proper markup. Keep in mind assets are not stored alongisde the templates but in the parallel folder /opt/jans/jetty/jans-auth/agama/fl . Check here to learn more. Template overrides # Template overrides is a mechanism that allows templates customization and promotes flows reuse. If an existing flow serves well the needs of a new flow you are writing, with this feature you can homogenize your UI for a more pleasant user experience. To start, use Trigger to play around with the existing flow - as is - from the flow you are creating. Collect the URLs of the pages you are not comfortable with: grab them directly from the browser's address bar. Then proceed as follows with every URL to locate the actual templates physically: Remove the https://.../fl/ portion of the URL Split the URL obtained into two pieces: a folder name and a remainder . The remainder starts after the last slash found in the URL, and usually ends in .fls In your Janssen server, locate the directory /opt/jans/jetty/jans-auth/agama/ftl cd to the directory specified by the folder List the contents of the directory and pick the filename that best matches the remainder Save a copy of every selected file in the directory associated to your flow ( basePath directive) or in a subdirectory of it. Rename the files if desired too. Now, build the Override templates directive passing several pairs of strings separated by lines or spaces. Every pair consists of a string specifying the original template location, that is, <folder>/<filename> followed by the path to the new template version relative to the base path of your flow. Check here for an example.","title":"Writing UI Pages"},{"location":"admin/developer/agama/ui-pages/#writing-ui-pages","text":"Creating the pages that make up an Agama flow is rather straightforward for a developer. Depending on the sophistication required for the UI/UX, more effort might be demanded, however with Agama, developers focus more on writing HTML markup than dealing with complexities of a UI framework. Here, there is considerably less wrestling in comparison to using big frameworks like JSF.","title":"Writing UI pages"},{"location":"admin/developer/agama/ui-pages/#template-engine","text":"To generate all output to be sent to the browser, the Apache FreeMarker template engine is used. This is a lightweight, versatile, and easy-to-learn open-source Java library. With FreeMarker any kind of text output can be produced, so Agama flows are not restricted to HTML markup exclusively. Developers are encouraged to take a peep at the FreeMarker manual before trying to write their first pages. The key concept there is Template + data-model = output which is pretty natural. The sumation in this equation is generally referred to as \"rendering a template\" in this documentation. The following resources are useful as introduction as well: The Hello World flow presented in the quick start guide. Pay attention to the RRF instruction there Agama sample flows As you will see, the task boils down to produce the desired markup plus adding some placeholders for information that is dynamic.","title":"Template engine"},{"location":"admin/developer/agama/ui-pages/#data-model","text":"In Agama, every template is generally \"injected\" some data, see RRF . This data in FreeMarker terms is known as \"data-model\". In practice, this will be an Agama map which can be accessed from the templates using standard FreeMarker notation. This map is attached a couple of additional keys for developer's convenience: webCtx . It gives easy access to often needed bits like current path, locale, etc. This is a Java object you can inspect here . Take a look at the getters; writing ${webCtx.contextPath} in a template will insert the result of calling method getContextPath - normally the string /jans-auth . msgs . It gives access to the localized messages of jans-auth application. Some developers might know this as the \"internationalization labels\" or \"resource bundle\" of an application. This is a collection of .properties files where common UI-related messages in different languages can be found. A message (label) is identified by a key, so in a template ${msgs.<KEY>} could be used. As most keys in resource bundles have dot characters, the alternative notation ${webCtx[\"KEY\"]} works better for FreeMarker, for example ${msgs[\"login.errorMessage\"]} .","title":"Data model"},{"location":"admin/developer/agama/ui-pages/#output-encoding","text":"The character encoding of the response sent to browser is by default UTF-8 . To specify a different encoding the ftl directive can be used, for instance, <#ftl encoding=\"ISO-8859-5\"> . Place this at the top of the template.","title":"Output encoding"},{"location":"admin/developer/agama/ui-pages/#reusable-templates","text":"A widespread practice in web page authoring is to compose pages based on reusable pieces. As an example, the need for a common header and footer is ubiquitous in HTML projects. With FreeMarker, composition can be achieved by means of macros . These are the equivalent to functions in programming, they can generate output based on parameters passed and can be called anywhere in a template. Agama already makes use of macros for this purpose. Take a look at the ftlh files found at /opt/jans/jetty/jans-auth/agama . These templates are used to present errors, like timeouts, flow crashes, etc.","title":"Reusable templates"},{"location":"admin/developer/agama/ui-pages/#example","text":"Here, two pages will be built to demostrate the concept of composition in FreeMarker templates: a homepage and an \"about us\" page. These will be made up of a header, a sidebar, and their respective main content. Assume the sidebar should be shown only for the home page. Note FreeMarker comments are of the form <#-- This won't be printed in the output --> One way to structure the solution is the following: <#-- aside.ftlh --> <#macro sidebar> <aside> <h2>Recommended tracks</h2> <nav> <ul> <li><a href=\"#\">Efilnikufesin</a></li> <li><a href=\"#\">P.O.N.X.</a></li> <!--li><a href=\"#\">Planet caravan</a></li--> </ul> </nav> </aside> </#macro> aside.ftlh has static markup for a sidebar. It is defined inside a macro called sidebar . <#-- commons.ftlh --> <#import \"aside.ftlh\" as sbar> <#macro header> <header> <h1>Welcome</h1> <nav> <ul> <li><a href=\"#\">Home</a></li> <li><a href=\"#\">About</a></li> <li><a href=\"#\">Sign Up</a></li> </ul> </nav> </header> </#macro> <#macro main useSidebar=false> <!DOCTYPE html> <html> <body> <@header/> <#if useSidebar> <@sbar.sidebar/> </#if> <#nested> </body> </html> </#macro> commons.ftlh template imports aside.ftlh associating it with the shortname sbar . Additionally: It defines two macros: header and main . The macro header generates a static navigation menu main macro is the skeleton of a very simple HTML page main has a parameter named useSidebar whose default is false The sidebar macro is called using <@sbar.sidebar/> while header with <@header/> (local macro) <#-- index.ftlh --> <#import \"commons.ftlh\" as com> <@com.main useSidebar=true> <article> <h1>This is the index page!</h1> <p>Temporibus ut nisi quibusdam iusto vitae similique laudantium. Minima cumque ducimus sit ut dolores. Autem quam soluta illo et omnis expedita voluptas magnam. Sit aperiam laboriosam magnam et amet deleniti. Sit et velit unde quibusdam esse ullam voluptatem. Enim sint blanditiis dolores. Laborum velit eos dolor ad quaerat. Quo tempora excepturi enim dolor harum sunt ipsa. Quis sit dolorem harum ipsa fuga voluptatem commodi. </p> </article> </@com.main> index.ftlh is the homepage: Template commons.ftlh is imported and its macro main called passing true for useSidebar The markup between <@com.main... and <!--@com.main--> is the content of the homepage, which is \"inserted\" by the main macro when the <#nested> directive is reached <#-- about.ftlh --> <#import \"commons.ftlh\" as com> <@com.main> <article> <h1>About us</h1> <p>We don't know ourselves very well.</p> </article> </@com.main> about.ftlh is the \"about us\" page. It works like the homepage except the sidebar will not be shown.","title":"Example"},{"location":"admin/developer/agama/ui-pages/#assets","text":"Web pages need their assets, be they stylesheets, images, or javascript. The template engine has no restrictions in this regard. The main concern is producing proper markup. Keep in mind assets are not stored alongisde the templates but in the parallel folder /opt/jans/jetty/jans-auth/agama/fl . Check here to learn more.","title":"Assets"},{"location":"admin/developer/agama/ui-pages/#template-overrides","text":"Template overrides is a mechanism that allows templates customization and promotes flows reuse. If an existing flow serves well the needs of a new flow you are writing, with this feature you can homogenize your UI for a more pleasant user experience. To start, use Trigger to play around with the existing flow - as is - from the flow you are creating. Collect the URLs of the pages you are not comfortable with: grab them directly from the browser's address bar. Then proceed as follows with every URL to locate the actual templates physically: Remove the https://.../fl/ portion of the URL Split the URL obtained into two pieces: a folder name and a remainder . The remainder starts after the last slash found in the URL, and usually ends in .fls In your Janssen server, locate the directory /opt/jans/jetty/jans-auth/agama/ftl cd to the directory specified by the folder List the contents of the directory and pick the filename that best matches the remainder Save a copy of every selected file in the directory associated to your flow ( basePath directive) or in a subdirectory of it. Rename the files if desired too. Now, build the Override templates directive passing several pairs of strings separated by lines or spaces. Every pair consists of a string specifying the original template location, that is, <folder>/<filename> followed by the path to the new template version relative to the base path of your flow. Check here for an example.","title":"Template overrides"},{"location":"admin/developer/customization/","tags":["administration","developer","customization"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/developer/customization/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/developer/customization/custom-client-logs/","tags":["administration","developer","customization"],"text":"This is a placeHolder","title":"Custom client logs"},{"location":"admin/developer/customization/customize-web-pages/","tags":["administration","developer","customization"],"text":"All web pages are xhtml files. Default pages bundled in the jans-auth.war are: # Login page: login.xhtml Authorization page: authorize.xhtml Logout page: logout.xhtml Error page: error.xhtml To override default pages listed above: # Put a modified login.xhtml or authorize.xhtml or error.xhtml or logout.xhtml under /opt/gluu/jetty/jans-auth/custom/pages/ Directory structure for customization # /opt/jans/jetty/jans-auth/ |-- custom | |-- i18n (resource bundles) | |-- libs (library files used by custom script) | |-- pages (web pages) | |-- static (images and css files) Adding a new web page for Person Authentication scripts # If enterOTP.xhtml is your webpage for step 2 of authentication, place under /opt/jans/jetty/jans-auth/custom/pages/enterOTP.xhtml Reference it in the custom script as follows: def getPageForStep(self, configurationAttributes, step): # Used to specify the page you want to return for a given step if (step == 1): return \"/auth/login.xhtml\" if (step == 2) return \"/auth/enterOTP.xhtml\" Customized resource bundles: # Resource bundles that are present in the jans-auth.war are present in this folder To override the defaults, custom .properties files should be placed in the following file under this path : /opt/jans/jetty/jans-auth/custom/i18n/jans-auth.properties Resource bundle names to support other languages should be placed under the same folder /opt/jans/jetty/jans-auth/custom/i18n/ . Some examples of file names are : jans-auth_en.properties jans-auth_bg.properties jans-auth_de.properties jans-auth_es.properties jans-auth_fr.properties jans-auth_it.properties jans-auth_ru.properties jans-auth_tr.properties To add translation for a language that is not yet supported, create new properties file in resource folder and name it jans-auth_[language_code].properties, then add language code as supported-locale to the faces-config.xml present in the same folder. Custom CSS files: # Place the file in /opt/gluu/jetty/jans-auth/custom/static/stylesheet/theme.css Reference it in .xhtml file using the URL https://your.jans.server/jans-auth/ext/resources/stylesheet/theme.css or /jans-auth/ext/resources/stylesheet/theme.css Custom image files: # All images should be placed under /opt/gluu/jetty/jans-auth/custom/static/img Reference it in .xhtml file using the URL https://your.jans.server/oxauth/ext/resources/img/fileName.png or /oxauth/ext/resources/img/fileName.jpg Page layout, header, footer (xhtml Template) customization # Templates refers to the common interface layout and style. For example, a same banner, logo in common header and copyright information in footer. mkdir -p /opt/jans/jetty/jans-auth/custom/pages/WEB-INF/incl/layout/ Place a modified template.xhtml in the above location which will override the default template file from the war","title":"Customize Web pages"},{"location":"admin/developer/customization/customize-web-pages/#default-pages-bundled-in-the-jans-authwar-are","text":"Login page: login.xhtml Authorization page: authorize.xhtml Logout page: logout.xhtml Error page: error.xhtml","title":"Default pages bundled in the jans-auth.war are:"},{"location":"admin/developer/customization/customize-web-pages/#to-override-default-pages-listed-above","text":"Put a modified login.xhtml or authorize.xhtml or error.xhtml or logout.xhtml under /opt/gluu/jetty/jans-auth/custom/pages/","title":"To override default pages listed above:"},{"location":"admin/developer/customization/customize-web-pages/#directory-structure-for-customization","text":"/opt/jans/jetty/jans-auth/ |-- custom | |-- i18n (resource bundles) | |-- libs (library files used by custom script) | |-- pages (web pages) | |-- static (images and css files)","title":"Directory structure for customization"},{"location":"admin/developer/customization/customize-web-pages/#adding-a-new-web-page-for-person-authentication-scripts","text":"If enterOTP.xhtml is your webpage for step 2 of authentication, place under /opt/jans/jetty/jans-auth/custom/pages/enterOTP.xhtml Reference it in the custom script as follows: def getPageForStep(self, configurationAttributes, step): # Used to specify the page you want to return for a given step if (step == 1): return \"/auth/login.xhtml\" if (step == 2) return \"/auth/enterOTP.xhtml\"","title":"Adding a new web page for Person Authentication scripts"},{"location":"admin/developer/customization/customize-web-pages/#customized-resource-bundles","text":"Resource bundles that are present in the jans-auth.war are present in this folder To override the defaults, custom .properties files should be placed in the following file under this path : /opt/jans/jetty/jans-auth/custom/i18n/jans-auth.properties Resource bundle names to support other languages should be placed under the same folder /opt/jans/jetty/jans-auth/custom/i18n/ . Some examples of file names are : jans-auth_en.properties jans-auth_bg.properties jans-auth_de.properties jans-auth_es.properties jans-auth_fr.properties jans-auth_it.properties jans-auth_ru.properties jans-auth_tr.properties To add translation for a language that is not yet supported, create new properties file in resource folder and name it jans-auth_[language_code].properties, then add language code as supported-locale to the faces-config.xml present in the same folder.","title":"Customized resource bundles:"},{"location":"admin/developer/customization/customize-web-pages/#custom-css-files","text":"Place the file in /opt/gluu/jetty/jans-auth/custom/static/stylesheet/theme.css Reference it in .xhtml file using the URL https://your.jans.server/jans-auth/ext/resources/stylesheet/theme.css or /jans-auth/ext/resources/stylesheet/theme.css","title":"Custom CSS files:"},{"location":"admin/developer/customization/customize-web-pages/#custom-image-files","text":"All images should be placed under /opt/gluu/jetty/jans-auth/custom/static/img Reference it in .xhtml file using the URL https://your.jans.server/oxauth/ext/resources/img/fileName.png or /oxauth/ext/resources/img/fileName.jpg","title":"Custom image files:"},{"location":"admin/developer/customization/customize-web-pages/#page-layout-header-footer-xhtml-template-customization","text":"Templates refers to the common interface layout and style. For example, a same banner, logo in common header and copyright information in footer. mkdir -p /opt/jans/jetty/jans-auth/custom/pages/WEB-INF/incl/layout/ Place a modified template.xhtml in the above location which will override the default template file from the war","title":"Page layout, header, footer (xhtml Template) customization"},{"location":"admin/developer/scripts/","tags":["administration","developer","scripts"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/developer/scripts/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/developer/scripts/application-session/","tags":["administration","developer","scripts"],"text":"Application Session Script Guide # Overview # This is an introduction to the script and what it's used for. Interface # Methods # A definition of each method used in the script Objects # Definitions of all objects used in the script Common Use Cases # Descriptions of common use cases for this script, including a code snippet for each","title":"Application Session"},{"location":"admin/developer/scripts/application-session/#application-session-script-guide","text":"","title":"Application Session Script Guide"},{"location":"admin/developer/scripts/application-session/#overview","text":"This is an introduction to the script and what it's used for.","title":"Overview"},{"location":"admin/developer/scripts/application-session/#interface","text":"","title":"Interface"},{"location":"admin/developer/scripts/application-session/#methods","text":"A definition of each method used in the script","title":"Methods"},{"location":"admin/developer/scripts/application-session/#objects","text":"Definitions of all objects used in the script","title":"Objects"},{"location":"admin/developer/scripts/application-session/#common-use-cases","text":"Descriptions of common use cases for this script, including a code snippet for each","title":"Common Use Cases"},{"location":"admin/developer/scripts/ciba/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"CIBA End User Notification"},{"location":"admin/developer/scripts/client-registration/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Client Registration"},{"location":"admin/developer/scripts/config-api/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Config API"},{"location":"admin/developer/scripts/consent-gathering/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Consent Gathering"},{"location":"admin/developer/scripts/dynamic-scope/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Dynamic Scope"},{"location":"admin/developer/scripts/end-session/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"End Session"},{"location":"admin/developer/scripts/id-generator/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"ID Generator"},{"location":"admin/developer/scripts/id-token/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"id_token"},{"location":"admin/developer/scripts/introspection/","tags":["administration","developer","scripts"],"text":"Introspection Script Guide # Overview # In OAuth 2.0 [RFC6749], the contents of tokens are opaque to clients. However, there is still a large amount of metadata that may be attached to a token, such as its current validity, approved scopes, and information about the context in which the token was issued. These pieces of information are often vital to protected resources making authorization decisions based on the tokens being presented. Token introspection allows a protected resource to query this information. Introspection scripts allows to modify response of Introspection Endpoint spec and present additional meta information surrounding the token. Interface # Introspection script should be associated with client (used for obtaining the token) in order to be run. Otherwise it's possible to set introspectionScriptBackwardCompatibility global AS configuration property to true, in this case AS will run all scripts (ignoring client configuration). Methods # The introspection interception script extends the base script type with the init , destroy and getApiVersion methods: Inherited Methods Method description def init(self, customScript, configurationAttributes) This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc def destroy(self, configurationAttributes) This method is called once to destroy events. It can be used to free resource and objects created in the init() method def getApiVersion(self, configurationAttributes, customScript) The getApiVersion method allows API changes in order to do transparent migration from an old script to a new API. Only include the customScript variable if the value for getApiVersion is greater than 10 The configurationAttributes parameter is java.util.Map<String, SimpleCustomProperty> . The introspection interception script also adds the following method(s): Method def modifyResponse(self, responseAsJsonObject, context) Method Paramater responseAsJsonObject is org.codehaus.jettison.json.JSONObject context is io.jans.as.service.external.context.ExternalIntrospectionContext Snippet # # Returns boolean , true - apply introspection method , false - ignore it . # This method is called after introspection response is ready . This method can modify introspection response . # Note : # responseAsJsonObject - is org . codehaus . jettison . json . JSONObject , you can use any method to manipulate json # context is reference of io . jans . as . server . service . external . context . ExternalIntrospectionContext ( in https : // github . com / JanssenProject project ) def modifyResponse ( self , responseAsJsonObject , context ) : responseAsJsonObject . accumulate ( \"key_from_script\" , \"value_from_script\" ) return True It is also possible to run introspection script during access_token creation as JWT. It can be controlled by run_introspection_script_before_access_token_as_jwt_creation_and_include_claims client property which is set to false by default. If run_introspection_script_before_access_token_as_jwt_creation_and_include_claims set to true and access_token_as_jwt set to true then introspection script will be run before JWT ( access_token ) is created and all JSON values will be transfered to JWT. Also context inside script has additional method which allows to cancel transfering of claims if needed context.setTranferIntrospectionPropertiesIntoJwtClaims(false) Common Use Cases # Script Type: Python # Retrieve Grant, Session and User Details from Access Token # Following sample code snippet shows how to work backwards from an AccessToken to Grant, Session and User information. from io.jans.model.custom.script.type.introspection import IntrospectionType from io.jans.as.server.service import SessionIdService from io.jans.service.cdi.util import CdiUtil class Introspection ( IntrospectionType ): def __init__ ( self , currentTimeMillis ): self . currentTimeMillis = currentTimeMillis def init ( self , customScript , configurationAttributes ): print \"Introspection script. Initializing ...\" print \"Introspection script. Initialized successfully\" return True def destroy ( self , configurationAttributes ): print \"Introspection script. Destroying ...\" print \"Introspection script. Destroyed successfully\" return True def getApiVersion ( self ): return 11 # Returns boolean, true - apply introspection method, false - ignore it. # This method is called after introspection response is ready. This method can modify introspection response. # Note : # responseAsJsonObject - is org.codehaus.jettison.json.JSONObject, you can use any method to manipulate json # context is reference of io.jans.as.server.service.external.context.ExternalIntrospectionContext (in https://github.com/JanssenProject project, ) def modifyResponse ( self , responseAsJsonObject , context ): authorizationGrant = context . getTokenGrant () if authorizationGrant is None : print \"Introspection. Failed to load authorization grant by context\" return False # Put user_id into response responseAsJsonObject . accumulate ( \"user_id\" , authorizationGrant . getUser () . getUserId ()) # Put custom parameters into response sessionDn = authorizationGrant . getSessionDn () if sessionDn is None : # There is no session print \"Introspection. Failed to load session DN\" return True # Return session_id responseAsJsonObject . accumulate ( \"session_id\" , sessionDn ) sessionIdService = CdiUtil . bean ( SessionIdService ) session = sessionIdService . getSessionById ( sessionDn , False ) if session is None : print \"Introspection. Failed to load session ' %s '\" % sessionDn return True sessionAttributes = session . getSessionAttributes () if sessionAttributes is None : # There is no session attributes return True # Append custom claims if sessionAttributes . containsKey ( \"custom1\" ): responseAsJsonObject . accumulate ( \"custom1\" , sessionAttributes . get ( \"custom1\" )) if sessionAttributes . containsKey ( \"custom2\" ): responseAsJsonObject . accumulate ( \"custom2\" , sessionAttributes . get ( \"custom2\" )) return True Script Type: Java # Retrieve Grant, Session and User Details from Access Token # Following sample code snippet shows how to work backwards from an AccessToken to Grant, Session and User information. import io.jans.model.SimpleCustomProperty ; import io.jans.model.custom.script.model.CustomScript ; import io.jans.model.custom.script.type.introspection.IntrospectionType ; import io.jans.service.custom.script.CustomScriptManager ; import io.jans.as.server.service.external.context.ExternalIntrospectionContext ; import io.jans.as.server.model.common.AuthorizationGrant ; import io.jans.as.server.service.SessionIdService ; import io.jans.service.cdi.util.CdiUtil ; import io.jans.as.server.model.common.SessionId ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.json.JSONObject ; import java.util.Map ; public class Introspection implements IntrospectionType { private static final Logger log = LoggerFactory . getLogger ( Introspection . class ); private static final Logger scriptLogger = LoggerFactory . getLogger ( CustomScriptManager . class ); @Override public boolean init ( Map < String , SimpleCustomProperty > configurationAttributes ) { log . info ( \"Init of Introspection Java custom script\" ); return true ; } @Override public boolean init ( CustomScript customScript , Map < String , SimpleCustomProperty > configurationAttributes ) { log . info ( \"Init of Introspection Java custom script\" ); scriptLogger . info ( \"Introspection Java script. Initializing ...\" ); scriptLogger . info ( \"Introspection Java script. Initialized successfully\" ); return true ; } @Override public boolean destroy ( Map < String , SimpleCustomProperty > configurationAttributes ) { log . info ( \"Destroy of Introspection Java custom script\" ); scriptLogger . info ( \"Introspection Java script. Destroying ...\" ); scriptLogger . info ( \"Introspection Java script. Destroyed successfully\" ); return true ; } @Override public int getApiVersion () { return 11 ; } // Returns boolean , true - apply introspection method , false - ignore it . // This method is called after introspection response is ready . This method can modify introspection response . // Note : // responseAsJsonObject - is org . json . JSONObject , you can use any method to manipulate json // context is reference of io . jans . as . server . service . external . context . ExternalIntrospectionContext ( in https : // github . com / JanssenProject project , ) @Override public boolean modifyResponse ( Object responseAsJsonObject , Object context ) { JSONObject response = ( JSONObject ) responseAsJsonObject ; ExternalIntrospectionContext ctx = ( ExternalIntrospectionContext ) context ; response . accumulate ( \"key_from_java\" , \"value_from_script_on_java\" ); AuthorizationGrant authorizationGrant = ctx . getTokenGrant (); if ( authorizationGrant == null ) { scriptLogger . info ( \"Introspection Java script. Failed to load authorization grant by context\" ); return false ; } // Put user_id into response response . accumulate ( \"user_id\" , authorizationGrant . getUser () . getUserId ()); // Put custom parameters into response String sessionDn = authorizationGrant . getSessionDn (); if ( sessionDn == null ) { // There is no session scriptLogger . info ( \"Introspection Java script. Failed to load session DN\" ); return true ; } // Return session_id response . accumulate ( \"session_id\" , sessionDn ); SessionIdService sessionIdService = CdiUtil . bean ( SessionIdService . class ); SessionId session = sessionIdService . getSessionById ( sessionDn , false ); if ( session == null ) { scriptLogger . info ( \"Introspection Java script. Failed to load session\" ); return true ; } Map < String , String > sessionAttributes = session . getSessionAttributes (); if ( sessionAttributes == null ) { // There is no session attributes return true ; } // Append custom claims if ( sessionAttributes . containsKey ( \"custom1\" )) { response . accumulate ( \"custom1\" , sessionAttributes . get ( \"custom1\" )); } if ( sessionAttributes . containsKey ( \"custom2\" )) { response . accumulate ( \"custom2\" , sessionAttributes . get ( \"custom2\" )); } return true ; } }","title":"Introspection"},{"location":"admin/developer/scripts/introspection/#introspection-script-guide","text":"","title":"Introspection Script Guide"},{"location":"admin/developer/scripts/introspection/#overview","text":"In OAuth 2.0 [RFC6749], the contents of tokens are opaque to clients. However, there is still a large amount of metadata that may be attached to a token, such as its current validity, approved scopes, and information about the context in which the token was issued. These pieces of information are often vital to protected resources making authorization decisions based on the tokens being presented. Token introspection allows a protected resource to query this information. Introspection scripts allows to modify response of Introspection Endpoint spec and present additional meta information surrounding the token.","title":"Overview"},{"location":"admin/developer/scripts/introspection/#interface","text":"Introspection script should be associated with client (used for obtaining the token) in order to be run. Otherwise it's possible to set introspectionScriptBackwardCompatibility global AS configuration property to true, in this case AS will run all scripts (ignoring client configuration).","title":"Interface"},{"location":"admin/developer/scripts/introspection/#methods","text":"The introspection interception script extends the base script type with the init , destroy and getApiVersion methods: Inherited Methods Method description def init(self, customScript, configurationAttributes) This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc def destroy(self, configurationAttributes) This method is called once to destroy events. It can be used to free resource and objects created in the init() method def getApiVersion(self, configurationAttributes, customScript) The getApiVersion method allows API changes in order to do transparent migration from an old script to a new API. Only include the customScript variable if the value for getApiVersion is greater than 10 The configurationAttributes parameter is java.util.Map<String, SimpleCustomProperty> . The introspection interception script also adds the following method(s): Method def modifyResponse(self, responseAsJsonObject, context) Method Paramater responseAsJsonObject is org.codehaus.jettison.json.JSONObject context is io.jans.as.service.external.context.ExternalIntrospectionContext","title":"Methods"},{"location":"admin/developer/scripts/introspection/#snippet","text":"# Returns boolean , true - apply introspection method , false - ignore it . # This method is called after introspection response is ready . This method can modify introspection response . # Note : # responseAsJsonObject - is org . codehaus . jettison . json . JSONObject , you can use any method to manipulate json # context is reference of io . jans . as . server . service . external . context . ExternalIntrospectionContext ( in https : // github . com / JanssenProject project ) def modifyResponse ( self , responseAsJsonObject , context ) : responseAsJsonObject . accumulate ( \"key_from_script\" , \"value_from_script\" ) return True It is also possible to run introspection script during access_token creation as JWT. It can be controlled by run_introspection_script_before_access_token_as_jwt_creation_and_include_claims client property which is set to false by default. If run_introspection_script_before_access_token_as_jwt_creation_and_include_claims set to true and access_token_as_jwt set to true then introspection script will be run before JWT ( access_token ) is created and all JSON values will be transfered to JWT. Also context inside script has additional method which allows to cancel transfering of claims if needed context.setTranferIntrospectionPropertiesIntoJwtClaims(false)","title":"Snippet"},{"location":"admin/developer/scripts/introspection/#common-use-cases","text":"","title":"Common Use Cases"},{"location":"admin/developer/scripts/introspection/#script-type-python","text":"","title":"Script Type: Python"},{"location":"admin/developer/scripts/introspection/#retrieve-grant-session-and-user-details-from-access-token","text":"Following sample code snippet shows how to work backwards from an AccessToken to Grant, Session and User information. from io.jans.model.custom.script.type.introspection import IntrospectionType from io.jans.as.server.service import SessionIdService from io.jans.service.cdi.util import CdiUtil class Introspection ( IntrospectionType ): def __init__ ( self , currentTimeMillis ): self . currentTimeMillis = currentTimeMillis def init ( self , customScript , configurationAttributes ): print \"Introspection script. Initializing ...\" print \"Introspection script. Initialized successfully\" return True def destroy ( self , configurationAttributes ): print \"Introspection script. Destroying ...\" print \"Introspection script. Destroyed successfully\" return True def getApiVersion ( self ): return 11 # Returns boolean, true - apply introspection method, false - ignore it. # This method is called after introspection response is ready. This method can modify introspection response. # Note : # responseAsJsonObject - is org.codehaus.jettison.json.JSONObject, you can use any method to manipulate json # context is reference of io.jans.as.server.service.external.context.ExternalIntrospectionContext (in https://github.com/JanssenProject project, ) def modifyResponse ( self , responseAsJsonObject , context ): authorizationGrant = context . getTokenGrant () if authorizationGrant is None : print \"Introspection. Failed to load authorization grant by context\" return False # Put user_id into response responseAsJsonObject . accumulate ( \"user_id\" , authorizationGrant . getUser () . getUserId ()) # Put custom parameters into response sessionDn = authorizationGrant . getSessionDn () if sessionDn is None : # There is no session print \"Introspection. Failed to load session DN\" return True # Return session_id responseAsJsonObject . accumulate ( \"session_id\" , sessionDn ) sessionIdService = CdiUtil . bean ( SessionIdService ) session = sessionIdService . getSessionById ( sessionDn , False ) if session is None : print \"Introspection. Failed to load session ' %s '\" % sessionDn return True sessionAttributes = session . getSessionAttributes () if sessionAttributes is None : # There is no session attributes return True # Append custom claims if sessionAttributes . containsKey ( \"custom1\" ): responseAsJsonObject . accumulate ( \"custom1\" , sessionAttributes . get ( \"custom1\" )) if sessionAttributes . containsKey ( \"custom2\" ): responseAsJsonObject . accumulate ( \"custom2\" , sessionAttributes . get ( \"custom2\" )) return True","title":"Retrieve Grant, Session and User Details from Access Token"},{"location":"admin/developer/scripts/introspection/#script-type-java","text":"","title":"Script Type: Java"},{"location":"admin/developer/scripts/introspection/#retrieve-grant-session-and-user-details-from-access-token_1","text":"Following sample code snippet shows how to work backwards from an AccessToken to Grant, Session and User information. import io.jans.model.SimpleCustomProperty ; import io.jans.model.custom.script.model.CustomScript ; import io.jans.model.custom.script.type.introspection.IntrospectionType ; import io.jans.service.custom.script.CustomScriptManager ; import io.jans.as.server.service.external.context.ExternalIntrospectionContext ; import io.jans.as.server.model.common.AuthorizationGrant ; import io.jans.as.server.service.SessionIdService ; import io.jans.service.cdi.util.CdiUtil ; import io.jans.as.server.model.common.SessionId ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.json.JSONObject ; import java.util.Map ; public class Introspection implements IntrospectionType { private static final Logger log = LoggerFactory . getLogger ( Introspection . class ); private static final Logger scriptLogger = LoggerFactory . getLogger ( CustomScriptManager . class ); @Override public boolean init ( Map < String , SimpleCustomProperty > configurationAttributes ) { log . info ( \"Init of Introspection Java custom script\" ); return true ; } @Override public boolean init ( CustomScript customScript , Map < String , SimpleCustomProperty > configurationAttributes ) { log . info ( \"Init of Introspection Java custom script\" ); scriptLogger . info ( \"Introspection Java script. Initializing ...\" ); scriptLogger . info ( \"Introspection Java script. Initialized successfully\" ); return true ; } @Override public boolean destroy ( Map < String , SimpleCustomProperty > configurationAttributes ) { log . info ( \"Destroy of Introspection Java custom script\" ); scriptLogger . info ( \"Introspection Java script. Destroying ...\" ); scriptLogger . info ( \"Introspection Java script. Destroyed successfully\" ); return true ; } @Override public int getApiVersion () { return 11 ; } // Returns boolean , true - apply introspection method , false - ignore it . // This method is called after introspection response is ready . This method can modify introspection response . // Note : // responseAsJsonObject - is org . json . JSONObject , you can use any method to manipulate json // context is reference of io . jans . as . server . service . external . context . ExternalIntrospectionContext ( in https : // github . com / JanssenProject project , ) @Override public boolean modifyResponse ( Object responseAsJsonObject , Object context ) { JSONObject response = ( JSONObject ) responseAsJsonObject ; ExternalIntrospectionContext ctx = ( ExternalIntrospectionContext ) context ; response . accumulate ( \"key_from_java\" , \"value_from_script_on_java\" ); AuthorizationGrant authorizationGrant = ctx . getTokenGrant (); if ( authorizationGrant == null ) { scriptLogger . info ( \"Introspection Java script. Failed to load authorization grant by context\" ); return false ; } // Put user_id into response response . accumulate ( \"user_id\" , authorizationGrant . getUser () . getUserId ()); // Put custom parameters into response String sessionDn = authorizationGrant . getSessionDn (); if ( sessionDn == null ) { // There is no session scriptLogger . info ( \"Introspection Java script. Failed to load session DN\" ); return true ; } // Return session_id response . accumulate ( \"session_id\" , sessionDn ); SessionIdService sessionIdService = CdiUtil . bean ( SessionIdService . class ); SessionId session = sessionIdService . getSessionById ( sessionDn , false ); if ( session == null ) { scriptLogger . info ( \"Introspection Java script. Failed to load session\" ); return true ; } Map < String , String > sessionAttributes = session . getSessionAttributes (); if ( sessionAttributes == null ) { // There is no session attributes return true ; } // Append custom claims if ( sessionAttributes . containsKey ( \"custom1\" )) { response . accumulate ( \"custom1\" , sessionAttributes . get ( \"custom1\" )); } if ( sessionAttributes . containsKey ( \"custom2\" )) { response . accumulate ( \"custom2\" , sessionAttributes . get ( \"custom2\" )); } return true ; } }","title":"Retrieve Grant, Session and User Details from Access Token"},{"location":"admin/developer/scripts/openid-config/","tags":["administration","developer","scripts"],"text":"OpenID Configuration Script Guide # Overview # This is an introduction to the script and what it's used for. Interface # Methods # A definition of each method used in the script Objects # Definitions of all objects used in the script Common Use Cases # Descriptions of common use cases for this script, including a code snippet for eachThis file is a placeholder.","title":"OpenID Configuration"},{"location":"admin/developer/scripts/openid-config/#openid-configuration-script-guide","text":"","title":"OpenID Configuration Script Guide"},{"location":"admin/developer/scripts/openid-config/#overview","text":"This is an introduction to the script and what it's used for.","title":"Overview"},{"location":"admin/developer/scripts/openid-config/#interface","text":"","title":"Interface"},{"location":"admin/developer/scripts/openid-config/#methods","text":"A definition of each method used in the script","title":"Methods"},{"location":"admin/developer/scripts/openid-config/#objects","text":"Definitions of all objects used in the script","title":"Objects"},{"location":"admin/developer/scripts/openid-config/#common-use-cases","text":"Descriptions of common use cases for this script, including a code snippet for eachThis file is a placeholder.","title":"Common Use Cases"},{"location":"admin/developer/scripts/persistence/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Persistence"},{"location":"admin/developer/scripts/person-authentication-interface/","tags":["administration","developer","scripts"],"text":"Person Authentication interface # The PersonAuthenticationType script is described by a java interface whose methods should be overridden to implement an authentication workflow. Methods to override: # init(self, customScript, configurationAttributes) : This method is only called once during the script initialization (or jans-auth service restarts). It can be used for global script initialization, initiate objects etc. def init(self, customScript, configurationAttributes): # an example of initializing global variables from script configuration if configurationAttributes.containsKey(\"registration_uri\"): self.registrationUri = configurationAttributes.get(\"registration_uri\").getValue2() return True destroy(self, configurationAttributes) : This method is called when a custom script fails to initialize or upon jans-auth service restarts. It can be used to free resource and objects created in the init() method def destroy(self, configurationAttributes): print \"OTP. Destroy\" # cleanup code here return True authenticate(self, configurationAttributes, requestParameters, step) : The most important method which will encapsulate the logic for user credential verification / validation def authenticate(self, configurationAttributes, requestParameters, step): authenticationService = CdiUtil.bean(AuthenticationService) if (step == 1): # 1. obtain user name and password from UI # 2. verify if entry exists in database # 3. authenticationService.authenticate(user_name, user_password) # 4. return True or False elif step == 2: # 1. obtain credentials from UI # 2. validate the credentials # 3. return True or False prepareForStep(self, configurationAttributes, requestParameters, step) : This method can be used to prepare variables needed to render the UI page and store them in a suitable context. prepareForStep(self, configurationAttributes, requestParameters, step) # if (step == 1): # do this # if (step == 2) # do something else # 2. return True or False getExtraParametersForStep : Used to save session variables between steps. The Jans-auth Server persists these variables to support stateless, two-step authentications even in a clustered environment. def getExtraParametersForStep(self, configurationAttributes, step): return Arrays.asList(\"paramName1\", \"paramName2\", \"paramName3\") getCountAuthenticationSteps : This method normally just returns 1, 2, or 3. In some cases, depending on the context like based on the user's country or department, you can decide to go for multistep or single step authentication. def getCountAuthenticationSteps(self, configurationAttributes): return 1 getPageForStep : Used to specify the UI page you want to show for a given step. def getPageForStep(self, configurationAttributes, step): # Used to specify the page you want to return for a given step if (step == 1): return \"/auth/login.xhtml\" if (step == 2) return \"/auth/enterOTP.xhtml\" getNextStep : Steps usually go incrementally as 1, 2, 3... unless you specify a case where it can be reset to a previous step, or skip a particular step based on business case. def getNextStep(self, configurationAttributes, requestParameters, step): # steps usually are incremented 1, 2, 3... unless you specify a case where it can be reset to a previous step, or skip a particular step based on business case. return -1 getAuthenticationMethodClaims : Array of strings that are identifiers for authentication methods used in the authentication. In OpenID Connect, if the identity provider supplies an \"amr\" claim in the ID Token resulting from a successful authentication, the relying party can inspect the values returned and thereby learn details about how the authentication was performed. def getAuthenticationMethodClaims(self, requestParameters): return Arrays.asList(\"pwd\", \"otp\") getApiVersion : This value is currently meant to be hardcoded to 11 ``` def getApiVersion ( self ) : return 11 ``` isValidAuthenticationMethod : This method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return True or False. def isValidAuthenticationMethod(self, usageType, configurationAttributes): return True getAlternativeAuthenticationMethod : This method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if isValidAuthenticationMethod returns False. As a result it should return the reserved authentication method name. def getAlternativeAuthenticationMethod(self, usageType, configurationAttributes): return None getLogoutExternalUrl : Returns the 3rd-party URL that is used to end session routines. The control from this Third party URL should re-direct user back to /oxauth/logout.htm again with empty URL query string. Jans-Auth server will then continue of the extended logout flow, restore the original URL query string, and send user to /jans-auth/end_session to complete it. def getLogoutExternalUrl(self, configurationAttributes, requestParameters): return None logout : This method is not mandatory. It can be used in cases when you need to execute specific logout logic in the authentication script when jans-auth receives an end session request to the /oxauth/logout.htm endpoint (which receives the same set of parameters than the usual end_session endpoint). This method should return True or False; when False jans-auth stops processing the end session request workflow. def logout(self, configurationAttributes, requestParameters): return True","title":"Person authentication interface"},{"location":"admin/developer/scripts/person-authentication-interface/#person-authentication-interface","text":"The PersonAuthenticationType script is described by a java interface whose methods should be overridden to implement an authentication workflow.","title":"Person Authentication interface"},{"location":"admin/developer/scripts/person-authentication-interface/#methods-to-override","text":"init(self, customScript, configurationAttributes) : This method is only called once during the script initialization (or jans-auth service restarts). It can be used for global script initialization, initiate objects etc. def init(self, customScript, configurationAttributes): # an example of initializing global variables from script configuration if configurationAttributes.containsKey(\"registration_uri\"): self.registrationUri = configurationAttributes.get(\"registration_uri\").getValue2() return True destroy(self, configurationAttributes) : This method is called when a custom script fails to initialize or upon jans-auth service restarts. It can be used to free resource and objects created in the init() method def destroy(self, configurationAttributes): print \"OTP. Destroy\" # cleanup code here return True authenticate(self, configurationAttributes, requestParameters, step) : The most important method which will encapsulate the logic for user credential verification / validation def authenticate(self, configurationAttributes, requestParameters, step): authenticationService = CdiUtil.bean(AuthenticationService) if (step == 1): # 1. obtain user name and password from UI # 2. verify if entry exists in database # 3. authenticationService.authenticate(user_name, user_password) # 4. return True or False elif step == 2: # 1. obtain credentials from UI # 2. validate the credentials # 3. return True or False prepareForStep(self, configurationAttributes, requestParameters, step) : This method can be used to prepare variables needed to render the UI page and store them in a suitable context. prepareForStep(self, configurationAttributes, requestParameters, step) # if (step == 1): # do this # if (step == 2) # do something else # 2. return True or False getExtraParametersForStep : Used to save session variables between steps. The Jans-auth Server persists these variables to support stateless, two-step authentications even in a clustered environment. def getExtraParametersForStep(self, configurationAttributes, step): return Arrays.asList(\"paramName1\", \"paramName2\", \"paramName3\") getCountAuthenticationSteps : This method normally just returns 1, 2, or 3. In some cases, depending on the context like based on the user's country or department, you can decide to go for multistep or single step authentication. def getCountAuthenticationSteps(self, configurationAttributes): return 1 getPageForStep : Used to specify the UI page you want to show for a given step. def getPageForStep(self, configurationAttributes, step): # Used to specify the page you want to return for a given step if (step == 1): return \"/auth/login.xhtml\" if (step == 2) return \"/auth/enterOTP.xhtml\" getNextStep : Steps usually go incrementally as 1, 2, 3... unless you specify a case where it can be reset to a previous step, or skip a particular step based on business case. def getNextStep(self, configurationAttributes, requestParameters, step): # steps usually are incremented 1, 2, 3... unless you specify a case where it can be reset to a previous step, or skip a particular step based on business case. return -1 getAuthenticationMethodClaims : Array of strings that are identifiers for authentication methods used in the authentication. In OpenID Connect, if the identity provider supplies an \"amr\" claim in the ID Token resulting from a successful authentication, the relying party can inspect the values returned and thereby learn details about how the authentication was performed. def getAuthenticationMethodClaims(self, requestParameters): return Arrays.asList(\"pwd\", \"otp\") getApiVersion : This value is currently meant to be hardcoded to 11 ``` def getApiVersion ( self ) : return 11 ``` isValidAuthenticationMethod : This method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return True or False. def isValidAuthenticationMethod(self, usageType, configurationAttributes): return True getAlternativeAuthenticationMethod : This method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if isValidAuthenticationMethod returns False. As a result it should return the reserved authentication method name. def getAlternativeAuthenticationMethod(self, usageType, configurationAttributes): return None getLogoutExternalUrl : Returns the 3rd-party URL that is used to end session routines. The control from this Third party URL should re-direct user back to /oxauth/logout.htm again with empty URL query string. Jans-Auth server will then continue of the extended logout flow, restore the original URL query string, and send user to /jans-auth/end_session to complete it. def getLogoutExternalUrl(self, configurationAttributes, requestParameters): return None logout : This method is not mandatory. It can be used in cases when you need to execute specific logout logic in the authentication script when jans-auth receives an end session request to the /oxauth/logout.htm endpoint (which receives the same set of parameters than the usual end_session endpoint). This method should return True or False; when False jans-auth stops processing the end session request workflow. def logout(self, configurationAttributes, requestParameters): return True","title":"Methods to override:"},{"location":"admin/developer/scripts/person-authentication/","tags":["administration","developer","scripts"],"text":"Person Authentication scripts # The Jans-Auth Server leverages interception scripts of PersonAuthenticationType which when implemented can facilitate complex multi-step, multi-factor authentication workflows. The authentication flow in the Jans Server is driven by the openID spec. The authorization request to the OP (Jans server) contains an optional query parameter called acr_values which is used by the OP to pick an interception script which will be run when /authorize endpoint (Authentication flow) is invoked. The name of each script corresponds with its acr value in the Jans-Auth Server. Typically, a PersonAuthenticationType script can be used to: 1. introduce a new 2FA authentication mechanism 2. customise multistep authentication 3. offer Social logins 4. proactively perform fraud detection and block the user. Default authentication method: # In an OpenID Connect authentication request, one of the optional parameters defined is acr_values . This is the primary way for a client to signal to the OpenID Provider (OP) the preferred way to authenticate the subject. A client may also specify default_acr_values during registration (and omit the parameter while making an authentication request). In the Jansssen Server configuration, acr is used to name the authentication workflow. default_acr : This is the default authentication mechanism exposed to all applications that send users to the Janssen Server for sign-in. Unless an app specifically requests a different form of authentication using the OpenID Connect acr_values parameter (as specified below), users will receive the form of authentication specified in this field. If a default ACR is not specified, Janssen will determine it based on enabled scripts and the internal user/password ACR. This internal ACR, simple_password_auth , is set to level -1. This means that it has lower priority than any scripts, so Janssen server will use it only if no other authentication method is set. Use the jans-cli to update / look-up the default authentication method . Multiple Authentication Mechanisms # The Jans Server can concurrently support multiple authentication mechanisms, enabling Web and mobile apps (clients) to request a specific type of authentication using the standard OpenID Connect request parameter: acr_value. Enabling an authentication mechanism # By default, users will get the default authentication mechanism as specified above. However, using the OpenID Connect acr_values parameter, web and mobile clients can request any enabled authentication mechanism . Obtain the json contents of a custom script by using a jans-cli command like get-config-scripts-by-type , get-config-scripts-by-inum etc. Example : /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:PERSON_AUTHENTICATION /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:6122281b-b55d-4dd0-8115-b098eeeee2b7 Update the custom script and change the enabled attribute to true Level (rank) of an Authentication mechanism : # Each authentication mechanism has a \"Level\" assigned to it which describes how secure and strict it is. The higher the \"Level\", the more reliable mechanism represented by the script is. Though several mechanisms can be enabled at the same Janssen server instance at the same time, for any specific user's session only one of them can be set as the current one (and will be returned as acr claim of id_token for them). If after initial session is created a new authorization request from a RP comes in specifying another authentication method, its \"Level\" will be compared to that of the method currently associated with this session. If requested method's \"Level\" is lower or equal to it, nothing is changed and the usual SSO behavior is observed. If it's higher (i.e. a more secure method is requested), it's not possible to serve such request using the existing session's context, and user must re-authenticate themselves to continue. If they succeed, a new session becomes associated with that requested mechanism instead. Enabled scripts can be confirmed by checking the Janssen OP configuration URL, https://<hostname>/.well-known/openid-configuration , and finding the \" acr_values_supported \". Learn more about acr_values in the OpenID Connect core spec . Building blocks of an authentication workflow # A. Custom script B. UI pages, stylesheets, javascript files, image files and resource bundles C. Managed Beans D. Third party libraries. Jans-auth comprises of a number of beans, configuration files and Facelets (JSF) views, packaged as a WAR module. That means custom scripts and custom pages (JSF facelets) can make use of business logic already encapsulated in the Weld managed beans. The following sections explain how authentication flow can be built using a custom script. Writing a custom script # The PersonAuthenticationType script is described by a java interface whose methods should be overridden to implement an authentication workflow. The article talks about these methods in detail and the psuedo code in each method will help drive home the point. Writing UI pages: # All pages are xhtml files. The Jans-auth server comes with a default set of pages for login, logout, errors, authorizations. You can easily override these pages or write new ones. You can easily apply your own stylesheet, images and resouce-bundles to your pages. This article covers all the details you need to write your own web page. Building business logic in Custom script: # Jans-auth server uses Weld 3.0 (JSR-365 aka CDI 2.0) for managed beans. The most important aspects of business logic are implemented through a set of beans. Details and examples of this can be found in this article Adding libraries for use in the custom script # Java or Python libraries to be imported and used very easily. Remember incase you opt for a python library, it should be written in \"pure python\" only. More details of this mentioned here Uses of Person Authentication script # A. Implementing 2FA authentication mechanisms # FIDO2 : Authentications using platform authenticators embedded into a person's device or physical USB, NFC or Bluetooth security keys that are inserted into a USB slot of a computer SMS OTP : Email OTP B. Implementing Multistep authentication # Redirect to previous step : The script here an example of how the number of steps can be varied depending on the context or business requirement. C. Implementing Social logins # You can use a PersonAuthenticationType script to allow users to sign using credentials from popular Social Identity providers or Inbound Identity Providers like Facebook, Google and Apple. After users authenticate, thier Social Identity Provider credentials are provisioned into the Jans-auth server. More on this topic in this article D. Proactively perform fraud detection # Impossible travel Testing an authentication flow # An example of a complete URL looks like this - ``` https://<your.jans.server>/jans-auth/authorize.htm? \\ response_type=code&redirect_uri=https://<your.jans.server>/admin \\ &client_id=17b8b82e-b3ec-42a2-bd90-097028a37f3 \\ &scope=openid+profile+email+user_name \\ &state=faad2cdjfdddjfkdf&nonce=dajdffdfsdcfff ``` To test , enter the complete URL for authorization in a browser or create a simple webmapage with a link that simulates the user sign-in attempt. If the server is configured properly, the first page for the selected authentication method will be displayed to the user. FAQs # 1. How can error messages be displayed on a web page? # FacesMessage bean is used for this purpose. from org.jans.jsf2.message import FacesMessages from org.jans.service.cdi.util import CdiUtil from javax.faces.application import FacesMessage ... facesMessages = CdiUtil.bean(FacesMessages) facesMessages.setKeepMessages() facesMessages.add(FacesMessage.SEVERITY_ERROR, \"Please enter a valid username\") The error will appear in the associated template using the following markup: ... <h:messages /> ... See an example here 2. How is redirection to a third party application for authentication handled in a script? # For user authentication or consent gathering, there might be a need to redirect to a third party application to perform some operation and return the control back to authentication steps of the custom script. Please apply these steps to a person authentication script in such a scenario: Return from def getPageForStep(self, step, context), a page /auth/method_name/redirect.html ; with content similar to the code snippet below - def getPageForStep(self, step, context): return \"/auth/method_name/redirect.html\" Contents of redirect.xhtml should take the flow to prepareForStep method ... <f:metadata> <f:viewAction action=\"#{authenticator.prepareForStep}\" if=\"#{not identity.loggedIn}\" /> </f:metadata> In method prepareForStep prepare data needed for redirect and perform the redirection to the external service. def prepareForStep(self, step, context): ..... facesService = CdiUtil.bean(FacesService) facesService.redirectToExternalURL(third_party_URL ) return True In order to resume flow after the redirection, invoke a similar URL to https://my.gluu.server/postlogin.htm?param=123 from the third party app which takes the flow back to the authenticate method of the custom script. So create an xhtml page postlogin.xhtml which will look like this : <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:f=\"http://xmlns.jcp.org/jsf/core\"> <f:view transient=\"true\" contentType=\"text/html\"> <f:metadata> <f:viewAction action=\"#{authenticator.authenticateWithOutcome}\" /> </f:metadata> </f:view> </html> The <f:viewAction action=\"#{authenticator.authenticateWithOutcome}\" /> in step 4 takes us to the authenticate method inside the custom script def authenticate(self, configurationAttributes, requestParameters, step): . Here you can use parameters from request param = ServerUtil.getFirstValue(requestParameters, \"param-name\")) perform the state check (state : Opaque value used to maintain state between the request and the callback.) finally, return true or false from this method.","title":"Person Authentication"},{"location":"admin/developer/scripts/person-authentication/#person-authentication-scripts","text":"The Jans-Auth Server leverages interception scripts of PersonAuthenticationType which when implemented can facilitate complex multi-step, multi-factor authentication workflows. The authentication flow in the Jans Server is driven by the openID spec. The authorization request to the OP (Jans server) contains an optional query parameter called acr_values which is used by the OP to pick an interception script which will be run when /authorize endpoint (Authentication flow) is invoked. The name of each script corresponds with its acr value in the Jans-Auth Server. Typically, a PersonAuthenticationType script can be used to: 1. introduce a new 2FA authentication mechanism 2. customise multistep authentication 3. offer Social logins 4. proactively perform fraud detection and block the user.","title":"Person Authentication scripts"},{"location":"admin/developer/scripts/person-authentication/#default-authentication-method","text":"In an OpenID Connect authentication request, one of the optional parameters defined is acr_values . This is the primary way for a client to signal to the OpenID Provider (OP) the preferred way to authenticate the subject. A client may also specify default_acr_values during registration (and omit the parameter while making an authentication request). In the Jansssen Server configuration, acr is used to name the authentication workflow. default_acr : This is the default authentication mechanism exposed to all applications that send users to the Janssen Server for sign-in. Unless an app specifically requests a different form of authentication using the OpenID Connect acr_values parameter (as specified below), users will receive the form of authentication specified in this field. If a default ACR is not specified, Janssen will determine it based on enabled scripts and the internal user/password ACR. This internal ACR, simple_password_auth , is set to level -1. This means that it has lower priority than any scripts, so Janssen server will use it only if no other authentication method is set. Use the jans-cli to update / look-up the default authentication method .","title":"Default authentication method:"},{"location":"admin/developer/scripts/person-authentication/#multiple-authentication-mechanisms","text":"The Jans Server can concurrently support multiple authentication mechanisms, enabling Web and mobile apps (clients) to request a specific type of authentication using the standard OpenID Connect request parameter: acr_value.","title":"Multiple Authentication Mechanisms"},{"location":"admin/developer/scripts/person-authentication/#enabling-an-authentication-mechanism","text":"By default, users will get the default authentication mechanism as specified above. However, using the OpenID Connect acr_values parameter, web and mobile clients can request any enabled authentication mechanism . Obtain the json contents of a custom script by using a jans-cli command like get-config-scripts-by-type , get-config-scripts-by-inum etc. Example : /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:PERSON_AUTHENTICATION /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:6122281b-b55d-4dd0-8115-b098eeeee2b7 Update the custom script and change the enabled attribute to true","title":"Enabling an authentication mechanism"},{"location":"admin/developer/scripts/person-authentication/#level-rank-of-an-authentication-mechanism","text":"Each authentication mechanism has a \"Level\" assigned to it which describes how secure and strict it is. The higher the \"Level\", the more reliable mechanism represented by the script is. Though several mechanisms can be enabled at the same Janssen server instance at the same time, for any specific user's session only one of them can be set as the current one (and will be returned as acr claim of id_token for them). If after initial session is created a new authorization request from a RP comes in specifying another authentication method, its \"Level\" will be compared to that of the method currently associated with this session. If requested method's \"Level\" is lower or equal to it, nothing is changed and the usual SSO behavior is observed. If it's higher (i.e. a more secure method is requested), it's not possible to serve such request using the existing session's context, and user must re-authenticate themselves to continue. If they succeed, a new session becomes associated with that requested mechanism instead. Enabled scripts can be confirmed by checking the Janssen OP configuration URL, https://<hostname>/.well-known/openid-configuration , and finding the \" acr_values_supported \". Learn more about acr_values in the OpenID Connect core spec .","title":"Level (rank) of an Authentication mechanism :"},{"location":"admin/developer/scripts/person-authentication/#building-blocks-of-an-authentication-workflow","text":"A. Custom script B. UI pages, stylesheets, javascript files, image files and resource bundles C. Managed Beans D. Third party libraries. Jans-auth comprises of a number of beans, configuration files and Facelets (JSF) views, packaged as a WAR module. That means custom scripts and custom pages (JSF facelets) can make use of business logic already encapsulated in the Weld managed beans. The following sections explain how authentication flow can be built using a custom script.","title":"Building blocks of an authentication workflow"},{"location":"admin/developer/scripts/person-authentication/#writing-a-custom-script","text":"The PersonAuthenticationType script is described by a java interface whose methods should be overridden to implement an authentication workflow. The article talks about these methods in detail and the psuedo code in each method will help drive home the point.","title":"Writing a custom script"},{"location":"admin/developer/scripts/person-authentication/#writing-ui-pages","text":"All pages are xhtml files. The Jans-auth server comes with a default set of pages for login, logout, errors, authorizations. You can easily override these pages or write new ones. You can easily apply your own stylesheet, images and resouce-bundles to your pages. This article covers all the details you need to write your own web page.","title":"Writing UI pages:"},{"location":"admin/developer/scripts/person-authentication/#building-business-logic-in-custom-script","text":"Jans-auth server uses Weld 3.0 (JSR-365 aka CDI 2.0) for managed beans. The most important aspects of business logic are implemented through a set of beans. Details and examples of this can be found in this article","title":"Building business logic in Custom script:"},{"location":"admin/developer/scripts/person-authentication/#adding-libraries-for-use-in-the-custom-script","text":"Java or Python libraries to be imported and used very easily. Remember incase you opt for a python library, it should be written in \"pure python\" only. More details of this mentioned here","title":"Adding libraries for use in the custom script"},{"location":"admin/developer/scripts/person-authentication/#uses-of-person-authentication-script","text":"","title":"Uses of Person Authentication script"},{"location":"admin/developer/scripts/person-authentication/#a-implementing-2fa-authentication-mechanisms","text":"FIDO2 : Authentications using platform authenticators embedded into a person's device or physical USB, NFC or Bluetooth security keys that are inserted into a USB slot of a computer SMS OTP : Email OTP","title":"A. Implementing 2FA authentication mechanisms"},{"location":"admin/developer/scripts/person-authentication/#b-implementing-multistep-authentication","text":"Redirect to previous step : The script here an example of how the number of steps can be varied depending on the context or business requirement.","title":"B. Implementing Multistep authentication"},{"location":"admin/developer/scripts/person-authentication/#c-implementing-social-logins","text":"You can use a PersonAuthenticationType script to allow users to sign using credentials from popular Social Identity providers or Inbound Identity Providers like Facebook, Google and Apple. After users authenticate, thier Social Identity Provider credentials are provisioned into the Jans-auth server. More on this topic in this article","title":"C. Implementing Social logins"},{"location":"admin/developer/scripts/person-authentication/#d-proactively-perform-fraud-detection","text":"Impossible travel","title":"D. Proactively perform fraud detection"},{"location":"admin/developer/scripts/person-authentication/#testing-an-authentication-flow","text":"An example of a complete URL looks like this - ``` https://<your.jans.server>/jans-auth/authorize.htm? \\ response_type=code&redirect_uri=https://<your.jans.server>/admin \\ &client_id=17b8b82e-b3ec-42a2-bd90-097028a37f3 \\ &scope=openid+profile+email+user_name \\ &state=faad2cdjfdddjfkdf&nonce=dajdffdfsdcfff ``` To test , enter the complete URL for authorization in a browser or create a simple webmapage with a link that simulates the user sign-in attempt. If the server is configured properly, the first page for the selected authentication method will be displayed to the user.","title":"Testing an authentication flow"},{"location":"admin/developer/scripts/person-authentication/#faqs","text":"","title":"FAQs"},{"location":"admin/developer/scripts/person-authentication/#1-how-can-error-messages-be-displayed-on-a-web-page","text":"FacesMessage bean is used for this purpose. from org.jans.jsf2.message import FacesMessages from org.jans.service.cdi.util import CdiUtil from javax.faces.application import FacesMessage ... facesMessages = CdiUtil.bean(FacesMessages) facesMessages.setKeepMessages() facesMessages.add(FacesMessage.SEVERITY_ERROR, \"Please enter a valid username\") The error will appear in the associated template using the following markup: ... <h:messages /> ... See an example here","title":"1. How can error messages be displayed on a web page?"},{"location":"admin/developer/scripts/person-authentication/#2-how-is-redirection-to-a-third-party-application-for-authentication-handled-in-a-script","text":"For user authentication or consent gathering, there might be a need to redirect to a third party application to perform some operation and return the control back to authentication steps of the custom script. Please apply these steps to a person authentication script in such a scenario: Return from def getPageForStep(self, step, context), a page /auth/method_name/redirect.html ; with content similar to the code snippet below - def getPageForStep(self, step, context): return \"/auth/method_name/redirect.html\" Contents of redirect.xhtml should take the flow to prepareForStep method ... <f:metadata> <f:viewAction action=\"#{authenticator.prepareForStep}\" if=\"#{not identity.loggedIn}\" /> </f:metadata> In method prepareForStep prepare data needed for redirect and perform the redirection to the external service. def prepareForStep(self, step, context): ..... facesService = CdiUtil.bean(FacesService) facesService.redirectToExternalURL(third_party_URL ) return True In order to resume flow after the redirection, invoke a similar URL to https://my.gluu.server/postlogin.htm?param=123 from the third party app which takes the flow back to the authenticate method of the custom script. So create an xhtml page postlogin.xhtml which will look like this : <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:f=\"http://xmlns.jcp.org/jsf/core\"> <f:view transient=\"true\" contentType=\"text/html\"> <f:metadata> <f:viewAction action=\"#{authenticator.authenticateWithOutcome}\" /> </f:metadata> </f:view> </html> The <f:viewAction action=\"#{authenticator.authenticateWithOutcome}\" /> in step 4 takes us to the authenticate method inside the custom script def authenticate(self, configurationAttributes, requestParameters, step): . Here you can use parameters from request param = ServerUtil.getFirstValue(requestParameters, \"param-name\")) perform the state check (state : Opaque value used to maintain state between the request and the callback.) finally, return true or false from this method.","title":"2. How is redirection to a third party application for authentication handled in a script?"},{"location":"admin/developer/scripts/post-authentication/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Post Authentication"},{"location":"admin/developer/scripts/revoke-token/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Revoke Token"},{"location":"admin/developer/scripts/rpoc/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Resource Owner Password Credentials"},{"location":"admin/developer/scripts/scim/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"SCIM"},{"location":"admin/developer/scripts/spontaneous-scope/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Spontaneous Scope"},{"location":"admin/developer/scripts/uma-claims-jwt/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"UMA Claims (JWT Transformation)"},{"location":"admin/developer/scripts/uma-claims-web/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"UMA Claims Gathering (Web Flow)"},{"location":"admin/developer/scripts/uma-rpt/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"UMA RPT Policies"},{"location":"admin/developer/scripts/update-token/","tags":["administration","developer","scripts"],"text":"This file is a placeholder.","title":"Update Token"},{"location":"admin/eleven/","tags":["administration","eleven"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/eleven/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/eleven/auth-server-test/","tags":["administration","eleven"],"text":"This is a placeholder","title":"Testing end-to-end with Auth Server"},{"location":"admin/eleven/cloudhsm/","tags":["administration","eleven"],"text":"This file is a placeholder","title":"Testing with Amazon CloudHSM"},{"location":"admin/eleven/config/","tags":["administration","eleven"],"text":"This is a placeholder","title":"Configuration"},{"location":"admin/eleven/google-key-mgt/","tags":["administration","eleven"],"text":"This is a placeholder","title":"Testing with Google Cloud Key Management"},{"location":"admin/eleven/health/","tags":["administration","eleven"],"text":"This is a placeholder","title":"Health"},{"location":"admin/eleven/logs/","tags":["administration","eleven"],"text":"This is a placeholder","title":"Logs"},{"location":"admin/eleven/monitoring/","tags":["administration","eleven"],"text":"This is a placeholder","title":"Monitoring"},{"location":"admin/eleven/softhsm/","tags":["administration","eleven"],"text":"This is a placeholder","title":"Testing with SoftHSM"},{"location":"admin/eleven/supported-algs/","tags":["administration","eleven"],"text":"This is a placeholder","title":"Supported Algorithms"},{"location":"admin/fido/","tags":["administration","fido"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/fido/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/fido/bluetooth-authn/","tags":["administration","fido"],"text":"This page will be the landing page for the Janssen Project admin documentation","title":"Bluetooth Authenticator Support"},{"location":"admin/fido/config/","tags":["administration","fido"],"text":"This page will be the landing page for the Janssen Project admin documentation","title":"Configuration"},{"location":"admin/fido/key-mgt/","tags":["administration","fido"],"text":"This page will be the landing page for the Janssen Project admin documentation","title":"Key Management/Rotation"},{"location":"admin/fido/logs/","tags":["administration","fido"],"text":"This page will be the landing page for the Janssen Project admin documentation","title":"Logs"},{"location":"admin/fido/monitoring/","tags":["administration","fido"],"text":"This page will be the landing page for the Janssen Project admin documentation","title":"Monitoring"},{"location":"admin/fido/platform-authn/","tags":["administration","fido"],"text":"This page will be the landing page for the Janssen Project admin documentation","title":"Platform Authenticator Support"},{"location":"admin/fido/scim/","tags":["administration","fido"],"text":"This page will be the landing page for the Janssen Project admin documentation","title":"SCIM Extension"},{"location":"admin/fido/usb-authn/","tags":["administration","fido"],"text":"This page will be the landing page for the Janssen Project admin documentation","title":"USB Authenticator Support"},{"location":"admin/fido/vendor-metadata/","tags":["administration","fido"],"text":"This page will be the landing page for the Janssen Project admin documentation","title":"Vendor Metadata Management"},{"location":"admin/install/","tags":["administration","installation"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/install/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/install/cors/","tags":["administration","installation"],"text":"This file is a placeholder.","title":"CORS configuration"},{"location":"admin/install/install-faq/","tags":["administration","installation","faq"],"text":"Janssen Server Installation FAQs # After installation, how do I verify that the Janssen Server is up and running? # Health and status of Janssen Server and its various processes can be verified in multiple ways: Use the Janssen Server Health Check endpoint # Janssen Server provides a health check endpoint for Authentication module. It can be invoked from commandline using CURL as below: curl -k https://janssen-host-name/jans-auth/sys/health-check For a healthy server, this option will return output as below: Please wait while retrieving data ... { \"status\": \"running\", \"db_status\": \"online\" } Access .well-known endpoints # Janssen Server exposes .well-known endpoint for openid configuration as per the OpenIDConnect RFC . Successful response from this endpoint is also an indicator of healthy authentication module. From command-line interface, use CURL to access this endpoint. For example: curl https://janssen-host-name/jans-auth/.well-known/openid-configuration This should return JSON response from Janssen Server as per OpenId specification. Sample below: { \"request_parameter_supported\" : true, \"pushed_authorization_request_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/par\", \"introspection_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/introspection\", \"claims_parameter_supported\" : false, \"issuer\" : \"https://janssen-host-name\", \"userinfo_encryption_enc_values_supported\" : [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"id_token_encryption_enc_values_supported\" : [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"authorization_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/authorize\", \"service_documentation\" : \"http://jans.org/docs\", \"authorization_encryption_alg_values_supported\" : [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"claims_supported\" : [ \"street_address\", \"country\", \"zoneinfo\", \"birthdate\", \"role\", \"gender\", \"user_name\", \"formatted\", \"phone_mobile_number\", \"preferred_username\", \"inum\", \"locale\", \"updated_at\", \"post_office_box\", \"nickname\", \"preferred_language\", \"email\", \"website\", \"email_verified\", \"profile\", \"locality\", \"room_number\", \"phone_number_verified\", \"given_name\", \"middle_name\", \"picture\", \"name\", \"phone_number\", \"postal_code\", \"region\", \"family_name\", \"jansAdminUIRole\" ], \"token_endpoint_auth_methods_supported\" : [ \"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\" ], \"tls_client_certificate_bound_access_tokens\" : true, \"response_modes_supported\" : [ \"FORM_POST\", \"QUERY_JWT\", \"FRAGMENT_JWT\", \"FORM_POST_JWT\", \"QUERY\", \"FRAGMENT\", \"JWT\" ], \"backchannel_logout_session_supported\" : true, \"token_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/token\", \"response_types_supported\" : [ \"id_token token\", \"id_token\", \"code\", \"code token\", \"id_token code token\", \"id_token code\", \"token\" ], \"authorization_encryption_enc_values_supported\" : [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"backchannel_token_delivery_modes_supported\" : [ \"poll\", \"ping\", \"push\" ], \"dpop_signing_alg_values_supported\" : [ \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"ES512\", \"PS256\", \"PS384\", \"PS512\" ], \"request_uri_parameter_supported\" : true, \"backchannel_user_code_parameter_supported\" : false, \"grant_types_supported\" : [ \"RESOURCE_OWNER_PASSWORD_CREDENTIALS\", \"CLIENT_CREDENTIALS\", \"OXAUTH_UMA_TICKET\", \"AUTHORIZATION_CODE\", \"DEVICE_CODE\", \"REFRESH_TOKEN\", \"IMPLICIT\" ], \"ui_locales_supported\" : [ \"en\", \"bg\", \"de\", \"es\", \"fr\", \"it\", \"ru\", \"tr\" ], \"userinfo_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/userinfo\", \"op_tos_uri\" : \"http://www.jans.io/doku.php?id=jans:tos\", \"require_request_uri_registration\" : false, \"id_token_encryption_alg_values_supported\" : [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"frontchannel_logout_session_supported\" : true, \"authorization_signing_alg_values_supported\" : [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"ES512\", \"PS256\", \"PS384\", \"PS512\" ], \"claims_locales_supported\" : [ \"en\" ], \"clientinfo_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/clientinfo\", \"request_object_signing_alg_values_supported\" : [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"ES512\", \"PS256\", \"PS384\", \"PS512\" ], \"request_object_encryption_alg_values_supported\" : [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"session_revocation_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/revoke_session\", \"check_session_iframe\" : \"https://janssen-host-name/jans-auth/opiframe.htm\", \"scopes_supported\" : [ \"https://jans.io/scim/all-resources.search\", \"address\", \"user_name\", \"clientinfo\", \"openid\", \"https://jans.io/scim/fido2.write\", \"profile\", \"uma_protection\", \"permission\", \"https://jans.io/scim/fido.read\", \"https://jans.io/scim/users.write\", \"https://jans.io/scim/groups.read\", \"revoke_session\", \"https://jans.io/scim/fido.write\", \"https://jans.io/scim/bulk\", \"https://jans.io/scim/users.read\", \"phone\", \"mobile_phone\", \"offline_access\", \"https://jans.io/scim/groups.write\", \"email\", \"https://jans.io/scim/fido2.read\", \"jans_client_api\" ], \"backchannel_logout_supported\" : true, \"acr_values_supported\" : [ \"simple_password_auth\" ], \"request_object_encryption_enc_values_supported\" : [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], ... ... Check OS Services # Check the OS platform Janssen Services and their status Check Logs # Check logs for errors How can I see status of Janssen OS platform services? # Ubuntu # systemctl list-units --all \"jans*\" Command above should list services along with its current status. UNIT LOAD ACTIVE SUB DESCRIPTION jans-auth.service loaded active running Janssen OAauth service jans-client-api.service loaded active running Janssen Client API service jans-config-api.service loaded active running Janssen Config API service jans-fido2.service loaded active running Janssen Fido2 Service jans-scim.service loaded active running Janssen Scim service LOAD = Reflects whether the unit definition was properly loaded. ACTIVE = The high-level unit activation state, i.e. generalization of SUB. SUB = The low-level unit activation state, values depend on unit type. 5 loaded units listed. Note Some process listed above may not be available in every installation based on options selected during installation. Where can I find Janssen Server logs? # During installation, Janssen Server produces setup logs under following location: /opt/jans/jans-setup/logs/ Individual modules of the Janssen Server will continue to write their operational logs under respective directory at path below: /opt/jans/jetty/<module-name>/logs/","title":"FAQ"},{"location":"admin/install/install-faq/#janssen-server-installation-faqs","text":"","title":"Janssen Server Installation FAQs"},{"location":"admin/install/install-faq/#after-installation-how-do-i-verify-that-the-janssen-server-is-up-and-running","text":"Health and status of Janssen Server and its various processes can be verified in multiple ways:","title":"After installation, how do I verify that the Janssen Server is up and running?"},{"location":"admin/install/install-faq/#use-the-janssen-server-health-check-endpoint","text":"Janssen Server provides a health check endpoint for Authentication module. It can be invoked from commandline using CURL as below: curl -k https://janssen-host-name/jans-auth/sys/health-check For a healthy server, this option will return output as below: Please wait while retrieving data ... { \"status\": \"running\", \"db_status\": \"online\" }","title":"Use the Janssen Server Health Check endpoint"},{"location":"admin/install/install-faq/#access-well-known-endpoints","text":"Janssen Server exposes .well-known endpoint for openid configuration as per the OpenIDConnect RFC . Successful response from this endpoint is also an indicator of healthy authentication module. From command-line interface, use CURL to access this endpoint. For example: curl https://janssen-host-name/jans-auth/.well-known/openid-configuration This should return JSON response from Janssen Server as per OpenId specification. Sample below: { \"request_parameter_supported\" : true, \"pushed_authorization_request_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/par\", \"introspection_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/introspection\", \"claims_parameter_supported\" : false, \"issuer\" : \"https://janssen-host-name\", \"userinfo_encryption_enc_values_supported\" : [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"id_token_encryption_enc_values_supported\" : [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"authorization_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/authorize\", \"service_documentation\" : \"http://jans.org/docs\", \"authorization_encryption_alg_values_supported\" : [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"claims_supported\" : [ \"street_address\", \"country\", \"zoneinfo\", \"birthdate\", \"role\", \"gender\", \"user_name\", \"formatted\", \"phone_mobile_number\", \"preferred_username\", \"inum\", \"locale\", \"updated_at\", \"post_office_box\", \"nickname\", \"preferred_language\", \"email\", \"website\", \"email_verified\", \"profile\", \"locality\", \"room_number\", \"phone_number_verified\", \"given_name\", \"middle_name\", \"picture\", \"name\", \"phone_number\", \"postal_code\", \"region\", \"family_name\", \"jansAdminUIRole\" ], \"token_endpoint_auth_methods_supported\" : [ \"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\" ], \"tls_client_certificate_bound_access_tokens\" : true, \"response_modes_supported\" : [ \"FORM_POST\", \"QUERY_JWT\", \"FRAGMENT_JWT\", \"FORM_POST_JWT\", \"QUERY\", \"FRAGMENT\", \"JWT\" ], \"backchannel_logout_session_supported\" : true, \"token_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/token\", \"response_types_supported\" : [ \"id_token token\", \"id_token\", \"code\", \"code token\", \"id_token code token\", \"id_token code\", \"token\" ], \"authorization_encryption_enc_values_supported\" : [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], \"backchannel_token_delivery_modes_supported\" : [ \"poll\", \"ping\", \"push\" ], \"dpop_signing_alg_values_supported\" : [ \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"ES512\", \"PS256\", \"PS384\", \"PS512\" ], \"request_uri_parameter_supported\" : true, \"backchannel_user_code_parameter_supported\" : false, \"grant_types_supported\" : [ \"RESOURCE_OWNER_PASSWORD_CREDENTIALS\", \"CLIENT_CREDENTIALS\", \"OXAUTH_UMA_TICKET\", \"AUTHORIZATION_CODE\", \"DEVICE_CODE\", \"REFRESH_TOKEN\", \"IMPLICIT\" ], \"ui_locales_supported\" : [ \"en\", \"bg\", \"de\", \"es\", \"fr\", \"it\", \"ru\", \"tr\" ], \"userinfo_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/userinfo\", \"op_tos_uri\" : \"http://www.jans.io/doku.php?id=jans:tos\", \"require_request_uri_registration\" : false, \"id_token_encryption_alg_values_supported\" : [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"frontchannel_logout_session_supported\" : true, \"authorization_signing_alg_values_supported\" : [ \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"ES512\", \"PS256\", \"PS384\", \"PS512\" ], \"claims_locales_supported\" : [ \"en\" ], \"clientinfo_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/clientinfo\", \"request_object_signing_alg_values_supported\" : [ \"none\", \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"ES512\", \"PS256\", \"PS384\", \"PS512\" ], \"request_object_encryption_alg_values_supported\" : [ \"RSA1_5\", \"RSA-OAEP\", \"A128KW\", \"A256KW\" ], \"session_revocation_endpoint\" : \"https://janssen-host-name/jans-auth/restv1/revoke_session\", \"check_session_iframe\" : \"https://janssen-host-name/jans-auth/opiframe.htm\", \"scopes_supported\" : [ \"https://jans.io/scim/all-resources.search\", \"address\", \"user_name\", \"clientinfo\", \"openid\", \"https://jans.io/scim/fido2.write\", \"profile\", \"uma_protection\", \"permission\", \"https://jans.io/scim/fido.read\", \"https://jans.io/scim/users.write\", \"https://jans.io/scim/groups.read\", \"revoke_session\", \"https://jans.io/scim/fido.write\", \"https://jans.io/scim/bulk\", \"https://jans.io/scim/users.read\", \"phone\", \"mobile_phone\", \"offline_access\", \"https://jans.io/scim/groups.write\", \"email\", \"https://jans.io/scim/fido2.read\", \"jans_client_api\" ], \"backchannel_logout_supported\" : true, \"acr_values_supported\" : [ \"simple_password_auth\" ], \"request_object_encryption_enc_values_supported\" : [ \"A128CBC+HS256\", \"A256CBC+HS512\", \"A128GCM\", \"A256GCM\" ], ... ...","title":"Access .well-known endpoints"},{"location":"admin/install/install-faq/#check-os-services","text":"Check the OS platform Janssen Services and their status","title":"Check OS Services"},{"location":"admin/install/install-faq/#check-logs","text":"Check logs for errors","title":"Check Logs"},{"location":"admin/install/install-faq/#how-can-i-see-status-of-janssen-os-platform-services","text":"","title":"How can I see status of Janssen OS platform services?"},{"location":"admin/install/install-faq/#ubuntu","text":"systemctl list-units --all \"jans*\" Command above should list services along with its current status. UNIT LOAD ACTIVE SUB DESCRIPTION jans-auth.service loaded active running Janssen OAauth service jans-client-api.service loaded active running Janssen Client API service jans-config-api.service loaded active running Janssen Config API service jans-fido2.service loaded active running Janssen Fido2 Service jans-scim.service loaded active running Janssen Scim service LOAD = Reflects whether the unit definition was properly loaded. ACTIVE = The high-level unit activation state, i.e. generalization of SUB. SUB = The low-level unit activation state, values depend on unit type. 5 loaded units listed. Note Some process listed above may not be available in every installation based on options selected during installation.","title":"Ubuntu"},{"location":"admin/install/install-faq/#where-can-i-find-janssen-server-logs","text":"During installation, Janssen Server produces setup logs under following location: /opt/jans/jans-setup/logs/ Individual modules of the Janssen Server will continue to write their operational logs under respective directory at path below: /opt/jans/jetty/<module-name>/logs/","title":"Where can I find Janssen Server logs?"},{"location":"admin/install/helm-install/","tags":["administration","installation","helm"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/install/helm-install/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/install/helm-install/amazon-eks/","tags":["administration","installation","helm"],"text":"This file is a placeholder.","title":"Amazon EKS"},{"location":"admin/install/helm-install/digitalocean-dok/","tags":["administration","installation","helm"],"text":"This file is a placeholder.","title":"Digital Ocean DOK"},{"location":"admin/install/helm-install/google-gke/","tags":["administration","installation","helm"],"text":"This file is a placeholder.","title":"Google GKE"},{"location":"admin/install/helm-install/local/","tags":["administration","installation","helm"],"text":"Install Janssen Server Locally with minikube and MicroK8s # System Requirements # For local deployments like minikube and MicroK8s or cloud installations in demo mode, resources may be set to the minimum as below: 8GB RAM 4 CPU cores 50GB hard-disk Use the listing below for detailed estimation of minimum required resources. Table contains the default resources recommendations per service. Depending on the use of each service the resources needs may be increase or decrease. Service CPU Unit RAM Disk Space Processor Type Required Auth server 2.5 2.5GB N/A 64 Bit Yes LDAP (OpenDJ) 1.5 2GB 10GB 64 Bit Only if couchbase is not installed fido2 0.5 0.5GB N/A 64 Bit No scim 1.0 1.0GB N/A 64 Bit No config - job 0.5 0.5GB N/A 64 Bit Yes on fresh installs persistence - job 0.5 0.5GB N/A 64 Bit Yes on fresh installs client-api 1 0.4GB N/A 64 Bit No nginx 1 1GB N/A 64 Bit Yes if not ALB auth-key-rotation 0.3 0.3GB N/A 64 Bit No [Strongly recommended] config-api 0.5 0.5GB N/A 64 Bit No Releases of images are in style 1.0.0-beta.0, 1.0.0-0 Installation Steps # Start a fresh ubuntu 18.04 or 20.04 4 CPU, 16 GB RAM, and 50GB SSD VM with ports 443 and 80 open. Then execute the following sudo su - wget https://raw.githubusercontent.com/JanssenProject/jans/main/automation/startjanssendemo.sh && chmod u+x startjanssendemo.sh && ./startjanssendemo.sh This will install docker, microk8s, helm and Janssen with the default settings that can be found inside values.yaml . The installer will automatically add a record to your hosts record in the VM but if you want access the endpoints outside the VM you must map the ip of the instance running ubuntu to the FQDN you provided and then access the endpoints at your browser such in the example in the table below. Service Example endpoint Auth server https://FQDN/.well-known/openid-configuration fido2 https://FQDN/.well-known/fido2-configuration scim https://FQDN/.well-known/scim-configuration","title":"Local Kubernetes Cluster"},{"location":"admin/install/helm-install/local/#install-janssen-server-locally-with-minikube-and-microk8s","text":"","title":"Install Janssen Server Locally with minikube and MicroK8s"},{"location":"admin/install/helm-install/local/#system-requirements","text":"For local deployments like minikube and MicroK8s or cloud installations in demo mode, resources may be set to the minimum as below: 8GB RAM 4 CPU cores 50GB hard-disk Use the listing below for detailed estimation of minimum required resources. Table contains the default resources recommendations per service. Depending on the use of each service the resources needs may be increase or decrease. Service CPU Unit RAM Disk Space Processor Type Required Auth server 2.5 2.5GB N/A 64 Bit Yes LDAP (OpenDJ) 1.5 2GB 10GB 64 Bit Only if couchbase is not installed fido2 0.5 0.5GB N/A 64 Bit No scim 1.0 1.0GB N/A 64 Bit No config - job 0.5 0.5GB N/A 64 Bit Yes on fresh installs persistence - job 0.5 0.5GB N/A 64 Bit Yes on fresh installs client-api 1 0.4GB N/A 64 Bit No nginx 1 1GB N/A 64 Bit Yes if not ALB auth-key-rotation 0.3 0.3GB N/A 64 Bit No [Strongly recommended] config-api 0.5 0.5GB N/A 64 Bit No Releases of images are in style 1.0.0-beta.0, 1.0.0-0","title":"System Requirements"},{"location":"admin/install/helm-install/local/#installation-steps","text":"Start a fresh ubuntu 18.04 or 20.04 4 CPU, 16 GB RAM, and 50GB SSD VM with ports 443 and 80 open. Then execute the following sudo su - wget https://raw.githubusercontent.com/JanssenProject/jans/main/automation/startjanssendemo.sh && chmod u+x startjanssendemo.sh && ./startjanssendemo.sh This will install docker, microk8s, helm and Janssen with the default settings that can be found inside values.yaml . The installer will automatically add a record to your hosts record in the VM but if you want access the endpoints outside the VM you must map the ip of the instance running ubuntu to the FQDN you provided and then access the endpoints at your browser such in the example in the table below. Service Example endpoint Auth server https://FQDN/.well-known/openid-configuration fido2 https://FQDN/.well-known/fido2-configuration scim https://FQDN/.well-known/scim-configuration","title":"Installation Steps"},{"location":"admin/install/helm-install/microsoft-azure/","tags":["administration","installation","helm"],"text":"This file is a placeholder.","title":"Microsoft Azure AKS"},{"location":"admin/install/helm-install/rancher/","tags":["administration","installation","helm"],"text":"Install Janssen Server Using Rancher Marketplace # For this quick start we will use a single node Kubernetes install in docker with a self-signed certificate . Note For a more generic setup, use Rancher UI to deploy the setup. For more options please follow this link . Installation Steps # Provision a Linux 4 CPU, 16 GB RAM, and 50GB SSD VM with ports 443 and 80 open. Save the VM IP address. For development environments, the VM can be set up using VMWare Workstation Player or VirtualBox with Ubuntu 20.0.4 operating system running on VM. Install Docker . Execute docker run -d --restart = unless-stopped -p 80 :80 -p 443 :443 --privileged rancher/rancher:latest The final line of the returned text is the container-id , which you'll need for the next step. Execute the following command to get the boostrap password for login. docker logs <container-id> 2 > & 1 | grep \"Bootstrap Password:\" Head to https://<VM-IP-ADDRESS-FROM-FIRST-STEP> and log in with the username admin and the password from the previous step. If you are logging into Rancher for the first time, you'll need to enter just the password, and on the next step, Rancher will ask you to reset your current password. Next you'll see the Rancher home page with a list of existing clusters. By default, the name of the newly created cluster would be local . Click on the cluster name to go to the dashboard. From the top-left menu expand Apps & Marketplace and click charts . Search for Gluu and begin your installation. During Step 1 of installation, be sure to select the Customize Helm options before install options. In Step 2, customize the settings for the Janssen installation. Specifically Optional Services from where you can enable Janssen modules. In Step 3, unselect the Wait option and start the installation.","title":"Using Rancher Marketplace"},{"location":"admin/install/helm-install/rancher/#install-janssen-server-using-rancher-marketplace","text":"For this quick start we will use a single node Kubernetes install in docker with a self-signed certificate . Note For a more generic setup, use Rancher UI to deploy the setup. For more options please follow this link .","title":"Install Janssen Server Using Rancher Marketplace"},{"location":"admin/install/helm-install/rancher/#installation-steps","text":"Provision a Linux 4 CPU, 16 GB RAM, and 50GB SSD VM with ports 443 and 80 open. Save the VM IP address. For development environments, the VM can be set up using VMWare Workstation Player or VirtualBox with Ubuntu 20.0.4 operating system running on VM. Install Docker . Execute docker run -d --restart = unless-stopped -p 80 :80 -p 443 :443 --privileged rancher/rancher:latest The final line of the returned text is the container-id , which you'll need for the next step. Execute the following command to get the boostrap password for login. docker logs <container-id> 2 > & 1 | grep \"Bootstrap Password:\" Head to https://<VM-IP-ADDRESS-FROM-FIRST-STEP> and log in with the username admin and the password from the previous step. If you are logging into Rancher for the first time, you'll need to enter just the password, and on the next step, Rancher will ask you to reset your current password. Next you'll see the Rancher home page with a list of existing clusters. By default, the name of the newly created cluster would be local . Click on the cluster name to go to the dashboard. From the top-left menu expand Apps & Marketplace and click charts . Search for Gluu and begin your installation. During Step 1 of installation, be sure to select the Customize Helm options before install options. In Step 2, customize the settings for the Janssen installation. Specifically Optional Services from where you can enable Janssen modules. In Step 3, unselect the Wait option and start the installation.","title":"Installation Steps"},{"location":"admin/install/helm-install/red-hat-open-shift/","tags":["administration","installation","helm"],"text":"This file is a placeholder.","title":"Red Hat Open Shift"},{"location":"admin/install/vm-install/","tags":["administration","installation","vm"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/install/vm-install/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/install/vm-install/disa-stig/","tags":["administration","installation","vm"],"text":"This file is a placeholder.","title":"FIPS DISA STIG"},{"location":"admin/install/vm-install/dynamic-download/","tags":["administration","installation","vm","Dynamic"],"text":"Install Janssen Server using Dynamic Download # The dynamic download installs the latest development version of the Janssen Server. Note This method of installation is suitable only for testing, development, or feature exploration purposes. Not for production deployments. System Requirements # System should meet minimum VM system requirements Prerequisites # curl should be installed Install # Download the installer curl https://raw.githubusercontent.com/JanssenProject/jans/main/jans-linux-setup/jans_setup/install.py > install.py Execute Installer The installer can be invoked using various options to tailor the installation process. Invoke the commands below to know about all the available options. install.py --help setup.py --help One particularly useful option for development environments is the one below which installs the Janssen Server with test data loaded. python3 install.py --args=\"-t\" To install without test data loaded, run the command below: python3 install.py Uninstall # Use the command below to uninstall the Janssen Server python3 install.py -uninstall","title":"Dynamic Download"},{"location":"admin/install/vm-install/dynamic-download/#install-janssen-server-using-dynamic-download","text":"The dynamic download installs the latest development version of the Janssen Server. Note This method of installation is suitable only for testing, development, or feature exploration purposes. Not for production deployments.","title":"Install Janssen Server using Dynamic Download"},{"location":"admin/install/vm-install/dynamic-download/#system-requirements","text":"System should meet minimum VM system requirements","title":"System Requirements"},{"location":"admin/install/vm-install/dynamic-download/#prerequisites","text":"curl should be installed","title":"Prerequisites"},{"location":"admin/install/vm-install/dynamic-download/#install","text":"Download the installer curl https://raw.githubusercontent.com/JanssenProject/jans/main/jans-linux-setup/jans_setup/install.py > install.py Execute Installer The installer can be invoked using various options to tailor the installation process. Invoke the commands below to know about all the available options. install.py --help setup.py --help One particularly useful option for development environments is the one below which installs the Janssen Server with test data loaded. python3 install.py --args=\"-t\" To install without test data loaded, run the command below: python3 install.py","title":"Install"},{"location":"admin/install/vm-install/dynamic-download/#uninstall","text":"Use the command below to uninstall the Janssen Server python3 install.py -uninstall","title":"Uninstall"},{"location":"admin/install/vm-install/quick-start-install/","tags":["administration","installation","quick-start","docker"],"text":"Docker Based Quick Start Installation # The quickest way to get a Janssen Server up and running is to install a Docker container-based fully featured Janssen Server. Note This method of installation is suitable only for testing, development, or feature exploration purposes. Not for production deployments. System Requirements # System should meet minimum VM system requirements Install # Run the command given below to start the installation. Installation depends on a set of environment variables . These environment variables can be set to customize installation as per the need. If not set, the installer uses default values. wget https://raw.githubusercontent.com/JanssenProject/jans/main/automation/startjanssenmonolithdemo.sh && chmod u+x startjanssenmonolithdemo.sh && sudo bash startjanssenmonolithdemo.sh demoexample.jans.io MYSQL At the end of the process, following messages will confirm that the Janssen server and related services are up and running in respective Docker containers. [+] Running 3/3 \u283f Network docker-jans-monolith_cloud_bridge Created 0.0s \u283f Container docker-jans-monolith-mysql-1 Started 0.6s \u283f Container docker-jans-monolith-jans-1 Started 0.9s Waiting for the Janssen server to come up. Depending on the resources it may take 3-5 mins for the services to be up. Testing openid-configuration endpoint.. As can be seen, the install script also accesses the well-known endpoints to varify that Janssen Server is responsive. Verify Installation By Accessing Standard Endpoints # To access Janssen Server standard endpoints from outside of the Docker container, systems /etc/hosts file needs to be updated. Open the file and add the IP domain record which should be the IP of the instance docker is installed. And the domain used in the env above CN_HOSTNAME . # For-example 172 .22.0.3 demoexample.jans.io After adding the record, hit the standard endpoints such as https://demoexample.jans.io/.well-known/openid-configuration Configure Janssen Server # Access the Docker container shell using: docker exec -ti docker-jans-monolith-jans-1 bash And then use CLI tools to configure Janssen Server as needed. /opt/jans/jans-cli/config-cli.py #or /opt/jans/jans-cli/scim-cli.py Uninstall / Remove the Janssen Server # This docker based installation uses docker compose under the hood to create containers. Hence to uninstalling Janssen server involves invoking docker compose with appropriate yml file. Run command below to stop and remove containers. docker compose -f /tmp/jans/docker-jans-monolith/jans-mysql-compose.yml down && rm -rf jans-* Console messages like below confirms the successful removal. [+] Running 3/3 \u283f Container docker-jans-monolith-jans-1 Removed 10.5s \u283f Container docker-jans-monolith-mysql-1 Removed 0.9s \u283f Network docker-jans-monolith_cloud_bridge Removed 0.1s","title":"Quick Start Installation"},{"location":"admin/install/vm-install/quick-start-install/#docker-based-quick-start-installation","text":"The quickest way to get a Janssen Server up and running is to install a Docker container-based fully featured Janssen Server. Note This method of installation is suitable only for testing, development, or feature exploration purposes. Not for production deployments.","title":"Docker Based Quick Start Installation"},{"location":"admin/install/vm-install/quick-start-install/#system-requirements","text":"System should meet minimum VM system requirements","title":"System Requirements"},{"location":"admin/install/vm-install/quick-start-install/#install","text":"Run the command given below to start the installation. Installation depends on a set of environment variables . These environment variables can be set to customize installation as per the need. If not set, the installer uses default values. wget https://raw.githubusercontent.com/JanssenProject/jans/main/automation/startjanssenmonolithdemo.sh && chmod u+x startjanssenmonolithdemo.sh && sudo bash startjanssenmonolithdemo.sh demoexample.jans.io MYSQL At the end of the process, following messages will confirm that the Janssen server and related services are up and running in respective Docker containers. [+] Running 3/3 \u283f Network docker-jans-monolith_cloud_bridge Created 0.0s \u283f Container docker-jans-monolith-mysql-1 Started 0.6s \u283f Container docker-jans-monolith-jans-1 Started 0.9s Waiting for the Janssen server to come up. Depending on the resources it may take 3-5 mins for the services to be up. Testing openid-configuration endpoint.. As can be seen, the install script also accesses the well-known endpoints to varify that Janssen Server is responsive.","title":"Install"},{"location":"admin/install/vm-install/quick-start-install/#verify-installation-by-accessing-standard-endpoints","text":"To access Janssen Server standard endpoints from outside of the Docker container, systems /etc/hosts file needs to be updated. Open the file and add the IP domain record which should be the IP of the instance docker is installed. And the domain used in the env above CN_HOSTNAME . # For-example 172 .22.0.3 demoexample.jans.io After adding the record, hit the standard endpoints such as https://demoexample.jans.io/.well-known/openid-configuration","title":"Verify Installation By Accessing Standard Endpoints"},{"location":"admin/install/vm-install/quick-start-install/#configure-janssen-server","text":"Access the Docker container shell using: docker exec -ti docker-jans-monolith-jans-1 bash And then use CLI tools to configure Janssen Server as needed. /opt/jans/jans-cli/config-cli.py #or /opt/jans/jans-cli/scim-cli.py","title":"Configure Janssen Server"},{"location":"admin/install/vm-install/quick-start-install/#uninstall-remove-the-janssen-server","text":"This docker based installation uses docker compose under the hood to create containers. Hence to uninstalling Janssen server involves invoking docker compose with appropriate yml file. Run command below to stop and remove containers. docker compose -f /tmp/jans/docker-jans-monolith/jans-mysql-compose.yml down && rm -rf jans-* Console messages like below confirms the successful removal. [+] Running 3/3 \u283f Container docker-jans-monolith-jans-1 Removed 10.5s \u283f Container docker-jans-monolith-mysql-1 Removed 0.9s \u283f Network docker-jans-monolith_cloud_bridge Removed 0.1s","title":"Uninstall / Remove the Janssen Server"},{"location":"admin/install/vm-install/rhel/","tags":["administration","installation","vm","RHEL","RedHat"],"text":"Install Janssen Server using Enterprise Linux Package # Supported versions # Red Hat 8 CentOS 8 Note SELinux should be disabled System Requirements # System should meet minimum VM system requirements Prerequisites # System should be registered and attached with Red Hat. This is required to run commands that install packages like mod_auth_openidc Install Extra Packages for Enterprise Linux (EPEL) yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm curl should be instlled. This can be easily installed using the command below yum install curl Install # Enable the mod_auth_openidc module yum module enable mod_auth_openidc Download and Install the Janssen Server Linux package yum install -y https:$(curl -s -L https://api.github.com/repos/JanssenProject/jans/releases/latest | egrep -o '/.*el8.x86_64.rpm' | head -n 1) Initiate the setup process using the command below. The setup process will prompt for user for inputs. sudo python3 /opt/jans/jans-setup/setup.py The installer should confirm successful installation with a message similar to the one shown below: Verify the Installation # After the successful completion of setup process, verify the system health . Uninstall Janssen Server # Use the command below to uninstall the Janssen server python3 /opt/jans/jans-setup/install.py -uninstall Console output like below will confirm the successful uninstallation of the Janssen Server This process is irreversible. You will lose all data related to Janssen Server. Are you sure to uninstall Janssen Server? [yes/N] yes Uninstalling Jannsen Server... Removing /etc/default/jans-config-api Stopping jans-config-api Removing /etc/default/jans-scim Stopping jans-scim Removing /etc/default/jans-fido2 Stopping jans-fido2 Removing /etc/default/jans-auth Stopping jans-auth Removing /etc/default/jans-client-api Stopping jans-client-api Stopping OpenDj Server sh: 1: /opt/opendj/bin/stop-ds: not found Executing rm -r -f /etc/certs Executing rm -r -f /etc/jans Executing rm -r -f /opt/jans Executing rm -r -f /opt/amazon-corretto* Executing rm -r -f /opt/jre Executing rm -r -f /opt/node* Executing rm -r -f /opt/jetty* Executing rm -r -f /opt/jython* Executing rm -r -f /opt/opendj Executing rm -r -f /opt/dist Removing /etc/apache2/sites-enabled/https_jans.conf Removing /etc/apache2/sites-available/https_jans.conf Remove the linux package # Use the command below to remove and purge jans package yum remove jans.x86_64 Successful removal will remove the Janssen Server package along with the removal of all the unused dependencies.","title":"RHEL"},{"location":"admin/install/vm-install/rhel/#install-janssen-server-using-enterprise-linux-package","text":"","title":"Install Janssen Server using Enterprise Linux Package"},{"location":"admin/install/vm-install/rhel/#supported-versions","text":"Red Hat 8 CentOS 8 Note SELinux should be disabled","title":"Supported versions"},{"location":"admin/install/vm-install/rhel/#system-requirements","text":"System should meet minimum VM system requirements","title":"System Requirements"},{"location":"admin/install/vm-install/rhel/#prerequisites","text":"System should be registered and attached with Red Hat. This is required to run commands that install packages like mod_auth_openidc Install Extra Packages for Enterprise Linux (EPEL) yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm curl should be instlled. This can be easily installed using the command below yum install curl","title":"Prerequisites"},{"location":"admin/install/vm-install/rhel/#install","text":"Enable the mod_auth_openidc module yum module enable mod_auth_openidc Download and Install the Janssen Server Linux package yum install -y https:$(curl -s -L https://api.github.com/repos/JanssenProject/jans/releases/latest | egrep -o '/.*el8.x86_64.rpm' | head -n 1) Initiate the setup process using the command below. The setup process will prompt for user for inputs. sudo python3 /opt/jans/jans-setup/setup.py The installer should confirm successful installation with a message similar to the one shown below:","title":"Install"},{"location":"admin/install/vm-install/rhel/#verify-the-installation","text":"After the successful completion of setup process, verify the system health .","title":"Verify the Installation"},{"location":"admin/install/vm-install/rhel/#uninstall-janssen-server","text":"Use the command below to uninstall the Janssen server python3 /opt/jans/jans-setup/install.py -uninstall Console output like below will confirm the successful uninstallation of the Janssen Server This process is irreversible. You will lose all data related to Janssen Server. Are you sure to uninstall Janssen Server? [yes/N] yes Uninstalling Jannsen Server... Removing /etc/default/jans-config-api Stopping jans-config-api Removing /etc/default/jans-scim Stopping jans-scim Removing /etc/default/jans-fido2 Stopping jans-fido2 Removing /etc/default/jans-auth Stopping jans-auth Removing /etc/default/jans-client-api Stopping jans-client-api Stopping OpenDj Server sh: 1: /opt/opendj/bin/stop-ds: not found Executing rm -r -f /etc/certs Executing rm -r -f /etc/jans Executing rm -r -f /opt/jans Executing rm -r -f /opt/amazon-corretto* Executing rm -r -f /opt/jre Executing rm -r -f /opt/node* Executing rm -r -f /opt/jetty* Executing rm -r -f /opt/jython* Executing rm -r -f /opt/opendj Executing rm -r -f /opt/dist Removing /etc/apache2/sites-enabled/https_jans.conf Removing /etc/apache2/sites-available/https_jans.conf","title":"Uninstall Janssen Server"},{"location":"admin/install/vm-install/rhel/#remove-the-linux-package","text":"Use the command below to remove and purge jans package yum remove jans.x86_64 Successful removal will remove the Janssen Server package along with the removal of all the unused dependencies.","title":"Remove the linux package"},{"location":"admin/install/vm-install/suse/","tags":["administration","installation","vm","SUSE","SLES"],"text":"Install Janssen Server using the SUSE Linux Enterprise Server (SLES) Package # Janssen Server can be installed using the Linux package for SLES Supported versions # SUSE Linux Enterprise Server (SLES) 15 Note SELinux should be disabled System Requirements # System should meet minimum VM system requirements Prerequisites # curl should be installed. This can be easily installed using the command below zypper install curl Install # Download and install package from the Janssen Project site using the command below zypper --no-gpg-checks install -y https:$(curl -s -L https://api.github.com/repos/JanssenProject/jans/releases/latest | egrep -o '/.*suse15.x86_64.rpm' | head -n 1) Initiate the setup process using the command below. The setup process will prompt for user for inputs. python3 /opt/jans/jans-setup/setup.py Verify the Installation # After the successful completion of setup process, verify the system health . Uninstall # Uninstall process involves two steps Uninstall Janssen Server Remove and purge the jans package Uninstall Janssen Server # Use the command below to uninstall the Janssen server python3 /opt/jans/jans-setup/install.py -uninstall Console output like below will confirm the successful uninstallation of the Janssen Server This process is irreversible. You will lose all data related to Janssen Server. Are you sure to uninstall Janssen Server? [yes/N] yes Uninstalling Jannsen Server... Removing /etc/default/jans-config-api Stopping jans-config-api Removing /etc/default/jans-scim Stopping jans-scim Removing /etc/default/jans-fido2 Stopping jans-fido2 Removing /etc/default/jans-auth Stopping jans-auth Removing /etc/default/jans-client-api Stopping jans-client-api Stopping OpenDj Server sh: 1: /opt/opendj/bin/stop-ds: not found Executing rm -r -f /etc/certs Executing rm -r -f /etc/jans Executing rm -r -f /opt/jans Executing rm -r -f /opt/amazon-corretto* Executing rm -r -f /opt/jre Executing rm -r -f /opt/node* Executing rm -r -f /opt/jetty* Executing rm -r -f /opt/jython* Executing rm -r -f /opt/opendj Executing rm -r -f /opt/dist Removing /etc/apache2/sites-enabled/https_jans.conf Removing /etc/apache2/sites-available/https_jans.conf","title":"Suse"},{"location":"admin/install/vm-install/suse/#install-janssen-server-using-the-suse-linux-enterprise-server-sles-package","text":"Janssen Server can be installed using the Linux package for SLES","title":"Install Janssen Server using the SUSE Linux Enterprise Server (SLES) Package"},{"location":"admin/install/vm-install/suse/#supported-versions","text":"SUSE Linux Enterprise Server (SLES) 15 Note SELinux should be disabled","title":"Supported versions"},{"location":"admin/install/vm-install/suse/#system-requirements","text":"System should meet minimum VM system requirements","title":"System Requirements"},{"location":"admin/install/vm-install/suse/#prerequisites","text":"curl should be installed. This can be easily installed using the command below zypper install curl","title":"Prerequisites"},{"location":"admin/install/vm-install/suse/#install","text":"Download and install package from the Janssen Project site using the command below zypper --no-gpg-checks install -y https:$(curl -s -L https://api.github.com/repos/JanssenProject/jans/releases/latest | egrep -o '/.*suse15.x86_64.rpm' | head -n 1) Initiate the setup process using the command below. The setup process will prompt for user for inputs. python3 /opt/jans/jans-setup/setup.py","title":"Install"},{"location":"admin/install/vm-install/suse/#verify-the-installation","text":"After the successful completion of setup process, verify the system health .","title":"Verify the Installation"},{"location":"admin/install/vm-install/suse/#uninstall","text":"Uninstall process involves two steps Uninstall Janssen Server Remove and purge the jans package","title":"Uninstall"},{"location":"admin/install/vm-install/suse/#uninstall-janssen-server","text":"Use the command below to uninstall the Janssen server python3 /opt/jans/jans-setup/install.py -uninstall Console output like below will confirm the successful uninstallation of the Janssen Server This process is irreversible. You will lose all data related to Janssen Server. Are you sure to uninstall Janssen Server? [yes/N] yes Uninstalling Jannsen Server... Removing /etc/default/jans-config-api Stopping jans-config-api Removing /etc/default/jans-scim Stopping jans-scim Removing /etc/default/jans-fido2 Stopping jans-fido2 Removing /etc/default/jans-auth Stopping jans-auth Removing /etc/default/jans-client-api Stopping jans-client-api Stopping OpenDj Server sh: 1: /opt/opendj/bin/stop-ds: not found Executing rm -r -f /etc/certs Executing rm -r -f /etc/jans Executing rm -r -f /opt/jans Executing rm -r -f /opt/amazon-corretto* Executing rm -r -f /opt/jre Executing rm -r -f /opt/node* Executing rm -r -f /opt/jetty* Executing rm -r -f /opt/jython* Executing rm -r -f /opt/opendj Executing rm -r -f /opt/dist Removing /etc/apache2/sites-enabled/https_jans.conf Removing /etc/apache2/sites-available/https_jans.conf","title":"Uninstall Janssen Server"},{"location":"admin/install/vm-install/ubuntu/","tags":["administration","installation","vm","ubuntu"],"text":"Install Janssen Server using the Ubuntu Linux Package # Janssen Server can be installed using the Linux package for Ubuntu Supported Versions # Ubuntu 20.04 Note SELinux should be disabled System Requirements # System should meet minimum VM system requirements Prerequisites # curl should be installed. This can be easily installed using the command below apt install curl Install # Download the installer from the Janssen Project site using the command below wget http:$(curl -s -L https://api.github.com/repos/JanssenProject/jans/releases/latest | egrep -o '/.*ubuntu20.04_amd64.deb' | head -n 1) -O /tmp/jans.ubuntu20.04_amd64.deb Unpack/install the installer package apt install -y /tmp/jans.ubuntu20.04_amd64.deb Initiate the setup process using the command below. The setup process will prompt for user for inputs. python3 /opt/jans/jans-setup/setup.py Verify the Installation # After the successful completion of setup process, verify the system health . Uninstall # Uninstall process involves two steps Uninstall Janssen Server Remove and purge the jans package Uninstall Janssen Server # Use the command below to uninstall the Janssen server python3 /opt/jans/jans-setup/install.py -uninstall Console output like below will confirm the successful uninstallation of the Janssen Server This process is irreversible. You will lose all data related to Janssen Server. Are you sure to uninstall Janssen Server? [yes/N] yes Uninstalling Jannsen Server... Removing /etc/default/jans-config-api Stopping jans-config-api Removing /etc/default/jans-scim Stopping jans-scim Removing /etc/default/jans-fido2 Stopping jans-fido2 Removing /etc/default/jans-auth Stopping jans-auth Removing /etc/default/jans-client-api Stopping jans-client-api Stopping OpenDj Server sh: 1: /opt/opendj/bin/stop-ds: not found Executing rm -r -f /etc/certs Executing rm -r -f /etc/jans Executing rm -r -f /opt/jans Executing rm -r -f /opt/amazon-corretto* Executing rm -r -f /opt/jre Executing rm -r -f /opt/node* Executing rm -r -f /opt/jetty* Executing rm -r -f /opt/jython* Executing rm -r -f /opt/opendj Executing rm -r -f /opt/dist Removing /etc/apache2/sites-enabled/https_jans.conf Removing /etc/apache2/sites-available/https_jans.conf Remove the linux package # Use the command below to remove and purge the jans package apt-get --purge remove jans Successful removal will provide the output as below: Reading package lists... Done Building dependency tree Reading state information... Done The following packages were automatically installed and are no longer required: apache2 apache2-bin apache2-data apache2-utils libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap liblua5.2-0 python3-distutils python3-ldap3 python3-lib2to3 python3-prompt-toolkit python3-pyasn1 python3-pygments python3-pymysql python3-ruamel.yaml python3-wcwidth Use 'sudo apt autoremove' to remove them. The following packages will be REMOVED: jans* 0 upgraded, 0 newly installed, 1 to remove and 124 not upgraded. After this operation, 1,257 MB disk space will be freed. Do you want to continue? [Y/n] y (Reading database ... 166839 files and directories currently installed.) Removing jans (1.0.2~ubuntu20.04) ... Checking to make sure service is down...","title":"Ubuntu"},{"location":"admin/install/vm-install/ubuntu/#install-janssen-server-using-the-ubuntu-linux-package","text":"Janssen Server can be installed using the Linux package for Ubuntu","title":"Install Janssen Server using the Ubuntu Linux Package"},{"location":"admin/install/vm-install/ubuntu/#supported-versions","text":"Ubuntu 20.04 Note SELinux should be disabled","title":"Supported Versions"},{"location":"admin/install/vm-install/ubuntu/#system-requirements","text":"System should meet minimum VM system requirements","title":"System Requirements"},{"location":"admin/install/vm-install/ubuntu/#prerequisites","text":"curl should be installed. This can be easily installed using the command below apt install curl","title":"Prerequisites"},{"location":"admin/install/vm-install/ubuntu/#install","text":"Download the installer from the Janssen Project site using the command below wget http:$(curl -s -L https://api.github.com/repos/JanssenProject/jans/releases/latest | egrep -o '/.*ubuntu20.04_amd64.deb' | head -n 1) -O /tmp/jans.ubuntu20.04_amd64.deb Unpack/install the installer package apt install -y /tmp/jans.ubuntu20.04_amd64.deb Initiate the setup process using the command below. The setup process will prompt for user for inputs. python3 /opt/jans/jans-setup/setup.py","title":"Install"},{"location":"admin/install/vm-install/ubuntu/#verify-the-installation","text":"After the successful completion of setup process, verify the system health .","title":"Verify the Installation"},{"location":"admin/install/vm-install/ubuntu/#uninstall","text":"Uninstall process involves two steps Uninstall Janssen Server Remove and purge the jans package","title":"Uninstall"},{"location":"admin/install/vm-install/ubuntu/#uninstall-janssen-server","text":"Use the command below to uninstall the Janssen server python3 /opt/jans/jans-setup/install.py -uninstall Console output like below will confirm the successful uninstallation of the Janssen Server This process is irreversible. You will lose all data related to Janssen Server. Are you sure to uninstall Janssen Server? [yes/N] yes Uninstalling Jannsen Server... Removing /etc/default/jans-config-api Stopping jans-config-api Removing /etc/default/jans-scim Stopping jans-scim Removing /etc/default/jans-fido2 Stopping jans-fido2 Removing /etc/default/jans-auth Stopping jans-auth Removing /etc/default/jans-client-api Stopping jans-client-api Stopping OpenDj Server sh: 1: /opt/opendj/bin/stop-ds: not found Executing rm -r -f /etc/certs Executing rm -r -f /etc/jans Executing rm -r -f /opt/jans Executing rm -r -f /opt/amazon-corretto* Executing rm -r -f /opt/jre Executing rm -r -f /opt/node* Executing rm -r -f /opt/jetty* Executing rm -r -f /opt/jython* Executing rm -r -f /opt/opendj Executing rm -r -f /opt/dist Removing /etc/apache2/sites-enabled/https_jans.conf Removing /etc/apache2/sites-available/https_jans.conf","title":"Uninstall Janssen Server"},{"location":"admin/install/vm-install/ubuntu/#remove-the-linux-package","text":"Use the command below to remove and purge the jans package apt-get --purge remove jans Successful removal will provide the output as below: Reading package lists... Done Building dependency tree Reading state information... Done The following packages were automatically installed and are no longer required: apache2 apache2-bin apache2-data apache2-utils libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap liblua5.2-0 python3-distutils python3-ldap3 python3-lib2to3 python3-prompt-toolkit python3-pyasn1 python3-pygments python3-pymysql python3-ruamel.yaml python3-wcwidth Use 'sudo apt autoremove' to remove them. The following packages will be REMOVED: jans* 0 upgraded, 0 newly installed, 1 to remove and 124 not upgraded. After this operation, 1,257 MB disk space will be freed. Do you want to continue? [Y/n] y (Reading database ... 166839 files and directories currently installed.) Removing jans (1.0.2~ubuntu20.04) ... Checking to make sure service is down...","title":"Remove the linux package"},{"location":"admin/install/vm-install/vm-requirements/","tags":["administration","installation","vm"],"text":"VM System Requirements # Janssen Server can be installed on a VM with any of the supported operating systems mentioned below: Ubuntu (versions: 20.04) SUSE Linux Enterprise Server (versions: 15) RedHat Enterprise Linux (versions: 7,8) Hardware Requirements # Janssen Server needs the below-mentioned minimum resources on VM when the data store is installed separately on a different VM. Development and Test Environments # 4 GB RAM 2 CPU 20 GB Disk Production Environments # 8 GB RAM 4 CPU 4 GB swap space 50 GB Disk Requirements for VM hosting the data store (i.e LDAP, RDBMS, etc.) can vary based on the size of the data and type of the data store. VM Setup Guidelines # Ensure that VM hosting the Janssen Server is configured based on the following guidelines: Required ports should be open. Refer to Port Configuration section for OS specific steps. Janssen Server must be deployed on a server or VM with a static IP address. Refer to Static IP Address Configuration section for OS specific instructions. Static IP address should resolve to a hostname. localhost is not supported. Refer to Hostname Configuration section for OS specific instructions. For local testing and development purposes, VM can be set up using VMWare Workstation player. Often, VM tools keep the IP address of the VM consistent across restarts. And most of the VM ports are also accessible. Hence some of the configuration described in this document may not be required for local testing and development. Janssen Server requires setting the file descriptors to 65k. Refer to File Descriptor Configuration section for OS specific instructions. Port Configuration # Janssen Server requires the following ports to be open for incoming connections. Port Protocol Notes 80 TCP Forwards to 443 443 TCP apache2/httpd 22 TCP ssh Ubuntu # Ensuring the above ports are open on an Ubuntu system can be done by below mentioned steps: 1) Check the status of these ports ufw status verbose 2) If the ufw status is inactive , enable it using ufw enable 3) If the ports are closed, allow connections by: ufw allow <port> SLES and RHEL # SUSE Linux Enterprise Server and Red Hat Enterprise Linux use Firewalld to control the network access. Use the commands below to configure the ports. 1) Get zone for the network interface firewall-cmd --get-zone-of-interface=<your-network-interface> 2) Add port firewall-cmd --zone <zone-name> --permanent --add-port 443/tcp 3) Restart firewalld systemctl stop firewalld systemctl start firewalld Static IP Address Configuration # Janssen Server must be deployed on a server or VM with a static IP address. This section describes the steps required to set static IP for supported OS platforms. Commands and steps mentioned here might have changed at the time of use, if so please refer to respective OS documentation for the most up-to-date steps to set up static IP. First, Select the network interface for which static IP needs to be set. On any Linux based OS platform, run the command below: ip link The above command lists all the existing network interfaces in format below: 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp4s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 8c:8c:aa:6a:bf:b5 brd ff:ff:ff:ff:ff:ff here we are going to configure the enp4s0 network interface. Ubuntu # The steps listed below show how to set up a static IP address on an Ubuntu Server. 1) Locate the configuration file Network interface configuration can be changed using YAML configuration files located under /etc/netplan Above directory will contain one or more YAML files. Open the file that has the configuration for enp4s0 network interface. Create one if it doesn't exist. 2) Update the configuration Set the yaml file configuration as shown in the example below. Values for the gateway and the nameservers should be set appropriately. addresses should be set to desired static IP. network: version: 2 renderer: networkd ethernets: enp4s0: dhcp4: no addresses: - 192.168.123.212/24 gateway4: 192.168.123.1 nameservers: addresses: [8.8.8.8, 1.1.1.1] 3) Apply the change sudo netplan apply 4) Verify the new configuration ip addr show dev enp4s0 The newly assigned IP address can be seen in the output SUSE Linux Enterprise Server # SLES provides YaST tool to manage the system configuration. 1) Open YaST yast 2) Navigate to System -> Network Settings and select the network interface that needs to be set to static IP. 3) Hit F4 to enter edit mode as shown in the image below. Select Statically Assiged IP Address instead of DHCP . Also provide the required details for IP address , Subnet Mask , and Hostname . RedHat Enterprise Linux # RHEL provides Nmcli tool to configure and manage the VM network. 1) Set IP address for selected network interface nmcli con mod enp4s0 ipv4.addresses <static-IP>/24 2) Set the appropriate gateway nmcli con mod enp4s0 ipv4.gateway <gateway-IP> nmcli con mod enp4s0 ipv4.method manual 3) Configure DNS nmcli con mod enp4s0 ipv4.dns \"<dns-IP>\" 4) Reload configuration nmcli con up enp4s0 5) See the configuration being reflected at cat /etc/sysconfig/network-scripts/ifcfg-enp4s0 Hostname Configuration # IP can be mapped to a hostname(FQDN) using entries into /etc/hosts file. Run the command below to configure a hostname for the IP address. vi /etc/hosts Make an entry similar to one below in this file. IP should be a static IP assigned to the server or VM. <static-IP> jans.op.io File Descriptor Configuration (FD) # Janssen Server requires setting the file descriptors to 65k. Follow the steps below to set the value for file descriptors. These steps apply to SUSE Linux Enterprise, Ubuntu Server, and RedHat Enterprise Linux. First, check the current file descriptor limit using command below. If the existing FD limit exceeds 65535, then continue with the same. # cat /proc/sys/fs/file-max In case the existing FD limit is less than 65535, then follow the steps below to set the value. 1) Set soft and hard limits by adding the following lines in the /etc/security/limits.conf file * soft nofile 65535 * hard nofile 262144 2) Add the following lines to /etc/pam.d/login if not already present session required pam_limits.so 3) Increase the FD limit in /proc/sys/fs/file-max echo 65535 > /proc/sys/fs/file-max** 4) Use the ulimit command to set the FD limit to the hard limit specified in /etc/security/limits.conf . If setting to hard limit doesn't work, then try to set it to the soft limit. ulimit -n 262144 5) Restart the system","title":"VM Requirements"},{"location":"admin/install/vm-install/vm-requirements/#vm-system-requirements","text":"Janssen Server can be installed on a VM with any of the supported operating systems mentioned below: Ubuntu (versions: 20.04) SUSE Linux Enterprise Server (versions: 15) RedHat Enterprise Linux (versions: 7,8)","title":"VM System Requirements"},{"location":"admin/install/vm-install/vm-requirements/#hardware-requirements","text":"Janssen Server needs the below-mentioned minimum resources on VM when the data store is installed separately on a different VM.","title":"Hardware Requirements"},{"location":"admin/install/vm-install/vm-requirements/#development-and-test-environments","text":"4 GB RAM 2 CPU 20 GB Disk","title":"Development and Test Environments"},{"location":"admin/install/vm-install/vm-requirements/#production-environments","text":"8 GB RAM 4 CPU 4 GB swap space 50 GB Disk Requirements for VM hosting the data store (i.e LDAP, RDBMS, etc.) can vary based on the size of the data and type of the data store.","title":"Production Environments"},{"location":"admin/install/vm-install/vm-requirements/#vm-setup-guidelines","text":"Ensure that VM hosting the Janssen Server is configured based on the following guidelines: Required ports should be open. Refer to Port Configuration section for OS specific steps. Janssen Server must be deployed on a server or VM with a static IP address. Refer to Static IP Address Configuration section for OS specific instructions. Static IP address should resolve to a hostname. localhost is not supported. Refer to Hostname Configuration section for OS specific instructions. For local testing and development purposes, VM can be set up using VMWare Workstation player. Often, VM tools keep the IP address of the VM consistent across restarts. And most of the VM ports are also accessible. Hence some of the configuration described in this document may not be required for local testing and development. Janssen Server requires setting the file descriptors to 65k. Refer to File Descriptor Configuration section for OS specific instructions.","title":"VM Setup Guidelines"},{"location":"admin/install/vm-install/vm-requirements/#port-configuration","text":"Janssen Server requires the following ports to be open for incoming connections. Port Protocol Notes 80 TCP Forwards to 443 443 TCP apache2/httpd 22 TCP ssh","title":"Port Configuration"},{"location":"admin/install/vm-install/vm-requirements/#ubuntu","text":"Ensuring the above ports are open on an Ubuntu system can be done by below mentioned steps: 1) Check the status of these ports ufw status verbose 2) If the ufw status is inactive , enable it using ufw enable 3) If the ports are closed, allow connections by: ufw allow <port>","title":"Ubuntu"},{"location":"admin/install/vm-install/vm-requirements/#sles-and-rhel","text":"SUSE Linux Enterprise Server and Red Hat Enterprise Linux use Firewalld to control the network access. Use the commands below to configure the ports. 1) Get zone for the network interface firewall-cmd --get-zone-of-interface=<your-network-interface> 2) Add port firewall-cmd --zone <zone-name> --permanent --add-port 443/tcp 3) Restart firewalld systemctl stop firewalld systemctl start firewalld","title":"SLES and RHEL"},{"location":"admin/install/vm-install/vm-requirements/#static-ip-address-configuration","text":"Janssen Server must be deployed on a server or VM with a static IP address. This section describes the steps required to set static IP for supported OS platforms. Commands and steps mentioned here might have changed at the time of use, if so please refer to respective OS documentation for the most up-to-date steps to set up static IP. First, Select the network interface for which static IP needs to be set. On any Linux based OS platform, run the command below: ip link The above command lists all the existing network interfaces in format below: 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp4s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 8c:8c:aa:6a:bf:b5 brd ff:ff:ff:ff:ff:ff here we are going to configure the enp4s0 network interface.","title":"Static IP Address Configuration"},{"location":"admin/install/vm-install/vm-requirements/#ubuntu_1","text":"The steps listed below show how to set up a static IP address on an Ubuntu Server. 1) Locate the configuration file Network interface configuration can be changed using YAML configuration files located under /etc/netplan Above directory will contain one or more YAML files. Open the file that has the configuration for enp4s0 network interface. Create one if it doesn't exist. 2) Update the configuration Set the yaml file configuration as shown in the example below. Values for the gateway and the nameservers should be set appropriately. addresses should be set to desired static IP. network: version: 2 renderer: networkd ethernets: enp4s0: dhcp4: no addresses: - 192.168.123.212/24 gateway4: 192.168.123.1 nameservers: addresses: [8.8.8.8, 1.1.1.1] 3) Apply the change sudo netplan apply 4) Verify the new configuration ip addr show dev enp4s0 The newly assigned IP address can be seen in the output","title":"Ubuntu"},{"location":"admin/install/vm-install/vm-requirements/#suse-linux-enterprise-server","text":"SLES provides YaST tool to manage the system configuration. 1) Open YaST yast 2) Navigate to System -> Network Settings and select the network interface that needs to be set to static IP. 3) Hit F4 to enter edit mode as shown in the image below. Select Statically Assiged IP Address instead of DHCP . Also provide the required details for IP address , Subnet Mask , and Hostname .","title":"SUSE Linux Enterprise Server"},{"location":"admin/install/vm-install/vm-requirements/#redhat-enterprise-linux","text":"RHEL provides Nmcli tool to configure and manage the VM network. 1) Set IP address for selected network interface nmcli con mod enp4s0 ipv4.addresses <static-IP>/24 2) Set the appropriate gateway nmcli con mod enp4s0 ipv4.gateway <gateway-IP> nmcli con mod enp4s0 ipv4.method manual 3) Configure DNS nmcli con mod enp4s0 ipv4.dns \"<dns-IP>\" 4) Reload configuration nmcli con up enp4s0 5) See the configuration being reflected at cat /etc/sysconfig/network-scripts/ifcfg-enp4s0","title":"RedHat Enterprise Linux"},{"location":"admin/install/vm-install/vm-requirements/#hostname-configuration","text":"IP can be mapped to a hostname(FQDN) using entries into /etc/hosts file. Run the command below to configure a hostname for the IP address. vi /etc/hosts Make an entry similar to one below in this file. IP should be a static IP assigned to the server or VM. <static-IP> jans.op.io","title":"Hostname Configuration"},{"location":"admin/install/vm-install/vm-requirements/#file-descriptor-configuration-fd","text":"Janssen Server requires setting the file descriptors to 65k. Follow the steps below to set the value for file descriptors. These steps apply to SUSE Linux Enterprise, Ubuntu Server, and RedHat Enterprise Linux. First, check the current file descriptor limit using command below. If the existing FD limit exceeds 65535, then continue with the same. # cat /proc/sys/fs/file-max In case the existing FD limit is less than 65535, then follow the steps below to set the value. 1) Set soft and hard limits by adding the following lines in the /etc/security/limits.conf file * soft nofile 65535 * hard nofile 262144 2) Add the following lines to /etc/pam.d/login if not already present session required pam_limits.so 3) Increase the FD limit in /proc/sys/fs/file-max echo 65535 > /proc/sys/fs/file-max** 4) Use the ulimit command to set the FD limit to the hard limit specified in /etc/security/limits.conf . If setting to hard limit doesn't work, then try to set it to the soft limit. ulimit -n 262144 5) Restart the system","title":"File Descriptor Configuration (FD)"},{"location":"admin/integration/","text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/integration/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/integration/casa/","text":"Casa - Self-service MFA portal # Overview # Casa is a self-service web portal that allows end users to view, enroll, and remove MFA credentials, including hardware tokens, software tokens, commercial services (like Duo), social login, biometric, and mobile. Casa is also extensible. As new authentication technologies arise, you can download plugins to leverage them in your organization through Casa. Prerequisites # Installed Janssen Server Installing Casa # Casa gets installed as an add-on to Janssen Server and integrates with jans-auth-server module as an OpenID connect Relying Party. Casa can be installed using the command below. Currently, Casa installation is supported on CentOS 8 and Ubuntu 20. The following steps will install Casa as an add-on. Download installer wget https://raw.githubusercontent.com/GluuFederation/flex/main/flex-linux-setup/flex_linux_setup/flex_setup.py -O flex_setup.py Run the installer python3 flex_setup.py Automate install # If you have setup.properties file and want to automate installation, you can pass properties file as python3 flex_setup.py -f /path/to/setup.properties -n -c Minimal example setup.properties file: ip = 10 .146.197.201 hostname = flex.gluu.org orgName = Gluu admin_email = flex@gluu.org city = Austin state = Texas countryCode = US installLdap = True admin_password = MyAdminPassword ldapPass = MyLdapPassword casa_client_id = 3000 .7986c837-2a8f-4c31-9c63-1bd2f6abce77 casa_client_pw = MyCasaClientSecret You will be prompted: Install Admin UI [Y/n]: . Select n You will be prompted: Install Casa [Y/n]: . Select y At the end of the installation you will be presented with a URL to access the Casa portal. You can use this URL and log into the portal using the administrator credentials that you created during the Janssen Server installation. Enabling Authentication methods # Go to /opt/jans/jetty/casa folder and execute touch .administrable . Further reading Enable authentication mechanisms in Jan-auth server like otp , fido2 , email_otp . python3 /opt/jans/jans-setup/setup.py -enable-script = \"<inum_of_script>\" Inum displayName 09A0-93D7 smpp 5018-D4BF otp 5018-F9CF duo 8BAF-80D7 fido2 92F0-BF9E super_gluu 09A0-93D6 twilio_sms When successfully enabled, you should see a confirmation message similar to the one below on console: Please wait while collecting properties... Enabling scripts 5018-D4BF Login to the Casa portal as an administrator Enable authentication methods by navigating to Administration console -> Enabled Authentication methods . Details about enabling authentication methods are available in Casa documentation Configuring authentication methods # At this point, users ( How to create users ) can log in to the Casa portal and enable/configure one or more authentication methods for their account. Uninstalling Casa from Janssen Server # Execute following command to uninstall Casa from Janssen Server python3 flex_setup.py -remove casa","title":"Gluu Casa"},{"location":"admin/integration/casa/#casa-self-service-mfa-portal","text":"","title":"Casa - Self-service MFA portal"},{"location":"admin/integration/casa/#overview","text":"Casa is a self-service web portal that allows end users to view, enroll, and remove MFA credentials, including hardware tokens, software tokens, commercial services (like Duo), social login, biometric, and mobile. Casa is also extensible. As new authentication technologies arise, you can download plugins to leverage them in your organization through Casa.","title":"Overview"},{"location":"admin/integration/casa/#prerequisites","text":"Installed Janssen Server","title":"Prerequisites"},{"location":"admin/integration/casa/#installing-casa","text":"Casa gets installed as an add-on to Janssen Server and integrates with jans-auth-server module as an OpenID connect Relying Party. Casa can be installed using the command below. Currently, Casa installation is supported on CentOS 8 and Ubuntu 20. The following steps will install Casa as an add-on. Download installer wget https://raw.githubusercontent.com/GluuFederation/flex/main/flex-linux-setup/flex_linux_setup/flex_setup.py -O flex_setup.py Run the installer python3 flex_setup.py","title":"Installing Casa"},{"location":"admin/integration/casa/#automate-install","text":"If you have setup.properties file and want to automate installation, you can pass properties file as python3 flex_setup.py -f /path/to/setup.properties -n -c Minimal example setup.properties file: ip = 10 .146.197.201 hostname = flex.gluu.org orgName = Gluu admin_email = flex@gluu.org city = Austin state = Texas countryCode = US installLdap = True admin_password = MyAdminPassword ldapPass = MyLdapPassword casa_client_id = 3000 .7986c837-2a8f-4c31-9c63-1bd2f6abce77 casa_client_pw = MyCasaClientSecret You will be prompted: Install Admin UI [Y/n]: . Select n You will be prompted: Install Casa [Y/n]: . Select y At the end of the installation you will be presented with a URL to access the Casa portal. You can use this URL and log into the portal using the administrator credentials that you created during the Janssen Server installation.","title":"Automate install"},{"location":"admin/integration/casa/#enabling-authentication-methods","text":"Go to /opt/jans/jetty/casa folder and execute touch .administrable . Further reading Enable authentication mechanisms in Jan-auth server like otp , fido2 , email_otp . python3 /opt/jans/jans-setup/setup.py -enable-script = \"<inum_of_script>\" Inum displayName 09A0-93D7 smpp 5018-D4BF otp 5018-F9CF duo 8BAF-80D7 fido2 92F0-BF9E super_gluu 09A0-93D6 twilio_sms When successfully enabled, you should see a confirmation message similar to the one below on console: Please wait while collecting properties... Enabling scripts 5018-D4BF Login to the Casa portal as an administrator Enable authentication methods by navigating to Administration console -> Enabled Authentication methods . Details about enabling authentication methods are available in Casa documentation","title":"Enabling Authentication methods"},{"location":"admin/integration/casa/#configuring-authentication-methods","text":"At this point, users ( How to create users ) can log in to the Casa portal and enable/configure one or more authentication methods for their account.","title":"Configuring authentication methods"},{"location":"admin/integration/casa/#uninstalling-casa-from-janssen-server","text":"Execute following command to uninstall Casa from Janssen Server python3 flex_setup.py -remove casa","title":"Uninstalling Casa from Janssen Server"},{"location":"admin/integration/custom-web/","text":"Custom Web Development # Protecting a Website with mod_aut_openidc # AppAuth IOS # AppAuth Android # AppAuth JS # Node # React # React Native # Angular # Spring Boot # Django # Flask # ASP .Net #","title":"Custom Web Development"},{"location":"admin/integration/custom-web/#custom-web-development","text":"","title":"Custom Web Development"},{"location":"admin/integration/custom-web/#protecting-a-website-with-mod_aut_openidc","text":"","title":"Protecting a Website with mod_aut_openidc"},{"location":"admin/integration/custom-web/#appauth-ios","text":"","title":"AppAuth IOS"},{"location":"admin/integration/custom-web/#appauth-android","text":"","title":"AppAuth Android"},{"location":"admin/integration/custom-web/#appauth-js","text":"","title":"AppAuth JS"},{"location":"admin/integration/custom-web/#node","text":"","title":"Node"},{"location":"admin/integration/custom-web/#react","text":"","title":"React"},{"location":"admin/integration/custom-web/#react-native","text":"","title":"React Native"},{"location":"admin/integration/custom-web/#angular","text":"","title":"Angular"},{"location":"admin/integration/custom-web/#spring-boot","text":"","title":"Spring Boot"},{"location":"admin/integration/custom-web/#django","text":"","title":"Django"},{"location":"admin/integration/custom-web/#flask","text":"","title":"Flask"},{"location":"admin/integration/custom-web/#asp-net","text":"","title":"ASP .Net"},{"location":"admin/integration/integration-faq/","text":"This file is a placeholder.","title":"FAQ"},{"location":"admin/integration/passport-js/","text":"This file is a placeholder.","title":"Passport js"},{"location":"admin/integration/saml/","text":"Overview # SSO with SAML SP's # Shibboleth IDP with Gluu Server 4 # SimpleSAML PHP # Federation with SAML IDPs # SAML IDP Initiated Authentication #","title":"SAML"},{"location":"admin/integration/saml/#overview","text":"","title":"Overview"},{"location":"admin/integration/saml/#sso-with-saml-sps","text":"","title":"SSO with SAML SP's"},{"location":"admin/integration/saml/#shibboleth-idp-with-gluu-server-4","text":"","title":"Shibboleth IDP with Gluu Server 4"},{"location":"admin/integration/saml/#simplesaml-php","text":"","title":"SimpleSAML PHP"},{"location":"admin/integration/saml/#federation-with-saml-idps","text":"","title":"Federation with SAML IDPs"},{"location":"admin/integration/saml/#saml-idp-initiated-authentication","text":"","title":"SAML IDP Initiated Authentication"},{"location":"admin/integration/apps/","text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/integration/apps/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/integration/apps/drupal/","text":"This file is a placeholder.","title":"Drupal"},{"location":"admin/integration/apps/magento/","text":"This file is a placeholder.","title":"Magento"},{"location":"admin/integration/apps/moodle/","text":"This file is a placeholder.","title":"Moodle"},{"location":"admin/integration/apps/nextcloud/","text":"This file is a placeholder.","title":"NextCloud"},{"location":"admin/integration/apps/rancher/","text":"This file is a placeholder.","title":"Rancher"},{"location":"admin/integration/apps/rocket/","text":"This file is a placeholder.","title":"Rocket"},{"location":"admin/integration/apps/teleport/","text":"This file is a placeholder.","title":"Teleport"},{"location":"admin/integration/apps/wordpress/","text":"This file is a placeholder.","title":"Wordpress"},{"location":"admin/integration/saas/","text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/integration/saas/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/integration/saas/aws/","text":"This file is a placeholder.","title":"Amazon AWS"},{"location":"admin/integration/saas/docusign/","text":"This file is a placeholder.","title":"Docusign"},{"location":"admin/integration/saas/google/","text":"This file is a placeholder.","title":"Google"},{"location":"admin/integration/saas/jira/","text":"This file is a placeholder.","title":"Jira"},{"location":"admin/integration/saas/office365/","text":"This file is a placeholder.","title":"Office365"},{"location":"admin/integration/saas/salesforce/","text":"This file is a placeholder.","title":"Salesforce"},{"location":"admin/integration/saas/webex/","text":"This file is a placeholder.","title":"Webex"},{"location":"admin/integration/saas/zoom/","text":"This file is a placeholder.","title":"Zoom"},{"location":"admin/kubernetes-ops/","tags":["administration","kubernetes","operations"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/kubernetes-ops/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/kubernetes-ops/backup-restore/","tags":["administration","kubernetes","operations"],"text":"This is a placeholder","title":"Backup and Restore"},{"location":"admin/kubernetes-ops/cert-management/","tags":["administration","kubernetes","operations"],"text":"This is a placeholder","title":"Certificate Management"},{"location":"admin/kubernetes-ops/customization/","tags":["administration","kubernetes","operations"],"text":"This is a placeholder","title":"Customization"},{"location":"admin/kubernetes-ops/faq/","tags":["administration","kubernetes","operations"],"text":"This is a placeholder","title":"FAQ"},{"location":"admin/kubernetes-ops/health-check/","tags":["administration","kubernetes","operations"],"text":"This is a placeholder","title":"Health Check"},{"location":"admin/kubernetes-ops/logs/","tags":["administration","kubernetes","operations"],"text":"This is a placeholder","title":"Logs"},{"location":"admin/kubernetes-ops/scaling/","tags":["administration","kubernetes","operations"],"text":"This is a placeholder","title":"Scaling"},{"location":"admin/kubernetes-ops/start-order/","tags":["administration","kubernetes","operations"],"text":"This is a placeholder","title":"Start Order"},{"location":"admin/planning/","tags":["administration","planning"],"text":"Overview # This Deployment Guide will help you to plan how to launch a digital identity service for your organization. It will hopefully answer many of the \"why\" questions, not just the \"how\" questions, setting the stage for what challenges are in scope for Janssen--and where you may need to use other software. It addresses some common questions that don't quite fit into other parts of the Janssen docs. By covering the key features and designs, hopefully, this guide will help you understand the different deployment options available, when to use each, and how to right-size your Janssen identity services. The audience for this deployment guide includes technical architects, designers, developers and Janssen administrators. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/planning/#overview","text":"This Deployment Guide will help you to plan how to launch a digital identity service for your organization. It will hopefully answer many of the \"why\" questions, not just the \"how\" questions, setting the stage for what challenges are in scope for Janssen--and where you may need to use other software. It addresses some common questions that don't quite fit into other parts of the Janssen docs. By covering the key features and designs, hopefully, this guide will help you understand the different deployment options available, when to use each, and how to right-size your Janssen identity services. The audience for this deployment guide includes technical architects, designers, developers and Janssen administrators. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/planning/application-portal/","tags":["administration","planning"],"text":"This is a placeholder","title":"Application Portal"},{"location":"admin/planning/benchmarking/","tags":["administration","planning"],"text":"This is a placeholder","title":"Benchmarking"},{"location":"admin/planning/caching/","tags":["administration","planning"],"text":"This is a placeholder","title":"Caching"},{"location":"admin/planning/central-auth-service/","tags":["administration","planning"],"text":"This is a placeholder","title":"Central Authorization Service Integration"},{"location":"admin/planning/certificates-keys/","tags":["administration","planning"],"text":"This is a placeholder","title":"Certificates/Keys"},{"location":"admin/planning/components/","tags":["administration","planning"],"text":"This is a placeholder","title":"Components"},{"location":"admin/planning/customization/","tags":["administration","planning"],"text":"This is a placeholder","title":"Customization/Localization"},{"location":"admin/planning/delegated-user-admin/","tags":["administration","planning"],"text":"This is a placeholder","title":"Delegated User Administration"},{"location":"admin/planning/discovery/","tags":["administration","planning"],"text":"This is a placeholder","title":"Discovery"},{"location":"admin/planning/dns/","tags":["administration","planning"],"text":"This is a placeholder","title":"DNS"},{"location":"admin/planning/faq/","tags":["administration","deployment"],"text":"This is a placeholder","title":"FAQ"},{"location":"admin/planning/identity-access-governance/","tags":["administration","planning"],"text":"This is a placeholder","title":"Identity Access Governance"},{"location":"admin/planning/identity-management/","tags":["administration","planning"],"text":"This is a placeholder","title":"Identity Management"},{"location":"admin/planning/kubernetes/","tags":["administration","planning"],"text":"This is a placeholder","title":"Kubernetes"},{"location":"admin/planning/load-balancers/","tags":["administration","planning"],"text":"This is a placeholder","title":"Load Balancers"},{"location":"admin/planning/machine-to-machine/","tags":["administration","planning"],"text":"This is a placeholder","title":"Machine-to-Machine Authentication"},{"location":"admin/planning/multi-tenancy/","tags":["administration","planning"],"text":"This is a placeholder","title":"Multi-tenancy"},{"location":"admin/planning/passwordless-auth/","tags":["administration","planning"],"text":"This is a placeholder","title":"Passwordless Authentication"},{"location":"admin/planning/persistence/","tags":["administration","deployment"],"text":"This is a placeholder","title":"Persistence"},{"location":"admin/planning/platform-goal/","tags":["administration","planning"],"text":"Project Goals # Online trust is a fundamental challenge to our digital society. The Internet has connected us. But at the same time, it has undermined trust. Digital identity starts with a connection between a person and a digital device. Identity software conveys the integrity of that connection from the user\u2019s device to a complex web of backend services. Solving the challenge of digital identity is foundational to achieving trustworthy online security. Nothing builds trust like source code. At the Janssen Project, we believe that the software that powers the world's digital identity services must be open source. And that the open source project behind digital identity must be community governed. And that the community must have a mechanism to extend the software to solve any digital identity challenge. Functional Goals # Janssen focuses on open standards for run-time digital identity, specifically federated digital identity protocols such as OpenID Connect and modern client-side passwordless authentication like FIDO. The project may take on new digital identity standards as they are invented. Organizations can make Janssen authoritative for identity, or can configure Janssen as a consumer of identity. Janssen is not designed to act as a workforce identity management or identity governance platform. Security Goals # Janssen project seeks to tack the most challenging security requirements. This means keeping current with OpenID certifications, enabling cryptographic conformance with FIPS 140-2 and implementing best practices for software development lifecycle, including a transparent build process to enable government and non-government organizations to trust the software. Janssen Project is unapologetically Java. The reason is simple: Java has the most cryptographic implementations. Java Cryptographic Engines (JCE) are written by many companies and open source projects. It takes a long time to trust a cryptographic implementation. Not only does Java have the most options for cryptography, it also has some of the most trusted implementations, and when new algorithms are announced, it frequently has code first. Community Goals # Open source gives you the freedom to modify the code. But having your own fork of the code might make it hard to upgrade--you'll have to merge changes. Janssen provides standard interfaces that make it possible to implement custom business logic in an upgrade-friendly manner. Janssen is also the home of the Agama programming language--the world's first code specifically designed to enable developers to write secure web authentication workflows. By lowering the bar for customization, Janssen seeks to expand the community of developers and content creators far and wide. Deployment goals # Developers should have distributions to enable rapid testing for non-production instances. Linux system administrators should have packages for easy installation and update for smaller deployments. Cloud native deployments should be available for high end deployments, including high concurrency and high availability. Janssen should take advantage of auto-scaling horizontally--enabling hypothetically any concurrency by adding more compute and memory.","title":"Platform Goal"},{"location":"admin/planning/platform-goal/#project-goals","text":"Online trust is a fundamental challenge to our digital society. The Internet has connected us. But at the same time, it has undermined trust. Digital identity starts with a connection between a person and a digital device. Identity software conveys the integrity of that connection from the user\u2019s device to a complex web of backend services. Solving the challenge of digital identity is foundational to achieving trustworthy online security. Nothing builds trust like source code. At the Janssen Project, we believe that the software that powers the world's digital identity services must be open source. And that the open source project behind digital identity must be community governed. And that the community must have a mechanism to extend the software to solve any digital identity challenge.","title":"Project Goals"},{"location":"admin/planning/platform-goal/#functional-goals","text":"Janssen focuses on open standards for run-time digital identity, specifically federated digital identity protocols such as OpenID Connect and modern client-side passwordless authentication like FIDO. The project may take on new digital identity standards as they are invented. Organizations can make Janssen authoritative for identity, or can configure Janssen as a consumer of identity. Janssen is not designed to act as a workforce identity management or identity governance platform.","title":"Functional Goals"},{"location":"admin/planning/platform-goal/#security-goals","text":"Janssen project seeks to tack the most challenging security requirements. This means keeping current with OpenID certifications, enabling cryptographic conformance with FIPS 140-2 and implementing best practices for software development lifecycle, including a transparent build process to enable government and non-government organizations to trust the software. Janssen Project is unapologetically Java. The reason is simple: Java has the most cryptographic implementations. Java Cryptographic Engines (JCE) are written by many companies and open source projects. It takes a long time to trust a cryptographic implementation. Not only does Java have the most options for cryptography, it also has some of the most trusted implementations, and when new algorithms are announced, it frequently has code first.","title":"Security Goals"},{"location":"admin/planning/platform-goal/#community-goals","text":"Open source gives you the freedom to modify the code. But having your own fork of the code might make it hard to upgrade--you'll have to merge changes. Janssen provides standard interfaces that make it possible to implement custom business logic in an upgrade-friendly manner. Janssen is also the home of the Agama programming language--the world's first code specifically designed to enable developers to write secure web authentication workflows. By lowering the bar for customization, Janssen seeks to expand the community of developers and content creators far and wide.","title":"Community Goals"},{"location":"admin/planning/platform-goal/#deployment-goals","text":"Developers should have distributions to enable rapid testing for non-production instances. Linux system administrators should have packages for easy installation and update for smaller deployments. Cloud native deployments should be available for high end deployments, including high concurrency and high availability. Janssen should take advantage of auto-scaling horizontally--enabling hypothetically any concurrency by adding more compute and memory.","title":"Deployment goals"},{"location":"admin/planning/role-based-access-management/","tags":["administration","planning"],"text":"This is a placeholder","title":"Role Based Access Management"},{"location":"admin/planning/security-best-practices/","tags":["administration","planning"],"text":"This is a placeholder","title":"Security Best Practices"},{"location":"admin/planning/self-service-password-2fa/","tags":["administration","planning"],"text":"This is a placeholder","title":"Self-Service Password/2FA Portal"},{"location":"admin/planning/stepped-up-auth/","tags":["administration","planning"],"text":"This is a placeholder","title":"Stepped-up Authentication"},{"location":"admin/planning/timeout-management/","tags":["administration","planning"],"text":"This is a placeholder","title":"Timeout Management"},{"location":"admin/planning/use-cases/","tags":["administration","planning"],"text":"This is a placeholder","title":"Use Cases"},{"location":"admin/planning/vm-cluster/","tags":["administration","planning"],"text":"This is a placeholder","title":"VM Cluster"},{"location":"admin/planning/vm-single-instance/","tags":["administration","planning"],"text":"This is a placeholder","title":"VM Single Instance"},{"location":"admin/recipes/","tags":["administration","recipes"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/adaptive-authn/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Adaptive Authentication"},{"location":"admin/recipes/casa/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Gluu Casa"},{"location":"admin/recipes/faq/","tags":["administration","recipes"],"text":"This is a placeholder","title":"FAQ"},{"location":"admin/recipes/forcing-reauthn/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Forcing Re-Authentication"},{"location":"admin/recipes/impersonation/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Impersonation"},{"location":"admin/recipes/inbound-oidc/","text":"Overview # In this tutorial, we will see how you can integrate any inbound external oauth2 provider authentication in the Janssen server. If you are looking for social login support then check out passport module for that. We will use interception authentication script which is a PersonAuthenticationType script for whole flow. Currently, It supports Authorization Code Flow and client_secret_post token endpoint auth method. Authentication Flow # You can add any external OAuth2 server authentication option and provision authenticated users to your Janssen server A.K.A. Inbound-identity. sequenceDiagram title OIDC Inbound Identity Flow participant browser as Browser participant rp as RP participant jans as Jans Authz Server participant eidp as External Provider autonumber browser->>rp: Request page browser->>jans: Invoke /authorize endpoint jans->>browser: Present \"Login with OAuth2\" button browser->>browser: User click on button browser->>eidp: Redirect login request loop n times - (multistep authentication) eidp->>browser: Present login screen browser->>eidp: Present login credentials end eidp->>eidp: Authenticate user eidp->>jans: Redirect to callback url with success response(code) jans->>jans: Validate code, id_token, userinfo opt if new user jans->>jans: Dynamic enrollment or registration end jans->>jans: Create internal Jans session jans->>rp: Redirect with Success response rp->>rp: Validate response rp->>browser: Page is accessed Prerequisites # The external oauth2 server authentication script External OAuth2 Provider credentials: you can choose any external OP server that follows OAuth2 standards and authentication features. RP application: This is your application that will be used by your users and where you want to add this auth feature. Configure Janssen server # 1. Add Custom Script # Create cs.json with the contents of a CUSTOM script. Edit the cs.json file's contents to reflect the addition of the oidc custom script. Populate the script field with oidc-jans-script.py script. Download oidc-jans-script.py script from here. This script needs to accept one property oidc_creds_file . which is a JSON file with your external oauth2 server details: // oidc_creds_file: /opt/oidc.json { \"op_server\": \"https://your.external.oauth2.server\", \"client_id\": \"xxxxxxxxxxxxxxxx-xxxxx-external-oauth2\", \"client_secret\": \"xxxxxxxxxxxxxx-xxxxx-external-oauth2\", \"authorization_uri\": \"https://your.external.oauth2.server/xx/xxxx\", \"token_uri\": \"https://your.external.oauth2.server/oauth/xx/xxx\", \"userinfo_uri\": \"https://your.external.oauth2.server/xxx/xxx\", \"redirect_uri\": \"https://your.jans.server/jans-auth/postlogin.htm\", \"scope\": \"openid profile email\", \"auto_redirect\": false, \"title\": \"Login with OAuth2\" } Property Description op_server Your external OAuth2 server FQDN client_id Client id of your external OAuth2 server client_secret Client secret of your external OAuth2 server authorization_uri Authorization endpoint of your external OAuth2 server token_uri Token endpoint of your external OAuth2 server userinfo_uri Userinfo endpoint of your external OAuth2 server redirect_uri Sample: https://<your.jans.server>/jans-auth/postlogin.htm , This is redirect URL where your OAuth2 server redirect back with code . Use this same URL to configure redirect urls at your external OAuth2 server. scope OAuth scopes auto_redirect If true, it will automatically redirect to external OAuth2 server otherwise you will get one button on jans login page. title This property is used to set text for a button which is shown on jans login page name field should reflect the use case i.e. oidc script_type field should be PERSON_AUTHENTICATION cs.json example: { \"dn\": null, \"inum\": null, \"name\": \"oidc\", \"aliases\": [], \"description\": \"OIDC Inbound custom script\", \"script\": \"_file /root/oidc-jans-script.py\", \"scriptType\": \"PERSON_AUTHENTICATION\", \"programmingLanguage\": \"JYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": [ { \"value1\": \"oidc_creds_file\", \"value2\": \"/opt/oidc.json\", \"description\": \"External server details\", \"hide\": true } ], \"level\": \"integer\", \"revision\": 0, \"enabled\": true, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } Add the custom script /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/cs.json 2. Login Page Setup # OIDC Script needs a login page Download oidc-jans-login.xhtml from here Place it here /opt/jans/jetty/jans-auth/custom/pages/auth/oidc/ . If folders are not there then create them in the same order. Rename it to oidc.xhtml . Restart jans-auth server service jans-auth restart Check here for more details on custom login page. Now oidc script is an available authentication mechanism for your Janssen Server. This means that using OpenID Connect acr_values , applications can now request your external auth server for authentication. !!! Note To make sure oidc script has been enabled successfully, you can check your Janssen Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find acr_values_supported: and you should see oidc . Test with RP Client # RP(Relying party) is an application that will be used by your users when you want to add authentication and protect resources. Once you initiate auth request from your RP Application make sure to add acr_values=oidc in the request. acr_values is your script name as configured above.","title":"Inbound OIDC"},{"location":"admin/recipes/inbound-oidc/#overview","text":"In this tutorial, we will see how you can integrate any inbound external oauth2 provider authentication in the Janssen server. If you are looking for social login support then check out passport module for that. We will use interception authentication script which is a PersonAuthenticationType script for whole flow. Currently, It supports Authorization Code Flow and client_secret_post token endpoint auth method.","title":"Overview"},{"location":"admin/recipes/inbound-oidc/#authentication-flow","text":"You can add any external OAuth2 server authentication option and provision authenticated users to your Janssen server A.K.A. Inbound-identity. sequenceDiagram title OIDC Inbound Identity Flow participant browser as Browser participant rp as RP participant jans as Jans Authz Server participant eidp as External Provider autonumber browser->>rp: Request page browser->>jans: Invoke /authorize endpoint jans->>browser: Present \"Login with OAuth2\" button browser->>browser: User click on button browser->>eidp: Redirect login request loop n times - (multistep authentication) eidp->>browser: Present login screen browser->>eidp: Present login credentials end eidp->>eidp: Authenticate user eidp->>jans: Redirect to callback url with success response(code) jans->>jans: Validate code, id_token, userinfo opt if new user jans->>jans: Dynamic enrollment or registration end jans->>jans: Create internal Jans session jans->>rp: Redirect with Success response rp->>rp: Validate response rp->>browser: Page is accessed","title":"Authentication Flow"},{"location":"admin/recipes/inbound-oidc/#prerequisites","text":"The external oauth2 server authentication script External OAuth2 Provider credentials: you can choose any external OP server that follows OAuth2 standards and authentication features. RP application: This is your application that will be used by your users and where you want to add this auth feature.","title":"Prerequisites"},{"location":"admin/recipes/inbound-oidc/#configure-janssen-server","text":"","title":"Configure Janssen server"},{"location":"admin/recipes/inbound-oidc/#1-add-custom-script","text":"Create cs.json with the contents of a CUSTOM script. Edit the cs.json file's contents to reflect the addition of the oidc custom script. Populate the script field with oidc-jans-script.py script. Download oidc-jans-script.py script from here. This script needs to accept one property oidc_creds_file . which is a JSON file with your external oauth2 server details: // oidc_creds_file: /opt/oidc.json { \"op_server\": \"https://your.external.oauth2.server\", \"client_id\": \"xxxxxxxxxxxxxxxx-xxxxx-external-oauth2\", \"client_secret\": \"xxxxxxxxxxxxxx-xxxxx-external-oauth2\", \"authorization_uri\": \"https://your.external.oauth2.server/xx/xxxx\", \"token_uri\": \"https://your.external.oauth2.server/oauth/xx/xxx\", \"userinfo_uri\": \"https://your.external.oauth2.server/xxx/xxx\", \"redirect_uri\": \"https://your.jans.server/jans-auth/postlogin.htm\", \"scope\": \"openid profile email\", \"auto_redirect\": false, \"title\": \"Login with OAuth2\" } Property Description op_server Your external OAuth2 server FQDN client_id Client id of your external OAuth2 server client_secret Client secret of your external OAuth2 server authorization_uri Authorization endpoint of your external OAuth2 server token_uri Token endpoint of your external OAuth2 server userinfo_uri Userinfo endpoint of your external OAuth2 server redirect_uri Sample: https://<your.jans.server>/jans-auth/postlogin.htm , This is redirect URL where your OAuth2 server redirect back with code . Use this same URL to configure redirect urls at your external OAuth2 server. scope OAuth scopes auto_redirect If true, it will automatically redirect to external OAuth2 server otherwise you will get one button on jans login page. title This property is used to set text for a button which is shown on jans login page name field should reflect the use case i.e. oidc script_type field should be PERSON_AUTHENTICATION cs.json example: { \"dn\": null, \"inum\": null, \"name\": \"oidc\", \"aliases\": [], \"description\": \"OIDC Inbound custom script\", \"script\": \"_file /root/oidc-jans-script.py\", \"scriptType\": \"PERSON_AUTHENTICATION\", \"programmingLanguage\": \"JYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": [ { \"value1\": \"oidc_creds_file\", \"value2\": \"/opt/oidc.json\", \"description\": \"External server details\", \"hide\": true } ], \"level\": \"integer\", \"revision\": 0, \"enabled\": true, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } Add the custom script /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/cs.json","title":"1. Add Custom Script"},{"location":"admin/recipes/inbound-oidc/#2-login-page-setup","text":"OIDC Script needs a login page Download oidc-jans-login.xhtml from here Place it here /opt/jans/jetty/jans-auth/custom/pages/auth/oidc/ . If folders are not there then create them in the same order. Rename it to oidc.xhtml . Restart jans-auth server service jans-auth restart Check here for more details on custom login page. Now oidc script is an available authentication mechanism for your Janssen Server. This means that using OpenID Connect acr_values , applications can now request your external auth server for authentication. !!! Note To make sure oidc script has been enabled successfully, you can check your Janssen Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find acr_values_supported: and you should see oidc .","title":"2. Login Page Setup"},{"location":"admin/recipes/inbound-oidc/#test-with-rp-client","text":"RP(Relying party) is an application that will be used by your users when you want to add authentication and protect resources. Once you initiate auth request from your RP Application make sure to add acr_values=oidc in the request. acr_values is your script name as configured above.","title":"Test with RP Client"},{"location":"admin/recipes/inbound-saml/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Inbound SAML"},{"location":"admin/recipes/locking-accounts/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Locking or Disabling Accounts"},{"location":"admin/recipes/mobile-apps/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Mobile Applications"},{"location":"admin/recipes/passportjs/","tags":["administration","recipes"],"text":"Overview # This is a guide for user authentication at any external Social Providers(Google, Apple, Facebook, etc) using Passport-JS(a.k.a \"inbound identity\"). Components # The Passport Social authentication script The Passport JS Project Authentication Flow # After users authenticate at the external social identity provider, the control flows back to Janssen Authentication server where the user is verified and the user-id is provisioned into the Janssen server. Diagram source file Role of Passport-JS project and Janssen's Authentication server # Passport-js project encrypts and signs user data before passing it to the Janssen server. Janssen Auth server verifies the received JWT, decrypts data, add/update user into LDAP, and marks the user as authenticated. Check Script Code For details. Diagram source file Setup and configurations # Setup Passport JS Project # Passport JS is very good library in Node JS which helps to add many social provider authentication in project. For this Inbound Jans Flow, You have to make a Passport Node JS project which help to generates auth request for your external social providers, get the user information, and send it to the Janssen server. Below things need to add in Passport JS Project to setup complete auth flow with Jans. Make a token endpoint which expose token with unique id. Jans will use this endpoint to get token and use this token for secur auth request. Passport Project has to validate this token in Jans request. This is just a simple strategy to protect passport endpoint from spam requests and only allow jans to request it. Code sample: // Encryption compatible with Jans EncryptionService // Salt File path: /etc/jans/conf/salt router . get ( '/token' , function ( req , res , next ) { const t = jwt . sign ( { jwt : uuidv4 () }, '<saltfilevalue>' , { expiresIn : 120 } // 2 min expiration ) res . status ( 200 ). send ({ token_ : t }) // key should be token_ } ) You need to use Salt File /etc/jans/conf/salt as a secret key. You will get this salt file after Jans intallation. Jans interception script uses this same file for decryption. Create auth request endpoints which will be request by User on Jans auth login page. For Example: Suppose you have added google strategy in your passport project. In that case you can make a endpoint like /google/:token . google is provider id in providers_json_file . token is the same token which we created in above step. After authentication Passport Project has to send encoded userinfo data to Jans https://<your.jans.server.com>/jans-auth/postlogin.htm . Below is the Node JS code sample to send POST request with data to Jans Post Login Endpoint. const postUrl = \"https://<your.jans.server.com>/jans-auth/postlogin.htm\" res . set ( 'content-type' , 'text/html;charset=UTF-8' ) return res . status ( 200 ). send ( ` <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"> <body onload=\"document.forms[0].submit()\"> <noscript> <p> <b>Note:</b> your browser does not support JavaScript, please press the Continue button to proceed. </p> </noscript> <form action=\" ${ postUrl } \" method=\"post\"> <div> <input type=\"hidden\" name=\"user\" value=\" ${ jwt } \"/> <noscript> <input type=\"submit\" value=\"Continue\"/> </noscript> </div> </form> </body> </html>` ) Check next step to generate jwt . To make encoded userinfo data, use jwt private key signing technique. Check below sample code: // mapped user info data with ldap attributes const user = { uid : profile . username || profile . id , mail : profile . email , cn : profile . displayName , displayName : profile . displayName , givenName : profile . name . givenName , sn : profile . name . familyName , provider : \"<your-social-provider-name>\" , // e.g. google } jwt . sign ({ iss : 'https://<your.jans.server.com>/jans-auth/postlogin.htm' , sub : user . uid , aud : 'https://<your.jans.server.com>' , jti : uuidv4 (), exp : now / 1000 + 30 , iat : now , data : encrypt ( user ) }, privateKey , defaultRpOptions ) // Check `generate Keystore` section below to generate keys const privateKey = `-----BEGIN PRIVATE KEY----- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Your Private Key xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -----END PRIVATE KEY-----` cosnt defaultRpOptions = { algorithm : config . get ( 'keyAlg' ), header : { typ : 'JWT' , alg : config . get ( 'keyAlg' ), kid : config . get ( 'keyId' ) } } function encrypt ( obj ) { // Encryption compatible with Jans EncryptionService // Salt File path: /etc/jans/conf/salt const pt = JSON . stringify ( obj ) const encrypt = crypto . createCipheriv ( 'des-ede3-ecb' , '<saltfilevalue>' , '' ) let encrypted = encrypt . update ( pt , 'utf8' , 'base64' ) encrypted += encrypt . final ( 'base64' ) return encrypted } Follow Steps in Generate Keystore section to generate private key. You can add as many as possible passport strategies in your passport project. Above steps are little complex, use this sample code file to build your passport application. Apache proxy setup # For seamless flow, You can deploy Passport Project on Jans server and you can use an apache proxy pass to configure the passport with jans-server. Add the below configuration to the Janssen apache server and restart the apache server. <Location /passport> ProxyPass http://localhost:8090/passport retry=5 connectiontimeout=60 timeout=60 Order deny,allow Allow from all </Location> After this configurations, you need to use jans-fqdn in passport callback URL. This is optional configurations, you can deploy your passport project on another server. Add passport-social script # Download the script from here and add it to Janssen Server using jans-cli . After Janssen Server installation, you will get jans-cli . Follow this jans-cli guide to add a custom script in Janssen. The custom script has the following properties: Property Description key_store_file Keystore file path. Use these instructions to create a keystore. key_store_password Keystore file secret password providers_json_file Array of JSON Objects. Provider JSON file with social provider which you want to add for authentication. passport_fqdn Passport FQDN e.g. https://your-passport.com passport_token_endpoint_path It will use passport_fqdn as a prefix so just add path. e.g. /passport/token . Jans request this endpoint to get token for next auth request here . Check Step-1 in Setup Passport section to make token endpoint. passport_auth_endpoint_path It will use passport_fqdn as a prefix so just add path. e.g. /passport/auth . Jans request this endpoint to initiate auth request here . Check Step-2 in Setup Passport section to make passport auth endpoint. Jans will append provider and token during auth request e.g. If you have added google provider with id google in providers_json_file then jans request will be look like https://your-passport.com/passport/auth/google/<token> . Note: After adding and enabling successfully, you can check your Janssen's Auth Server OpenID Connect configuration by navigating to the following URL: https://your-jans-server.com/.well-known/openid-configuration. Find \"acr_values_supported\" and you should see passport-social . Note: Once you initiate auth request from your RP Application make sure to add acr_values=passport-social in the request. acr_values is your script name. Below is the providers_json_file format: [ { \"id\": \"google\", \"displayName\": \"google\", \"requestForEmail\": false, \"emailLinkingSafe\": false, \"logoImg\": \"img-url-or-path\" } ] Property Description id Unique string for your provider displayName This name will be shown on auth page logoImg This logo image will be shown on auth page e.g. /jans-auth/img/glu_icon.png requestForEmail It is not required to be true . If you set it to true then it will prompt a user to enter an email. emailLinkingSafe It is not required to be true . If you want to link to existing users then set it to true Customize login pages # Passport-social script uses passportlogin.xhtml and passportpostlogin.xhtml which are already comes which Janssen installation. No need to do anything. For UI Customization, you can download current page source code from here , modify UI, replace pages at path /opt/jans/jetty/jans-auth/custom/pages/auth/passport/ and restart jans-auth server. Generate Keystore # Passport sends private key sign user data jwt to janssen server, for that we need to generate Keystore. keystore is a safe and passport-protected private key container. Use the below commands: # generate Keystore keytool -genkey -keyalg RSA -keysize 2048 -v -keystore <keystore-file-name>.jks -alias <kid-unique-string> Example: keytool -genkey -keyalg RSA -keysize 2048 -v -keystore keystore.jks -alias kid-2s3d5-f5-6f5-f4dd4 This command will prompt you to enter a password. Whichever password you have entered, this same password you need to configure key_store_password at Janssen custom script configuration. <kid-unique-string> is your kid which you need for passport JWT keyId config. keystore.jks need it to configure key_store_file property at Janssen custom script configuration. # JKS to PKCS#12 keytool -importkeystore -srckeystore keystore.jks \\ -destkeystore keystore.p12 \\ -srcstoretype jks \\ -deststoretype pkcs12 # PKCS#12 to PEM openssl pkcs12 -nodes -in keystore.p12 -out keystore.pem You can see many things in keystore.pem . but we need only the private key part to make a new file and add the private key part there like in the below example: // private.pem -----BEGIN PRIVATE KEY----- MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCSETIkMkVKOwwO XkYVPaBdz+lhsXpMjMJR4dTdFzn01hvcEDUf57wLmgvBXnfWDXEyEFrsvQGePZw7 foYAdnCtSqZW+dLsh6SUxL5iK0uakiY4SBX401fpbhdCeSC1pK8K+qE3jgc/o60d oRAHLz/RCwaa8BszTwyxlLMh7xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxPQEK0b5mPeV84fZJlfbRv01PIrwGRZJtcWC9Ke5 xSBoh0uvpZ37z2CJC7HZSz+bYz0ZhYiX372gl7BUxbLYdCz2Z9l0DDhwCO68wCzC nualRv0U2Y5EYkekj180KnAR -----END PRIVATE KEY----- we need this file for the passport keyPath config. Testing at RP application # RP(Relying party) is an application that will be used by your users when you want to add authentication and protect resources. Once you initiate auth request from your RP Application make sure to add acr_values=passport-social in the request. acr_values is your script name as configured above.","title":"Passport-JS"},{"location":"admin/recipes/passportjs/#overview","text":"This is a guide for user authentication at any external Social Providers(Google, Apple, Facebook, etc) using Passport-JS(a.k.a \"inbound identity\").","title":"Overview"},{"location":"admin/recipes/passportjs/#components","text":"The Passport Social authentication script The Passport JS Project","title":"Components"},{"location":"admin/recipes/passportjs/#authentication-flow","text":"After users authenticate at the external social identity provider, the control flows back to Janssen Authentication server where the user is verified and the user-id is provisioned into the Janssen server. Diagram source file","title":"Authentication Flow"},{"location":"admin/recipes/passportjs/#role-of-passport-js-project-and-janssens-authentication-server","text":"Passport-js project encrypts and signs user data before passing it to the Janssen server. Janssen Auth server verifies the received JWT, decrypts data, add/update user into LDAP, and marks the user as authenticated. Check Script Code For details. Diagram source file","title":"Role of Passport-JS project and Janssen's Authentication server"},{"location":"admin/recipes/passportjs/#setup-and-configurations","text":"","title":"Setup and configurations"},{"location":"admin/recipes/passportjs/#setup-passport-js-project","text":"Passport JS is very good library in Node JS which helps to add many social provider authentication in project. For this Inbound Jans Flow, You have to make a Passport Node JS project which help to generates auth request for your external social providers, get the user information, and send it to the Janssen server. Below things need to add in Passport JS Project to setup complete auth flow with Jans. Make a token endpoint which expose token with unique id. Jans will use this endpoint to get token and use this token for secur auth request. Passport Project has to validate this token in Jans request. This is just a simple strategy to protect passport endpoint from spam requests and only allow jans to request it. Code sample: // Encryption compatible with Jans EncryptionService // Salt File path: /etc/jans/conf/salt router . get ( '/token' , function ( req , res , next ) { const t = jwt . sign ( { jwt : uuidv4 () }, '<saltfilevalue>' , { expiresIn : 120 } // 2 min expiration ) res . status ( 200 ). send ({ token_ : t }) // key should be token_ } ) You need to use Salt File /etc/jans/conf/salt as a secret key. You will get this salt file after Jans intallation. Jans interception script uses this same file for decryption. Create auth request endpoints which will be request by User on Jans auth login page. For Example: Suppose you have added google strategy in your passport project. In that case you can make a endpoint like /google/:token . google is provider id in providers_json_file . token is the same token which we created in above step. After authentication Passport Project has to send encoded userinfo data to Jans https://<your.jans.server.com>/jans-auth/postlogin.htm . Below is the Node JS code sample to send POST request with data to Jans Post Login Endpoint. const postUrl = \"https://<your.jans.server.com>/jans-auth/postlogin.htm\" res . set ( 'content-type' , 'text/html;charset=UTF-8' ) return res . status ( 200 ). send ( ` <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"> <body onload=\"document.forms[0].submit()\"> <noscript> <p> <b>Note:</b> your browser does not support JavaScript, please press the Continue button to proceed. </p> </noscript> <form action=\" ${ postUrl } \" method=\"post\"> <div> <input type=\"hidden\" name=\"user\" value=\" ${ jwt } \"/> <noscript> <input type=\"submit\" value=\"Continue\"/> </noscript> </div> </form> </body> </html>` ) Check next step to generate jwt . To make encoded userinfo data, use jwt private key signing technique. Check below sample code: // mapped user info data with ldap attributes const user = { uid : profile . username || profile . id , mail : profile . email , cn : profile . displayName , displayName : profile . displayName , givenName : profile . name . givenName , sn : profile . name . familyName , provider : \"<your-social-provider-name>\" , // e.g. google } jwt . sign ({ iss : 'https://<your.jans.server.com>/jans-auth/postlogin.htm' , sub : user . uid , aud : 'https://<your.jans.server.com>' , jti : uuidv4 (), exp : now / 1000 + 30 , iat : now , data : encrypt ( user ) }, privateKey , defaultRpOptions ) // Check `generate Keystore` section below to generate keys const privateKey = `-----BEGIN PRIVATE KEY----- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Your Private Key xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -----END PRIVATE KEY-----` cosnt defaultRpOptions = { algorithm : config . get ( 'keyAlg' ), header : { typ : 'JWT' , alg : config . get ( 'keyAlg' ), kid : config . get ( 'keyId' ) } } function encrypt ( obj ) { // Encryption compatible with Jans EncryptionService // Salt File path: /etc/jans/conf/salt const pt = JSON . stringify ( obj ) const encrypt = crypto . createCipheriv ( 'des-ede3-ecb' , '<saltfilevalue>' , '' ) let encrypted = encrypt . update ( pt , 'utf8' , 'base64' ) encrypted += encrypt . final ( 'base64' ) return encrypted } Follow Steps in Generate Keystore section to generate private key. You can add as many as possible passport strategies in your passport project. Above steps are little complex, use this sample code file to build your passport application.","title":"Setup Passport JS Project"},{"location":"admin/recipes/passportjs/#apache-proxy-setup","text":"For seamless flow, You can deploy Passport Project on Jans server and you can use an apache proxy pass to configure the passport with jans-server. Add the below configuration to the Janssen apache server and restart the apache server. <Location /passport> ProxyPass http://localhost:8090/passport retry=5 connectiontimeout=60 timeout=60 Order deny,allow Allow from all </Location> After this configurations, you need to use jans-fqdn in passport callback URL. This is optional configurations, you can deploy your passport project on another server.","title":"Apache proxy setup"},{"location":"admin/recipes/passportjs/#add-passport-social-script","text":"Download the script from here and add it to Janssen Server using jans-cli . After Janssen Server installation, you will get jans-cli . Follow this jans-cli guide to add a custom script in Janssen. The custom script has the following properties: Property Description key_store_file Keystore file path. Use these instructions to create a keystore. key_store_password Keystore file secret password providers_json_file Array of JSON Objects. Provider JSON file with social provider which you want to add for authentication. passport_fqdn Passport FQDN e.g. https://your-passport.com passport_token_endpoint_path It will use passport_fqdn as a prefix so just add path. e.g. /passport/token . Jans request this endpoint to get token for next auth request here . Check Step-1 in Setup Passport section to make token endpoint. passport_auth_endpoint_path It will use passport_fqdn as a prefix so just add path. e.g. /passport/auth . Jans request this endpoint to initiate auth request here . Check Step-2 in Setup Passport section to make passport auth endpoint. Jans will append provider and token during auth request e.g. If you have added google provider with id google in providers_json_file then jans request will be look like https://your-passport.com/passport/auth/google/<token> . Note: After adding and enabling successfully, you can check your Janssen's Auth Server OpenID Connect configuration by navigating to the following URL: https://your-jans-server.com/.well-known/openid-configuration. Find \"acr_values_supported\" and you should see passport-social . Note: Once you initiate auth request from your RP Application make sure to add acr_values=passport-social in the request. acr_values is your script name. Below is the providers_json_file format: [ { \"id\": \"google\", \"displayName\": \"google\", \"requestForEmail\": false, \"emailLinkingSafe\": false, \"logoImg\": \"img-url-or-path\" } ] Property Description id Unique string for your provider displayName This name will be shown on auth page logoImg This logo image will be shown on auth page e.g. /jans-auth/img/glu_icon.png requestForEmail It is not required to be true . If you set it to true then it will prompt a user to enter an email. emailLinkingSafe It is not required to be true . If you want to link to existing users then set it to true","title":"Add passport-social script"},{"location":"admin/recipes/passportjs/#customize-login-pages","text":"Passport-social script uses passportlogin.xhtml and passportpostlogin.xhtml which are already comes which Janssen installation. No need to do anything. For UI Customization, you can download current page source code from here , modify UI, replace pages at path /opt/jans/jetty/jans-auth/custom/pages/auth/passport/ and restart jans-auth server.","title":"Customize login pages"},{"location":"admin/recipes/passportjs/#generate-keystore","text":"Passport sends private key sign user data jwt to janssen server, for that we need to generate Keystore. keystore is a safe and passport-protected private key container. Use the below commands: # generate Keystore keytool -genkey -keyalg RSA -keysize 2048 -v -keystore <keystore-file-name>.jks -alias <kid-unique-string> Example: keytool -genkey -keyalg RSA -keysize 2048 -v -keystore keystore.jks -alias kid-2s3d5-f5-6f5-f4dd4 This command will prompt you to enter a password. Whichever password you have entered, this same password you need to configure key_store_password at Janssen custom script configuration. <kid-unique-string> is your kid which you need for passport JWT keyId config. keystore.jks need it to configure key_store_file property at Janssen custom script configuration. # JKS to PKCS#12 keytool -importkeystore -srckeystore keystore.jks \\ -destkeystore keystore.p12 \\ -srcstoretype jks \\ -deststoretype pkcs12 # PKCS#12 to PEM openssl pkcs12 -nodes -in keystore.p12 -out keystore.pem You can see many things in keystore.pem . but we need only the private key part to make a new file and add the private key part there like in the below example: // private.pem -----BEGIN PRIVATE KEY----- MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCSETIkMkVKOwwO XkYVPaBdz+lhsXpMjMJR4dTdFzn01hvcEDUf57wLmgvBXnfWDXEyEFrsvQGePZw7 foYAdnCtSqZW+dLsh6SUxL5iK0uakiY4SBX401fpbhdCeSC1pK8K+qE3jgc/o60d oRAHLz/RCwaa8BszTwyxlLMh7xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxPQEK0b5mPeV84fZJlfbRv01PIrwGRZJtcWC9Ke5 xSBoh0uvpZ37z2CJC7HZSz+bYz0ZhYiX372gl7BUxbLYdCz2Z9l0DDhwCO68wCzC nualRv0U2Y5EYkekj180KnAR -----END PRIVATE KEY----- we need this file for the passport keyPath config.","title":"Generate Keystore"},{"location":"admin/recipes/passportjs/#testing-at-rp-application","text":"RP(Relying party) is an application that will be used by your users when you want to add authentication and protect resources. Once you initiate auth request from your RP Application make sure to add acr_values=passport-social in the request. acr_values is your script name as configured above.","title":"Testing at RP application"},{"location":"admin/recipes/password-expirations/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Password Expirations"},{"location":"admin/recipes/passwordless/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Passwordless"},{"location":"admin/recipes/registration/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Registration"},{"location":"admin/recipes/returning-group/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Returning Group/Role User Information"},{"location":"admin/recipes/single-page-apps/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Single Page Applications"},{"location":"admin/recipes/social-login-apple/","tags":["administration","recipes"],"text":"Social Login with Apple # An out-of-the-box feature, the Sign-in with Apple Authentication script is a PersonAuthenticationType script which enables a user to sign-in using Apple credentials. After users authenticate using their Apple credentials, their Apple credentials are provisioned into the Jans-auth server. Prerequisites # A Jans-auth Server (installation instructions here ) The Sign-in with Apple authentication script (included in the default Jans-auth Server distribution); An Apple developer account . Configurations at Apple Identity Provider: # You will need to configure a service id, linked to your App identifier. For each website that uses Sign In with Apple, register a services identifier (Services ID) and configure your domain and return URL. 1. Under Certificates, Identifiers and Profiles --> Identifiers --> Click on the + button 2. In the Register a new identifier select Service ID 3. After filling out the description and identifier name, save the Service ID 4. Now edit the saved Service ID and enable the Sign in with Apple checkbox and click Configure button 5. Configure the Janssen's server's callback url https://<your.janssen.server>/postlogin.htm as a Website URL Configure jans-auth server # Configure the custom script: Properties # The custom script has the following properties: Property Description Input value apple_client_id Name of Service ID on developer.apple.com. com.company.name apple_jwks Apple\u2019s public JWK to validate Apple Identity Token https://appleid.apple.com/auth/keys To update this setting in Jans persistence, follow this link Enable Sign-in with Apple Authentication script # By default, users will get the default authentication mechanism as specified above. However, using the OpenID Connect acr_values parameter, web and mobile clients can request any enabled authentication mechanism. Obtain the json contents of apple custom script by using a jans-cli command like get-config-scripts-by-type, get-config-scripts-by-inum etc. e.g : /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:PERSON_AUTHENTICATION , /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:6122281b-b55d-4dd0-8115-b098eeeee2b7 Update the custom script and change the enabled attribute to true Now Sign-in with Apple is an available authentication mechanism for your Janssen Server. This means that, using OpenID Connect acr_values, applications can now request Apple authentication for users. !!! Note To make sure apple has been enabled successfully, you can check your Janssen's Auth Server OpenID Connect configuration by navigating to the following URL: https:// /.well-known/openid-configuration. Find \"acr_values_supported\": and you should see \"apple\". Make Sign-in with Apple Script as default authentication script: # Use this link as a reference. Steps: 1. Create a file say apple-auth-default.json with the following contents { \"defaultAcr\": \"apple\" } 2.Update the default authentication method to Apple Sign-in /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/apple-auth-default.json :memo: NOTE To make sure apple has been enabled successfully as a default authentication method, you can check your Janssen Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"apple\" . Test the feature - Sign-in with Apple # To test , enter the complete URL for authorization in a browser or create a simple webpage with a link that simulates the user sign-in attempt. If the server is configured properly, the first page for the selected authentication method will be displayed to the user. An example of a complete URL looks like this - https://<your.jans.server>/jans-auth/authorize.htm?response_type=code&redirect_uri=https://<your.jans.server>/admin&client_id=<replace_with_inum_client_id>&scope=openid+profile+email+user_name&state=faad2cdjfdddjfkdf&nonce=dajdffdfsdcfff","title":"Social login apple"},{"location":"admin/recipes/social-login-apple/#social-login-with-apple","text":"An out-of-the-box feature, the Sign-in with Apple Authentication script is a PersonAuthenticationType script which enables a user to sign-in using Apple credentials. After users authenticate using their Apple credentials, their Apple credentials are provisioned into the Jans-auth server.","title":"Social Login with Apple"},{"location":"admin/recipes/social-login-apple/#prerequisites","text":"A Jans-auth Server (installation instructions here ) The Sign-in with Apple authentication script (included in the default Jans-auth Server distribution); An Apple developer account .","title":"Prerequisites"},{"location":"admin/recipes/social-login-apple/#configurations-at-apple-identity-provider","text":"You will need to configure a service id, linked to your App identifier. For each website that uses Sign In with Apple, register a services identifier (Services ID) and configure your domain and return URL. 1. Under Certificates, Identifiers and Profiles --> Identifiers --> Click on the + button 2. In the Register a new identifier select Service ID 3. After filling out the description and identifier name, save the Service ID 4. Now edit the saved Service ID and enable the Sign in with Apple checkbox and click Configure button 5. Configure the Janssen's server's callback url https://<your.janssen.server>/postlogin.htm as a Website URL","title":"Configurations at Apple Identity Provider:"},{"location":"admin/recipes/social-login-apple/#configure-jans-auth-server","text":"Configure the custom script:","title":"Configure jans-auth server"},{"location":"admin/recipes/social-login-apple/#properties","text":"The custom script has the following properties: Property Description Input value apple_client_id Name of Service ID on developer.apple.com. com.company.name apple_jwks Apple\u2019s public JWK to validate Apple Identity Token https://appleid.apple.com/auth/keys To update this setting in Jans persistence, follow this link","title":"Properties"},{"location":"admin/recipes/social-login-apple/#enable-sign-in-with-apple-authentication-script","text":"By default, users will get the default authentication mechanism as specified above. However, using the OpenID Connect acr_values parameter, web and mobile clients can request any enabled authentication mechanism. Obtain the json contents of apple custom script by using a jans-cli command like get-config-scripts-by-type, get-config-scripts-by-inum etc. e.g : /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:PERSON_AUTHENTICATION , /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:6122281b-b55d-4dd0-8115-b098eeeee2b7 Update the custom script and change the enabled attribute to true Now Sign-in with Apple is an available authentication mechanism for your Janssen Server. This means that, using OpenID Connect acr_values, applications can now request Apple authentication for users. !!! Note To make sure apple has been enabled successfully, you can check your Janssen's Auth Server OpenID Connect configuration by navigating to the following URL: https:// /.well-known/openid-configuration. Find \"acr_values_supported\": and you should see \"apple\".","title":"Enable Sign-in with Apple Authentication script"},{"location":"admin/recipes/social-login-apple/#make-sign-in-with-apple-script-as-default-authentication-script","text":"Use this link as a reference. Steps: 1. Create a file say apple-auth-default.json with the following contents { \"defaultAcr\": \"apple\" } 2.Update the default authentication method to Apple Sign-in /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/apple-auth-default.json :memo: NOTE To make sure apple has been enabled successfully as a default authentication method, you can check your Janssen Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"apple\" .","title":"Make Sign-in with Apple Script as default authentication script:"},{"location":"admin/recipes/social-login-apple/#test-the-feature-sign-in-with-apple","text":"To test , enter the complete URL for authorization in a browser or create a simple webpage with a link that simulates the user sign-in attempt. If the server is configured properly, the first page for the selected authentication method will be displayed to the user. An example of a complete URL looks like this - https://<your.jans.server>/jans-auth/authorize.htm?response_type=code&redirect_uri=https://<your.jans.server>/admin&client_id=<replace_with_inum_client_id>&scope=openid+profile+email+user_name&state=faad2cdjfdddjfkdf&nonce=dajdffdfsdcfff","title":"Test the feature - Sign-in with Apple"},{"location":"admin/recipes/social-login-google/","tags":["administration","recipes"],"text":"Social Login with Google # An out-of-the-box feature, the Google Authentication script is a PersonAuthenticationType script which enables a user to sign-in using Google credentials. Google's OAuth 2.0 APIs are used for this. After users authenticate using their Google credentials, their Google credentials are provisioned into the Jans-auth server. Prerequisites # A Jans-auth Server (installation instructions here ) The Google authentication script (included in the default Jans-auth Server distribution); A Google account . Google API jars namely google-api-client , google-oauth-client and google-http-client-jackson2 added to jans-auth-server Configuring Google API keys: # On the Google side, you need OAuth 2.0 credentials, including a client ID and client secret, to authenticate users and gain access to Google's APIs. The following steps explain how to create credentials for your project. Your applications can then use the credentials to access APIs that you have enabled for that project. Go to the Credentials page . Click Create credentials > OAuth client ID. Select the Web application application type. Name your OAuth 2.0 client and click Create Configure Authorized redirect URIs , click ADD URI to add the Janssen's https://my.auth.server/postlogin.htm where the control returns back to the AS. Configure Authorized JavaScript origins , click ADD URI to add Janssen's FQDN https://my.auth.server because we are using Google Client JS and it needs valid JS origin. Configure jans-auth server # Download Google Client JSON file # On the following page, https://console.cloud.google.com/apis/credentials, you will see a table containing your recently created client. Click on the download button and download the JSON file containing details of the Client. Place this file in /etc/certs/google_client_secret.json Add Google libraries to jans-auth-server # Copy the library files to /opt/jans/jetty/jans-auth/custom/libs cd /opt/jans/jetty/jans-auth/custom/libs wget https://repo1.maven.org/maven2/com/google/api-client/google-api-client/1.33.2/google-api-client-1.33.2.jar -O google-api-client-1.33.2.jar wget https://repo1.maven.org/maven2/com/google/oauth-client/google-oauth-client/1.33.1/google-oauth-client-1.33.1.jar -O google-oauth-client-1.33.1.jar wget https://repo1.maven.org/maven2/com/google/http-client/google-http-client-jackson2/1.41.5/google-http-client-jackson2-1.41.5.jar -O google-http-client-jackson2-1.41.5.jar Edit /opt/jans/jetty/jans-auth/webapps/oxauth.xml and add the following line: <Set name=\"extraClasspath\">./custom/libs/google-oauth-client-1.33.1.jar,./custom/libs/google-api-client-1.33.2.jar,./custom/libs/google-http-client-jackson2-1.41.5.jar</Set></Configure> Restart the jans-auth service systemctl status jans-auth Properties # The custom script has the following properties: Property Description Input value google_creds_file Details of the client created on https://console.cloud.google.com/apis/credentials. See this step. /etc/certs/google_client_secret.json To update this setting in Jans persistence, follow this link Enable Sign-in with Google Authentication script # By default, users will get the default authentication mechanism as specified above. However, using the OpenID Connect acr_values parameter, web and mobile clients can request any enabled authentication mechanism. Obtain the json contents of google custom script by using a jans-cli command like get-config-scripts-by-type, get-config-scripts-by-inum etc. e.g : /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:PERSON_AUTHENTICATION , /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:6122281b-b55d-4dd0-8115-b098eeeee2b7 Update the custom script and change the enabled attribute to true Now Google is an available authentication mechanism for your Janssen Server. This means that, using OpenID Connect acr_values, applications can now request Google authentication for users. !!! Note To make sure google has been enabled successfully, you can check your Janssen's Auth Server OpenID Connect configuration by navigating to the following URL: https:// /.well-known/openid-configuration. Find \"acr_values_supported\": and you should see \"google\". Make Sign-in with Google Script as default authentication script: # Use this link as a reference. Steps: 1. Create a file say google-auth-default.json with the following contents { \"defaultAcr\": \"google\" } 2.Update the default authentication method to Google Sign-in /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/google-auth-default.json :memo: NOTE To make sure google has been enabled successfully as a default authentication method, you can check your Gluu Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"google\" . Test the feature - Sign-in with Google # To test , enter the complete URL for authorization in a browser or create a simple webmapage with a link that simulates the user sign-in attempt. If the server is configured properly, the first page for the selected authentication method will be displayed to the user. An example of a complete URL looks like this - https://<your.jans.server>/jans-auth/authorize.htm?response_type=code&redirect_uri=https://<your.jans.server>/admin&client_id=<replace_with_inum_client_id>&scope=openid+profile+email+user_name&state=faad2cdjfdddjfkdf&nonce=dajdffdfsdcfff","title":"Social login google"},{"location":"admin/recipes/social-login-google/#social-login-with-google","text":"An out-of-the-box feature, the Google Authentication script is a PersonAuthenticationType script which enables a user to sign-in using Google credentials. Google's OAuth 2.0 APIs are used for this. After users authenticate using their Google credentials, their Google credentials are provisioned into the Jans-auth server.","title":"Social Login with Google"},{"location":"admin/recipes/social-login-google/#prerequisites","text":"A Jans-auth Server (installation instructions here ) The Google authentication script (included in the default Jans-auth Server distribution); A Google account . Google API jars namely google-api-client , google-oauth-client and google-http-client-jackson2 added to jans-auth-server","title":"Prerequisites"},{"location":"admin/recipes/social-login-google/#configuring-google-api-keys","text":"On the Google side, you need OAuth 2.0 credentials, including a client ID and client secret, to authenticate users and gain access to Google's APIs. The following steps explain how to create credentials for your project. Your applications can then use the credentials to access APIs that you have enabled for that project. Go to the Credentials page . Click Create credentials > OAuth client ID. Select the Web application application type. Name your OAuth 2.0 client and click Create Configure Authorized redirect URIs , click ADD URI to add the Janssen's https://my.auth.server/postlogin.htm where the control returns back to the AS. Configure Authorized JavaScript origins , click ADD URI to add Janssen's FQDN https://my.auth.server because we are using Google Client JS and it needs valid JS origin.","title":"Configuring Google API keys:"},{"location":"admin/recipes/social-login-google/#configure-jans-auth-server","text":"","title":"Configure jans-auth server"},{"location":"admin/recipes/social-login-google/#download-google-client-json-file","text":"On the following page, https://console.cloud.google.com/apis/credentials, you will see a table containing your recently created client. Click on the download button and download the JSON file containing details of the Client. Place this file in /etc/certs/google_client_secret.json","title":"Download Google Client JSON file"},{"location":"admin/recipes/social-login-google/#add-google-libraries-to-jans-auth-server","text":"Copy the library files to /opt/jans/jetty/jans-auth/custom/libs cd /opt/jans/jetty/jans-auth/custom/libs wget https://repo1.maven.org/maven2/com/google/api-client/google-api-client/1.33.2/google-api-client-1.33.2.jar -O google-api-client-1.33.2.jar wget https://repo1.maven.org/maven2/com/google/oauth-client/google-oauth-client/1.33.1/google-oauth-client-1.33.1.jar -O google-oauth-client-1.33.1.jar wget https://repo1.maven.org/maven2/com/google/http-client/google-http-client-jackson2/1.41.5/google-http-client-jackson2-1.41.5.jar -O google-http-client-jackson2-1.41.5.jar Edit /opt/jans/jetty/jans-auth/webapps/oxauth.xml and add the following line: <Set name=\"extraClasspath\">./custom/libs/google-oauth-client-1.33.1.jar,./custom/libs/google-api-client-1.33.2.jar,./custom/libs/google-http-client-jackson2-1.41.5.jar</Set></Configure> Restart the jans-auth service systemctl status jans-auth","title":"Add Google libraries to jans-auth-server"},{"location":"admin/recipes/social-login-google/#properties","text":"The custom script has the following properties: Property Description Input value google_creds_file Details of the client created on https://console.cloud.google.com/apis/credentials. See this step. /etc/certs/google_client_secret.json To update this setting in Jans persistence, follow this link","title":"Properties"},{"location":"admin/recipes/social-login-google/#enable-sign-in-with-google-authentication-script","text":"By default, users will get the default authentication mechanism as specified above. However, using the OpenID Connect acr_values parameter, web and mobile clients can request any enabled authentication mechanism. Obtain the json contents of google custom script by using a jans-cli command like get-config-scripts-by-type, get-config-scripts-by-inum etc. e.g : /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:PERSON_AUTHENTICATION , /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:6122281b-b55d-4dd0-8115-b098eeeee2b7 Update the custom script and change the enabled attribute to true Now Google is an available authentication mechanism for your Janssen Server. This means that, using OpenID Connect acr_values, applications can now request Google authentication for users. !!! Note To make sure google has been enabled successfully, you can check your Janssen's Auth Server OpenID Connect configuration by navigating to the following URL: https:// /.well-known/openid-configuration. Find \"acr_values_supported\": and you should see \"google\".","title":"Enable Sign-in with Google Authentication script"},{"location":"admin/recipes/social-login-google/#make-sign-in-with-google-script-as-default-authentication-script","text":"Use this link as a reference. Steps: 1. Create a file say google-auth-default.json with the following contents { \"defaultAcr\": \"google\" } 2.Update the default authentication method to Google Sign-in /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/google-auth-default.json :memo: NOTE To make sure google has been enabled successfully as a default authentication method, you can check your Gluu Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"google\" .","title":"Make Sign-in with Google Script as default authentication script:"},{"location":"admin/recipes/social-login-google/#test-the-feature-sign-in-with-google","text":"To test , enter the complete URL for authorization in a browser or create a simple webmapage with a link that simulates the user sign-in attempt. If the server is configured properly, the first page for the selected authentication method will be displayed to the user. An example of a complete URL looks like this - https://<your.jans.server>/jans-auth/authorize.htm?response_type=code&redirect_uri=https://<your.jans.server>/admin&client_id=<replace_with_inum_client_id>&scope=openid+profile+email+user_name&state=faad2cdjfdddjfkdf&nonce=dajdffdfsdcfff","title":"Test the feature - Sign-in with Google"},{"location":"admin/recipes/social-login/","tags":["administration","recipes"],"text":"Implementing Social logins # You can use a PersonAuthenticationType script to allow users to sign using credentials from popular Social Identity providers or Inbound Identity Providers like Facebook, Google and Apple. After users authenticate, we provision their Social Identity Provider credentials into the Jans-auth server. No additional username, password, credentials are needed for this user. 1. Facebook 2. Google 3. Apple Following is a high-level diagram depicting a typical flow - user authentication on a Social Identity Platform and subsequent user provisioning on Jans-Auth server. You can copy paste this sequence in https://sequencediagram.org/ title Social login Jans AS<-User agent: 1. Invoke /authorize endpoint Jans AS->User agent: 2. Discovery: Present list of remote IDPs (Google, Apple, FB...) User agent->Jans AS: 3. Select IDP (e.g. click on button) Jans AS->Social login Identity Provider: 4. Redirects login request to IDP loop n times - (multistep authentication) Social login Identity Provider->User agent: 5. present login screen User agent->Social login Identity Provider: 6. present credentials end Social login Identity Provider->Jans AS: 7. return id_token, user claims Jans AS->Jans AS: 8. validate id_token,\\ncreate internal Jans session opt if new user Jans AS->Jans AS: 9. Dynamic enrollment or registration end Jans AS->User agent: 10. write Jans session cookie How user provisioning works # After a user has logged in at an external provider a new record is added in local LDAP - or updated if the user is known. To determine if a user was already added, a string is composed with the provider name and the user ID. For example, if user \"MrBrown123\" has logged in at Twitter, the string would look like passport-twitter:mrbrown123 . An LDAP search is performed for a match in the people branch for an entry where attribute jansExtUid equals passport-twitter:mrbrown123 . If there are no matches, an entry is added using the values received from the external provider (after having applied the corresponding attribute mapping) attaching the computed value for jansExtUid . The user profile can contain single or multivalued attributes. \ud83d\udcdd The prefix passport-<provider-name> is used to keep the code compatible with the Passport.js implementation for Inbound Identity","title":"Social Login"},{"location":"admin/recipes/social-login/#implementing-social-logins","text":"You can use a PersonAuthenticationType script to allow users to sign using credentials from popular Social Identity providers or Inbound Identity Providers like Facebook, Google and Apple. After users authenticate, we provision their Social Identity Provider credentials into the Jans-auth server. No additional username, password, credentials are needed for this user. 1. Facebook 2. Google 3. Apple Following is a high-level diagram depicting a typical flow - user authentication on a Social Identity Platform and subsequent user provisioning on Jans-Auth server. You can copy paste this sequence in https://sequencediagram.org/ title Social login Jans AS<-User agent: 1. Invoke /authorize endpoint Jans AS->User agent: 2. Discovery: Present list of remote IDPs (Google, Apple, FB...) User agent->Jans AS: 3. Select IDP (e.g. click on button) Jans AS->Social login Identity Provider: 4. Redirects login request to IDP loop n times - (multistep authentication) Social login Identity Provider->User agent: 5. present login screen User agent->Social login Identity Provider: 6. present credentials end Social login Identity Provider->Jans AS: 7. return id_token, user claims Jans AS->Jans AS: 8. validate id_token,\\ncreate internal Jans session opt if new user Jans AS->Jans AS: 9. Dynamic enrollment or registration end Jans AS->User agent: 10. write Jans session cookie","title":"Implementing Social logins"},{"location":"admin/recipes/social-login/#how-user-provisioning-works","text":"After a user has logged in at an external provider a new record is added in local LDAP - or updated if the user is known. To determine if a user was already added, a string is composed with the provider name and the user ID. For example, if user \"MrBrown123\" has logged in at Twitter, the string would look like passport-twitter:mrbrown123 . An LDAP search is performed for a match in the people branch for an entry where attribute jansExtUid equals passport-twitter:mrbrown123 . If there are no matches, an entry is added using the values received from the external provider (after having applied the corresponding attribute mapping) attaching the computed value for jansExtUid . The user profile can contain single or multivalued attributes. \ud83d\udcdd The prefix passport-<provider-name> is used to keep the code compatible with the Passport.js implementation for Inbound Identity","title":"How user provisioning works"},{"location":"admin/recipes/web-apps/","tags":["administration","recipes"],"text":"This is a placeholder","title":"Web Applications"},{"location":"admin/recipes/api-access-control/","tags":["administration","recipes","api-access-control"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/api-access-control/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/api-access-control/access-tokens/","tags":["administration","recipes","api-access-control"],"text":"This is a placeholder","title":"Access Tokens"},{"location":"admin/recipes/api-access-control/client-credential-grant-flow/","tags":["administration","recipes","api-access-control"],"text":"This is a placeholder","title":"Client Credential Grant Flow"},{"location":"admin/recipes/api-access-control/oauth-api-gateway/","tags":["administration","recipes","api-access-control"],"text":"This is a placeholder","title":"Using OAuth with API Gateways"},{"location":"admin/recipes/api-access-control/opa-access-tokens/","tags":["administration","recipes","api-access-control"],"text":"This is a placeholder","title":"Using OPA and Access Tokens"},{"location":"admin/recipes/api-access-control/openapi-best-practice/","tags":["administration","recipes","api-access-control"],"text":"This is a placeholder","title":"OpenAPI Best Security Practices"},{"location":"admin/recipes/api-access-control/scope-access/","tags":["administration","recipes","api-access-control"],"text":"This is a placeholder","title":"Using Scopes to Manage Access"},{"location":"admin/recipes/api-access-control/software-statements/","tags":["administration","recipes","api-access-control"],"text":"This is a placeholder","title":"Software Statements"},{"location":"admin/recipes/api-access-control/user-claims-tokens/","tags":["administration","recipes","api-access-control"],"text":"This is a placeholder","title":"Adding User Claims to Access Tokens"},{"location":"admin/recipes/apps/","tags":["administration","recipes","applications"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/apps/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/apps/drupal/","tags":["administration","recipes","applications"],"text":"This is a placeholder","title":"Drupal"},{"location":"admin/recipes/apps/kafka/","tags":["administration","recipes","applications"],"text":"This is a placeholder","title":"Kafka"},{"location":"admin/recipes/apps/magento/","tags":["administration","recipes","applications"],"text":"This is a placeholder","title":"Magento"},{"location":"admin/recipes/apps/moodle/","tags":["administration","recipes","applications"],"text":"This is a placeholder","title":"Moodle"},{"location":"admin/recipes/apps/nextcloud/","tags":["administration","recipes","applications"],"text":"This is a placeholder","title":"NextCloud"},{"location":"admin/recipes/apps/rancher/","tags":["administration","recipes","applications"],"text":"This is a placeholder","title":"Rancher"},{"location":"admin/recipes/apps/rocket/","tags":["administration","recipes","applications"],"text":"This is a placeholder","title":"Rocket"},{"location":"admin/recipes/apps/teleport/","tags":["administration","recipes","applications"],"text":"This is a placeholder","title":"Teleport"},{"location":"admin/recipes/apps/wordpress/","tags":["administration","recipes","applications"],"text":"This is a placeholder","title":"Wordpress"},{"location":"admin/recipes/custom-web-development/","tags":["administration","recipes","custom-web-development"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/custom-web-development/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/custom-web-development/angular/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"Angular"},{"location":"admin/recipes/custom-web-development/appauth-android/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"AppAuth Android"},{"location":"admin/recipes/custom-web-development/appauth-ios/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"AppAuth iOS"},{"location":"admin/recipes/custom-web-development/appauth-js/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"AppAuth JS"},{"location":"admin/recipes/custom-web-development/asp-net/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"ASP Net"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/","tags":["administration","recipes","custom-web-development"],"text":"Contents: # Overview Component Setup Configure Janssen server Configure Protected Resource Configure openidc module Test Complete Flow Overview # This guide describes steps to enable authentication for web applications using the Janssen server which is an OpenID Connect Provider (OP). In the process of setting up a working environment, we will see how to use the command-line tool jans-cli to manually register an OpenID Connect client with the Janssen server. We will also see how to configure Relying Party to communicate with the Janssen server. Hardware configuration # For development and POC purposes, 4GB RAM and 10 GB HDD should be available for Janssen Server. For PROD deployments, please refer installation guide . Prerequisites # Installed Apache reverse proxy that is SSL enabled Installed Janssen server. Refer to Janssen Installation Guide for instructions. Component Setup # In this setup, we have four important components. - Protected resource is a resource that we need to protect using authentication. A web application for example. - User workstation is from where the user will use a browser(i.e user agent) to access the protected resource - Apache reverse proxy with mod_auth_openidc is our reverse proxy server and relying party. - Reverse Proxy : In our setup protected resources will be accessible through the proxy's FQDN https://test.apache.rp.io . For simplicity, we will use a CGI script as a protected resource and host it on the Apache proxy itself. In a typical production setup, protected resources are usually hosted on a separate server. - Relying Party : We will use Apache module mod_auth_openidc to provide relying party(RP) functionality. RP implements authentication flows from OpenID Connect specification. For each incoming request, RP ensures that the request is authenticated. If the request is not pre-authenticated, then RP will coordinate with Janssen server to integrate authentication. - Janssen server is our open-id connect provider (OP). We will assume that the Janssen server is accessible at FQDN https://janssen.op.io/ Configure Janssen server # In this section, we will register a new OpenID Connect client on Janssen server. In our setup, the relying party (Apache with mod_auth-openidc) is the OIDC client. There are two ways you can register OIDC client with Janssen server. 1. Manual Client Registration 2. Dynamic Client Registration (DCR) Here we will use manual client registration. To register a new OpenID connect client on the Janssen server, we will use jans-cli tool provided by the Janssen server. jans-cli has a menu-driven interface that makes it easy to configure the Janssen server. Here we will use the menu-driven approach to register a new client. To further understand how to use menu-driven approach and get complete list of supported command-line operations, refer to jans-cli documentation . Run the command below on Janssen server to enter interactive mode. Note: jans-cli has to be authenticated and authorized with the respective Janssen server. If jans-cli is being executed for the first time or if there is no valid access token available, then running the command below will initiate device authentication and authorization flow. In that case, follow the steps for jans-cli authorization to continue running the command. /opt/jans/jans-cli/config-cli.py Running above command will bring up main menu as shown in sample below: To register a new OpenID Connect client, select OAuth OpenID Connect - Clients option ( 16 in above sample). Selecting an appropriate option will bring up related sub-menu. From sub-menu, select option for Create new OpenId connect client . Upon selecting this option, CLI will prompt for inputs required to register a new OpenID connect client. Provide inputs for the following properties: displayName: <name-of-choice> application Type: web includeClaimsInIdToken [false]: Populate optional fields? y clientSecret: <secret-of-your-choice> subjectType: public tokenEndpointAuthMethod: client_secret_basic redirectUris: https://test.apache.rp.io/callback scopes: email_,openid_,profile responseTypes: code grantTypes: authorization_code Once values for all the above properties are provided, input c at the prompt to instruct jans-cli to create schema using inputs provided till now. At this time, jans-cli will show the schema(JSON) that will be used to create a new OpenID Connect client on Janssen server. Verify that schema has captured all the provided inputs correctly. Now next step is for jans-cli to post this JSON schema to Janssen server to actually register new client. To do this, input y on the prompt. If the client is successfully registered then we will receive JSON data back. This data describes newly registered client. Some of these values from this JSON response, like inum and clientSecret , will be required when we configure mod_auth_openidc as a client. So keep this reponse JSON handy. See a sample of JSON response below: { \"dn\": \"inum=165bdf95-f15e-44f0-bdd7-cdac71fda8e0,ou=clients,o=jans\", \"inum\": \"165bdf95-f15e-44f0-bdd7-cdac71fda8e0\", \"displayName\": \"dm\", \"clientSecret\": \"a9894ba8-eb01-4a26-a69d-026f10a49272\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"dm\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": null, \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": null, \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null } Configure protected resource # As mentioned under component setup , our protected resource will be hosted on Apache reverse proxy itself. It is a simple Python based cgi script that will print request header information and can be accessed through https://test.apache.rp.io/cgi-bin/printHeaders.py . Execute the steps below on Apache host to set up the protected resource: Create script file printHeaders.py vi /usr/lib/cgi-bin/printHeaders.py with content as below #!/usr/bin/python3 import os d = os.environ k = d.keys() print \"Content-type: text/html\\n\\n\" print \"<HTML><HEAD><TITLE>printHeaders.cgi</TITLE></Head><BODY>\" print \"<h1>Environment Variables</H1>\" for item in k: print \"<p><B>%s</B>: %s </p>\" % (item, d[item]) print \"</BODY></HTML>\" Add Apache cgi module to enable execution of CGI a2enmod cgi Change permissions for CGI script so that it can be executed by Apache chown www-data:www-data /usr/lib/cgi-bin/printHeaders.py chmod ug+x /usr/lib/cgi-bin/printHeaders.py At this point, printHeaders.py should be accessible at https://test.apache.rp.io/cgi-bin/printHeaders.py without requiring any authentication. Configure openidc module # Install mod-auth-openidc # On Apache reverse proxy host, add mod-auth-openidc using commands below apt-get install libapache2-mod-auth-openidc a2enmod auth_openidc service apache2 restart Configure mod-auth-openidc # Open /etc/apache2/sites-available/default-ssl.conf Add mod-auth-openidc configuration parameters given below for virtual host _default_:443 . Find more configuration options for mod-auth-openidc here . This configuration will enable authentication for any resource under / context root. OIDCProviderMetadataURL https://janssen.op.io/jans-auth/.well-known/openid-configuration OIDCClientID <inum-as-received-in-client-registration-response> OIDCClientSecret <as-provided-in-client-registration-request> OIDCResponseType code OIDCScope \"openid email profile\" OIDCProviderTokenEndpointAuth client_secret_basic OIDCSSLValidateServer Off OIDCProviderIssuer https://janssen.op.io OIDCRedirectURI https://test.apache.rp.io/callback OIDCCryptoPassphrase <crypto-passphrase-of-choice> <Location \"/\"> Require valid-user AuthType openid-connect </Location> Restart Apache service. service apache2 restart Test Complete Flow # Accessing https://test.apache.rp.io/cgi-bin/printHeaders.py should redirect to the Janssen authentication screen. Upon valid authentication, Janssen will present the user with a consent screen where the user will be able to allow user attributes that can be provided to the app If allowed, the user will be successfully taken to the printHeaders.py page. In the process, mod_auth_openidc also requests user claims (i.e attributes) from the /userinfo endpoint of the Janssen server. And makes these claims available as environment variables to the application. printHeaders.py prints all the environment variables, along with user claims received from the Janssen server. The application can use this information to identify the user and also enforce access policies. Sample output below shows some of this user information and token information printed as part of environment variables: Environment Variables OIDC_CLAIM_sub: e205be81-6a85-4d83-9126 OIDC_CLAIM_email_verified: 1 OIDC_CLAIM_name: Default myname User OIDC_CLAIM_nickname: myname OIDC_CLAIM_given_name: myname OIDC_CLAIM_middle_name: myname OIDC_CLAIM_family_name: User OIDC_CLAIM_email: myname@mydomain.io OIDC_access_token: d6a12cce-f196-4da3-ba17 OIDC_access_token_expires: 165493257 HTTPS: on SSL_TLS_SNI: test.apache.rp.io","title":"Apache Reverse Proxy"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#contents","text":"Overview Component Setup Configure Janssen server Configure Protected Resource Configure openidc module Test Complete Flow","title":"Contents:"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#overview","text":"This guide describes steps to enable authentication for web applications using the Janssen server which is an OpenID Connect Provider (OP). In the process of setting up a working environment, we will see how to use the command-line tool jans-cli to manually register an OpenID Connect client with the Janssen server. We will also see how to configure Relying Party to communicate with the Janssen server.","title":"Overview"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#hardware-configuration","text":"For development and POC purposes, 4GB RAM and 10 GB HDD should be available for Janssen Server. For PROD deployments, please refer installation guide .","title":"Hardware configuration"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#prerequisites","text":"Installed Apache reverse proxy that is SSL enabled Installed Janssen server. Refer to Janssen Installation Guide for instructions.","title":"Prerequisites"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#component-setup","text":"In this setup, we have four important components. - Protected resource is a resource that we need to protect using authentication. A web application for example. - User workstation is from where the user will use a browser(i.e user agent) to access the protected resource - Apache reverse proxy with mod_auth_openidc is our reverse proxy server and relying party. - Reverse Proxy : In our setup protected resources will be accessible through the proxy's FQDN https://test.apache.rp.io . For simplicity, we will use a CGI script as a protected resource and host it on the Apache proxy itself. In a typical production setup, protected resources are usually hosted on a separate server. - Relying Party : We will use Apache module mod_auth_openidc to provide relying party(RP) functionality. RP implements authentication flows from OpenID Connect specification. For each incoming request, RP ensures that the request is authenticated. If the request is not pre-authenticated, then RP will coordinate with Janssen server to integrate authentication. - Janssen server is our open-id connect provider (OP). We will assume that the Janssen server is accessible at FQDN https://janssen.op.io/","title":"Component Setup"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#configure-janssen-server","text":"In this section, we will register a new OpenID Connect client on Janssen server. In our setup, the relying party (Apache with mod_auth-openidc) is the OIDC client. There are two ways you can register OIDC client with Janssen server. 1. Manual Client Registration 2. Dynamic Client Registration (DCR) Here we will use manual client registration. To register a new OpenID connect client on the Janssen server, we will use jans-cli tool provided by the Janssen server. jans-cli has a menu-driven interface that makes it easy to configure the Janssen server. Here we will use the menu-driven approach to register a new client. To further understand how to use menu-driven approach and get complete list of supported command-line operations, refer to jans-cli documentation . Run the command below on Janssen server to enter interactive mode. Note: jans-cli has to be authenticated and authorized with the respective Janssen server. If jans-cli is being executed for the first time or if there is no valid access token available, then running the command below will initiate device authentication and authorization flow. In that case, follow the steps for jans-cli authorization to continue running the command. /opt/jans/jans-cli/config-cli.py Running above command will bring up main menu as shown in sample below: To register a new OpenID Connect client, select OAuth OpenID Connect - Clients option ( 16 in above sample). Selecting an appropriate option will bring up related sub-menu. From sub-menu, select option for Create new OpenId connect client . Upon selecting this option, CLI will prompt for inputs required to register a new OpenID connect client. Provide inputs for the following properties: displayName: <name-of-choice> application Type: web includeClaimsInIdToken [false]: Populate optional fields? y clientSecret: <secret-of-your-choice> subjectType: public tokenEndpointAuthMethod: client_secret_basic redirectUris: https://test.apache.rp.io/callback scopes: email_,openid_,profile responseTypes: code grantTypes: authorization_code Once values for all the above properties are provided, input c at the prompt to instruct jans-cli to create schema using inputs provided till now. At this time, jans-cli will show the schema(JSON) that will be used to create a new OpenID Connect client on Janssen server. Verify that schema has captured all the provided inputs correctly. Now next step is for jans-cli to post this JSON schema to Janssen server to actually register new client. To do this, input y on the prompt. If the client is successfully registered then we will receive JSON data back. This data describes newly registered client. Some of these values from this JSON response, like inum and clientSecret , will be required when we configure mod_auth_openidc as a client. So keep this reponse JSON handy. See a sample of JSON response below: { \"dn\": \"inum=165bdf95-f15e-44f0-bdd7-cdac71fda8e0,ou=clients,o=jans\", \"inum\": \"165bdf95-f15e-44f0-bdd7-cdac71fda8e0\", \"displayName\": \"dm\", \"clientSecret\": \"a9894ba8-eb01-4a26-a69d-026f10a49272\", \"frontChannelLogoutUri\": null, \"frontChannelLogoutSessionRequired\": false, \"registrationAccessToken\": null, \"clientIdIssuedAt\": null, \"clientSecretExpiresAt\": null, \"redirectUris\": null, \"claimRedirectUris\": null, \"responseTypes\": null, \"grantTypes\": [], \"applicationType\": \"web\", \"contacts\": null, \"clientName\": \"dm\", \"idTokenTokenBindingCnf\": null, \"logoUri\": null, \"clientUri\": null, \"policyUri\": null, \"tosUri\": null, \"jwksUri\": null, \"jwks\": null, \"sectorIdentifierUri\": null, \"subjectType\": \"public\", \"idTokenSignedResponseAlg\": null, \"idTokenEncryptedResponseAlg\": null, \"idTokenEncryptedResponseEnc\": null, \"userInfoSignedResponseAlg\": null, \"userInfoEncryptedResponseAlg\": null, \"userInfoEncryptedResponseEnc\": null, \"requestObjectSigningAlg\": null, \"requestObjectEncryptionAlg\": null, \"requestObjectEncryptionEnc\": null, \"tokenEndpointAuthMethod\": null, \"tokenEndpointAuthSigningAlg\": null, \"defaultMaxAge\": null, \"requireAuthTime\": false, \"defaultAcrValues\": null, \"initiateLoginUri\": null, \"postLogoutRedirectUris\": null, \"requestUris\": null, \"scopes\": null, \"claims\": null, \"trustedClient\": false, \"lastAccessTime\": null, \"lastLogonTime\": null, \"persistClientAuthorizations\": false, \"includeClaimsInIdToken\": false, \"refreshTokenLifetime\": null, \"accessTokenLifetime\": null, \"customAttributes\": [], \"customObjectClasses\": null, \"rptAsJwt\": false, \"accessTokenAsJwt\": false, \"accessTokenSigningAlg\": null, \"disabled\": false, \"authorizedOrigins\": null, \"softwareId\": null, \"softwareVersion\": null, \"softwareStatement\": null, \"attributes\": { \"tlsClientAuthSubjectDn\": null, \"runIntrospectionScriptBeforeJwtCreation\": false, \"keepClientAuthorizationAfterExpiration\": false, \"allowSpontaneousScopes\": false, \"spontaneousScopes\": null, \"spontaneousScopeScriptDns\": null, \"backchannelLogoutUri\": null, \"backchannelLogoutSessionRequired\": false, \"additionalAudience\": null, \"postAuthnScripts\": null, \"consentGatheringScripts\": null, \"introspectionScripts\": null, \"rptClaimsScripts\": null }, \"backchannelTokenDeliveryMode\": null, \"backchannelClientNotificationEndpoint\": null, \"backchannelAuthenticationRequestSigningAlg\": null, \"backchannelUserCodeParameter\": null, \"expirationDate\": null, \"deletable\": false, \"jansId\": null }","title":"Configure Janssen server"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#configure-protected-resource","text":"As mentioned under component setup , our protected resource will be hosted on Apache reverse proxy itself. It is a simple Python based cgi script that will print request header information and can be accessed through https://test.apache.rp.io/cgi-bin/printHeaders.py . Execute the steps below on Apache host to set up the protected resource: Create script file printHeaders.py vi /usr/lib/cgi-bin/printHeaders.py with content as below #!/usr/bin/python3 import os d = os.environ k = d.keys() print \"Content-type: text/html\\n\\n\" print \"<HTML><HEAD><TITLE>printHeaders.cgi</TITLE></Head><BODY>\" print \"<h1>Environment Variables</H1>\" for item in k: print \"<p><B>%s</B>: %s </p>\" % (item, d[item]) print \"</BODY></HTML>\" Add Apache cgi module to enable execution of CGI a2enmod cgi Change permissions for CGI script so that it can be executed by Apache chown www-data:www-data /usr/lib/cgi-bin/printHeaders.py chmod ug+x /usr/lib/cgi-bin/printHeaders.py At this point, printHeaders.py should be accessible at https://test.apache.rp.io/cgi-bin/printHeaders.py without requiring any authentication.","title":"Configure protected resource"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#configure-openidc-module","text":"","title":"Configure openidc module"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#install-mod-auth-openidc","text":"On Apache reverse proxy host, add mod-auth-openidc using commands below apt-get install libapache2-mod-auth-openidc a2enmod auth_openidc service apache2 restart","title":"Install mod-auth-openidc"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#configure-mod-auth-openidc","text":"Open /etc/apache2/sites-available/default-ssl.conf Add mod-auth-openidc configuration parameters given below for virtual host _default_:443 . Find more configuration options for mod-auth-openidc here . This configuration will enable authentication for any resource under / context root. OIDCProviderMetadataURL https://janssen.op.io/jans-auth/.well-known/openid-configuration OIDCClientID <inum-as-received-in-client-registration-response> OIDCClientSecret <as-provided-in-client-registration-request> OIDCResponseType code OIDCScope \"openid email profile\" OIDCProviderTokenEndpointAuth client_secret_basic OIDCSSLValidateServer Off OIDCProviderIssuer https://janssen.op.io OIDCRedirectURI https://test.apache.rp.io/callback OIDCCryptoPassphrase <crypto-passphrase-of-choice> <Location \"/\"> Require valid-user AuthType openid-connect </Location> Restart Apache service. service apache2 restart","title":"Configure mod-auth-openidc"},{"location":"admin/recipes/custom-web-development/authn-with-apache-reverse-proxy/#test-complete-flow","text":"Accessing https://test.apache.rp.io/cgi-bin/printHeaders.py should redirect to the Janssen authentication screen. Upon valid authentication, Janssen will present the user with a consent screen where the user will be able to allow user attributes that can be provided to the app If allowed, the user will be successfully taken to the printHeaders.py page. In the process, mod_auth_openidc also requests user claims (i.e attributes) from the /userinfo endpoint of the Janssen server. And makes these claims available as environment variables to the application. printHeaders.py prints all the environment variables, along with user claims received from the Janssen server. The application can use this information to identify the user and also enforce access policies. Sample output below shows some of this user information and token information printed as part of environment variables: Environment Variables OIDC_CLAIM_sub: e205be81-6a85-4d83-9126 OIDC_CLAIM_email_verified: 1 OIDC_CLAIM_name: Default myname User OIDC_CLAIM_nickname: myname OIDC_CLAIM_given_name: myname OIDC_CLAIM_middle_name: myname OIDC_CLAIM_family_name: User OIDC_CLAIM_email: myname@mydomain.io OIDC_access_token: d6a12cce-f196-4da3-ba17 OIDC_access_token_expires: 165493257 HTTPS: on SSL_TLS_SNI: test.apache.rp.io","title":"Test Complete Flow"},{"location":"admin/recipes/custom-web-development/django/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"Django"},{"location":"admin/recipes/custom-web-development/flask/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"Flask"},{"location":"admin/recipes/custom-web-development/mod-auth-openidc/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"Protecting a Website with mod_auth_openidc"},{"location":"admin/recipes/custom-web-development/node/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"Node"},{"location":"admin/recipes/custom-web-development/react-native/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"React Native"},{"location":"admin/recipes/custom-web-development/react/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"React"},{"location":"admin/recipes/custom-web-development/spring-boot/","tags":["administration","recipes","custom-web-development"],"text":"This is a placeholder","title":"Spring Boot"},{"location":"admin/recipes/forgot-password/","tags":["administration","recipes","forgot-password"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/forgot-password/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/forgot-password/email/","tags":["administration","recipes","forgot-password"],"text":"This is a placeholder","title":"Email"},{"location":"admin/recipes/forgot-password/sms/","tags":["administration","recipes","forgot-password"],"text":"This is a placeholder","title":"SMS"},{"location":"admin/recipes/open-banking/","tags":["administration","recipes","open-banking"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/open-banking/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/open-banking/client-registration/","tags":["administration","recipes","open-banking"],"text":"This is a placeholder","title":"Client Registration"},{"location":"admin/recipes/open-banking/fapi-authn-request/","tags":["administration","recipes","open-banking"],"text":"This is a placeholder","title":"FAPI Authentication Request"},{"location":"admin/recipes/open-banking/requirements/","tags":["administration","recipes","open-banking"],"text":"This is a placeholder","title":"Open Banking Requirements"},{"location":"admin/recipes/saas/","tags":["administration","recipes","saas"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/saas/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/saas/aws/","tags":["administration","recipes","saas"],"text":"This is a placeholder","title":"Amazon AWS"},{"location":"admin/recipes/saas/docusign/","tags":["administration","recipes","saas"],"text":"This is a placeholder","title":"Docusign"},{"location":"admin/recipes/saas/google/","tags":["administration","recipes","saas"],"text":"This is a placeholder","title":"Google"},{"location":"admin/recipes/saas/jira/","tags":["administration","recipes","saas"],"text":"This is a placeholder","title":"Jira"},{"location":"admin/recipes/saas/office365/","tags":["administration","recipes","saas"],"text":"This is a placeholder","title":"Office365"},{"location":"admin/recipes/saas/salesforce/","tags":["administration","recipes","saas"],"text":"This is a placeholder","title":"Salesforce"},{"location":"admin/recipes/saas/webex/","tags":["administration","recipes","saas"],"text":"This is a placeholder","title":"Webex"},{"location":"admin/recipes/saas/zoom/","tags":["administration","recipes","saas"],"text":"This is a placeholder","title":"Zoom"},{"location":"admin/recipes/saml/","tags":["administration","recipes","saml"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/saml/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/recipes/saml/federation/","tags":["administration","recipes","saml"],"text":"This is a placeholder","title":"Federation with SAML IDPs"},{"location":"admin/recipes/saml/idp-init-authn/","tags":["administration","recipes","saml"],"text":"This is a placeholder","title":"SAML IDP Initiated Authentication"},{"location":"admin/recipes/saml/sso-sp/","tags":["administration","recipes","saml"],"text":"This is a placeholder","title":"SSO with SAML SPs"},{"location":"admin/reference/","tags":["administration","reference"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/reference/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/reference/javadocs/","tags":["administration","reference"],"text":"This is a placeholder","title":"Javadocs"},{"location":"admin/reference/openapi/","tags":["administration","reference"],"text":"API Reference # Janssen Server components publish REST API using OpenAPI specification and Java API using javadoc. Follow the links below to access respective documentation. Service REST API Java API Jans Auth Server Swagger Javadoc Jans Client API Swagger Javadoc Jans Config API Swagger Javadoc Jans Core NA Javadoc Jans FIDO 2 Swagger Jans SCIM API Swagger Javadoc","title":"Javadocs / OpenAPI"},{"location":"admin/reference/openapi/#api-reference","text":"Janssen Server components publish REST API using OpenAPI specification and Java API using javadoc. Follow the links below to access respective documentation. Service REST API Java API Jans Auth Server Swagger Javadoc Jans Client API Swagger Javadoc Jans Config API Swagger Javadoc Jans Core NA Javadoc Jans FIDO 2 Swagger Jans SCIM API Swagger Javadoc","title":"API Reference"},{"location":"admin/reference/database/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"Database Overview"},{"location":"admin/reference/database/cb-buckets/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"Couchbase Buckets"},{"location":"admin/reference/database/cb-config/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"Couchbase Configuration"},{"location":"admin/reference/database/cb-ops/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"Couchbase Operation"},{"location":"admin/reference/database/cb-schema/","tags":["administration","reference","database"],"text":"This file is a placeholder.","title":"Couchbase Schema"},{"location":"admin/reference/database/converting-data/","tags":["administration","reference","database"],"text":"This is a placeholder file","title":"Converting Data"},{"location":"admin/reference/database/ldap-config/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"LDAP Configuration"},{"location":"admin/reference/database/ldap-namespace/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"LDAP Namespace Diagram"},{"location":"admin/reference/database/ldap-ops/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"LDAP Operation"},{"location":"admin/reference/database/ldap-schema/","tags":["administration","reference","database"],"text":"graph LR A[ou=jans] --> B(ou=agama) B --> B1[ou=flows] B1 --> B11[agFlowQname=flow_name1] B1 --> B12[agFlowQname=flow_name2] B1 --> B13[agFlowQname=flow_name3] B1 --> B14[agFlowQname=flow_name4] B --> B2[ou=runs] B2 --> B21[jansId=....] B2 --> B22[jansId=....] A[ou=jans] --> C(ou=attributes) C --> C1[inum=.....] C --> C2[inum=.....] C --> Cn[inum=.....] A[ou=jans] --> D(ou=authorizations) D --> D1[jansId=...] D --> D2[jansId=...] D --> D3[jansId=...] D --> Dn[jansId=...] A[ou=jans] --> E(ou=cache) E --> E1[uuid.....] A[ou=jans] --> F(ou=ciba) A[ou=jans] --> G(ou=clients) G --> G1[inum=....] G1 --> G12[ou=uma_permission] G12 --> G121[jansTicket=.....] G12 --> G122[jansTicket=.....] G --> G2[inum=....] G2 --> G21[ou=uma_permission] G21 --> G211[jansTicket=.....] G21 --> G212[jansTicket=.....] G --> Gn[inum=....] A[ou=jans] --> H(ou=groups) H --> H1[inum=...] H --> H2[inum=...] H --> Hn[inum=...] A[ou=jans] --> I(ou=metric) A[ou=jans] --> J(ou=par) A[ou=jans] --> K(ou=people) K --> K1[inum=....] K1 --> K11[ou=fido2_register] K11 --> K111[jansId=....] K11 --> K112[jansId=....] K11 --> K112[jansId=....] K1 --> K12[ou=fido2_auth] K12 --> K121[jansId=....] K12 --> K122[jansId=....] K12 --> K123[jansId=....] K --> K2[inum=....] K --> K3[inum=....] K --> K4[inum=....] K --> K5[inum=....] A[ou=jans] --> L(ou=push) L --> L1[ou=application] L --> L2[ou=device] A[ou=jans] --> M(ou=resetPasswordRequests) A[ou=jans] --> N(ou=scope) N --> N1[inum=...] N --> N2[inum=...] N --> N3[inum=...] A[ou=jans] --> O(ou=scripts) O --> O1[inum=...] O --> O2[inum=...] A[ou=jans] --> P(ou=sector_identifiers) A[ou=jans] --> Q(ou=sessions) Q --> Q1[jansId=....] Q --> Q2[jansId=....] Q --> Q3[jansId=....] A[ou=jans] --> R(ou=stat) R --> R1[ou=yyyymm] R --> R2[ou=yyyymm] A[ou=jans] --> S(ou=tokens) S --> S1[ou=uma_rpt] S --> S2[tknCde=....] S --> S3[tknCde=....] S --> S4[tknCde=....] A[ou=jans] --> T(ou=trustRelationships) T --> T1[inum=...] T --> T2[inum=...] T --> T3[inum=...] A[ou=jans] --> U(ou=uma) U --> W[ou=pct] W --> W1[tknCde=...] W --> W2[tknCde=...] W --> W3[tknCde=...] U --> X[ou=resources] X --> X1[jansId=...] X --> X2[jansId=...] X --> X3[jansId=...] A[ou=jans] --> V(ou=configuration) V --> V1[ou=admin-ui] V --> V2[ou=casa] V --> V3[ou=jans-auth] V --> V4[ou=jans-config-api] V --> V5[ou=jans-fido2] V --> V6[ou=jans-scim]","title":"LDAP Schema"},{"location":"admin/reference/database/mariadb/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"Mariadb"},{"location":"admin/reference/database/mysql-config/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"MySQL Configuration"},{"location":"admin/reference/database/mysql-ops/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"MySQL Operation"},{"location":"admin/reference/database/mysql-schema/","tags":["administration","reference","database"],"text":"This file is a placeholder.","title":"MySQL Schema"},{"location":"admin/reference/database/postgres-config/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"Postgres config"},{"location":"admin/reference/database/postgres-schema/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"Postgres schema"},{"location":"admin/reference/database/rdbms-erwin/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"RDBMS Erwin Table"},{"location":"admin/reference/database/spanner-config/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"Spanner Configuration"},{"location":"admin/reference/database/spanner-ops/","tags":["administration","reference","database"],"text":"This is a placeholder","title":"Spanner Operation"},{"location":"admin/reference/database/spanner-schema/","tags":["administration","reference","database"],"text":"This file is a placeholder.","title":"Spanner Schema"},{"location":"admin/reference/json/","tags":["administration","reference","json"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/reference/json/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/reference/json/auth-server/","tags":["administration","reference","json"],"text":"This is a placeholder","title":"Auth Server"},{"location":"admin/reference/json/client-api/","tags":["administration","reference","json"],"text":"This is a placeholder","title":"Client API"},{"location":"admin/reference/json/config-api/","tags":["administration","reference","json"],"text":"This is a placeholder","title":"Config API"},{"location":"admin/reference/json/fido/","tags":["administration","reference","json"],"text":"This is a placeholder","title":"FIDO"},{"location":"admin/reference/json/scim/","tags":["administration","reference","json"],"text":"This is a placeholder","title":"SCIM"},{"location":"admin/reference/kubernetes/","tags":["administration","reference","kubernetes"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/reference/kubernetes/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/reference/kubernetes/config-secret-keys/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Config and Secret Keys"},{"location":"admin/reference/kubernetes/helm-chart/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Helm Chart"},{"location":"admin/reference/kubernetes/image-auth-server/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Auth Server"},{"location":"admin/reference/kubernetes/image-cert-mgr/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Cert Manager"},{"location":"admin/reference/kubernetes/image-client-api/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Client API"},{"location":"admin/reference/kubernetes/image-config-api/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Config API"},{"location":"admin/reference/kubernetes/image-config-init/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Config Initialization"},{"location":"admin/reference/kubernetes/image-configurator/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Configurator"},{"location":"admin/reference/kubernetes/image-fido/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"FIDO"},{"location":"admin/reference/kubernetes/image-opendj/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Gluu OpenDJ"},{"location":"admin/reference/kubernetes/image-persistence/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"Persistence"},{"location":"admin/reference/kubernetes/image-scim/","tags":["administration","reference","kubernetes"],"text":"This is a placeholder","title":"SCIM"},{"location":"admin/scim/","tags":["administration","scim"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/scim/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/scim/bulk-users/","tags":["administration","scim"],"text":"This is a placeholder","title":"Bulk Adding Users"},{"location":"admin/scim/config/","tags":["administration","scim"],"text":"This is a placeholder","title":"Configuration"},{"location":"admin/scim/custom-attributes/","tags":["administration","scim"],"text":"This is a placeholder","title":"Adding Custom Attributes"},{"location":"admin/scim/logs/","tags":["administration","scim"],"text":"This is a placeholder","title":"Logs"},{"location":"admin/scim/monitoring/","tags":["administration","scim"],"text":"This is a placeholder","title":"Monitoring"},{"location":"admin/scim/oauth-protection/","tags":["administration","scim"],"text":"This is a placeholder","title":"OAuth Protection"},{"location":"admin/scim/security/","tags":["administration","scim"],"text":"This is a placeholder","title":"Security Considerations"},{"location":"admin/to-be-placed/add-custom-ldifs/","text":"Contents: # Overview Using Kubernetes? Overview # This guide describes steps to load custom work to Janssen IDP. Hardware configuration # For development and POC purposes, 4GB RAM and 10 GB HDD should be available for Janssen Server. For PROD deployments, please refer installation guide . Prerequisites # Existing Janssen server installed Kubernetes # If you are using Kubernetes please follow this section. You may create several ldif files denoting each type such as custom_attributes.ldif , custom_clients.ldif ..etc. Refer to the built-in ldifs for examples. Create your custom ldif files. These can be clients, attributes, scopes or whatever custom work you need. The example will be adding a custom attribute and we will call this file custom_attributes.ldif . dn: inum=C9B1,ou=attributes,o=jans description: Maiden name of the End-User.Note that in some cultures, people can have multiple given names;all can be present, with the names being separated by space characters. displayName: Maiden Name inum: C9B1 jansAttrEditTyp: user jansAttrEditTyp: admin jansAttrName: givenName jansAttrOrigin: jansPerson jansAttrTyp: string jansAttrViewTyp: user jansAttrViewTyp: admin jansClaimName: maiden_name jansSAML1URI: urn:mace:dir:attribute-def:maidenName jansSAML2URI: urn:oid:2.5.4.42 jansStatus: active objectClass: top objectClass: jansAttr urn: urn:mace:dir:attribute-def:maidenName Create a configmap or secret depending on the if the ldif holds and secret data such as a client secret. Here, we will be creating a configmap. kubectl create cm custom-attributes -n <namespace-of-jans> -f custom_attributes.ldif # kubectl create cm custom-attributes -n jans -f custom_attributes.ldif # using a secret # kubectl create secret generic custom-attributes -n jans -f custom_attributes.ldif Mount the created configmap or secret inside your values.yaml persistence : volumes : - name : custom-attributes configMap : name : custom-attributes #- name: custom-attributes # secret: # secretName: custom-attributes # -- Configure any additional volumesMounts that need to be attached to the containers volumeMounts : - mountPath : \"/app/custom_ldif/custom_attributes.ldif\" name : custom-attributes subPath : custom_attributes.ldif Run helm upgrade to activate the persistence job. helm upgrade <release-name> janssen/janssen -f values.yaml -n <jans-namespace> Your custom work should be loaded to your persistence. This also persists any changes going forward as you upgrade.","title":"Add custom ldifs"},{"location":"admin/to-be-placed/add-custom-ldifs/#contents","text":"Overview Using Kubernetes?","title":"Contents:"},{"location":"admin/to-be-placed/add-custom-ldifs/#overview","text":"This guide describes steps to load custom work to Janssen IDP.","title":"Overview"},{"location":"admin/to-be-placed/add-custom-ldifs/#hardware-configuration","text":"For development and POC purposes, 4GB RAM and 10 GB HDD should be available for Janssen Server. For PROD deployments, please refer installation guide .","title":"Hardware configuration"},{"location":"admin/to-be-placed/add-custom-ldifs/#prerequisites","text":"Existing Janssen server installed","title":"Prerequisites"},{"location":"admin/to-be-placed/add-custom-ldifs/#kubernetes","text":"If you are using Kubernetes please follow this section. You may create several ldif files denoting each type such as custom_attributes.ldif , custom_clients.ldif ..etc. Refer to the built-in ldifs for examples. Create your custom ldif files. These can be clients, attributes, scopes or whatever custom work you need. The example will be adding a custom attribute and we will call this file custom_attributes.ldif . dn: inum=C9B1,ou=attributes,o=jans description: Maiden name of the End-User.Note that in some cultures, people can have multiple given names;all can be present, with the names being separated by space characters. displayName: Maiden Name inum: C9B1 jansAttrEditTyp: user jansAttrEditTyp: admin jansAttrName: givenName jansAttrOrigin: jansPerson jansAttrTyp: string jansAttrViewTyp: user jansAttrViewTyp: admin jansClaimName: maiden_name jansSAML1URI: urn:mace:dir:attribute-def:maidenName jansSAML2URI: urn:oid:2.5.4.42 jansStatus: active objectClass: top objectClass: jansAttr urn: urn:mace:dir:attribute-def:maidenName Create a configmap or secret depending on the if the ldif holds and secret data such as a client secret. Here, we will be creating a configmap. kubectl create cm custom-attributes -n <namespace-of-jans> -f custom_attributes.ldif # kubectl create cm custom-attributes -n jans -f custom_attributes.ldif # using a secret # kubectl create secret generic custom-attributes -n jans -f custom_attributes.ldif Mount the created configmap or secret inside your values.yaml persistence : volumes : - name : custom-attributes configMap : name : custom-attributes #- name: custom-attributes # secret: # secretName: custom-attributes # -- Configure any additional volumesMounts that need to be attached to the containers volumeMounts : - mountPath : \"/app/custom_ldif/custom_attributes.ldif\" name : custom-attributes subPath : custom_attributes.ldif Run helm upgrade to activate the persistence job. helm upgrade <release-name> janssen/janssen -f values.yaml -n <jans-namespace> Your custom work should be loaded to your persistence. This also persists any changes going forward as you upgrade.","title":"Kubernetes"},{"location":"admin/to-be-placed/google/","text":"Sign-in using Google Account # Overview # Google's OAuth 2.0 APIs can be used for both authentication and authorization. This document describes how to integrate Google's OAuth 2.0 implementation for authentication thus allowing a user to sign in using his Google account. Prerequisites # A Jans-auth Server (installation instructions here ) The Google authentication script (included in the default Gluu Server distribution); A Google account . Google API jars namely google-api-client , google-oauth-client and google-http-client-jackson2 added to jans-auth-server Google Configuration # You need OAuth 2.0 credentials, including a client ID and client secret, to authenticate users and gain access to Google's APIs. The following steps explain how to create credentials for your project. Your applications can then use the credentials to access APIs that you have enabled for that project. Go to the Credentials page . Click Create credentials > OAuth client ID. Select the Web application application type. Name your OAuth 2.0 client and click Create Configure jans-auth server # Download Google Client JSON file # On the following page, https://console.cloud.google.com/apis/credentials, you will see a table containing your recently created client. Click on the download button and download the JSON file containing details of the Client. Place this file in /etc/certs/google_client_secret.json Add Google libraries to jans-auth-server # Copy the google-api-client , google-oauth-client and google-http-client-jackson2 to the following folder inside the jans-auth Server : /opt/jans/jetty/jans-auth/custom/libs Edit /opt/jans/jetty/jans-auth/webapps/oxauth.xml and add the following line: <Set name=\"extraClasspath\">./custom/libs/google-oauth-client-1.33.1.jar,./custom/libs/google-api-client-1.33.2.jar,./custom/libs/google-http-client-jackson2-1.41.5.jar</Set></Configure> Restart the jans-auth service systemctl status jans-auth Properties # The custom script has the following properties: Property Description Input value google_creds_file Details of the client created on https://console.cloud.google.com/apis/credentials /etc/certs/google_client_secret.json Enable Google Script using Admin Console # Follow the steps below to enable Google authentication: Navigate to Admin > Scripts Find the google script. Populate the properties table : google_creds_file : /etc/certs/google_client_secret.json . Enable the script by checking the box Scroll to the bottom of the page and click Update Note To make sure Google has been enabled successfully, you can check your Gluu Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"google\" . Make Google the Default Authentication mechanism # If google should be the default authentication mechanism, follow these instructions: Navigate to OAuth Server > Configuration > Defaults > ACR and Logging . Select the Default Authentication Method(Acr): to google . Click Save","title":"Sign-in using Google Account"},{"location":"admin/to-be-placed/google/#sign-in-using-google-account","text":"","title":"Sign-in using Google Account"},{"location":"admin/to-be-placed/google/#overview","text":"Google's OAuth 2.0 APIs can be used for both authentication and authorization. This document describes how to integrate Google's OAuth 2.0 implementation for authentication thus allowing a user to sign in using his Google account.","title":"Overview"},{"location":"admin/to-be-placed/google/#prerequisites","text":"A Jans-auth Server (installation instructions here ) The Google authentication script (included in the default Gluu Server distribution); A Google account . Google API jars namely google-api-client , google-oauth-client and google-http-client-jackson2 added to jans-auth-server","title":"Prerequisites"},{"location":"admin/to-be-placed/google/#google-configuration","text":"You need OAuth 2.0 credentials, including a client ID and client secret, to authenticate users and gain access to Google's APIs. The following steps explain how to create credentials for your project. Your applications can then use the credentials to access APIs that you have enabled for that project. Go to the Credentials page . Click Create credentials > OAuth client ID. Select the Web application application type. Name your OAuth 2.0 client and click Create","title":"Google Configuration"},{"location":"admin/to-be-placed/google/#configure-jans-auth-server","text":"","title":"Configure jans-auth server"},{"location":"admin/to-be-placed/google/#download-google-client-json-file","text":"On the following page, https://console.cloud.google.com/apis/credentials, you will see a table containing your recently created client. Click on the download button and download the JSON file containing details of the Client. Place this file in /etc/certs/google_client_secret.json","title":"Download Google Client JSON file"},{"location":"admin/to-be-placed/google/#add-google-libraries-to-jans-auth-server","text":"Copy the google-api-client , google-oauth-client and google-http-client-jackson2 to the following folder inside the jans-auth Server : /opt/jans/jetty/jans-auth/custom/libs Edit /opt/jans/jetty/jans-auth/webapps/oxauth.xml and add the following line: <Set name=\"extraClasspath\">./custom/libs/google-oauth-client-1.33.1.jar,./custom/libs/google-api-client-1.33.2.jar,./custom/libs/google-http-client-jackson2-1.41.5.jar</Set></Configure> Restart the jans-auth service systemctl status jans-auth","title":"Add Google libraries to jans-auth-server"},{"location":"admin/to-be-placed/google/#properties","text":"The custom script has the following properties: Property Description Input value google_creds_file Details of the client created on https://console.cloud.google.com/apis/credentials /etc/certs/google_client_secret.json","title":"Properties"},{"location":"admin/to-be-placed/google/#enable-google-script-using-admin-console","text":"Follow the steps below to enable Google authentication: Navigate to Admin > Scripts Find the google script. Populate the properties table : google_creds_file : /etc/certs/google_client_secret.json . Enable the script by checking the box Scroll to the bottom of the page and click Update Note To make sure Google has been enabled successfully, you can check your Gluu Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"google\" .","title":"Enable Google Script using Admin Console"},{"location":"admin/to-be-placed/google/#make-google-the-default-authentication-mechanism","text":"If google should be the default authentication mechanism, follow these instructions: Navigate to OAuth Server > Configuration > Defaults > ACR and Logging . Select the Default Authentication Method(Acr): to google . Click Save","title":"Make Google the Default Authentication mechanism"},{"location":"admin/upgrade/","tags":["administration","upgrade"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/upgrade/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/upgrade/upgrade-faq/","tags":["administration","upgrade"],"text":"This file is a placeholder.","title":"FAQ"},{"location":"admin/upgrade/kubernetes/","tags":["administration","upgrade","kubernetes"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/upgrade/kubernetes/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/upgrade/kubernetes/backup/","tags":["administration","upgrade","kubernetes"],"text":"This file is a placeholder.","title":"Backup"},{"location":"admin/upgrade/kubernetes/paths/","tags":["administration","upgrade","kubernetes"],"text":"This file is a placeholder.","title":"Version Upgrade Paths"},{"location":"admin/upgrade/kubernetes/rollback/","tags":["administration","upgrade","kubernetes"],"text":"This file is a placeholder.","title":"Rollback"},{"location":"admin/upgrade/vm/","tags":["administration","upgrade","vm"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/upgrade/vm/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/upgrade/vm/backup/","tags":["administration","upgrade","vm"],"text":"This file is a placeholder.","title":"Backup"},{"location":"admin/upgrade/vm/paths/","tags":["administration","upgrade","vm"],"text":"This file is a placeholder.","title":"Version Upgrade Paths"},{"location":"admin/upgrade/vm/rollback/","tags":["administration","upgrade","vm"],"text":"This file is a placeholder.","title":"Rollback"},{"location":"admin/vm-ops/","tags":["administration","vm","operations"],"text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/vm-ops/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"admin/vm-ops/backup/","tags":["administration","vm","operations"],"text":"This is a placeholder","title":"Backup"},{"location":"admin/vm-ops/certificates/","tags":["administration","vm","operations"],"text":"This is a placeholder","title":"Certificates"},{"location":"admin/vm-ops/checking-service-status/","tags":["administration","vm","operations"],"text":"This is a placeholder","title":"Checking Service Status"},{"location":"admin/vm-ops/faq/","tags":["administration","vm","operations"],"text":"This is a placeholder","title":"FAQ"},{"location":"admin/vm-ops/logs/","tags":["administration","vm","operations"],"text":"This is a placeholder","title":"Logs"},{"location":"admin/vm-ops/managing-key-rotation/","tags":["administration","vm","operations"],"text":"This is a placeholder","title":"Managing Key Rotation"},{"location":"admin/vm-ops/restarting-services/","tags":["administration","vm","operations"],"text":"This is a placeholder","title":"Restarting Services"},{"location":"admin/vm-ops/running-setup/","tags":["administration","vm","operations"],"text":"This is a placeholder","title":"Running Setup"},{"location":"admin/vm-ops/web-services/","tags":["administration","vm","operations"],"text":"This is a placeholder","title":"Web Services"},{"location":"agama-catalog/community/","text":"This folder contains Agama projects maintained by community developers.","title":"Index"},{"location":"agama-catalog/jans/","text":"This folder contains Agama projects maintained by the Jans core team.","title":"Index"},{"location":"agama-catalog/jans/inboundID/","text":"Inbound identity with Agama # Using Agama administrators can delegate authorization to external services like social sites. In a typical setting users are shown a login form with a \"Sign in with...\" button for authentication to take place at a given 3rd party in order to get access to a target application. This process is usually referred to as \"inbound identity\". In this document the steps required to setup inbound identity in your Janssen server are presented. Requisites # A Janssen server with config-api installed Understanding of how to add and modify Agama flows in your server Starter knowledge of OAuth2 and the Java programming language Terminology # Provider: An external identity provider, often a social site. Every provider is associated with a unique identifier Provider preselection: A process that designates the provider to employ for authentication without the end-user making a explicit decision, i.e. without a \"Sign in with\" button. Here the provider may be inferred from contextual data elicited at earlier stages, for instance. Scope # There is a great amount of different mechanisms providers may employ to materialize the authentication process. The current offering in Agama is focused on OAuth2-compliant providers, more specifically those supporting the code authorization grant. This does not mean other grants or even different protocols such as SAML cannot be supported, however organizations would have to engage in extra development efforts in this case. If the providers of interest already support the code authorization grant, the amount of work is significantly reduced. Flows involved # Provider # For every provider to support there has to be an Agama flow that must: Redirect the browser to the provider's site for the user to enter his login credentials Return profile data of the given user Note the scope here is limited: no session is created in the Janssen server for the user - this occurs later in the main parent flow. To facilitate administrators' work, the following flows are already implemented: Apple Facebook Github Google Main flow # The actual process of inbound identity occurs here. This flow is already implemented and ready to use. The following is a summary of the steps involved: A provider selection page is displayed. The list includes all ( enabled ) providers defined in the configuration of this flow. Additionally an option to use an existing local account is displayed (i.e. no inbound identity) The flow associated to the selected provider is launched. Actually, if the main flow was passed a provider identifier as parameter, step 1 is skipped and the given flow is launched directly If the flow triggered at step 2 did not finish successfully, the main flow finishes likewise. Else, the profile data returned is transformed using the applicable attribute mapping for the provider. More on attribute mappings here If the resulting profile data lacks a value for e-mail, and the provider was configured to require it, a form is displayed where the user can enter his e-mail address User provisioning takes place, in other words, a local user entry is created in the Janssen server database. If an entry already exists, it is updated as long as the provider is configured to allow so The flow finishes successfully and the user gets access to the target application Note the above design does not involve communication protocols. It is responsability of the concrete provider flow how to implement this aspect. The main flow can remain unmodified regardless of any change in existing flows or when new ones are added. Feel free to modify this flow or create one based on it if customizations are required. Deployment # Add agama-inbound jar # To start, let's add the required libraries to the authentication server: Visit this page, navigate to the folder matching your Janssen server version, and download the file suffixed with jar-with-dependencies.jar SSH to the server. Transfer the file to directory /opt/jans/jetty/jans-auth/custom/libs Navigate to /opt/jans/jetty/jans-auth/webapps and edit the file jans-auth.xml by adding <Set name=\"extraClasspath\">./custom/libs/*</Set> before the root tag closes Restart the server, e.g. systemctl restart jans-auth Add the basic authentication flow # The basic authentication flow is employed when no provider is picked from the list (step 1 here ) but the option to use an existing local account is taken. This flow is detailed in the Agama sample flows page , however those contents can be skipped for the purpose of this setup. Ensure Agama engine is enabled . Download the basic flow source file Use the API for adding flows as explained here and here . A sample curl command would look like this: curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' --data-binary @io.jans.flow.sample.basic https://<your-host>/jans-config-api/api/v1/agama/io.jans.flow.sample.basic - In the server, navigate to /opt/jans/jetty/jans-auth/agama/ftl . Create the folder hierarchy samples/basic there Download the login template to basic directory Add the main inbound flow # Download the flow source and add it as you did with the basic flow, ensure you use io.jans.inbound.ExternalSiteLogin this time In the server, navigate to /opt/jans/jetty/jans-auth/agama . Create folders named inboundID inside existing ftl and fl subdirectories Download the default logo and place it inside /opt/jans/jetty/jans-auth/agama/fl/inboundID folder Download the provider selector template and place it inside /opt/jans/jetty/jans-auth/agama/ftl/inboundID folder. Note templates go under ftl , not fl . Do the same with the e-mail prompt template Add a provider flow # For simplicity, we'll illustrate here how to add one of the already implemented demo flows, namely, Facebook. Some guidelines on how to create a provider flow your own are given here . Download the utility flows . Add them to the server as you did with the main flow Download the Facebook flow code . Add it using the API as well Download the logo image and place it in /opt/jans/jetty/jans-auth/agama/fl/inboundID Login to Facebook and register as developer. Create an application with Facebook login capabilities. In the Facebook login settings add https://<your-host>/jans-auth/fl/callback as a valid OAuth redirect URI. Finally grab the app Id and secret from the app settings page Set configuration parameters # Create a JSON file like the below. Replace data in the placeholders appropriately: [{ \"op\": \"replace\", \"path\": \"/metadata/properties\", \"value\": { \"authzEndpoint\": \"https://www.facebook.com/v14.0/dialog/oauth\", \"tokenEndpoint\": \"https://graph.facebook.com/v14.0/oauth/access_token\", \"userInfoEndpoint\": \"https://graph.facebook.com/v14.0/me\", \"clientId\": \"<APP-ID>\", \"clientSecret\": \"<APP-SECRET>\", \"scopes\": [\"email\", \"public_profile\"] } }] Patch the flow using the API. A sample curl command would look like this (assuming the JSON file is named fb.json ): curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: application/json-patch+json' -X PATCH -d@fb.json https://<your-host>/jans-config-api/api/v1/agama/io.jans.inbound.Facebook Later, we'll dive into the meaning of the configuration parameters set in this JSON file. Parameterize the main flow # So far, if the main flow is launched (learn about this topic here ) a screen with an empty \"Sign in with\" list will be shown. Adding information about the known providers is required. Create a JSON file like the below: [{ \"op\": \"replace\", \"path\": \"/metadata/properties\", \"value\": { \"facebook\": { \"flowQname\": \"io.jans.inbound.Facebook\", \"displayName\": \"Facebook\", \"mappingClassField\": \"io.jans.inbound.Mappings.FACEBOOK\", \"logoImg\": \"facebook.png\" } } }] Patch the main flow using the API. A sample curl command would look like this (assuming the JSON file is named main.json ): curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: application/json-patch+json' -X PATCH -d@main.json https://<your-host>/jans-config-api/api/v1/agama/io.jans.inbound.ExternalSiteLogin Later, we'll dive into the meaning of the configuration parameters set in this JSON file. Note : for limitations in the PATCH endpoint, do not use \"op\": \"add\" to add another provider. Use \"op\": \"replace\" and pass the whole JSON configuration (all providers) for value . Test # Launch the main flow (learn about this topic here ). If everything was setup correctly, a screen with a \"Sign in using\" heading will be shown and next to it a link titled \"Facebook\". When clicking on the link, the browser will be taken to the Facebook website for authentication. A prompt for consent of release of personal information may appear as well. Finally, the browser is taken back to your server and then to the target application as described here . Configuration parameters of flows # Main flow configurations # Configuration is supplied in a JSON object whose keys are the identifiers of the existing identity providers. The associated value for a key is a JSON object itself and follows the structure represented by this Java class. This is an example of a configuration for a couple of identity providers: { \"github\": { \"flowQname\": \"io.jans.inbound.Github\", \"displayName\": \"Github\", \"mappingClassField\": \"io.jans.inbound.Mappings.GITHUB\", }, \"google\": { \"flowQname\": \"io.jans.inbound.Google\", \"displayName\": \"Google\", \"mappingClassField\": \"io.jans.inbound.Mappings.GOOGLE\", \"enabled\": false, \"skipProfileUpdate\": true } } The table below explains the meaning of properties: Name Description Mandatory flowQname The qualified name of the Agama flow associated to this provider Yes displayName Short name of the provider (will be shown in the selector page) Yes mappingClassField The qualified name of the attribute mapping for this provider Yes logoImg Relative path to the logo image (will be shown in the selector page) No enabled A boolean value indicating whether this provider can be shown (and triggered) from the main flow or not. Default value is true No skipProfileUpdate Determines if profile data should not be updated for a user if an entry already exists locally for him. Default value is false No cumulativeUpdate When true , existing value(s) of an attribute are preserved when the incoming profile data already contains value(s) for such attribute, otherwise its values are replaced by the incoming ones entirely. Default value is false No requestForEmail Whether to prompt the user to enter his e-mail if the data supplied by the identity provider does not contain one. Default value is false No emailLinkingSafe Determines if an existing account with the same e-mail of the user about to be provisioned can be treated as the same person No Notes: logoImg path is relative to the base path of the main flow, i.e. inboundID Set emailLinkingSafe to true only if you trust the provider, i.e. the incoming e-mail data is securely verified. For security, never set it to true when requestForEmail is also true Provider flow configurations # Configurations for this kind of flows don't have to adhere to any specific structure. Developers are free to choose what fits best for their needs. Also note provider flows must not receive any inputs: the main flow won't pass any arguments when triggering them. Thus, design your flows so there is no use of Inputs but Configs directive in the header . In practice many identity providers adhere to the OAuth2 code grant, so you can re-use the structure represented by this Java class for the purpose. Particularly, the already implemented flows (like Facebook) use it for their configuration. The table below explains the meaning of its properties: Name Description authzEndpoint The authorization endpoint as in section 3.1 of RFC 7649 tokenEndpoint The token endpoint as in section 3.2 of RFC 7649 userInfoEndpoint The endpoint where profile data can be retrieved. This is not part of the OAuth2 specification clientId The identifier of the client to use, see section 1.1 and 2.2 of RFC 7649 . This client is assumed to be confidential as in section 2.1 clientSecret Secret associated to the client scopes A JSON array of strings that represent the scopes of the access tokens to retrieve redirectUri Redirect URI as in section 3.1.2 of RFC 7649 clientCredsInRequestBody true indicates the client authenticates at the token endpoint by including the credentials in the body of the request, otherwise, HTTP Basic authentication is assumed. See section 2.3.1 of RFC 7649 custParamsAuthReq A JSON object (keys and values expected to be strings) with extra parameters to pass to the authorization endpoint if desired custParamsTokenReq A JSON object (keys and values expected to be strings) with extra parameters to pass to the token endpoint if desired Here is an example: { \"authzEndpoint\": \"https://www.facebook.com/v14.0/dialog/oauth\", \"tokenEndpoint\": \"https://graph.facebook.com/v14.0/oauth/access_token\", \"userInfoEndpoint\": \"https://graph.facebook.com/v14.0/me\", \"clientId\": \"90210\", \"clientSecret\": \"changeit\", \"scopes\": [\"email\", \"public_profile\"] } Attribute mappings # This is the process through which the raw user profile data received by an identity provider is transformed into an object suitable for being stored in the Janssen's user database. Here, developers have the opportunity to \"map\" or \"transform\" the incoming data to one compatible with the data types, formats, and names required by the database. As an example suppose a provider returned the following: { \"id\": dfsg2-3bui2.2.5+ld1, \"email\": \"moe@doedoe.co\", \"last_name\": \"Doe\", \"first_name\": \"Moe\" } None of this attributes exist in Janssen, database adheres to LDAP naming. Conformant names would be uid , mail , sn , and givenName . Also, let's assume you want to set displayName to a string composed by the first and last names separated by a white space. Writing a mapping is required. A mapping is implemented in Java in the form of a java.util.function.UnaryOperator<Map<String, Object>> , that is, a function that takes a Map<String, Object> as input and returns a Map<String, Object> as result. Several examples are provided here . Note property mappingClassField of every provider defined in the main flow points to the fully qualified name of a mapping. Some important considerations: A mapping has to be declared as a public field in a public class Not all mappings have to belong to the same class Several providers can use the same mapping While working on a mapping, having to pack the class in a jar file, uploading it to the server, and then restarting every time a modification is made can be a big burden. To avoid this you can upload the source (java) file to the scripts directory of Agama and leverage hot reloading as outlined here . A \"template\" for quickly start writing a mapping is already available . Save with .java extension only, edit the body of the lambda expression, upload to the server, and then update the main flow as follows: Add an instruction like Call io.jans.inbound.CustomMappings#class at the beginning of the flow body for the class to be effectively reloaded when the file is modified Set mappingClassField to io.jans.inbound.CustomMappings.SAMPLE_MAPPING for the provider of interest. You may like the idea of using a different name for the field - update the java file accordingly From there onwards, you only need to re-upload the file as many times as needed. If you use DEBUG logging level in your server, you will see in the log the result of the mapping every time it is applied. Check for a message like \"Mapped profile is\". Utility flows # A couple of utility flows are available for developers writing flows: Qualified name Source code io.jans.inbound.oauth2.AuthzCode link io.jans.inbound.oauth2.AuthzCodeWithUserInfo link Authorization Code flow ( io.jans.inbound.oauth2.AuthzCode ): This flow implements the OAuth 2.0 authorization code grant where client authentication at the token endpoint occurs as described in section 2.3.1 of RFC 6749 (HTTP basic authentication scheme). In summary, this flow redirects the browser to the external provider's site where the user will enter his credentials, then back at the Janssen redirect URL a code is obtained which is employed to issue an access token request. The flow returns the token response as received by the provider Authorization Code flow with userInfo request ( io.jans.inbound.oauth2.AuthzCodeWithUserInfo ): This flow reuses the previous flow and additionally issues a request to a given userInfo URL passing the access token in the HTTP Authorization header. The response obtained (the profile data of the user) is returned in conjuction with the token response of the authorization code flow The above means that often, when writing a new flow for a provider, the task boils down to calling the latter flow and returning profile data only. Creating a provider flow # A provider flow must fulfil the conditions as summarized earlier . Developers have to figure out if the OAuth2 code authorization grant is supported, where the task is simplified to get the required configurations . Here, the source code flow of a flow like Facebook can be re-used - probably without modification other than in the header.","title":"Inbound identity with Agama"},{"location":"agama-catalog/jans/inboundID/#inbound-identity-with-agama","text":"Using Agama administrators can delegate authorization to external services like social sites. In a typical setting users are shown a login form with a \"Sign in with...\" button for authentication to take place at a given 3rd party in order to get access to a target application. This process is usually referred to as \"inbound identity\". In this document the steps required to setup inbound identity in your Janssen server are presented.","title":"Inbound identity with Agama"},{"location":"agama-catalog/jans/inboundID/#requisites","text":"A Janssen server with config-api installed Understanding of how to add and modify Agama flows in your server Starter knowledge of OAuth2 and the Java programming language","title":"Requisites"},{"location":"agama-catalog/jans/inboundID/#terminology","text":"Provider: An external identity provider, often a social site. Every provider is associated with a unique identifier Provider preselection: A process that designates the provider to employ for authentication without the end-user making a explicit decision, i.e. without a \"Sign in with\" button. Here the provider may be inferred from contextual data elicited at earlier stages, for instance.","title":"Terminology"},{"location":"agama-catalog/jans/inboundID/#scope","text":"There is a great amount of different mechanisms providers may employ to materialize the authentication process. The current offering in Agama is focused on OAuth2-compliant providers, more specifically those supporting the code authorization grant. This does not mean other grants or even different protocols such as SAML cannot be supported, however organizations would have to engage in extra development efforts in this case. If the providers of interest already support the code authorization grant, the amount of work is significantly reduced.","title":"Scope"},{"location":"agama-catalog/jans/inboundID/#flows-involved","text":"","title":"Flows involved"},{"location":"agama-catalog/jans/inboundID/#provider","text":"For every provider to support there has to be an Agama flow that must: Redirect the browser to the provider's site for the user to enter his login credentials Return profile data of the given user Note the scope here is limited: no session is created in the Janssen server for the user - this occurs later in the main parent flow. To facilitate administrators' work, the following flows are already implemented: Apple Facebook Github Google","title":"Provider"},{"location":"agama-catalog/jans/inboundID/#main-flow","text":"The actual process of inbound identity occurs here. This flow is already implemented and ready to use. The following is a summary of the steps involved: A provider selection page is displayed. The list includes all ( enabled ) providers defined in the configuration of this flow. Additionally an option to use an existing local account is displayed (i.e. no inbound identity) The flow associated to the selected provider is launched. Actually, if the main flow was passed a provider identifier as parameter, step 1 is skipped and the given flow is launched directly If the flow triggered at step 2 did not finish successfully, the main flow finishes likewise. Else, the profile data returned is transformed using the applicable attribute mapping for the provider. More on attribute mappings here If the resulting profile data lacks a value for e-mail, and the provider was configured to require it, a form is displayed where the user can enter his e-mail address User provisioning takes place, in other words, a local user entry is created in the Janssen server database. If an entry already exists, it is updated as long as the provider is configured to allow so The flow finishes successfully and the user gets access to the target application Note the above design does not involve communication protocols. It is responsability of the concrete provider flow how to implement this aspect. The main flow can remain unmodified regardless of any change in existing flows or when new ones are added. Feel free to modify this flow or create one based on it if customizations are required.","title":"Main flow"},{"location":"agama-catalog/jans/inboundID/#deployment","text":"","title":"Deployment"},{"location":"agama-catalog/jans/inboundID/#add-agama-inbound-jar","text":"To start, let's add the required libraries to the authentication server: Visit this page, navigate to the folder matching your Janssen server version, and download the file suffixed with jar-with-dependencies.jar SSH to the server. Transfer the file to directory /opt/jans/jetty/jans-auth/custom/libs Navigate to /opt/jans/jetty/jans-auth/webapps and edit the file jans-auth.xml by adding <Set name=\"extraClasspath\">./custom/libs/*</Set> before the root tag closes Restart the server, e.g. systemctl restart jans-auth","title":"Add agama-inbound jar"},{"location":"agama-catalog/jans/inboundID/#add-the-basic-authentication-flow","text":"The basic authentication flow is employed when no provider is picked from the list (step 1 here ) but the option to use an existing local account is taken. This flow is detailed in the Agama sample flows page , however those contents can be skipped for the purpose of this setup. Ensure Agama engine is enabled . Download the basic flow source file Use the API for adding flows as explained here and here . A sample curl command would look like this: curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: text/plain' --data-binary @io.jans.flow.sample.basic https://<your-host>/jans-config-api/api/v1/agama/io.jans.flow.sample.basic - In the server, navigate to /opt/jans/jetty/jans-auth/agama/ftl . Create the folder hierarchy samples/basic there Download the login template to basic directory","title":"Add the basic authentication flow"},{"location":"agama-catalog/jans/inboundID/#add-the-main-inbound-flow","text":"Download the flow source and add it as you did with the basic flow, ensure you use io.jans.inbound.ExternalSiteLogin this time In the server, navigate to /opt/jans/jetty/jans-auth/agama . Create folders named inboundID inside existing ftl and fl subdirectories Download the default logo and place it inside /opt/jans/jetty/jans-auth/agama/fl/inboundID folder Download the provider selector template and place it inside /opt/jans/jetty/jans-auth/agama/ftl/inboundID folder. Note templates go under ftl , not fl . Do the same with the e-mail prompt template","title":"Add the main inbound flow"},{"location":"agama-catalog/jans/inboundID/#add-a-provider-flow","text":"For simplicity, we'll illustrate here how to add one of the already implemented demo flows, namely, Facebook. Some guidelines on how to create a provider flow your own are given here . Download the utility flows . Add them to the server as you did with the main flow Download the Facebook flow code . Add it using the API as well Download the logo image and place it in /opt/jans/jetty/jans-auth/agama/fl/inboundID Login to Facebook and register as developer. Create an application with Facebook login capabilities. In the Facebook login settings add https://<your-host>/jans-auth/fl/callback as a valid OAuth redirect URI. Finally grab the app Id and secret from the app settings page","title":"Add a provider flow"},{"location":"agama-catalog/jans/inboundID/#set-configuration-parameters","text":"Create a JSON file like the below. Replace data in the placeholders appropriately: [{ \"op\": \"replace\", \"path\": \"/metadata/properties\", \"value\": { \"authzEndpoint\": \"https://www.facebook.com/v14.0/dialog/oauth\", \"tokenEndpoint\": \"https://graph.facebook.com/v14.0/oauth/access_token\", \"userInfoEndpoint\": \"https://graph.facebook.com/v14.0/me\", \"clientId\": \"<APP-ID>\", \"clientSecret\": \"<APP-SECRET>\", \"scopes\": [\"email\", \"public_profile\"] } }] Patch the flow using the API. A sample curl command would look like this (assuming the JSON file is named fb.json ): curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: application/json-patch+json' -X PATCH -d@fb.json https://<your-host>/jans-config-api/api/v1/agama/io.jans.inbound.Facebook Later, we'll dive into the meaning of the configuration parameters set in this JSON file.","title":"Set configuration parameters"},{"location":"agama-catalog/jans/inboundID/#parameterize-the-main-flow","text":"So far, if the main flow is launched (learn about this topic here ) a screen with an empty \"Sign in with\" list will be shown. Adding information about the known providers is required. Create a JSON file like the below: [{ \"op\": \"replace\", \"path\": \"/metadata/properties\", \"value\": { \"facebook\": { \"flowQname\": \"io.jans.inbound.Facebook\", \"displayName\": \"Facebook\", \"mappingClassField\": \"io.jans.inbound.Mappings.FACEBOOK\", \"logoImg\": \"facebook.png\" } } }] Patch the main flow using the API. A sample curl command would look like this (assuming the JSON file is named main.json ): curl -k -i -H 'Authorization: Bearer <token>' -H 'Content-Type: application/json-patch+json' -X PATCH -d@main.json https://<your-host>/jans-config-api/api/v1/agama/io.jans.inbound.ExternalSiteLogin Later, we'll dive into the meaning of the configuration parameters set in this JSON file. Note : for limitations in the PATCH endpoint, do not use \"op\": \"add\" to add another provider. Use \"op\": \"replace\" and pass the whole JSON configuration (all providers) for value .","title":"Parameterize the main flow"},{"location":"agama-catalog/jans/inboundID/#test","text":"Launch the main flow (learn about this topic here ). If everything was setup correctly, a screen with a \"Sign in using\" heading will be shown and next to it a link titled \"Facebook\". When clicking on the link, the browser will be taken to the Facebook website for authentication. A prompt for consent of release of personal information may appear as well. Finally, the browser is taken back to your server and then to the target application as described here .","title":"Test"},{"location":"agama-catalog/jans/inboundID/#configuration-parameters-of-flows","text":"","title":"Configuration parameters of flows"},{"location":"agama-catalog/jans/inboundID/#main-flow-configurations","text":"Configuration is supplied in a JSON object whose keys are the identifiers of the existing identity providers. The associated value for a key is a JSON object itself and follows the structure represented by this Java class. This is an example of a configuration for a couple of identity providers: { \"github\": { \"flowQname\": \"io.jans.inbound.Github\", \"displayName\": \"Github\", \"mappingClassField\": \"io.jans.inbound.Mappings.GITHUB\", }, \"google\": { \"flowQname\": \"io.jans.inbound.Google\", \"displayName\": \"Google\", \"mappingClassField\": \"io.jans.inbound.Mappings.GOOGLE\", \"enabled\": false, \"skipProfileUpdate\": true } } The table below explains the meaning of properties: Name Description Mandatory flowQname The qualified name of the Agama flow associated to this provider Yes displayName Short name of the provider (will be shown in the selector page) Yes mappingClassField The qualified name of the attribute mapping for this provider Yes logoImg Relative path to the logo image (will be shown in the selector page) No enabled A boolean value indicating whether this provider can be shown (and triggered) from the main flow or not. Default value is true No skipProfileUpdate Determines if profile data should not be updated for a user if an entry already exists locally for him. Default value is false No cumulativeUpdate When true , existing value(s) of an attribute are preserved when the incoming profile data already contains value(s) for such attribute, otherwise its values are replaced by the incoming ones entirely. Default value is false No requestForEmail Whether to prompt the user to enter his e-mail if the data supplied by the identity provider does not contain one. Default value is false No emailLinkingSafe Determines if an existing account with the same e-mail of the user about to be provisioned can be treated as the same person No Notes: logoImg path is relative to the base path of the main flow, i.e. inboundID Set emailLinkingSafe to true only if you trust the provider, i.e. the incoming e-mail data is securely verified. For security, never set it to true when requestForEmail is also true","title":"Main flow configurations"},{"location":"agama-catalog/jans/inboundID/#provider-flow-configurations","text":"Configurations for this kind of flows don't have to adhere to any specific structure. Developers are free to choose what fits best for their needs. Also note provider flows must not receive any inputs: the main flow won't pass any arguments when triggering them. Thus, design your flows so there is no use of Inputs but Configs directive in the header . In practice many identity providers adhere to the OAuth2 code grant, so you can re-use the structure represented by this Java class for the purpose. Particularly, the already implemented flows (like Facebook) use it for their configuration. The table below explains the meaning of its properties: Name Description authzEndpoint The authorization endpoint as in section 3.1 of RFC 7649 tokenEndpoint The token endpoint as in section 3.2 of RFC 7649 userInfoEndpoint The endpoint where profile data can be retrieved. This is not part of the OAuth2 specification clientId The identifier of the client to use, see section 1.1 and 2.2 of RFC 7649 . This client is assumed to be confidential as in section 2.1 clientSecret Secret associated to the client scopes A JSON array of strings that represent the scopes of the access tokens to retrieve redirectUri Redirect URI as in section 3.1.2 of RFC 7649 clientCredsInRequestBody true indicates the client authenticates at the token endpoint by including the credentials in the body of the request, otherwise, HTTP Basic authentication is assumed. See section 2.3.1 of RFC 7649 custParamsAuthReq A JSON object (keys and values expected to be strings) with extra parameters to pass to the authorization endpoint if desired custParamsTokenReq A JSON object (keys and values expected to be strings) with extra parameters to pass to the token endpoint if desired Here is an example: { \"authzEndpoint\": \"https://www.facebook.com/v14.0/dialog/oauth\", \"tokenEndpoint\": \"https://graph.facebook.com/v14.0/oauth/access_token\", \"userInfoEndpoint\": \"https://graph.facebook.com/v14.0/me\", \"clientId\": \"90210\", \"clientSecret\": \"changeit\", \"scopes\": [\"email\", \"public_profile\"] }","title":"Provider flow configurations"},{"location":"agama-catalog/jans/inboundID/#attribute-mappings","text":"This is the process through which the raw user profile data received by an identity provider is transformed into an object suitable for being stored in the Janssen's user database. Here, developers have the opportunity to \"map\" or \"transform\" the incoming data to one compatible with the data types, formats, and names required by the database. As an example suppose a provider returned the following: { \"id\": dfsg2-3bui2.2.5+ld1, \"email\": \"moe@doedoe.co\", \"last_name\": \"Doe\", \"first_name\": \"Moe\" } None of this attributes exist in Janssen, database adheres to LDAP naming. Conformant names would be uid , mail , sn , and givenName . Also, let's assume you want to set displayName to a string composed by the first and last names separated by a white space. Writing a mapping is required. A mapping is implemented in Java in the form of a java.util.function.UnaryOperator<Map<String, Object>> , that is, a function that takes a Map<String, Object> as input and returns a Map<String, Object> as result. Several examples are provided here . Note property mappingClassField of every provider defined in the main flow points to the fully qualified name of a mapping. Some important considerations: A mapping has to be declared as a public field in a public class Not all mappings have to belong to the same class Several providers can use the same mapping While working on a mapping, having to pack the class in a jar file, uploading it to the server, and then restarting every time a modification is made can be a big burden. To avoid this you can upload the source (java) file to the scripts directory of Agama and leverage hot reloading as outlined here . A \"template\" for quickly start writing a mapping is already available . Save with .java extension only, edit the body of the lambda expression, upload to the server, and then update the main flow as follows: Add an instruction like Call io.jans.inbound.CustomMappings#class at the beginning of the flow body for the class to be effectively reloaded when the file is modified Set mappingClassField to io.jans.inbound.CustomMappings.SAMPLE_MAPPING for the provider of interest. You may like the idea of using a different name for the field - update the java file accordingly From there onwards, you only need to re-upload the file as many times as needed. If you use DEBUG logging level in your server, you will see in the log the result of the mapping every time it is applied. Check for a message like \"Mapped profile is\".","title":"Attribute mappings"},{"location":"agama-catalog/jans/inboundID/#utility-flows","text":"A couple of utility flows are available for developers writing flows: Qualified name Source code io.jans.inbound.oauth2.AuthzCode link io.jans.inbound.oauth2.AuthzCodeWithUserInfo link Authorization Code flow ( io.jans.inbound.oauth2.AuthzCode ): This flow implements the OAuth 2.0 authorization code grant where client authentication at the token endpoint occurs as described in section 2.3.1 of RFC 6749 (HTTP basic authentication scheme). In summary, this flow redirects the browser to the external provider's site where the user will enter his credentials, then back at the Janssen redirect URL a code is obtained which is employed to issue an access token request. The flow returns the token response as received by the provider Authorization Code flow with userInfo request ( io.jans.inbound.oauth2.AuthzCodeWithUserInfo ): This flow reuses the previous flow and additionally issues a request to a given userInfo URL passing the access token in the HTTP Authorization header. The response obtained (the profile data of the user) is returned in conjuction with the token response of the authorization code flow The above means that often, when writing a new flow for a provider, the task boils down to calling the latter flow and returning profile data only.","title":"Utility flows"},{"location":"agama-catalog/jans/inboundID/#creating-a-provider-flow","text":"A provider flow must fulfil the conditions as summarized earlier . Developers have to figure out if the OAuth2 code authorization grant is supported, where the task is simplified to get the required configurations . Here, the source code flow of a flow like Facebook can be re-used - probably without modification other than in the header.","title":"Creating a provider flow"},{"location":"agama-catalog/jans/inboundID/apple/","text":"The \"Sign In With Apple\" Agama flow # To deploy this flow, a number of configurations are required. Ensure you have an Apple developer account to start. This tutorial does a great job at explaining the necessary steps. As you go with it, please collect the following elements: A service ID A team ID A key ID and a key file You will be prompted to provide a domain name and a return URL. Provide <your-jans-host> and https://<your-jans-host>/jans-auth/fl/callback respectively, ensuring the changes are effectively saved in the developer's portal. Please follow the inbound identity guide entirely before proceeding. Flow and assets # Find this flow source code here . Copy the logo to your server at /opt/jans/jetty/jans-auth/agama/fl/inboundID directory, if desired. Supply configurations # Create a JSON document using the below as a guide: { \"authzEndpoint\": \"https://appleid.apple.com/auth/authorize\", \"tokenEndpoint\": \"https://appleid.apple.com/auth/token\", \"clientId\": \"<SERVICE ID>\", \"key\": \"<ONE-LINER CONTENTS OF KEY FILE>\", \"keyId\": \"<KEY ID>\", \"teamId\": \"<TEAM ID>\", \"scopes\": [\"email\", \"name\"], \"custParamsAuthReq\": { \"response_mode\": \"form_post\" }, \"clientCredsInRequestBody\": true } For the key , remove the lines regarding begin/end of the private key entirely. Also remove any line breaks: a one-liner is required. Use the crafted JSON content to parameterize this flow, as in Set configuration parameters . Then use the below to parameterize the main flow : \"apple\": { \"flowQname\": \"io.jans.inbound.Apple\", \"displayName\": \"Apple\", \"mappingClassField\": \"io.jans.inbound.Mappings.APPLE\", \"logoImg\": \"apple.png\" } Expected journey # The accompanying images illustrate the steps end-users will go through when using the inbound identity flow taking the Apple route: Initial provider selector page Prompt for credentials at Apple website Prompt for a second factor, e.g. SMS (optional) Prompt for browser trust Prompt before returning to original site Finally, the user should land at the target application.","title":"The \"Sign In With Apple\" Agama flow"},{"location":"agama-catalog/jans/inboundID/apple/#the-sign-in-with-apple-agama-flow","text":"To deploy this flow, a number of configurations are required. Ensure you have an Apple developer account to start. This tutorial does a great job at explaining the necessary steps. As you go with it, please collect the following elements: A service ID A team ID A key ID and a key file You will be prompted to provide a domain name and a return URL. Provide <your-jans-host> and https://<your-jans-host>/jans-auth/fl/callback respectively, ensuring the changes are effectively saved in the developer's portal. Please follow the inbound identity guide entirely before proceeding.","title":"The \"Sign In With Apple\" Agama flow"},{"location":"agama-catalog/jans/inboundID/apple/#flow-and-assets","text":"Find this flow source code here . Copy the logo to your server at /opt/jans/jetty/jans-auth/agama/fl/inboundID directory, if desired.","title":"Flow and assets"},{"location":"agama-catalog/jans/inboundID/apple/#supply-configurations","text":"Create a JSON document using the below as a guide: { \"authzEndpoint\": \"https://appleid.apple.com/auth/authorize\", \"tokenEndpoint\": \"https://appleid.apple.com/auth/token\", \"clientId\": \"<SERVICE ID>\", \"key\": \"<ONE-LINER CONTENTS OF KEY FILE>\", \"keyId\": \"<KEY ID>\", \"teamId\": \"<TEAM ID>\", \"scopes\": [\"email\", \"name\"], \"custParamsAuthReq\": { \"response_mode\": \"form_post\" }, \"clientCredsInRequestBody\": true } For the key , remove the lines regarding begin/end of the private key entirely. Also remove any line breaks: a one-liner is required. Use the crafted JSON content to parameterize this flow, as in Set configuration parameters . Then use the below to parameterize the main flow : \"apple\": { \"flowQname\": \"io.jans.inbound.Apple\", \"displayName\": \"Apple\", \"mappingClassField\": \"io.jans.inbound.Mappings.APPLE\", \"logoImg\": \"apple.png\" }","title":"Supply configurations"},{"location":"agama-catalog/jans/inboundID/apple/#expected-journey","text":"The accompanying images illustrate the steps end-users will go through when using the inbound identity flow taking the Apple route: Initial provider selector page Prompt for credentials at Apple website Prompt for a second factor, e.g. SMS (optional) Prompt for browser trust Prompt before returning to original site Finally, the user should land at the target application.","title":"Expected journey"},{"location":"agama-catalog/vendor/","text":"This folder contains Agama projects maintained by third party vendors.","title":"Index"},{"location":"assets/","text":"Use the assets directory to store digital assets like images and diagrams that are used to support documentation for all modules. Directory Structure # logo : This directory holds logo files used for official documentation and publications. Do not change these files without consulting the CODEOWNER. Guidelines # Name the file using 4 to 5 keywords (separated by dash - ) which describes content of the file i.e diagram-user-registration-sequence.pdf Max file size 1MB each images format preferably .png diagrams format preferably .svg Preferred diagramming tool: draw.io . Upload .drawio file along with diagram pdf file with same name. This allows future updates to the diagram to keep it updated","title":"Index"},{"location":"assets/#directory-structure","text":"logo : This directory holds logo files used for official documentation and publications. Do not change these files without consulting the CODEOWNER.","title":"Directory Structure"},{"location":"assets/#guidelines","text":"Name the file using 4 to 5 keywords (separated by dash - ) which describes content of the file i.e diagram-user-registration-sequence.pdf Max file size 1MB each images format preferably .png diagrams format preferably .svg Preferred diagramming tool: draw.io . Upload .drawio file along with diagram pdf file with same name. This allows future updates to the diagram to keep it updated","title":"Guidelines"},{"location":"developer/","text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"developer/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"developer/developer-faq/","tags":["developer","faq"],"text":"Developer FAQs # How to install Janssen Server OpenBanking for testing? # Note Use this installation for testing only Good understanding of Janssen Server installation process in general is a prerequisite. Here we are just highlighting steps without a lot of details. Visit installation documentation for complete understanding. This installation uses Gluu Testing certificate. Download Installer # wget https://raw.githubusercontent.com/JanssenProject/jans/main/jans-linux-setup/jans_setup/install.py -O install.py Execute Installer # python3 install.py --profile=openbanking --args=\"-ob-key-fn=/opt/jans/jans-setup/openbanking/static/ob-gluu-test.key -static-kid=ob-gluu-test -jwks-uri=https://ox.gluu.org/icrby8xcvbcv/ob/ob-gluu-test.jwks --disable-ob-auth-script -ob-alias=ob-gluu-test\" Please enter defaults for the following questions (press just enter key), it will download certificate from jwksUri Use external key? [Y|n] : y Openbanking Key File [/opt/jans/jans-setup/openbanking/static/ob-gluu-test.key] : Openbanking Certificate File [/root/obsigning.pem] : Openbanking Key Alias [ob-gluu-test] : Configure Certificate # /opt/jans/jans-cli/config-cli.py -CC /opt/jans/jans-setup/output/CA/client.crt -CK /opt/jans/jans-setup/output/CA/client.key Test # Janssen Server open-banking is ready for testing. Visit testing instructions to know more.","title":"Developer FAQ"},{"location":"developer/developer-faq/#developer-faqs","text":"","title":"Developer FAQs"},{"location":"developer/developer-faq/#how-to-install-janssen-server-openbanking-for-testing","text":"Note Use this installation for testing only Good understanding of Janssen Server installation process in general is a prerequisite. Here we are just highlighting steps without a lot of details. Visit installation documentation for complete understanding. This installation uses Gluu Testing certificate.","title":"How to install Janssen Server OpenBanking for testing?"},{"location":"developer/developer-faq/#download-installer","text":"wget https://raw.githubusercontent.com/JanssenProject/jans/main/jans-linux-setup/jans_setup/install.py -O install.py","title":"Download Installer"},{"location":"developer/developer-faq/#execute-installer","text":"python3 install.py --profile=openbanking --args=\"-ob-key-fn=/opt/jans/jans-setup/openbanking/static/ob-gluu-test.key -static-kid=ob-gluu-test -jwks-uri=https://ox.gluu.org/icrby8xcvbcv/ob/ob-gluu-test.jwks --disable-ob-auth-script -ob-alias=ob-gluu-test\" Please enter defaults for the following questions (press just enter key), it will download certificate from jwksUri Use external key? [Y|n] : y Openbanking Key File [/opt/jans/jans-setup/openbanking/static/ob-gluu-test.key] : Openbanking Certificate File [/root/obsigning.pem] : Openbanking Key Alias [ob-gluu-test] :","title":"Execute Installer"},{"location":"developer/developer-faq/#configure-certificate","text":"/opt/jans/jans-cli/config-cli.py -CC /opt/jans/jans-setup/output/CA/client.crt -CK /opt/jans/jans-setup/output/CA/client.key","title":"Configure Certificate"},{"location":"developer/developer-faq/#test","text":"Janssen Server open-banking is ready for testing. Visit testing instructions to know more.","title":"Test"},{"location":"developer/development/","text":"This file is a placeholder.","title":"Development"},{"location":"developer/testing/","text":"Test Driven development # The Janssen Project is a large, complex project with tons of inter-dependency. If we aren't test-driven, anarchy will ensue. Unit testing # Do not submit any code without a corresponding unit test. Also, any bug fixes should increment unit test coverage. All unit tests are executed with any subsequent Jenkins build. Component testing # Component testing uses real world use cases to exercise a portion of the software, using typical data inputs. Developers should document component stories and submit them to the component test library for the respective repository. A tester should be able to run component tests manually. Component tests should run automatically with each Jenkins build. The OpenID Foundation certification tests supplement the component testing library, and should be run for each major release of the software for which they are available. Performance testing # Performance tests are critical to optimization of the persistence and caching implementation. All major releases of the software should be tested for performance with all supported database and cache configurations using the Cloud Native distribution. The VM distribution will not be performance tested, as the main goal for this distribution is development and small deployments. The JMeter test tool should be used to generate the load. These tests are published so community members can run their own bench-marking analysis. HA Tests # HA tests should be run against the Cloud Native distribution, which by design is active-active with no single point of failure. The HA testing should simulate taking down various pieces of infrastructure, to see if authentications can still proceed. Also, what happens to transactions that were in progress during the crash? Penetration tests # Penetration testing is highly deployment specific. Depending on different implementations of the Janssen Project software, you may achieve different levels of risk mitigation. Thus it is important that organizations that operate their own IAM platform based on Janssen perform their own penetration testing. Dependency Vulnerabilities # Dependency vulnerabilities are monitored by Gihub. In addition we plan to use the Linux Foundation Community Bridge vulnerability detection platform. Documentation local testing # While contributing documentation to official Janssen Project documentation it is important to make sure that documents meet style guidelines and have been proofread to remove any typographical or grammatical errors. Janssen Project uses Material for MkDocs to create the documenation site. Before new content is pushed to the repository on GitHub, it should be tested locally by the author. Author can do this by deploying Material for MkDocs locally. High-level steps involve: Install Material for MkDocs Install required plugins Preview as you write Open Banking # We are working on developing this content under issue 2548 . If you\u2019d like to contribute the content, get started with the Contribution Guide","title":"Testing"},{"location":"developer/testing/#test-driven-development","text":"The Janssen Project is a large, complex project with tons of inter-dependency. If we aren't test-driven, anarchy will ensue.","title":"Test Driven development"},{"location":"developer/testing/#unit-testing","text":"Do not submit any code without a corresponding unit test. Also, any bug fixes should increment unit test coverage. All unit tests are executed with any subsequent Jenkins build.","title":"Unit testing"},{"location":"developer/testing/#component-testing","text":"Component testing uses real world use cases to exercise a portion of the software, using typical data inputs. Developers should document component stories and submit them to the component test library for the respective repository. A tester should be able to run component tests manually. Component tests should run automatically with each Jenkins build. The OpenID Foundation certification tests supplement the component testing library, and should be run for each major release of the software for which they are available.","title":"Component testing"},{"location":"developer/testing/#performance-testing","text":"Performance tests are critical to optimization of the persistence and caching implementation. All major releases of the software should be tested for performance with all supported database and cache configurations using the Cloud Native distribution. The VM distribution will not be performance tested, as the main goal for this distribution is development and small deployments. The JMeter test tool should be used to generate the load. These tests are published so community members can run their own bench-marking analysis.","title":"Performance testing"},{"location":"developer/testing/#ha-tests","text":"HA tests should be run against the Cloud Native distribution, which by design is active-active with no single point of failure. The HA testing should simulate taking down various pieces of infrastructure, to see if authentications can still proceed. Also, what happens to transactions that were in progress during the crash?","title":"HA Tests"},{"location":"developer/testing/#penetration-tests","text":"Penetration testing is highly deployment specific. Depending on different implementations of the Janssen Project software, you may achieve different levels of risk mitigation. Thus it is important that organizations that operate their own IAM platform based on Janssen perform their own penetration testing.","title":"Penetration tests"},{"location":"developer/testing/#dependency-vulnerabilities","text":"Dependency vulnerabilities are monitored by Gihub. In addition we plan to use the Linux Foundation Community Bridge vulnerability detection platform.","title":"Dependency Vulnerabilities"},{"location":"developer/testing/#documentation-local-testing","text":"While contributing documentation to official Janssen Project documentation it is important to make sure that documents meet style guidelines and have been proofread to remove any typographical or grammatical errors. Janssen Project uses Material for MkDocs to create the documenation site. Before new content is pushed to the repository on GitHub, it should be tested locally by the author. Author can do this by deploying Material for MkDocs locally. High-level steps involve: Install Material for MkDocs Install required plugins Preview as you write","title":"Documentation local testing"},{"location":"developer/testing/#open-banking","text":"We are working on developing this content under issue 2548 . If you\u2019d like to contribute the content, get started with the Contribution Guide","title":"Open Banking"},{"location":"developer/ci-cd/github-ci/","text":"This file is a placeholder.","title":"GitHub CI"},{"location":"developer/ci-cd/jenkins-ci/","text":"This file is a placeholder.","title":"Jenkins CI"},{"location":"developer/ci-cd/release-process/","text":"This file is a placeholder.","title":"Release Process"},{"location":"developer/implementation-design/","text":"Technical Documentation # This documentation explains technical design, architecture and interactions of various Janssen modules. Contents: # API Reference Design Consideration and Guidelines REST API Design Caching Testing Deployment Security Scalability and Cloud Infrastructure Technical Documentation Guidelines API Reference # Service REST API Java API Jans Auth Server Swagger Javadoc Jans Client API Swagger Javadoc Jans Config API Swagger Jans Core Javadoc Jans FIDO 2 Swagger Jans SCIM API Swagger Javadoc Design Consideration and Guidelines # This section outlines high-level design principles, styles and design choices that Janssen project follow. REST API Design # Caching # Testing # Deployment # Security # Scalability and Cloud Infrastructure # Technical Documentation Guidelines # Detailed technical documentation for each module should be placed under directory with module's name. For example, technical documentation for jans-mod should be placed under directory docs/technical/jans-mod Each module directory should have a README file that follows Technical Overview Template . Create directories if required under module directory to further arrange documentation Place all the digital assets to support your documentation under assets following these guidelines","title":"Technical Documentation"},{"location":"developer/implementation-design/#technical-documentation","text":"This documentation explains technical design, architecture and interactions of various Janssen modules.","title":"Technical Documentation"},{"location":"developer/implementation-design/#contents","text":"API Reference Design Consideration and Guidelines REST API Design Caching Testing Deployment Security Scalability and Cloud Infrastructure Technical Documentation Guidelines","title":"Contents:"},{"location":"developer/implementation-design/#api-reference","text":"Service REST API Java API Jans Auth Server Swagger Javadoc Jans Client API Swagger Javadoc Jans Config API Swagger Jans Core Javadoc Jans FIDO 2 Swagger Jans SCIM API Swagger Javadoc","title":"API Reference"},{"location":"developer/implementation-design/#design-consideration-and-guidelines","text":"This section outlines high-level design principles, styles and design choices that Janssen project follow.","title":"Design Consideration and Guidelines"},{"location":"developer/implementation-design/#rest-api-design","text":"","title":"REST API Design"},{"location":"developer/implementation-design/#caching","text":"","title":"Caching"},{"location":"developer/implementation-design/#testing","text":"","title":"Testing"},{"location":"developer/implementation-design/#deployment","text":"","title":"Deployment"},{"location":"developer/implementation-design/#security","text":"","title":"Security"},{"location":"developer/implementation-design/#scalability-and-cloud-infrastructure","text":"","title":"Scalability and Cloud Infrastructure"},{"location":"developer/implementation-design/#technical-documentation-guidelines","text":"Detailed technical documentation for each module should be placed under directory with module's name. For example, technical documentation for jans-mod should be placed under directory docs/technical/jans-mod Each module directory should have a README file that follows Technical Overview Template . Create directories if required under module directory to further arrange documentation Place all the digital assets to support your documentation under assets following these guidelines","title":"Technical Documentation Guidelines"},{"location":"developer/implementation-design/agama/","text":"This file is a placeholder.","title":"Agama"},{"location":"developer/implementation-design/jans-auth-server/","text":"This file is a placeholder.","title":"jans-auth-server"},{"location":"developer/implementation-design/jans-cli/","text":"This file is a placeholder.","title":"jans-cli"},{"location":"developer/implementation-design/jans-client-api/","text":"This file is a placeholder.","title":"jans-client-api"},{"location":"developer/implementation-design/jans-config-api/","text":"This file is a placeholder.","title":"jans-config-api"},{"location":"developer/implementation-design/jans-core/","text":"This file is a placeholder.","title":"jans-core"},{"location":"developer/implementation-design/jans-eleven/","text":"This file is a placeholder.","title":"jans-eleven"},{"location":"developer/implementation-design/jans-fido2/","text":"This file is a placeholder.","title":"jans-fido2"},{"location":"developer/implementation-design/jans-notify/","text":"This file is a placeholder.","title":"jans-notify"},{"location":"developer/implementation-design/jans-orm/","text":"This file is a placeholder.","title":"jans-orm"},{"location":"developer/implementation-design/jans-scim/","text":"This file is a placeholder.","title":"jans-scim"},{"location":"developer/implementation-design/technical-overview-template/","text":"# Contents: - Functional Overview - Design Overview - API and Code Reference - Deployment - Data Reference - How to Run Tests - Logging - Security Considerations Functional Overview # Design Overview # API and Code Reference # API Reference Code Reference Deployment # Data Reference # How to Run Tests # Logging # Security Considerations #","title":"<module name>"},{"location":"developer/implementation-design/technical-overview-template/#_1","text":"Contents: - Functional Overview - Design Overview - API and Code Reference - Deployment - Data Reference - How to Run Tests - Logging - Security Considerations","title":""},{"location":"developer/implementation-design/technical-overview-template/#functional-overview","text":"","title":"Functional Overview"},{"location":"developer/implementation-design/technical-overview-template/#design-overview","text":"","title":"Design Overview"},{"location":"developer/implementation-design/technical-overview-template/#api-and-code-reference","text":"API Reference Code Reference","title":"API and Code Reference"},{"location":"developer/implementation-design/technical-overview-template/#deployment","text":"","title":"Deployment"},{"location":"developer/implementation-design/technical-overview-template/#data-reference","text":"","title":"Data Reference"},{"location":"developer/implementation-design/technical-overview-template/#how-to-run-tests","text":"","title":"How to Run Tests"},{"location":"developer/implementation-design/technical-overview-template/#logging","text":"","title":"Logging"},{"location":"developer/implementation-design/technical-overview-template/#security-considerations","text":"","title":"Security Considerations"},{"location":"governance/","text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"governance/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"governance/charter/","text":"Technical Charter (the \u201cCharter\u201d) for Janssen Project a Series of LF Projects, LLC # Adopted December 8, 2020 This Charter sets forth the responsibilities and procedures for technical contribution to, and oversight of, the Janssen open source project, which has been established as Janssen Project a Series of LF Projects, LLC (the \u201cProject\u201d). LF Projects, LLC (\u201cLF Projects\u201d) is a Delaware series limited liability company. All contributors (including committers, maintainers, and other technical positions) and other participants in the Project (collectively, \u201cCollaborators\u201d) must comply with the terms of this Charter. Mission and Scope of the Project The mission of the Project is to develop and maintain a cloud native identity and authorization platform that comprehensively implements OAuth, OpenID Connect and the User Managed Access protocol, while maintaining flexibility and horizontal scalability. The scope of the Project includes collaborative development under the Project License (as defined herein) supporting the mission, including documentation, testing, integration and the creation of other artifacts that aid the development, deployment, operation or adoption of the open source project. Technical Steering Committee The Technical Steering Committee (the \u201cTSC\u201d) will be responsible for all technical oversight of the open source Project. The TSC voting members are initially the Project\u2019s Committers. At the inception of the project, the Committers of the Project will be as set forth within the \u201cCONTRIBUTING\u201d file within the Project\u2019s code repository. The TSC may choose an alternative approach for determining the voting members of the TSC, and any such alternative approach will be documented in the CONTRIBUTING file. Any meetings of the Technical Steering Committee are intended to be open to the public, and can be conducted electronically, via teleconference, or in person. TSC projects generally will involve Contributors and Committers. The TSC may adopt or modify roles so long as the roles are documented in the CONTRIBUTING file. Unless otherwise documented: Contributors include anyone in the technical community that contributes code, documentation, or other technical artifacts to the Project; Committers are Contributors who have earned the ability to modify (\u201ccommit\u201d) source code, documentation or other technical artifacts in a project\u2019s repository; and A Contributor may become a Committer by a majority approval of the existing Committers. A Committer may be removed by a majority approval of the other existing Committers. Participation in the Project through becoming a Contributor and Committer is open to anyone so long as they abide by the terms of this Charter. The TSC may (1) establish work flow procedures for the submission, approval, and closure/archiving of projects, (2) set requirements for the promotion of Contributors to Committer status, as applicable, and (3) amend, adjust, refine and/or eliminate the roles of Contributors, and Committers, and create new roles, and publicly document any TSC roles, as it sees fit. The TSC may elect a TSC Chair, who will preside over meetings of the TSC and will serve until their resignation or replacement by the TSC. Responsibilities: The TSC will be responsible for all aspects of oversight relating to the Project, which may include: coordinating the technical direction of the Project; approving project or system proposals (including, but not limited to, incubation, deprecation, and changes to a sub-project\u2019s scope); organizing sub-projects and removing sub-projects; creating sub-committees or working groups to focus on cross-project technical issues and requirements; appointing representatives to work with other open source or open standards communities; establishing community norms, workflows, issuing releases, and security issue reporting policies; approving and implementing policies and processes for contributing (to be published in the CONTRIBUTING file) and coordinating with the series manager of the Project (as provided for in the Series Agreement, the \u201cSeries Manager\u201d) to resolve matters or concerns that may arise as set forth in Section 7 of this Charter; discussions, seeking consensus, and where necessary, voting on technical matters relating to the code base that affect multiple projects; and coordinating any marketing, events, or communications regarding the Project. TSC Voting While the Project aims to operate as a consensus-based community, if any TSC decision requires a vote to move the Project forward, the voting members of the TSC will vote on a one vote per voting member basis. Quorum for TSC meetings requires at least fifty percent of all voting members of the TSC to be present. The TSC may continue to meet if quorum is not met but will be prevented from making any decisions at the meeting. Except as provided in Section 7.iii. and 8.i, decisions by vote at a meeting require a majority vote of those in attendance, provided quorum is met. Decisions made by electronic vote without a meeting require a majority vote of all voting members of the TSC. In the event a vote cannot be resolved by the TSC, any voting member of the TSC may refer the matter to the Series Manager for assistance in reaching a resolution. Compliance with Policies This Charter is subject to the Series Agreement for the Project and the Operating Agreement of LF Projects. Contributors will comply with the policies of LF Projects as may be adopted and amended by LF Projects, including, without limitation the policies listed at https://lfprojects.org/policies/. The TSC may adopt a code of conduct (\u201cCoC\u201d) for the Project, which is subject to approval by the Series Manager. In the event that a Project-specific CoC has not been approved, the LF Projects Code of Conduct listed at https://lfprojects.org/policies will apply for all Collaborators in the Project. When amending or adopting any policy applicable to the Project, LF Projects will publish such policy, as to be amended or adopted, on its web site at least 30 days prior to such policy taking effect; provided, however, that in the case of any amendment of the Trademark Policy or Terms of Use of LF Projects, any such amendment is effective upon publication on LF Project\u2019s web site. All Collaborators must allow open participation from any individual or organization meeting the requirements for contributing under this Charter and any policies adopted for all Collaborators by the TSC, regardless of competitive interests. Put another way, the Project community must not seek to exclude any participant based on any criteria, requirement, or reason other than those that are reasonable and applied on a non-discriminatory basis to all Collaborators in the Project community. The Project will operate in a transparent, open, collaborative, and ethical manner at all times. The output of all Project discussions, proposals, timelines, decisions, and status should be made open and easily visible to all. Any potential violations of this requirement should be reported immediately to the Series Manager. Community Assets LF Projects will hold title to all trade or service marks used by the Project (\u201cProject Trademarks\u201d), whether based on common law or registered rights. Project Trademarks will be transferred and assigned to LF Projects to hold on behalf of the Project. Any use of any Project Trademarks by Collaborators in the Project will be in accordance with the license from LF Projects and inure to the benefit of LF Projects. The Project will, as permitted and in accordance with such license from LF Projects, develop and own all Project GitHub and social media accounts, and domain name registrations created by the Project community. Under no circumstances will LF Projects be expected or required to undertake any action on behalf of the Project that is inconsistent with the tax-exempt status or purpose, as applicable, of LFP, Inc. or LF Projects, LLC. General Rules and Operations. The Project will: engage in the work of the Project in a professional manner consistent with maintaining a cohesive community, while also maintaining the goodwill and esteem of LF Projects, LFP, Inc. and other partner organizations in the open source community; and respect the rights of all trademark owners, including any branding and trademark usage guidelines. Intellectual Property Policy Collaborators acknowledge that the copyright in all new contributions will be retained by the copyright holder as independent works of authorship and that no contributor or copyright holder will be required to assign copyrights to the Project. Except as described in Section 7.iii., all contributions to the Project are subject to the following: All new inbound code contributions to the Project must be made using the Apache License, Version 2.0, available at https://www.apache.org/licenses/LICENSE-2.0 (the \u201cProject License\u201d). All new inbound code contributions must also be accompanied by a Developer Certificate of Origin ( http://developercertificate.org ) sign-off in the source code system that is submitted through a TSC-approved contribution process which will bind the authorized contributor and, if not self-employed, their employer to the applicable license; All outbound code will be made available under the Project License. Documentation will be received and made available by the Project under the Creative Commons Attribution 4.0 International License (available at http://creativecommons.org/licenses/by/4.0/ ). The Project may seek to integrate and contribute back to other open source projects (\u201cUpstream Projects\u201d). In such cases, the Project will conform to all license requirements of the Upstream Projects, including dependencies, leveraged by the Project. Upstream Project code contributions not stored within the Project\u2019s main code repository will comply with the contribution process and license terms for the applicable Upstream Project. The TSC may approve the use of an alternative license or licenses for inbound or outbound contributions on an exception basis. To request an exception, please describe the contribution, the alternative open source license(s), and the justification for using an alternative open source license for the Project. License exceptions must be approved by a two-thirds vote of the entire TSC. Contributed files should contain license information, such as SPDX short form identifiers, indicating the open source license or licenses pertaining to the file. Amendments This charter may be amended by a two-thirds vote of the entire TSC and is subject to approval by LF Projects.","title":"Charter"},{"location":"governance/charter/#technical-charter-the-charter-for-janssen-project-a-series-of-lf-projects-llc","text":"Adopted December 8, 2020 This Charter sets forth the responsibilities and procedures for technical contribution to, and oversight of, the Janssen open source project, which has been established as Janssen Project a Series of LF Projects, LLC (the \u201cProject\u201d). LF Projects, LLC (\u201cLF Projects\u201d) is a Delaware series limited liability company. All contributors (including committers, maintainers, and other technical positions) and other participants in the Project (collectively, \u201cCollaborators\u201d) must comply with the terms of this Charter. Mission and Scope of the Project The mission of the Project is to develop and maintain a cloud native identity and authorization platform that comprehensively implements OAuth, OpenID Connect and the User Managed Access protocol, while maintaining flexibility and horizontal scalability. The scope of the Project includes collaborative development under the Project License (as defined herein) supporting the mission, including documentation, testing, integration and the creation of other artifacts that aid the development, deployment, operation or adoption of the open source project. Technical Steering Committee The Technical Steering Committee (the \u201cTSC\u201d) will be responsible for all technical oversight of the open source Project. The TSC voting members are initially the Project\u2019s Committers. At the inception of the project, the Committers of the Project will be as set forth within the \u201cCONTRIBUTING\u201d file within the Project\u2019s code repository. The TSC may choose an alternative approach for determining the voting members of the TSC, and any such alternative approach will be documented in the CONTRIBUTING file. Any meetings of the Technical Steering Committee are intended to be open to the public, and can be conducted electronically, via teleconference, or in person. TSC projects generally will involve Contributors and Committers. The TSC may adopt or modify roles so long as the roles are documented in the CONTRIBUTING file. Unless otherwise documented: Contributors include anyone in the technical community that contributes code, documentation, or other technical artifacts to the Project; Committers are Contributors who have earned the ability to modify (\u201ccommit\u201d) source code, documentation or other technical artifacts in a project\u2019s repository; and A Contributor may become a Committer by a majority approval of the existing Committers. A Committer may be removed by a majority approval of the other existing Committers. Participation in the Project through becoming a Contributor and Committer is open to anyone so long as they abide by the terms of this Charter. The TSC may (1) establish work flow procedures for the submission, approval, and closure/archiving of projects, (2) set requirements for the promotion of Contributors to Committer status, as applicable, and (3) amend, adjust, refine and/or eliminate the roles of Contributors, and Committers, and create new roles, and publicly document any TSC roles, as it sees fit. The TSC may elect a TSC Chair, who will preside over meetings of the TSC and will serve until their resignation or replacement by the TSC. Responsibilities: The TSC will be responsible for all aspects of oversight relating to the Project, which may include: coordinating the technical direction of the Project; approving project or system proposals (including, but not limited to, incubation, deprecation, and changes to a sub-project\u2019s scope); organizing sub-projects and removing sub-projects; creating sub-committees or working groups to focus on cross-project technical issues and requirements; appointing representatives to work with other open source or open standards communities; establishing community norms, workflows, issuing releases, and security issue reporting policies; approving and implementing policies and processes for contributing (to be published in the CONTRIBUTING file) and coordinating with the series manager of the Project (as provided for in the Series Agreement, the \u201cSeries Manager\u201d) to resolve matters or concerns that may arise as set forth in Section 7 of this Charter; discussions, seeking consensus, and where necessary, voting on technical matters relating to the code base that affect multiple projects; and coordinating any marketing, events, or communications regarding the Project. TSC Voting While the Project aims to operate as a consensus-based community, if any TSC decision requires a vote to move the Project forward, the voting members of the TSC will vote on a one vote per voting member basis. Quorum for TSC meetings requires at least fifty percent of all voting members of the TSC to be present. The TSC may continue to meet if quorum is not met but will be prevented from making any decisions at the meeting. Except as provided in Section 7.iii. and 8.i, decisions by vote at a meeting require a majority vote of those in attendance, provided quorum is met. Decisions made by electronic vote without a meeting require a majority vote of all voting members of the TSC. In the event a vote cannot be resolved by the TSC, any voting member of the TSC may refer the matter to the Series Manager for assistance in reaching a resolution. Compliance with Policies This Charter is subject to the Series Agreement for the Project and the Operating Agreement of LF Projects. Contributors will comply with the policies of LF Projects as may be adopted and amended by LF Projects, including, without limitation the policies listed at https://lfprojects.org/policies/. The TSC may adopt a code of conduct (\u201cCoC\u201d) for the Project, which is subject to approval by the Series Manager. In the event that a Project-specific CoC has not been approved, the LF Projects Code of Conduct listed at https://lfprojects.org/policies will apply for all Collaborators in the Project. When amending or adopting any policy applicable to the Project, LF Projects will publish such policy, as to be amended or adopted, on its web site at least 30 days prior to such policy taking effect; provided, however, that in the case of any amendment of the Trademark Policy or Terms of Use of LF Projects, any such amendment is effective upon publication on LF Project\u2019s web site. All Collaborators must allow open participation from any individual or organization meeting the requirements for contributing under this Charter and any policies adopted for all Collaborators by the TSC, regardless of competitive interests. Put another way, the Project community must not seek to exclude any participant based on any criteria, requirement, or reason other than those that are reasonable and applied on a non-discriminatory basis to all Collaborators in the Project community. The Project will operate in a transparent, open, collaborative, and ethical manner at all times. The output of all Project discussions, proposals, timelines, decisions, and status should be made open and easily visible to all. Any potential violations of this requirement should be reported immediately to the Series Manager. Community Assets LF Projects will hold title to all trade or service marks used by the Project (\u201cProject Trademarks\u201d), whether based on common law or registered rights. Project Trademarks will be transferred and assigned to LF Projects to hold on behalf of the Project. Any use of any Project Trademarks by Collaborators in the Project will be in accordance with the license from LF Projects and inure to the benefit of LF Projects. The Project will, as permitted and in accordance with such license from LF Projects, develop and own all Project GitHub and social media accounts, and domain name registrations created by the Project community. Under no circumstances will LF Projects be expected or required to undertake any action on behalf of the Project that is inconsistent with the tax-exempt status or purpose, as applicable, of LFP, Inc. or LF Projects, LLC. General Rules and Operations. The Project will: engage in the work of the Project in a professional manner consistent with maintaining a cohesive community, while also maintaining the goodwill and esteem of LF Projects, LFP, Inc. and other partner organizations in the open source community; and respect the rights of all trademark owners, including any branding and trademark usage guidelines. Intellectual Property Policy Collaborators acknowledge that the copyright in all new contributions will be retained by the copyright holder as independent works of authorship and that no contributor or copyright holder will be required to assign copyrights to the Project. Except as described in Section 7.iii., all contributions to the Project are subject to the following: All new inbound code contributions to the Project must be made using the Apache License, Version 2.0, available at https://www.apache.org/licenses/LICENSE-2.0 (the \u201cProject License\u201d). All new inbound code contributions must also be accompanied by a Developer Certificate of Origin ( http://developercertificate.org ) sign-off in the source code system that is submitted through a TSC-approved contribution process which will bind the authorized contributor and, if not self-employed, their employer to the applicable license; All outbound code will be made available under the Project License. Documentation will be received and made available by the Project under the Creative Commons Attribution 4.0 International License (available at http://creativecommons.org/licenses/by/4.0/ ). The Project may seek to integrate and contribute back to other open source projects (\u201cUpstream Projects\u201d). In such cases, the Project will conform to all license requirements of the Upstream Projects, including dependencies, leveraged by the Project. Upstream Project code contributions not stored within the Project\u2019s main code repository will comply with the contribution process and license terms for the applicable Upstream Project. The TSC may approve the use of an alternative license or licenses for inbound or outbound contributions on an exception basis. To request an exception, please describe the contribution, the alternative open source license(s), and the justification for using an alternative open source license for the Project. License exceptions must be approved by a two-thirds vote of the entire TSC. Contributed files should contain license information, such as SPDX short form identifiers, indicating the open source license or licenses pertaining to the file. Amendments This charter may be amended by a two-thirds vote of the entire TSC and is subject to approval by LF Projects.","title":"Technical Charter (the \u201cCharter\u201d) for Janssen Project a Series of LF Projects, LLC"},{"location":"governance/copyright-notices/","text":"Ownership of Copyrights in Janssen Project Contributions # When source code, documentation and other content is contributed to the Janssen Project, the copyrights in those contributions remain owned by the original copyright holders. The copyrights are not assigned to the Janssen Project. Instead, they are licensed for distribution as part of the project. Whether a project uses a DCO or a CLA, the original copyright holders retain their copyrights. Copyright Notices # The Janssen Project does not require or recommend that every contributor include their copyright notice in contributed files. See below for more details on why not. Instead, we recommend using a more general statement in a form similar to the following: Copyright The Janssen Project Authors. Copyright The Janssen Project Contributors. Copyright Contributors to the Janssen Project. These statements are intended to communicate the following: - the work is copyrighted; - the contributors of the code licensed it, but retain ownership of their copyrights; and - it was licensed for distribution as part of the named project. By using a common format, the project avoids having to deal with names of copyright holders, years or ranges of years, and variations on the (c) symbol. This aims to minimize the burden on developers and maintainers as well as redistributors of the code. What if I want my copyright notice included? # Please note that it is not wrong , and it is acceptable, if a contributor wishes to keep their own copyright notices on their contributions. The above is a recommended format for ease of use, but is not mandated by the Janssen Project. If you are contributing on behalf of your employer, you may wish to discuss with your legal department about whether they will require you to include a copyright notice identifying them as the copyright holder in contributions. What about Third Party Code? # If a file only contains code that originates from a third party source who didn't contribute it themselves, then you would not want to add the notices above. (In a similar vein, you wouldn't add a notice identifying you as the copyright holder either, if you didn't own it.) Just preserve the existing copyright and license notices as they are. If, however, you add copyrightable content to a pre-existing file from another project, then at that point you could add a copyright notice similar to the one above. Don't Change Someone Else's Notice without their Permission # You should not change or remove someone else's copyright notice unless they have expressly permitted you to do so. This includes third parties' notices in pre-existing code. Why not list every copyright holder? # There are several reasons why the Janssen Project doesn't require or recommend trying to list every copyright holder for contributions to every file: Copyright notices are not mandatory in order for the contributor to retain ownership of their copyright. Copyright notices are rarely kept up to date as a file evolves, resulting in inaccurate statements. Trying to keep notices up to date, or to correct notices that have become inaccurate, increases the burden on developers without tangible benefit. Developers and maintainers often do not want to have to worry about e.g. whether a minor contribution (such as a typo fix) means that a new copyright notice should be added. Adding many different copyright notices may increase the burden on downstream distributors, if their license compliance processes involve reproducing notices. The specific individual or legal entity that owns the copyright might not be known to the contributor; it could be you, your employer, or some other entity.","title":"Copyright-notice"},{"location":"governance/copyright-notices/#ownership-of-copyrights-in-janssen-project-contributions","text":"When source code, documentation and other content is contributed to the Janssen Project, the copyrights in those contributions remain owned by the original copyright holders. The copyrights are not assigned to the Janssen Project. Instead, they are licensed for distribution as part of the project. Whether a project uses a DCO or a CLA, the original copyright holders retain their copyrights.","title":"Ownership of Copyrights in Janssen Project Contributions"},{"location":"governance/copyright-notices/#copyright-notices","text":"The Janssen Project does not require or recommend that every contributor include their copyright notice in contributed files. See below for more details on why not. Instead, we recommend using a more general statement in a form similar to the following: Copyright The Janssen Project Authors. Copyright The Janssen Project Contributors. Copyright Contributors to the Janssen Project. These statements are intended to communicate the following: - the work is copyrighted; - the contributors of the code licensed it, but retain ownership of their copyrights; and - it was licensed for distribution as part of the named project. By using a common format, the project avoids having to deal with names of copyright holders, years or ranges of years, and variations on the (c) symbol. This aims to minimize the burden on developers and maintainers as well as redistributors of the code.","title":"Copyright Notices"},{"location":"governance/copyright-notices/#what-if-i-want-my-copyright-notice-included","text":"Please note that it is not wrong , and it is acceptable, if a contributor wishes to keep their own copyright notices on their contributions. The above is a recommended format for ease of use, but is not mandated by the Janssen Project. If you are contributing on behalf of your employer, you may wish to discuss with your legal department about whether they will require you to include a copyright notice identifying them as the copyright holder in contributions.","title":"What if I want my copyright notice included?"},{"location":"governance/copyright-notices/#what-about-third-party-code","text":"If a file only contains code that originates from a third party source who didn't contribute it themselves, then you would not want to add the notices above. (In a similar vein, you wouldn't add a notice identifying you as the copyright holder either, if you didn't own it.) Just preserve the existing copyright and license notices as they are. If, however, you add copyrightable content to a pre-existing file from another project, then at that point you could add a copyright notice similar to the one above.","title":"What about Third Party Code?"},{"location":"governance/copyright-notices/#dont-change-someone-elses-notice-without-their-permission","text":"You should not change or remove someone else's copyright notice unless they have expressly permitted you to do so. This includes third parties' notices in pre-existing code.","title":"Don't Change Someone Else's Notice without their Permission"},{"location":"governance/copyright-notices/#why-not-list-every-copyright-holder","text":"There are several reasons why the Janssen Project doesn't require or recommend trying to list every copyright holder for contributions to every file: Copyright notices are not mandatory in order for the contributor to retain ownership of their copyright. Copyright notices are rarely kept up to date as a file evolves, resulting in inaccurate statements. Trying to keep notices up to date, or to correct notices that have become inaccurate, increases the burden on developers without tangible benefit. Developers and maintainers often do not want to have to worry about e.g. whether a minor contribution (such as a typo fix) means that a new copyright notice should be added. Adding many different copyright notices may increase the burden on downstream distributors, if their license compliance processes involve reproducing notices. The specific individual or legal entity that owns the copyright might not be known to the contributor; it could be you, your employer, or some other entity.","title":"Why not list every copyright holder?"},{"location":"governance/triage/","text":"Janssen Triage Process and labels # Triage process is used to quickly screen and categorise new issues and PRs. Aim is to determine characteristics of new PRs/issues and take quick actions if possible. Triage process is a contineous process. As new issues/PRs come in, the community initiates discussions, add labels, ask for more details. This process does not wait for triage call or a meeting to be called. Community holds triage calls at a regular cadence. Triage calls are mainly utilised to discuss issue/PR where concensus is not yet reached and to pick up anything which is not yet triaged. It is encouraged to complete triage outside of triage call to improve velocity. Stages in triage process: # Name Description Needs triage When a new issue or PR is created, it is automatically labeled as needs-triage Ready for triage For all issues/PRs with needs-triage label, Maintainers/committers will assign a suitable active community member as owner to start evaluating issue/PR . Owner and community will evaluate merit and characteristics of issue/PR asynchronously and assign approapriate labels . When owner believes that sufficient details have been added and there is concensus, the owner would remove needs-triage label and apply label ready-for-triage . Triaged All issues/PRs with label ready-for-triage will be reviewed by core members of the community who have permission to add triaged label. Reviewer reviews issue/PR to check if the issue/PR is fully triaged and can be added to backlog without discussion on triage call. At this point, label triaged is added and label ready-for-triage is removed. We expect most of the isseus and PRs will be able to follow above path and quickly move out of triage process without waiting for triage call. Issues/PRs which still doesn't have triaged label, or has needs-discussion label, will be discussed during triage call. Labels # Github labels help us annotate issues/PRs with additional data. Janssen community uses labels, as detailed below, to communicate information and help making decisions about issues/PRs. Communication labels # These labels communicate status of current triage process for an issue/PR or indicate where community contribution is required. Most of communication labels would be replaced by other labels as triage process progresses and issue enters active development. For example, help wanted label would be removed once issue gets under active development and a community members takes ownership of the issue. Below is the list of labels which fall under this category: Label Indicates That needs-triage issue/PR needs triaging ready-for-triage that sufficient details has been added to the issue/PR in form of labels and is ready for triage review triaged Issue/PR is fully triaged needs-information Indicates that creator needs to add more information to issue/PR in order to be meaningfully triaged. When adding this label, also comment on the issue about what information is needed needs-discussion Indicates that issue needs discussion during triage meeting. When adding this label, also comment on the issue about what is it that demands discussion on this issue good first issue Indicates to the community that this issue suitable for first time contributor help wanted Indicates to the community that this issue has complexity which is suitable for contribution from any external contributor Metadata labels # These labels enrich issue/PR with metadata that will help during triage process and active development. These labels may not be removed from issue/PR, though value of labels may change as development progresses. For example, effort label may change from effort-3 to effort-8 as we understand issue in more detail. Below is the list of labels in this category: Label Indicates That Details comp-<module> Major Janssen components needing change in order to fix this issue/PR. For example, if this issue/PR would require change in files under fido2 module (under jans/fido2) , then apply comp-jans-fido2 label e.g comp-jans-auth-server , comp-jans-fido2 , area-<concern> Cross-cutting concerns involved in fixing this issue/PR. For example, if changes introduced by this issue/PR will need changes in documentation and need to be mentioned in release notes as well, then apply area-documentation , area-release-notes . area-CI should be applied when changes are required in artifacts relevent to automation, CI build infrastructure or release management process. An example of such artifact would be Github workflow scripts located under .github/workflows Labels available: area-documentation , area-release-notes , area-CI kind-bug Issue/PR is a bug in existing functionality kind-enhancement Issue/PR is an enhancement to an existing functionality kind-feature Issue/PR is new feature request kind-question Issue/PR is a question that can be addressed via pointers to documentation or user education kind-duplicate Issue/PR is a duplicate of existing issue/PR. Original issue should be mentioned in the comments using Duplicate of reply kind-dependencies Fix for Issue/PR pertains to external dependencies effort-1 Relative effort required for completion effort-2 Relative effort required for completion effort-3 Relative effort required for completion effort-5 Relative effort required for completion effort-8 Relative effort required for completion effort-13 Relative effort required for completion effort-21 Relative effort required for completion priority-0 An issue that causes a full outage, breakage, or major function unavailability for everyone, without any known workaround. The issue must be fixed immediately, taking precedence over all other work. Should receive updates at least once per day. priority-1 An issue that significantly impacts a large percentage of users; if there is a workaround it is partial or overly painful. The issue should be resolved before the next release. priority-2 The issue is important to a large percentage of users, with a workaround. Issues that are significantly ugly or painful (especially first-use or install-time issues). Issues with workarounds that would otherwise be P0 or P1. priority-3 An issue that is relevant to core functions, but does not impede progress. Important, but not urgent. priority-4 A relatively minor issue that is not relevant to core functions, or relates only to the attractiveness or pleasantness of use of the system. Good to have but not necessary changes/fixes. priority-5 The team acknowledges the request but (due to any number of reasons) does not plan to work on or accept contributions for this request. The issue remains open for discussion. Bot labeling methodology # The following labels are automatically assigned to Issues and PRs in GitHub following the schema provided in this file . | Label | Method | |---------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | comp-<module> | The bot will detect from the title the component between the parentheses. feat(jans-auth-server): detect will result in the label comp-jans-auth-server added to the issue or PR. In a PR these labels are also detected by modified files path | | area-<concern> | The bot will detect from the title the area appropriate. ci: adding something new to our ci will result in the label area-CI added to the issue or PR. In a PR these labels are also detected by modified files path. | | kind-bug | The bot will detect this from the conventional commit written title | | kind-enhancement | The bot will detect this from the conventional commit written title | | kind-feature | The bot will detect this from the conventional commit written title | | kind-question | Issue/PR is a question that can be addressed via pointers to documentation or user education | | kind-dependencies | The bot will detect this from the conventional commit written title |","title":"Triage"},{"location":"governance/triage/#janssen-triage-process-and-labels","text":"Triage process is used to quickly screen and categorise new issues and PRs. Aim is to determine characteristics of new PRs/issues and take quick actions if possible. Triage process is a contineous process. As new issues/PRs come in, the community initiates discussions, add labels, ask for more details. This process does not wait for triage call or a meeting to be called. Community holds triage calls at a regular cadence. Triage calls are mainly utilised to discuss issue/PR where concensus is not yet reached and to pick up anything which is not yet triaged. It is encouraged to complete triage outside of triage call to improve velocity.","title":"Janssen Triage Process and labels"},{"location":"governance/triage/#stages-in-triage-process","text":"Name Description Needs triage When a new issue or PR is created, it is automatically labeled as needs-triage Ready for triage For all issues/PRs with needs-triage label, Maintainers/committers will assign a suitable active community member as owner to start evaluating issue/PR . Owner and community will evaluate merit and characteristics of issue/PR asynchronously and assign approapriate labels . When owner believes that sufficient details have been added and there is concensus, the owner would remove needs-triage label and apply label ready-for-triage . Triaged All issues/PRs with label ready-for-triage will be reviewed by core members of the community who have permission to add triaged label. Reviewer reviews issue/PR to check if the issue/PR is fully triaged and can be added to backlog without discussion on triage call. At this point, label triaged is added and label ready-for-triage is removed. We expect most of the isseus and PRs will be able to follow above path and quickly move out of triage process without waiting for triage call. Issues/PRs which still doesn't have triaged label, or has needs-discussion label, will be discussed during triage call.","title":"Stages in triage process:"},{"location":"governance/triage/#labels","text":"Github labels help us annotate issues/PRs with additional data. Janssen community uses labels, as detailed below, to communicate information and help making decisions about issues/PRs.","title":"Labels"},{"location":"governance/triage/#communication-labels","text":"These labels communicate status of current triage process for an issue/PR or indicate where community contribution is required. Most of communication labels would be replaced by other labels as triage process progresses and issue enters active development. For example, help wanted label would be removed once issue gets under active development and a community members takes ownership of the issue. Below is the list of labels which fall under this category: Label Indicates That needs-triage issue/PR needs triaging ready-for-triage that sufficient details has been added to the issue/PR in form of labels and is ready for triage review triaged Issue/PR is fully triaged needs-information Indicates that creator needs to add more information to issue/PR in order to be meaningfully triaged. When adding this label, also comment on the issue about what information is needed needs-discussion Indicates that issue needs discussion during triage meeting. When adding this label, also comment on the issue about what is it that demands discussion on this issue good first issue Indicates to the community that this issue suitable for first time contributor help wanted Indicates to the community that this issue has complexity which is suitable for contribution from any external contributor","title":"Communication labels"},{"location":"governance/triage/#metadata-labels","text":"These labels enrich issue/PR with metadata that will help during triage process and active development. These labels may not be removed from issue/PR, though value of labels may change as development progresses. For example, effort label may change from effort-3 to effort-8 as we understand issue in more detail. Below is the list of labels in this category: Label Indicates That Details comp-<module> Major Janssen components needing change in order to fix this issue/PR. For example, if this issue/PR would require change in files under fido2 module (under jans/fido2) , then apply comp-jans-fido2 label e.g comp-jans-auth-server , comp-jans-fido2 , area-<concern> Cross-cutting concerns involved in fixing this issue/PR. For example, if changes introduced by this issue/PR will need changes in documentation and need to be mentioned in release notes as well, then apply area-documentation , area-release-notes . area-CI should be applied when changes are required in artifacts relevent to automation, CI build infrastructure or release management process. An example of such artifact would be Github workflow scripts located under .github/workflows Labels available: area-documentation , area-release-notes , area-CI kind-bug Issue/PR is a bug in existing functionality kind-enhancement Issue/PR is an enhancement to an existing functionality kind-feature Issue/PR is new feature request kind-question Issue/PR is a question that can be addressed via pointers to documentation or user education kind-duplicate Issue/PR is a duplicate of existing issue/PR. Original issue should be mentioned in the comments using Duplicate of reply kind-dependencies Fix for Issue/PR pertains to external dependencies effort-1 Relative effort required for completion effort-2 Relative effort required for completion effort-3 Relative effort required for completion effort-5 Relative effort required for completion effort-8 Relative effort required for completion effort-13 Relative effort required for completion effort-21 Relative effort required for completion priority-0 An issue that causes a full outage, breakage, or major function unavailability for everyone, without any known workaround. The issue must be fixed immediately, taking precedence over all other work. Should receive updates at least once per day. priority-1 An issue that significantly impacts a large percentage of users; if there is a workaround it is partial or overly painful. The issue should be resolved before the next release. priority-2 The issue is important to a large percentage of users, with a workaround. Issues that are significantly ugly or painful (especially first-use or install-time issues). Issues with workarounds that would otherwise be P0 or P1. priority-3 An issue that is relevant to core functions, but does not impede progress. Important, but not urgent. priority-4 A relatively minor issue that is not relevant to core functions, or relates only to the attractiveness or pleasantness of use of the system. Good to have but not necessary changes/fixes. priority-5 The team acknowledges the request but (due to any number of reasons) does not plan to work on or accept contributions for this request. The issue remains open for discussion.","title":"Metadata labels"},{"location":"governance/triage/#bot-labeling-methodology","text":"The following labels are automatically assigned to Issues and PRs in GitHub following the schema provided in this file . | Label | Method | |---------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | comp-<module> | The bot will detect from the title the component between the parentheses. feat(jans-auth-server): detect will result in the label comp-jans-auth-server added to the issue or PR. In a PR these labels are also detected by modified files path | | area-<concern> | The bot will detect from the title the area appropriate. ci: adding something new to our ci will result in the label area-CI added to the issue or PR. In a PR these labels are also detected by modified files path. | | kind-bug | The bot will detect this from the conventional commit written title | | kind-enhancement | The bot will detect this from the conventional commit written title | | kind-feature | The bot will detect this from the conventional commit written title | | kind-question | Issue/PR is a question that can be addressed via pointers to documentation or user education | | kind-dependencies | The bot will detect this from the conventional commit written title |","title":"Bot labeling methodology"},{"location":"script-catalog/","text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"script-catalog/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"script-catalog/application_session/sample-script/","text":"This is a placeholder","title":"Application Session"},{"location":"script-catalog/cache_refresh/sample-script/","text":"This is a placeholder","title":"Cache Refresh"},{"location":"script-catalog/ciba/end-user-notification/","text":"This is a placeholder","title":"CIBA End User"},{"location":"script-catalog/client_registration/OpenBanking/client-registration/","text":"Client Registration Interception Script # Overview # The Janssen Authorization Server uses interception scripts to enable you to customize the behavior of the OpenID Provider. During client registration, custom interception scripts can be used to implement custom business logic. For instance, data could be validated, extra client claims could be populated, scopes could be modified, or APIs could be called to determine whether the client should get registered at all. Configuration Prerequisites # A Janssen Authorization Server installation Client Registration script - included in the default Janssen OpenBanking distribution Setting configuration parameters Setting third party library (Jose4j) in classpath Adding the custom script # To add or update custom scripts, you can use either jans-cli or curl. jans-cli in interactive mode, option 13 enables you manage custom scripts. For more info, see the docs . jans-cli in command line argument mode is more conducive to scripting and automation. To display the available operations for custom scripts, use config-cli.py --info CustomScripts. See the docs for more info. To use curl see these docs Note You can normally find jans-cli.py in the /opt/jans/jans-cli/ folder. Configuring keys, certificates and SSA validation endpoints # The client registration custom script will use configuration parameters like SSA Validation endpoint, JWKS endpoints, keystores, trust stores etc which are listed in the tabular format below. Property Description Example clientScopes Used in SSA validation ASPSPReadAccess AuthoritiesReadAccess TPPReadAccess keyId Used in SSA Validation, kid used while encoding a JWT sent to token URL XkwIzWy44xWSlcWnMiEc8iq9s2G signingCert Used in SSA Validation, location of cert used for signing /etc/certs/obieDir/obsigning-axV5umCvTMBMjPwjFQgEvb_NO_UPLOAD.key signingKey Used in SSA Validation, location of key used for signing /etc/certs/obieDir/obsigning-axV5umCvTMBMjPwjFQgEvb_NO_UPLOAD.key trustKeyStore Used in SSA Validation, Trust store /etc/certs/obieDir/ob_transport_root.p12 trustKeyStorePassword Used in SSA Validation, Trust store Password, currently plaintext, but should be encrypted abcdefg transportKeyStore Used in SSA validation, a .p12 file presented by AS to the token URL /etc/certs/obieDir/axv5umcvtmbmjpwjfqgevb_openbanking_pre_production_issuing_ca_.p12 transportKeyStorePassword Used in SSA validation abcdefg tokenUrl Used in SSA validation to obtain token to query SCIM endpoint. Details here - https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1150124033/Directory+2.0+Technical+Overview+v1.5#Directory2.0TechnicalOverviewv1.5-ManageDirectoryInformation https://matls-sso.openbankingtest.org.uk/as/token.oauth2 tppUrl Used in SSA validation to query SCIM endpoint. Details here - https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1150124033/Directory+2.0+Technical+Overview+v1.5#Directory2.0TechnicalOverviewv1.5-ManageDirectoryInformation https://matls-api.openbankingtest.org.uk/scim/v2/OBThirdPartyProviders/ jwks_endpoint Used for signing software statement and request object for DCR https://keystore.openbankingtest.org.uk/keystore/openbanking.jwks Steps to add / edit / delete configuration parameters: Place a JSON file containing the above configuration parameters and the custom script in a folder. From this folder, run the following command: python3 jans-cli-linux-amd64.pyz --operation-id post-config-scripts --data /clientregistration.json \\ --cert-file jans_cli_client.crt --key-file jans_cli_client.key Adding Jose4j library in classpath # This script uses jose4j library for JavaScript object signing and encryption. If using the VM distribution: Download the jose4j-0.7.7.jar and Place in /opt/jans/jetty/jans-auth/custom/libs/ Change your current working directory to /opt/jans/jetty/jans-auth/webapps and edit jans-auth.xml to add this line: <Set name=\"extraClasspath\">/opt/jans/jetty/jans-auth/custom/libs/jose4j-0.7.7.jar</Set> Restart the Auth Server, systemctl restart jans-auth If using the cloud-native distribution: Download the jose4j-0.7.7.jar Create a ConfigMap containing the jar. kubectl create cm jose4j -n <gluu-namespace> --from-file = jose4j-0.7.7.jar Add the volume and volume mount to auth-server in your override.yaml helm configuration. volumes : - name : jose4j configMap : name : jose4j volumeMounts : - name : jose4j mountPath : \"/opt/jans/jetty/jans-auth/custom/libs/jose4j-0.7.7.jar\" subPath : jose4j-0.7.7.jar Run helm upgrade. helm upgrade gluu gluu/gluu -n <gluu-namespace> --version = 5 .0.0 -f override.yaml Understanding the Script # The Client Registration script is available The following are the mandatory functions which need to be implemented in order to perform registration: Create a class of the type ClientRegistrationType and initialize the script class ClientRegistration ( ClientRegistrationType ): def __init__ ( self , currentTimeMillis ): self . currentTimeMillis = currentTimeMillis def init ( self , customScript , configurationAttributes ): print \"Client registration. Initialization\" if ( not configurationAttributes . containsKey ( \"param\" )): print \"Client registration. Initialization. Property keyId is not specified\" return False else : self . param = configurationAttributes . get ( \"param\" ) . getValue2 () print \"Client registration. Initialized successfully\" return True def destroy ( self , configurationAttributes ): print \"Client registration. Destroy\" print \"Client registration. Destroyed successfully\" return True The createClient method contains the main business logic, here the context refers to io.jans.as.server.service.external.context.DynamicClientRegistrationContext. It has several useful methods for SSA validations and options to create and throw custom exception (http status, error and error description): def createClient ( self , context ): # 1. obtain client id. certProperty contains the httpRequest.getHeader(\"X-ClientCert\"), inshort client certificate passed to the /register endpoint cert = CertUtils . x509CertificateFromPem ( configurationAttributes . get ( \"certProperty\" ) . getValue1 ()) cn = CertUtils . getCN ( cert ) # 2. validate SSA valid = self . validateSoftwareStatement ( cn ) if valid == False : print \"Invalid software statement\" return False print \"Client registration. cn: \" + cn client . setDn ( \"inum=\" + cn + \",ou=clients,o=jans\" ) # 3. Used to indicate that only this is a trusted client (note that consent is managed by Internal OP / consent app) client . setTrustedClient ( True ) client . setPersistClientAuthorizations ( False ) # 4. in order to run introspection script, assign it to run for this client client . setAccessTokenAsJwt ( True ) client . getAttributes () . setRunIntrospectionScriptBeforeJwtCreation ( True ) dnOfIntrospectionScript = \"inum=CABA-2222,ou=scripts,o=jans\" client . getAttributes () . getIntrospectionScripts () . add ( dnOfIntrospectionScript ) # 5. mandatory fields which should be set in the script client . setClientId ( cn ) client . setJwksUri ( Jwt . parse ( registerRequest . getSoftwareStatement ()) . getClaims () . getClaimAsString ( \"org_jwks_endpoint\" )) return True Miscellaneous mandatory functions Used for signing the software statement: def getSoftwareStatementJwks ( self , context ): return JwtUtil . getJSONWebKeys ( self . jwks_endpoint ) . toString () HMAC not applicable, return an empty string: def getDcrHmacSecret ( self , context ): return \"\" Used for signing the request object (DCR): def getDcrJwks ( self , context ): return JwtUtil . getJSONWebKeys ( self . jwks_endpoint ) . toString () An important method of DCR flow to update the client details The updateClient method This updateClient method is called when the PUT method is called on registration endpoint to update client details. This method should return True for successful update and to reject any update request this method should return False when the request fulfills the condition to reject it: def updateClient ( self , context ): print \"Client registration. UpdateClient method\" return True","title":"Client Registration Interception Script"},{"location":"script-catalog/client_registration/OpenBanking/client-registration/#client-registration-interception-script","text":"","title":"Client Registration Interception Script"},{"location":"script-catalog/client_registration/OpenBanking/client-registration/#overview","text":"The Janssen Authorization Server uses interception scripts to enable you to customize the behavior of the OpenID Provider. During client registration, custom interception scripts can be used to implement custom business logic. For instance, data could be validated, extra client claims could be populated, scopes could be modified, or APIs could be called to determine whether the client should get registered at all.","title":"Overview"},{"location":"script-catalog/client_registration/OpenBanking/client-registration/#configuration-prerequisites","text":"A Janssen Authorization Server installation Client Registration script - included in the default Janssen OpenBanking distribution Setting configuration parameters Setting third party library (Jose4j) in classpath","title":"Configuration Prerequisites"},{"location":"script-catalog/client_registration/OpenBanking/client-registration/#adding-the-custom-script","text":"To add or update custom scripts, you can use either jans-cli or curl. jans-cli in interactive mode, option 13 enables you manage custom scripts. For more info, see the docs . jans-cli in command line argument mode is more conducive to scripting and automation. To display the available operations for custom scripts, use config-cli.py --info CustomScripts. See the docs for more info. To use curl see these docs Note You can normally find jans-cli.py in the /opt/jans/jans-cli/ folder.","title":"Adding the custom script"},{"location":"script-catalog/client_registration/OpenBanking/client-registration/#configuring-keys-certificates-and-ssa-validation-endpoints","text":"The client registration custom script will use configuration parameters like SSA Validation endpoint, JWKS endpoints, keystores, trust stores etc which are listed in the tabular format below. Property Description Example clientScopes Used in SSA validation ASPSPReadAccess AuthoritiesReadAccess TPPReadAccess keyId Used in SSA Validation, kid used while encoding a JWT sent to token URL XkwIzWy44xWSlcWnMiEc8iq9s2G signingCert Used in SSA Validation, location of cert used for signing /etc/certs/obieDir/obsigning-axV5umCvTMBMjPwjFQgEvb_NO_UPLOAD.key signingKey Used in SSA Validation, location of key used for signing /etc/certs/obieDir/obsigning-axV5umCvTMBMjPwjFQgEvb_NO_UPLOAD.key trustKeyStore Used in SSA Validation, Trust store /etc/certs/obieDir/ob_transport_root.p12 trustKeyStorePassword Used in SSA Validation, Trust store Password, currently plaintext, but should be encrypted abcdefg transportKeyStore Used in SSA validation, a .p12 file presented by AS to the token URL /etc/certs/obieDir/axv5umcvtmbmjpwjfqgevb_openbanking_pre_production_issuing_ca_.p12 transportKeyStorePassword Used in SSA validation abcdefg tokenUrl Used in SSA validation to obtain token to query SCIM endpoint. Details here - https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1150124033/Directory+2.0+Technical+Overview+v1.5#Directory2.0TechnicalOverviewv1.5-ManageDirectoryInformation https://matls-sso.openbankingtest.org.uk/as/token.oauth2 tppUrl Used in SSA validation to query SCIM endpoint. Details here - https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1150124033/Directory+2.0+Technical+Overview+v1.5#Directory2.0TechnicalOverviewv1.5-ManageDirectoryInformation https://matls-api.openbankingtest.org.uk/scim/v2/OBThirdPartyProviders/ jwks_endpoint Used for signing software statement and request object for DCR https://keystore.openbankingtest.org.uk/keystore/openbanking.jwks Steps to add / edit / delete configuration parameters: Place a JSON file containing the above configuration parameters and the custom script in a folder. From this folder, run the following command: python3 jans-cli-linux-amd64.pyz --operation-id post-config-scripts --data /clientregistration.json \\ --cert-file jans_cli_client.crt --key-file jans_cli_client.key","title":"Configuring keys, certificates and SSA validation endpoints"},{"location":"script-catalog/client_registration/OpenBanking/client-registration/#adding-jose4j-library-in-classpath","text":"This script uses jose4j library for JavaScript object signing and encryption. If using the VM distribution: Download the jose4j-0.7.7.jar and Place in /opt/jans/jetty/jans-auth/custom/libs/ Change your current working directory to /opt/jans/jetty/jans-auth/webapps and edit jans-auth.xml to add this line: <Set name=\"extraClasspath\">/opt/jans/jetty/jans-auth/custom/libs/jose4j-0.7.7.jar</Set> Restart the Auth Server, systemctl restart jans-auth If using the cloud-native distribution: Download the jose4j-0.7.7.jar Create a ConfigMap containing the jar. kubectl create cm jose4j -n <gluu-namespace> --from-file = jose4j-0.7.7.jar Add the volume and volume mount to auth-server in your override.yaml helm configuration. volumes : - name : jose4j configMap : name : jose4j volumeMounts : - name : jose4j mountPath : \"/opt/jans/jetty/jans-auth/custom/libs/jose4j-0.7.7.jar\" subPath : jose4j-0.7.7.jar Run helm upgrade. helm upgrade gluu gluu/gluu -n <gluu-namespace> --version = 5 .0.0 -f override.yaml","title":"Adding Jose4j library in classpath"},{"location":"script-catalog/client_registration/OpenBanking/client-registration/#understanding-the-script","text":"The Client Registration script is available The following are the mandatory functions which need to be implemented in order to perform registration: Create a class of the type ClientRegistrationType and initialize the script class ClientRegistration ( ClientRegistrationType ): def __init__ ( self , currentTimeMillis ): self . currentTimeMillis = currentTimeMillis def init ( self , customScript , configurationAttributes ): print \"Client registration. Initialization\" if ( not configurationAttributes . containsKey ( \"param\" )): print \"Client registration. Initialization. Property keyId is not specified\" return False else : self . param = configurationAttributes . get ( \"param\" ) . getValue2 () print \"Client registration. Initialized successfully\" return True def destroy ( self , configurationAttributes ): print \"Client registration. Destroy\" print \"Client registration. Destroyed successfully\" return True The createClient method contains the main business logic, here the context refers to io.jans.as.server.service.external.context.DynamicClientRegistrationContext. It has several useful methods for SSA validations and options to create and throw custom exception (http status, error and error description): def createClient ( self , context ): # 1. obtain client id. certProperty contains the httpRequest.getHeader(\"X-ClientCert\"), inshort client certificate passed to the /register endpoint cert = CertUtils . x509CertificateFromPem ( configurationAttributes . get ( \"certProperty\" ) . getValue1 ()) cn = CertUtils . getCN ( cert ) # 2. validate SSA valid = self . validateSoftwareStatement ( cn ) if valid == False : print \"Invalid software statement\" return False print \"Client registration. cn: \" + cn client . setDn ( \"inum=\" + cn + \",ou=clients,o=jans\" ) # 3. Used to indicate that only this is a trusted client (note that consent is managed by Internal OP / consent app) client . setTrustedClient ( True ) client . setPersistClientAuthorizations ( False ) # 4. in order to run introspection script, assign it to run for this client client . setAccessTokenAsJwt ( True ) client . getAttributes () . setRunIntrospectionScriptBeforeJwtCreation ( True ) dnOfIntrospectionScript = \"inum=CABA-2222,ou=scripts,o=jans\" client . getAttributes () . getIntrospectionScripts () . add ( dnOfIntrospectionScript ) # 5. mandatory fields which should be set in the script client . setClientId ( cn ) client . setJwksUri ( Jwt . parse ( registerRequest . getSoftwareStatement ()) . getClaims () . getClaimAsString ( \"org_jwks_endpoint\" )) return True Miscellaneous mandatory functions Used for signing the software statement: def getSoftwareStatementJwks ( self , context ): return JwtUtil . getJSONWebKeys ( self . jwks_endpoint ) . toString () HMAC not applicable, return an empty string: def getDcrHmacSecret ( self , context ): return \"\" Used for signing the request object (DCR): def getDcrJwks ( self , context ): return JwtUtil . getJSONWebKeys ( self . jwks_endpoint ) . toString () An important method of DCR flow to update the client details The updateClient method This updateClient method is called when the PUT method is called on registration endpoint to update client details. This method should return True for successful update and to reject any update request this method should return False when the request fulfills the condition to reject it: def updateClient ( self , context ): print \"Client registration. UpdateClient method\" return True","title":"Understanding the Script"},{"location":"script-catalog/client_registration/sample-script/","text":"This is a placeholder","title":"Client Registration"},{"location":"script-catalog/config_api/config-api-interception/","text":"This is a placeholder","title":"Config API Interception"},{"location":"script-catalog/consent_gathering/sample-script/","text":"This is a placeholder","title":"Consent Gathering"},{"location":"script-catalog/discovery/discovery/","text":"Discovery Script Guide # Overview # The Authorization Server Metadata spec RFC8414 (also known as OAuth Discovery) defines a format for clients to use to look up the information needed to interact with a particular OAuth server. This includes things like:- - finding the authorization endpoint, - listing the supported scopes and client authentication mechanisms. The \"OpenID Connect Discovery 1.0\" defines the metadata in such a way that is compatible with OpenID Connect Discovery while being applicable to a wider set of OAuth 2.0 use cases. This is intentionally parallel to the way that \"OAuth 2.0 Dynamic Client Registration Protocol\" RFC7591 defines the dynamic client registration mechanisms \"OpenID Connect Dynamic Client Registration 1.0 OpenID.Registration so that is compatible with it. The metadata for an authorization server is retrieved from a know location as a JSON object RFC8259 , which defines its endpoint locations and authorization server capabilities. This metadata can be passed either:- - in a self-asserted fashion from the server origin via HTTPS - or as a set of signed metadata values represented as claims in a JSON Web Token JWT . In the JWT case, the issuer is vouching for the validity of the data coming from the authorization server. This is analogous to the role that the Software Statement plays in OAuth Dynamic Client Registration RFC7591. Note: The means by which the client chooses an authorization server is out of scope. In some cases, the issuer identifier may be manually configured into the client. In other cases, it may be dynamically discovered, for instance, through the use of WebFinger . Discovery script allows to modify response of OpenID Connect Discovery RFC8414 . Methods # The discovery interception script extends the base script type with the methods - Method Method description def init(self, customScript, configurationAttributes) Inherited Method This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc def destroy(self, configurationAttributes) Inherited Method This method is called once to destroy events. It can be used to free resource and objects created in the init() method def getApiVersion(self, configurationAttributes, customScript) Inherited Method The getApiVersion method allows API changes in order to do transparent migration from an old script to a new API. Only include the customScript variable if the value for getApiVersion is greater than 10 def modifyResponse(self, responseAsJsonObject, context) This method is called after discovery response is ready. This method can modify discovery response. responseAsJsonObject is org.codehaus.jettison.json.JSONObject context is io.jans.as.server.model.common.ExecutionContext The configurationAttributes parameter is java.util.Map<String, SimpleCustomProperty> . configurationAttributes = new HashMap < String , SimpleCustomProperty > () ; configurationAttributes . put ( \"Location Type\" , new SimpleCustomProperty ( \"location_type\" , \"ldap\" , \"Storage Location for the script\" )) ; Snippet # # Returns boolean , true - apply discovery method , false - ignore it . # This method is called after discovery response is ready . This method can modify discovery response . # Note : # responseAsJsonObject - is org . codehaus . jettison . json . JSONObject , you can use any method to manipulate json # context is reference of io . jans . as . server . model . common . ExecutionContext ( in https : // github . com / JanssenProject project ) def modifyResponse ( self , responseAsJsonObject , context ) : responseAsJsonObject . accumulate ( \"key_from_script\" , \"value_from_script\" ) return True Common Use Cases # Script Type: Python # Add a value (Client IP Address) and Filter out a value from Discovery Response # The sample code snippet shows how to add and filter out a value from Discovery Response. Script Type: Java # Add a value (Client IP Address) and Filter out a value from Discovery Response # The sample code snippet shows how to add and filter out a value from Discovery Response.","title":"Discovery"},{"location":"script-catalog/discovery/discovery/#discovery-script-guide","text":"","title":"Discovery Script Guide"},{"location":"script-catalog/discovery/discovery/#overview","text":"The Authorization Server Metadata spec RFC8414 (also known as OAuth Discovery) defines a format for clients to use to look up the information needed to interact with a particular OAuth server. This includes things like:- - finding the authorization endpoint, - listing the supported scopes and client authentication mechanisms. The \"OpenID Connect Discovery 1.0\" defines the metadata in such a way that is compatible with OpenID Connect Discovery while being applicable to a wider set of OAuth 2.0 use cases. This is intentionally parallel to the way that \"OAuth 2.0 Dynamic Client Registration Protocol\" RFC7591 defines the dynamic client registration mechanisms \"OpenID Connect Dynamic Client Registration 1.0 OpenID.Registration so that is compatible with it. The metadata for an authorization server is retrieved from a know location as a JSON object RFC8259 , which defines its endpoint locations and authorization server capabilities. This metadata can be passed either:- - in a self-asserted fashion from the server origin via HTTPS - or as a set of signed metadata values represented as claims in a JSON Web Token JWT . In the JWT case, the issuer is vouching for the validity of the data coming from the authorization server. This is analogous to the role that the Software Statement plays in OAuth Dynamic Client Registration RFC7591. Note: The means by which the client chooses an authorization server is out of scope. In some cases, the issuer identifier may be manually configured into the client. In other cases, it may be dynamically discovered, for instance, through the use of WebFinger . Discovery script allows to modify response of OpenID Connect Discovery RFC8414 .","title":"Overview"},{"location":"script-catalog/discovery/discovery/#methods","text":"The discovery interception script extends the base script type with the methods - Method Method description def init(self, customScript, configurationAttributes) Inherited Method This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc def destroy(self, configurationAttributes) Inherited Method This method is called once to destroy events. It can be used to free resource and objects created in the init() method def getApiVersion(self, configurationAttributes, customScript) Inherited Method The getApiVersion method allows API changes in order to do transparent migration from an old script to a new API. Only include the customScript variable if the value for getApiVersion is greater than 10 def modifyResponse(self, responseAsJsonObject, context) This method is called after discovery response is ready. This method can modify discovery response. responseAsJsonObject is org.codehaus.jettison.json.JSONObject context is io.jans.as.server.model.common.ExecutionContext The configurationAttributes parameter is java.util.Map<String, SimpleCustomProperty> . configurationAttributes = new HashMap < String , SimpleCustomProperty > () ; configurationAttributes . put ( \"Location Type\" , new SimpleCustomProperty ( \"location_type\" , \"ldap\" , \"Storage Location for the script\" )) ;","title":"Methods"},{"location":"script-catalog/discovery/discovery/#snippet","text":"# Returns boolean , true - apply discovery method , false - ignore it . # This method is called after discovery response is ready . This method can modify discovery response . # Note : # responseAsJsonObject - is org . codehaus . jettison . json . JSONObject , you can use any method to manipulate json # context is reference of io . jans . as . server . model . common . ExecutionContext ( in https : // github . com / JanssenProject project ) def modifyResponse ( self , responseAsJsonObject , context ) : responseAsJsonObject . accumulate ( \"key_from_script\" , \"value_from_script\" ) return True","title":"Snippet"},{"location":"script-catalog/discovery/discovery/#common-use-cases","text":"","title":"Common Use Cases"},{"location":"script-catalog/discovery/discovery/#script-type-python","text":"","title":"Script Type: Python"},{"location":"script-catalog/discovery/discovery/#add-a-value-client-ip-address-and-filter-out-a-value-from-discovery-response","text":"The sample code snippet shows how to add and filter out a value from Discovery Response.","title":"Add a value (Client IP Address) and Filter out a value from Discovery Response"},{"location":"script-catalog/discovery/discovery/#script-type-java","text":"","title":"Script Type: Java"},{"location":"script-catalog/discovery/discovery/#add-a-value-client-ip-address-and-filter-out-a-value-from-discovery-response_1","text":"The sample code snippet shows how to add and filter out a value from Discovery Response.","title":"Add a value (Client IP Address) and Filter out a value from Discovery Response"},{"location":"script-catalog/dynamic_scope/","text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"script-catalog/dynamic_scope/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"script-catalog/dynamic_scope/dynamic-permission/","text":"This is a placeholder","title":"Dynamic Permission"},{"location":"script-catalog/dynamic_scope/memberof-attribute/","text":"This is a placeholder","title":"memberof Attribute"},{"location":"script-catalog/dynamic_scope/org-name/","text":"This is a placeholder","title":"Organization Name Scope"},{"location":"script-catalog/dynamic_scope/session-parameter/","text":"This is a placeholder","title":"Session Scope"},{"location":"script-catalog/dynamic_scope/work-phone/","text":"This is a placeholder","title":"Work Phone Scope"},{"location":"script-catalog/end_session/end-session/","text":"This is a placeholder","title":"End Session"},{"location":"script-catalog/id_generator/sample-script/","text":"This is a placeholder","title":"ID Generator"},{"location":"script-catalog/idp/sample-script/","text":"This is a placeholder","title":"IDP Extension"},{"location":"script-catalog/introspection/","text":"Introspection Script Guide # Overview # OAuth reference tokens don't convey any information. They are by their very nature, unguessable strings that meet the prescribed OAuth security guidelines for lack of order or predictability (entropy). However, there is still a large amount of data that may be attached to a token, such as:- - its current validity, - approved scopes, - information about the context in which the token was issued. Access token data is essential for the resource server to evaluate policies that determine whether or not to allow the request. Token introspection therefore enables a client to trade an OAuth reference token for its JSON equivalent by making a request per OAuth 2.0 Token Introspection Guide - (RFC 7662) . The use of Introspection scripts allows the ability to modify the response of Introspection Endpoint spec and provide additional information in the JSON response. Interface # In order to be run and Introspection script should be associated with an OpenID Client (used for obtaining the token). Another way of doing this is by setting the introspectionScriptBackwardCompatibility global Auth Server JSON Configuration Property to true. In this case the Auth Server will run all scripts and will do so by ignoring client configuration. Methods # The introspection interception script extends the base script type with the methods - Method Method description def init(self, customScript, configurationAttributes) Inherited Method This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc def destroy(self, configurationAttributes) Inherited Method This method is called once to destroy events. It can be used to free resource and objects created in the init() method def getApiVersion(self, configurationAttributes, customScript) Inherited Method The getApiVersion method allows API changes in order to do transparent migration from an old script to a new API. NOTE : - Only include the customScript variable if the value for getApiVersion is greater than 10 def modifyResponse(self, responseAsJsonObject, context) This method is called after the introspection response is ready. This method can modify the introspection response. responseAsJsonObject is org.codehaus.jettison.json.JSONObject context is io.jans.as.service.external.context.ExternalIntrospectionContext The configurationAttributes parameter is java.util.Map<String, SimpleCustomProperty> . configurationAttributes = new HashMap < String , SimpleCustomProperty > () ; configurationAttributes . put ( \"Location Type\" , new SimpleCustomProperty ( \"location_type\" , \"ldap\" , \"Storage Location for the script\" )) ; Snippet # # Returns boolean , true - apply introspection method , false - ignore it . # This method is called after introspection response is ready . This method can modify the introspection response . # Note : # responseAsJsonObject - is org . codehaus . jettison . json . JSONObject , you can use any method to manipulate json # context is reference of io . jans . as . server . service . external . context . ExternalIntrospectionContext ( in https : // github . com / JanssenProject project ) def modifyResponse ( self , responseAsJsonObject , context ) : responseAsJsonObject . accumulate ( \"key_from_script\" , \"value_from_script\" ) return True Note - The preferred way to modify an access token is with the Update Token script. It is also possible to run an introspection script during access_token creation as JWT. It can be controlled by run_introspection_script_before_access_token_as_jwt_creation_and_include_claims OpenID Client property which is set to false by default. If OpenID Client properties run_introspection_script_before_access_token_as_jwt_creation_and_include_claims and access_token_as_jwt are set to true then an introspection script will be run before JWT ( access_token ) is created and all JSON values will be transfered to JWT. Also context inside the script has additional method which allows you to cancel transfering of claims if needed context.setTranferIntrospectionPropertiesIntoJwtClaims(false) Common Use Cases # Script Type: Python # Retrieve Grant, Session and User Details from Access Token # The sample code snippet shows how to work backwards from an AccessToken to Grant, Session and User information. Script Type: Java # Retrieve Grant, Session and User Details from Access Token # The sample code snippet shows how to work backwards from an AccessToken to Grant, Session and User information.","title":"Introspection Script Guide"},{"location":"script-catalog/introspection/#introspection-script-guide","text":"","title":"Introspection Script Guide"},{"location":"script-catalog/introspection/#overview","text":"OAuth reference tokens don't convey any information. They are by their very nature, unguessable strings that meet the prescribed OAuth security guidelines for lack of order or predictability (entropy). However, there is still a large amount of data that may be attached to a token, such as:- - its current validity, - approved scopes, - information about the context in which the token was issued. Access token data is essential for the resource server to evaluate policies that determine whether or not to allow the request. Token introspection therefore enables a client to trade an OAuth reference token for its JSON equivalent by making a request per OAuth 2.0 Token Introspection Guide - (RFC 7662) . The use of Introspection scripts allows the ability to modify the response of Introspection Endpoint spec and provide additional information in the JSON response.","title":"Overview"},{"location":"script-catalog/introspection/#interface","text":"In order to be run and Introspection script should be associated with an OpenID Client (used for obtaining the token). Another way of doing this is by setting the introspectionScriptBackwardCompatibility global Auth Server JSON Configuration Property to true. In this case the Auth Server will run all scripts and will do so by ignoring client configuration.","title":"Interface"},{"location":"script-catalog/introspection/#methods","text":"The introspection interception script extends the base script type with the methods - Method Method description def init(self, customScript, configurationAttributes) Inherited Method This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc def destroy(self, configurationAttributes) Inherited Method This method is called once to destroy events. It can be used to free resource and objects created in the init() method def getApiVersion(self, configurationAttributes, customScript) Inherited Method The getApiVersion method allows API changes in order to do transparent migration from an old script to a new API. NOTE : - Only include the customScript variable if the value for getApiVersion is greater than 10 def modifyResponse(self, responseAsJsonObject, context) This method is called after the introspection response is ready. This method can modify the introspection response. responseAsJsonObject is org.codehaus.jettison.json.JSONObject context is io.jans.as.service.external.context.ExternalIntrospectionContext The configurationAttributes parameter is java.util.Map<String, SimpleCustomProperty> . configurationAttributes = new HashMap < String , SimpleCustomProperty > () ; configurationAttributes . put ( \"Location Type\" , new SimpleCustomProperty ( \"location_type\" , \"ldap\" , \"Storage Location for the script\" )) ;","title":"Methods"},{"location":"script-catalog/introspection/#snippet","text":"# Returns boolean , true - apply introspection method , false - ignore it . # This method is called after introspection response is ready . This method can modify the introspection response . # Note : # responseAsJsonObject - is org . codehaus . jettison . json . JSONObject , you can use any method to manipulate json # context is reference of io . jans . as . server . service . external . context . ExternalIntrospectionContext ( in https : // github . com / JanssenProject project ) def modifyResponse ( self , responseAsJsonObject , context ) : responseAsJsonObject . accumulate ( \"key_from_script\" , \"value_from_script\" ) return True Note - The preferred way to modify an access token is with the Update Token script. It is also possible to run an introspection script during access_token creation as JWT. It can be controlled by run_introspection_script_before_access_token_as_jwt_creation_and_include_claims OpenID Client property which is set to false by default. If OpenID Client properties run_introspection_script_before_access_token_as_jwt_creation_and_include_claims and access_token_as_jwt are set to true then an introspection script will be run before JWT ( access_token ) is created and all JSON values will be transfered to JWT. Also context inside the script has additional method which allows you to cancel transfering of claims if needed context.setTranferIntrospectionPropertiesIntoJwtClaims(false)","title":"Snippet"},{"location":"script-catalog/introspection/#common-use-cases","text":"","title":"Common Use Cases"},{"location":"script-catalog/introspection/#script-type-python","text":"","title":"Script Type: Python"},{"location":"script-catalog/introspection/#retrieve-grant-session-and-user-details-from-access-token","text":"The sample code snippet shows how to work backwards from an AccessToken to Grant, Session and User information.","title":"Retrieve Grant, Session and User Details from Access Token"},{"location":"script-catalog/introspection/#script-type-java","text":"","title":"Script Type: Java"},{"location":"script-catalog/introspection/#retrieve-grant-session-and-user-details-from-access-token_1","text":"The sample code snippet shows how to work backwards from an AccessToken to Grant, Session and User information.","title":"Retrieve Grant, Session and User Details from Access Token"},{"location":"script-catalog/introspection/introspection/","text":"This is a placeholder","title":"Introspection"},{"location":"script-catalog/introspection/introspection-custom-parameters/","text":"This is a placeholder","title":"Custom Parameters"},{"location":"script-catalog/introspection/introspection-role-based-scope/","text":"This is a placeholder","title":"Role Based Scope"},{"location":"script-catalog/persistence_extension/sample-script/","text":"This is a placeholder","title":"Persistence Extension"},{"location":"script-catalog/person_authentication/","text":"2FA authentication scripts # Jython files contained in the top level of this folder are already added as authentication scripts in your Janssen installation. Inside other directory you may find extra information about these scripts as well as additional (non curated) scripts that you may use as a guide to integrate third party authentication services or APIs with Janssen server.","title":"2FA authentication scripts"},{"location":"script-catalog/person_authentication/#2fa-authentication-scripts","text":"Jython files contained in the top level of this folder are already added as authentication scripts in your Janssen installation. Inside other directory you may find extra information about these scripts as well as additional (non curated) scripts that you may use as a guide to integrate third party authentication services or APIs with Janssen server.","title":"2FA authentication scripts"},{"location":"script-catalog/person_authentication/agama-bridge/","text":"This is a placeholder","title":"Agama Bridge"},{"location":"script-catalog/person_authentication/agama-external-authenticator/","text":"This is a placeholder","title":"Agama External Authenticator"},{"location":"script-catalog/person_authentication/basic-external-authenticator/","text":"This is a placeholder","title":"Basic External Authenticator"},{"location":"script-catalog/person_authentication/basic-lock-account-external-authenticator/","text":"This is a placeholder","title":"Basic Lock Account extn Authenticator"},{"location":"script-catalog/person_authentication/casa/","text":"This is a placeholder","title":"Casa"},{"location":"script-catalog/person_authentication/duo-external-authenticator/","text":"Integrating DUO's Universal Prompt as an authentication method in Janssen server # Duo Security is a SaaS authentication provider. This document will explain how to use Janssen's Duo interception script to configure the Janssen Server for a two-step authentication process with username and password as the first step, and Duo as the second step. The script invokes the Universal Prompt which is a redesign of Duo\u2019s traditional authentication prompt. Authentication flow # sequenceDiagram title Integrating DUO's Universal Prompt as an authentication method in Janssen server autonumber 1 RP->>Jans AS: Invoke /authorize endpoint Jans AS->>RP: Present Username password screen RP->>Jans AS: Submit credentials Jans AS->>DUO Security Service: Redirects login request to IDP loop n times - (multistep authentication) DUO Security Service->>RP: Present universal prompt screen RP->>DUO Security Service: Present credentials end DUO Security Service->>Jans AS: return state, code(duo_code) Jans AS->>Jans AS: check state Jans AS->>DUO Security Service: send code (duo_code) in exchange for token DUO Security Service ->> Jans AS: token Jans AS->>Jans AS: inspect token if (token.getAuth_result().getStatus() == success), \\nmark user as authenticated opt if new user Jans AS->>Jans AS: 9. Dynamic enrollment or registration end Jans AS->>RP: 10. write Jans session cookie Administrator prerequisites # Duo interception script (included in the default Janssen Server distribution); An account with Duo Security . User prerequisites # Users should download the DUO mobile app Configure Duo Account # Sign up for a Duo account. Log in to the Duo Admin Panel and navigate to Applications. Click Protect an Application and locate Web SDK in the applications list. Click Protect this Application to get your client ID, secret key, and API hostname. For additional info for the steps refer to Duo's Web SDK 4, check this article . Configure Jans-auth server (AS) # 1. Add the duo-universal Dependency to your jans-auth server # The dependencies have to be added separately as mentioned in the steps below. Using a fat jar (duo-universal-sdk-1.0.3-with-dependencies.jar leads to conflicts.) [ ] Copy these jar files to the following jans-auth folder inside the Janssen Server chroot: /opt/jans/jetty/jans-auth/custom/libs Dependency jars: duo-universal-sdk-1.0.3.jar , converter-jackson-2.1.0.jar , java-jwt-3.3.0.jar , logging-interceptor-3.3.1.jar , lombok-1.18.16.jar , retrofit-2.5.0.jar , okio-2.9.0.jar , okhttp-3.12.0.jar , * kotlin-stdlib-1.4.21.jar [ ] Edit /opt/jans/jetty/jans-auth/webapps/jans-auth.xml and add the following line: <Set name=\"extraClasspath\">./custom/libs/duo-universal-sdk-1.0.3.jar,./custom/libs/converter-jackson-2.1.0.jar,./custom/libs/java-jwt-3.3.0.jar,./custom/libs/logging-interceptor-3.3.1.jar,./custom/libs/lombok-1.18.16.jar,./custom/libs/retrofit-2.5.0.jar,./custom/libs/okio-2.9.0.jar,./custom/libs/okhttp-3.12.0.jar,./custom/libs/kotlin-stdlib-1.4.21.jar</Set> [ ] Restart the jans-auth service 2. Add custom script # Create cs.json with the contents of a CUSTOM script. To do that, run the following command. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript > /tmp/cs.json Edit the file's contents to reflect the addition of the duo custom script. Set enabled flag true Configure the api_hostname, client_id and client_secret | Property |Status | Description | Example | |-----------------------|---------------|-----------------------|-----------------------| |api_hostname |Mandatory |URL of the Duo API Server|api-random.duosecurity.com| |client_id |Mandatory |Value from the Duo application using Web SDK 4 that was registered using DUO Admin console|DI3ICTTJKLL8PPPNGH7YI| |client_secret |Mandatory|Value from the Duo application using Web SDK 4 that was registered using DUO Admin console|eEbJdi3hg42zxyFYbHArU5RuioPP| name field should reflect the use case script_type should be PERSON_AUTHENTICATION { \"dn\": null, \"inum\": null, \"name\": \"duo\", \"aliases\": [], \"description\": \"DUO's custom script\", \"script\": \"_file /root/script.py\", \"scriptType\": \"PERSON_AUTHENTICATION\", \"programmingLanguage\": \"JYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": [{ \"value1\": \"api_hostname\", \"value2\": \"api-random.duosecurity.com\", \"description\": \"URL of the Duo API Server\", \"hide\": true }, { \"value1\": \"client_id\", \"value2\": \"DI3ICTTJKLL8PPPNGH7YI\", \"description\": \"Value from the Duo application using Web SDK 4 that was registered using DUO Admin console\", \"hide\": true }, { \"value1\": \"client_secret\", \"value2\": \"eEbJdi3hg42zxyFYbHArU5RuioPP\", \"description\": \"Value from the Duo application using Web SDK 4 that was registered using DUO Admin console\", \"hide\": true } ] , \"level\": \"integer\", \"revision\": 0, \"enabled\": true, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } 3. Add the custom script /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/cs.json Now Duo is an available authentication mechanism for your Janssen Server. This means that, using OpenID Connect acr_values , applications can now request Duo authentication for users. Note To make sure Duo has been enabled successfully, you can check your Janssen Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"duo\" . Make Duo the Default Authentication Mechanism # For CURL commands, use this link as a reference. Steps: 1. Create a file say duo-auth-default.json with the following contents { \"defaultAcr\": \"duo\" } 2.Update the default authentication method to Google Sign-in /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/duo-auth-default.json :memo: NOTE To make sure duo has been enabled successfully as a default authentication method, you can check your Janssen Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"duo\" . Test the feature # To test , enter the complete URL for authorization in a browser or create a simple web page with a link that simulates the user sign-in attempt. If the server is configured properly, the first page for the selected authentication method will be displayed to the user. An example of a complete URL looks like this - https://<your.jans.server>/jans-auth/authorize.htm?response_type=code&redirect_uri=https://<your.jans.server>/admin&client_id=<replace_with_inum_client_id>&scope=openid+profile+email+user_name&state=faad2cdjfdddjfkdf&nonce=dajdffdfsdcfff","title":"Duo External Authenticator"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#integrating-duos-universal-prompt-as-an-authentication-method-in-janssen-server","text":"Duo Security is a SaaS authentication provider. This document will explain how to use Janssen's Duo interception script to configure the Janssen Server for a two-step authentication process with username and password as the first step, and Duo as the second step. The script invokes the Universal Prompt which is a redesign of Duo\u2019s traditional authentication prompt.","title":"Integrating DUO's Universal Prompt as an authentication method in Janssen server"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#authentication-flow","text":"sequenceDiagram title Integrating DUO's Universal Prompt as an authentication method in Janssen server autonumber 1 RP->>Jans AS: Invoke /authorize endpoint Jans AS->>RP: Present Username password screen RP->>Jans AS: Submit credentials Jans AS->>DUO Security Service: Redirects login request to IDP loop n times - (multistep authentication) DUO Security Service->>RP: Present universal prompt screen RP->>DUO Security Service: Present credentials end DUO Security Service->>Jans AS: return state, code(duo_code) Jans AS->>Jans AS: check state Jans AS->>DUO Security Service: send code (duo_code) in exchange for token DUO Security Service ->> Jans AS: token Jans AS->>Jans AS: inspect token if (token.getAuth_result().getStatus() == success), \\nmark user as authenticated opt if new user Jans AS->>Jans AS: 9. Dynamic enrollment or registration end Jans AS->>RP: 10. write Jans session cookie","title":"Authentication flow"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#administrator-prerequisites","text":"Duo interception script (included in the default Janssen Server distribution); An account with Duo Security .","title":"Administrator prerequisites"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#user-prerequisites","text":"Users should download the DUO mobile app","title":"User prerequisites"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#configure-duo-account","text":"Sign up for a Duo account. Log in to the Duo Admin Panel and navigate to Applications. Click Protect an Application and locate Web SDK in the applications list. Click Protect this Application to get your client ID, secret key, and API hostname. For additional info for the steps refer to Duo's Web SDK 4, check this article .","title":"Configure Duo Account"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#configure-jans-auth-server-as","text":"","title":"Configure Jans-auth server (AS)"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#1-add-the-duo-universal-dependency-to-your-jans-auth-server","text":"The dependencies have to be added separately as mentioned in the steps below. Using a fat jar (duo-universal-sdk-1.0.3-with-dependencies.jar leads to conflicts.) [ ] Copy these jar files to the following jans-auth folder inside the Janssen Server chroot: /opt/jans/jetty/jans-auth/custom/libs Dependency jars: duo-universal-sdk-1.0.3.jar , converter-jackson-2.1.0.jar , java-jwt-3.3.0.jar , logging-interceptor-3.3.1.jar , lombok-1.18.16.jar , retrofit-2.5.0.jar , okio-2.9.0.jar , okhttp-3.12.0.jar , * kotlin-stdlib-1.4.21.jar [ ] Edit /opt/jans/jetty/jans-auth/webapps/jans-auth.xml and add the following line: <Set name=\"extraClasspath\">./custom/libs/duo-universal-sdk-1.0.3.jar,./custom/libs/converter-jackson-2.1.0.jar,./custom/libs/java-jwt-3.3.0.jar,./custom/libs/logging-interceptor-3.3.1.jar,./custom/libs/lombok-1.18.16.jar,./custom/libs/retrofit-2.5.0.jar,./custom/libs/okio-2.9.0.jar,./custom/libs/okhttp-3.12.0.jar,./custom/libs/kotlin-stdlib-1.4.21.jar</Set> [ ] Restart the jans-auth service","title":"1. Add the duo-universal Dependency to your jans-auth server"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#2-add-custom-script","text":"Create cs.json with the contents of a CUSTOM script. To do that, run the following command. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript > /tmp/cs.json Edit the file's contents to reflect the addition of the duo custom script. Set enabled flag true Configure the api_hostname, client_id and client_secret | Property |Status | Description | Example | |-----------------------|---------------|-----------------------|-----------------------| |api_hostname |Mandatory |URL of the Duo API Server|api-random.duosecurity.com| |client_id |Mandatory |Value from the Duo application using Web SDK 4 that was registered using DUO Admin console|DI3ICTTJKLL8PPPNGH7YI| |client_secret |Mandatory|Value from the Duo application using Web SDK 4 that was registered using DUO Admin console|eEbJdi3hg42zxyFYbHArU5RuioPP| name field should reflect the use case script_type should be PERSON_AUTHENTICATION { \"dn\": null, \"inum\": null, \"name\": \"duo\", \"aliases\": [], \"description\": \"DUO's custom script\", \"script\": \"_file /root/script.py\", \"scriptType\": \"PERSON_AUTHENTICATION\", \"programmingLanguage\": \"JYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": [{ \"value1\": \"api_hostname\", \"value2\": \"api-random.duosecurity.com\", \"description\": \"URL of the Duo API Server\", \"hide\": true }, { \"value1\": \"client_id\", \"value2\": \"DI3ICTTJKLL8PPPNGH7YI\", \"description\": \"Value from the Duo application using Web SDK 4 that was registered using DUO Admin console\", \"hide\": true }, { \"value1\": \"client_secret\", \"value2\": \"eEbJdi3hg42zxyFYbHArU5RuioPP\", \"description\": \"Value from the Duo application using Web SDK 4 that was registered using DUO Admin console\", \"hide\": true } ] , \"level\": \"integer\", \"revision\": 0, \"enabled\": true, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } 3. Add the custom script /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/cs.json Now Duo is an available authentication mechanism for your Janssen Server. This means that, using OpenID Connect acr_values , applications can now request Duo authentication for users. Note To make sure Duo has been enabled successfully, you can check your Janssen Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"duo\" .","title":"2. Add custom script"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#make-duo-the-default-authentication-mechanism","text":"For CURL commands, use this link as a reference. Steps: 1. Create a file say duo-auth-default.json with the following contents { \"defaultAcr\": \"duo\" } 2.Update the default authentication method to Google Sign-in /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/duo-auth-default.json :memo: NOTE To make sure duo has been enabled successfully as a default authentication method, you can check your Janssen Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"duo\" .","title":"Make Duo the Default Authentication Mechanism"},{"location":"script-catalog/person_authentication/duo-external-authenticator/#test-the-feature","text":"To test , enter the complete URL for authorization in a browser or create a simple web page with a link that simulates the user sign-in attempt. If the server is configured properly, the first page for the selected authentication method will be displayed to the user. An example of a complete URL looks like this - https://<your.jans.server>/jans-auth/authorize.htm?response_type=code&redirect_uri=https://<your.jans.server>/admin&client_id=<replace_with_inum_client_id>&scope=openid+profile+email+user_name&state=faad2cdjfdddjfkdf&nonce=dajdffdfsdcfff","title":"Test the feature"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/","text":"FIDO2 # Overview # FIDO 2.0 (FIDO2) , an open authentication standard that enables people to leverage common devices to authenticate to online services in both mobile and desktop environments. The Janssen server includes a FIDO2 server implementation. This enables authentications by using platform authenticators embedded into a person's device or physical USB, NFC or Bluetooth security keys that are inserted into a USB slot of a computer. FIDO2 is comprised of the W3C\u2019s Web Authentication specification (WebAuthn) and FIDO\u2019s corresponding Client-to-Authenticator Protocol (CTAP) . WebAuthn defines a standard web API that can be built into browsers and related web platform infrastructure to enable online services to use FIDO Authentication. CTAP enables external devices such as mobile handsets or FIDO Security Keys to work with WebAuthn and serve as authenticators to desktop applications and web services. This document explains how to use the Janssen Auth Server's built-in FIDO2 interception script to implement a two-step, two-factor authentication (2FA) with username / password as the first step, and any FIDO2 device as the second step. Prerequisites # A Janssen Server ( installation instructions ) FIDO2 interception script (included in the default Janssen Server distribution); At least one FIDO2 device for testing, like one of the devices listed below . FIDO2 devices # Some well known FIDO2 devices and manufacturers include: Yubico Vasco DIGIPASS SecureClick HyperFIDO Feitian Technologies AuthenTrend Apple's built-in Touch ID Purchase FIDO2 devices on Amazon . Or, check FIDO's certified products for a comprehensive list of FIDO2 devices (sort by Specification == FIDO2 ). Properties # The script has the following properties Property Description Example fido2_server_uri URL of the Janssen's FIDO2 server https://idp.mycompany.com Enable FIDO2 script # By default, users will get the default authentication mechanism as specified above. However, using the OpenID Connect acr_values parameter, web and mobile clients can request any enabled authentication mechanism . Obtain the json contents of fido2 custom script by using a jans-cli command like get-config-scripts-by-type , get-config-scripts-by-inum etc. e.g : /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:PERSON_AUTHENTICATION , /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:6122281b-b55d-4dd0-8115-b098eeeee2b7 Update the custom script and change the enabled attribute to true Now FIDO2 is an available authentication mechanism for your Janssen Server. This means that, using OpenID Connect acr_values , applications can now request FIDO2 authentication for users. Note To make sure FIDO2 has been enabled successfully, you can check your Janssen's Auth Server OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"fido2\" . Enable FIDO2 Script as default authentication script: # Use this link as a reference. Follow the steps below to enable FIDO2 authentication: 1. Create a file say fido2-auth-default.json with the following contents { \"defaultAcr\": \"fido2\" } 2.Update the default authentication method to fido2 /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/fido2-auth-default.json Note If FIDO2 is set as a default authentication mechanism users will not be able to access the protected resource(s) while using a mobile device or a browser that does not support FIDO2 (e.g. Internet Explorer). FIDO2 login page # Below is an illustration of the Janssen Server's default FIDO2 login page: The design is being rendered from the FIDO2 xhtml page . To customize the look and feel of this page, follow the customization guide . Using FIDO2 tokens # Credential enrollment # FIDO2 device enrollment happens during the first authentication attempt. Subsequent authentications # All subsequent FIDO2 authentications for that user account will require the enrolled FIDO2 key. FIDO2 credential management # A user's FIDO2 devices can be removed by a Janssen administrator in LDAP under the user entry as shown in the below screenshot. Diagram source in mermaid.live graph TD A[ou=jans] --> K(ou=people) K --> K1[inum=....] K1 --> K11[ou=fido2_register] K11 --> K111[jansId=....] K11 --> K112[jansId=....] K11 --> K112[jansId=....] K1 --> K12[ou=fido2_auth] K12 --> K121[jansId=....] K12 --> K122[jansId=....] K12 --> K123[jansId=....] K --> K2[inum=....] K2 --> K21[ou=fido2_register] K21 --> K211[jansId=....] K21 --> K212[jansId=....] K21 --> K212[jansId=....] K2 --> K22[ou=fido2_auth] K22 --> K221[jansId=....] K22 --> K222[jansId=....] K22 --> K223[oxId=....] K --> K3[inum=....] K3 --> K31[ou=fido2_register] K31 --> K311[jansId=....] K31 --> K312[jansId=....] K31 --> K312[jansId=....] K3 --> K32[ou=fido2_auth] K32 --> K321[jansId=....] K32 --> K322[jansId=....] K32 --> K323[jansId=....] FIDO2 discovery endpoint # A discovery document for FIDO2 is published by the Janssen Server at: https://your.hostname/.well-known/fido2-configuration This document specifies the URL of the registration and authentication endpoints.","title":"Fido2 External Autheticator"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#fido2","text":"","title":"FIDO2"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#overview","text":"FIDO 2.0 (FIDO2) , an open authentication standard that enables people to leverage common devices to authenticate to online services in both mobile and desktop environments. The Janssen server includes a FIDO2 server implementation. This enables authentications by using platform authenticators embedded into a person's device or physical USB, NFC or Bluetooth security keys that are inserted into a USB slot of a computer. FIDO2 is comprised of the W3C\u2019s Web Authentication specification (WebAuthn) and FIDO\u2019s corresponding Client-to-Authenticator Protocol (CTAP) . WebAuthn defines a standard web API that can be built into browsers and related web platform infrastructure to enable online services to use FIDO Authentication. CTAP enables external devices such as mobile handsets or FIDO Security Keys to work with WebAuthn and serve as authenticators to desktop applications and web services. This document explains how to use the Janssen Auth Server's built-in FIDO2 interception script to implement a two-step, two-factor authentication (2FA) with username / password as the first step, and any FIDO2 device as the second step.","title":"Overview"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#prerequisites","text":"A Janssen Server ( installation instructions ) FIDO2 interception script (included in the default Janssen Server distribution); At least one FIDO2 device for testing, like one of the devices listed below .","title":"Prerequisites"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#fido2-devices","text":"Some well known FIDO2 devices and manufacturers include: Yubico Vasco DIGIPASS SecureClick HyperFIDO Feitian Technologies AuthenTrend Apple's built-in Touch ID Purchase FIDO2 devices on Amazon . Or, check FIDO's certified products for a comprehensive list of FIDO2 devices (sort by Specification == FIDO2 ).","title":"FIDO2 devices"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#properties","text":"The script has the following properties Property Description Example fido2_server_uri URL of the Janssen's FIDO2 server https://idp.mycompany.com","title":"Properties"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#enable-fido2-script","text":"By default, users will get the default authentication mechanism as specified above. However, using the OpenID Connect acr_values parameter, web and mobile clients can request any enabled authentication mechanism . Obtain the json contents of fido2 custom script by using a jans-cli command like get-config-scripts-by-type , get-config-scripts-by-inum etc. e.g : /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-type --url-suffix type:PERSON_AUTHENTICATION , /opt/jans/jans-cli/config-cli.py --operation-id get-config-scripts-by-inum --url-suffix inum:6122281b-b55d-4dd0-8115-b098eeeee2b7 Update the custom script and change the enabled attribute to true Now FIDO2 is an available authentication mechanism for your Janssen Server. This means that, using OpenID Connect acr_values , applications can now request FIDO2 authentication for users. Note To make sure FIDO2 has been enabled successfully, you can check your Janssen's Auth Server OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"fido2\" .","title":"Enable FIDO2 script"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#enable-fido2-script-as-default-authentication-script","text":"Use this link as a reference. Follow the steps below to enable FIDO2 authentication: 1. Create a file say fido2-auth-default.json with the following contents { \"defaultAcr\": \"fido2\" } 2.Update the default authentication method to fido2 /opt/jans/jans-cli/config-cli.py --operation-id put-acrs --data /tmp/fido2-auth-default.json Note If FIDO2 is set as a default authentication mechanism users will not be able to access the protected resource(s) while using a mobile device or a browser that does not support FIDO2 (e.g. Internet Explorer).","title":"Enable FIDO2 Script as default authentication script:"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#fido2-login-page","text":"Below is an illustration of the Janssen Server's default FIDO2 login page: The design is being rendered from the FIDO2 xhtml page . To customize the look and feel of this page, follow the customization guide .","title":"FIDO2 login page"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#using-fido2-tokens","text":"","title":"Using FIDO2 tokens"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#credential-enrollment","text":"FIDO2 device enrollment happens during the first authentication attempt.","title":"Credential enrollment"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#subsequent-authentications","text":"All subsequent FIDO2 authentications for that user account will require the enrolled FIDO2 key.","title":"Subsequent authentications"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#fido2-credential-management","text":"A user's FIDO2 devices can be removed by a Janssen administrator in LDAP under the user entry as shown in the below screenshot. Diagram source in mermaid.live graph TD A[ou=jans] --> K(ou=people) K --> K1[inum=....] K1 --> K11[ou=fido2_register] K11 --> K111[jansId=....] K11 --> K112[jansId=....] K11 --> K112[jansId=....] K1 --> K12[ou=fido2_auth] K12 --> K121[jansId=....] K12 --> K122[jansId=....] K12 --> K123[jansId=....] K --> K2[inum=....] K2 --> K21[ou=fido2_register] K21 --> K211[jansId=....] K21 --> K212[jansId=....] K21 --> K212[jansId=....] K2 --> K22[ou=fido2_auth] K22 --> K221[jansId=....] K22 --> K222[jansId=....] K22 --> K223[oxId=....] K --> K3[inum=....] K3 --> K31[ou=fido2_register] K31 --> K311[jansId=....] K31 --> K312[jansId=....] K31 --> K312[jansId=....] K3 --> K32[ou=fido2_auth] K32 --> K321[jansId=....] K32 --> K322[jansId=....] K32 --> K323[jansId=....]","title":"FIDO2 credential management"},{"location":"script-catalog/person_authentication/fido2-external-authenticator/#fido2-discovery-endpoint","text":"A discovery document for FIDO2 is published by the Janssen Server at: https://your.hostname/.well-known/fido2-configuration This document specifies the URL of the registration and authentication endpoints.","title":"FIDO2 discovery endpoint"},{"location":"script-catalog/person_authentication/google-external-authenticator/","text":"This is a placeholder","title":"Google External Authenticator"},{"location":"script-catalog/person_authentication/other/acr_router/","text":"This is a person authentication module for oxAuth that enables user to forward authorization endpoint with a different acr_values as specified in the Custom property Key. 1) new_acr_value - It's mandatory property. It's the new acr_value where user will be routed. Please make sure acr_value where user will be redirected is enabled and shown avaialble in acr_values_supported /.well-known/openid-configuration.","title":"Index"},{"location":"script-catalog/person_authentication/other/allowed_countries/","text":"This is a person authentication module for oxAuth to allow access based on the user location. 1) allowed_countries = short Country codes (eg US,UK,IN) separated by comma which will be allowed to access","title":"Index"},{"location":"script-catalog/person_authentication/other/authz/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/azuread/","text":"This is a person authentication module for oxAuth that allows user to authenticate against Azure AD. Required Custom property (key/value) - 1) azure_tenant_id (Azure AD's Tenant ID) 2) azure_client_id 3) azure_client_secret 4) azure_ad_attributes_list = oid,given_name,family_name,upn 5) gluu_ldap_attributes_list = uid,givenName,sn,mail Note: An administrator of the Azure AD portal (portal.azure.com) needs to create an application for Gluu Server in the azure portal (with necessary permissions) and configure the client id and client secret in the Custom properties of this Jython script.","title":"Index"},{"location":"script-catalog/person_authentication/other/basic.change_password/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/basic.client_group/","text":"This person authentication module for oxAuth allows to restrict access to RP for specific user groups. It allows to define configuration for each client. This module has one mandatory property configuration_file . It's path to JSON configuration file Example: /etc/certs/client_group.json Example content of this file: { \"client_1\":{ \"client_inum\":\"client_inum_1\", \"user_group\":[ \"group_dn_1\", \"group_dn_2\" ] }, \"client_2\":{ \"client_inum\":\"client_inum_2\", \"user_group\":[ \"group_dn_1\", \"group_dn_2\" ] } } Also it's possible to define how it should work when there is no configuration for specific client. This is controlled via property: allow_default_login : true/false","title":"Index"},{"location":"script-catalog/person_authentication/other/basic.external_logout/","text":"This is person authentication module for oxAuth which do basic authentication and at logout do redirect to external service. This module hasn't properties.","title":"Index"},{"location":"script-catalog/person_authentication/other/basic.lock.account/","text":"Script contents here This is a person authentication script for jans-auth-server which does basic authentication. It looks user account after specified number of unsuccessful login attempts. This module has 2 properties: 1) invalid_login_count_attribute - Specify attribute where script stores count of invalid number of login attemps Default value: jansCountInvalidLogin 2) maximum_invalid_login_attemps - Specify how many times user can enter invalid password before application will lock account Allowed values: integer value greater that 0 Example: 3 Default value: 3 3) lock_expiration_time - Specify the time in seconds when lock will be expired Default value: 180","title":"Index"},{"location":"script-catalog/person_authentication/other/basic.multi_auth_conf/","text":"This is person authentication module for oxAuth which allows to specify multiple authentication configurations. Installation # This list of steps needed to do to enable Basic Multi person authentication module. This module depends on python libraries. In order to use it we need to install Jython. Please use next articles to proper Jython installation: Installation notest: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_installation_optional Jython integration: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_python_integration Copy shared required python libraries from ../shared_libs folder to $CATALINA_HOME/conf/python folder. Prepare authentication configuration file /etc/certs/multi_auth_conf.json. There is format description and sample configuration in README.txt. Confire new custom module in oxTrust: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Custom Scripts\" page. Select \"Person Authentication\" tab. Click on \"Add custom script configuration\" link. Enter name = basic_multi_auth_conf Enter level = 0-100 (priority of this method). Select usage type \"Interactive\". Add custom required and optional properties which specified in README.txt Copy/paste script from BasicMultiAuthConfExternalAuthenticator.py. Activate it via \"Enabled\" checkbox. Click \"Update\" button at the bottom of this page. Configure oxAuth to use Basic Multi authentication by default: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Authentication\" page. Scroll to \"Default Authentication Method\" panel. Select \"basic_multi_auth_conf\" authentication mode. Click \"Update\" button at the bottom of this page. Try to log in using Basic Multi authentication method: Wait 30 seconds and try to log in again. During this time oxAuth reload list of available person authentication modules. Open second browser or second browsing session and try to log in again. It's better to try to do that from another browser session because we can return back to previous authentication method if something will go wrong. There are log messages in this custom authentication script. In order to debug this module we can use command like this: tail -f /opt/tomcat/logs/wrapper.log | grep \"Basic (multi auth conf)\" Configuration # This module has only one property: 1) auth_configuration_file - It's path to file which contains AD LDAP authentication connection details and list of attributes which user can use in order to log in. Example: /etc/certs/multi_auth_conf.json Example content of this file [ 'bindPassword' should be the base64 encoded of password text. You can take the advantage of 'encode.py' script to encode/decode your password. 'encode.py' is available inside Gluu server container ( location: /opt/gluu/bin/ ) ]: { \"ldap_configuration\": [ { \"configId\":\"ad_1\", \"servers\":[\"localhost:1389\"], \"bindDN\":\"cn=directory manager\", \"bindPassword\":\"encoded_pass\", \"useSSL\":false, \"maxConnections\":3, \"baseDNs\":[\"ou=people,o=gluu\"], \"loginAttributes\":[\"uid\"], \"localLoginAttributes\":[\"uid\"] }, { \"configId\":\"ad_2\", \"servers\":[\"localhost:2389\"], \"bindDN\":\"cn=directory manager\", \"bindPassword\":\"encoded_pass\", \"useSSL\":false, \"maxConnections\":3, \"baseDNs\":[\"ou=people,o=gluu\"], \"loginAttributes\":[\"mail\"], \"localLoginAttributes\":[\"mail\"] } ] } The names/values of properties are similar to oxAuth/oxTrust ldap configuration files.","title":"Index"},{"location":"script-catalog/person_authentication/other/basic.multi_auth_conf/#installation","text":"This list of steps needed to do to enable Basic Multi person authentication module. This module depends on python libraries. In order to use it we need to install Jython. Please use next articles to proper Jython installation: Installation notest: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_installation_optional Jython integration: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_python_integration Copy shared required python libraries from ../shared_libs folder to $CATALINA_HOME/conf/python folder. Prepare authentication configuration file /etc/certs/multi_auth_conf.json. There is format description and sample configuration in README.txt. Confire new custom module in oxTrust: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Custom Scripts\" page. Select \"Person Authentication\" tab. Click on \"Add custom script configuration\" link. Enter name = basic_multi_auth_conf Enter level = 0-100 (priority of this method). Select usage type \"Interactive\". Add custom required and optional properties which specified in README.txt Copy/paste script from BasicMultiAuthConfExternalAuthenticator.py. Activate it via \"Enabled\" checkbox. Click \"Update\" button at the bottom of this page. Configure oxAuth to use Basic Multi authentication by default: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Authentication\" page. Scroll to \"Default Authentication Method\" panel. Select \"basic_multi_auth_conf\" authentication mode. Click \"Update\" button at the bottom of this page. Try to log in using Basic Multi authentication method: Wait 30 seconds and try to log in again. During this time oxAuth reload list of available person authentication modules. Open second browser or second browsing session and try to log in again. It's better to try to do that from another browser session because we can return back to previous authentication method if something will go wrong. There are log messages in this custom authentication script. In order to debug this module we can use command like this: tail -f /opt/tomcat/logs/wrapper.log | grep \"Basic (multi auth conf)\"","title":"Installation"},{"location":"script-catalog/person_authentication/other/basic.multi_auth_conf/#configuration","text":"This module has only one property: 1) auth_configuration_file - It's path to file which contains AD LDAP authentication connection details and list of attributes which user can use in order to log in. Example: /etc/certs/multi_auth_conf.json Example content of this file [ 'bindPassword' should be the base64 encoded of password text. You can take the advantage of 'encode.py' script to encode/decode your password. 'encode.py' is available inside Gluu server container ( location: /opt/gluu/bin/ ) ]: { \"ldap_configuration\": [ { \"configId\":\"ad_1\", \"servers\":[\"localhost:1389\"], \"bindDN\":\"cn=directory manager\", \"bindPassword\":\"encoded_pass\", \"useSSL\":false, \"maxConnections\":3, \"baseDNs\":[\"ou=people,o=gluu\"], \"loginAttributes\":[\"uid\"], \"localLoginAttributes\":[\"uid\"] }, { \"configId\":\"ad_2\", \"servers\":[\"localhost:2389\"], \"bindDN\":\"cn=directory manager\", \"bindPassword\":\"encoded_pass\", \"useSSL\":false, \"maxConnections\":3, \"baseDNs\":[\"ou=people,o=gluu\"], \"loginAttributes\":[\"mail\"], \"localLoginAttributes\":[\"mail\"] } ] } The names/values of properties are similar to oxAuth/oxTrust ldap configuration files.","title":"Configuration"},{"location":"script-catalog/person_authentication/other/basic.multi_login/","text":"This is person authentication modules for oxAuth which allows to use several attributes as user name. Install # This list of steps needed to do to enable Basic Multi Login person authentication module. This module depends on python libraries. In order to use it we need to install Jython. Please use next articles to proper Jython installation: Installation notest: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_installation_optional Jython integration: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_python_integration Copy shared required python libraries from ../shared_libs folder to $CATALINA_HOME/conf/python folder. Confire new custom module in oxTrust: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Custom Scripts\" page. Select \"Person Authentication\" tab. Click on \"Add custom script configuration\" link. Enter name = basic_multi_login Enter level = 0-100 (priority of this method). Select usage type \"Interactive\". Add custom required and optional properties which specified in README.txt. Copy/paste script from BasicMultiLoginExternalAuthenticator.py. Activate it via \"Enabled\" checkbox. Click \"Update\" button at the bottom of this page. Configure oxAuth to use Basic Multi Login authentication by default: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Authentication\" page. Scroll to \"Default Authentication Method\" panel. Select \"basic_multi_login\" authentication mode. Click \"Update\" button at the bottom of this page. Try to log in using Basic Multi Login authentication method: Wait 30 seconds and try to log in again. During this time oxAuth reload list of available person authentication modules. Open second browser or second browsing session and try to log in again. It's better to try to do that from another browser session because we can return back to previous authentication method if something will go wrong. There are log messages in this custom authentication script. In order to debug this module we can use command like this: tail -f /opt/tomcat/logs/wrapper.log | grep \"Basic (multi login)\" Properties # 1) login_attributes_list - Comma separated list of attribute names. Specify list of IdP attributes which this module should use to map to local attributes. It's optional property. The count of attributes in this property should be equal to count attributes in local_login_attributes_list property. Example: uid, mail 2) local_login_attributes_list - Comma separated list of attribute names. Specify list of local attributes mapped from IdP attributes. It's optional property. The count of attributes in this property should be equal to count attributes in login_attributes_list property. Example: uid, mail","title":"Index"},{"location":"script-catalog/person_authentication/other/basic.multi_login/#install","text":"This list of steps needed to do to enable Basic Multi Login person authentication module. This module depends on python libraries. In order to use it we need to install Jython. Please use next articles to proper Jython installation: Installation notest: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_installation_optional Jython integration: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_python_integration Copy shared required python libraries from ../shared_libs folder to $CATALINA_HOME/conf/python folder. Confire new custom module in oxTrust: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Custom Scripts\" page. Select \"Person Authentication\" tab. Click on \"Add custom script configuration\" link. Enter name = basic_multi_login Enter level = 0-100 (priority of this method). Select usage type \"Interactive\". Add custom required and optional properties which specified in README.txt. Copy/paste script from BasicMultiLoginExternalAuthenticator.py. Activate it via \"Enabled\" checkbox. Click \"Update\" button at the bottom of this page. Configure oxAuth to use Basic Multi Login authentication by default: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Authentication\" page. Scroll to \"Default Authentication Method\" panel. Select \"basic_multi_login\" authentication mode. Click \"Update\" button at the bottom of this page. Try to log in using Basic Multi Login authentication method: Wait 30 seconds and try to log in again. During this time oxAuth reload list of available person authentication modules. Open second browser or second browsing session and try to log in again. It's better to try to do that from another browser session because we can return back to previous authentication method if something will go wrong. There are log messages in this custom authentication script. In order to debug this module we can use command like this: tail -f /opt/tomcat/logs/wrapper.log | grep \"Basic (multi login)\"","title":"Install"},{"location":"script-catalog/person_authentication/other/basic.multi_login/#properties","text":"1) login_attributes_list - Comma separated list of attribute names. Specify list of IdP attributes which this module should use to map to local attributes. It's optional property. The count of attributes in this property should be equal to count attributes in local_login_attributes_list property. Example: uid, mail 2) local_login_attributes_list - Comma separated list of attribute names. Specify list of local attributes mapped from IdP attributes. It's optional property. The count of attributes in this property should be equal to count attributes in login_attributes_list property. Example: uid, mail","title":"Properties"},{"location":"script-catalog/person_authentication/other/basic.multiple_test_email_addresses/","text":"This is person authentication modules for oxAuth which allows the use of multiple test addresses that lead to a single email account. e.g. Everything addressed to myaccount+.*@gmail.com goes to myaccount@gmail.com. They are all the same account. Read this blog for understanding the feature better - http://www.codestore.net/store.nsf/unid/BLOG-20111201-0411 oxAuth issue - https://github.com/GluuFederation/oxAuth/issues/1220","title":"Index"},{"location":"script-catalog/person_authentication/other/basic.one_session/","text":"This person authentication module for oxAuth which allows to restrict access to RP for one user session.","title":"Index"},{"location":"script-catalog/person_authentication/other/basic.password_expiration/","text":"Password Expiration # The script would ask the user to update password after 90 days.","title":"Password Expiration"},{"location":"script-catalog/person_authentication/other/basic.password_expiration/#password-expiration","text":"The script would ask the user to update password after 90 days.","title":"Password Expiration"},{"location":"script-catalog/person_authentication/other/basic.reset_to_step/","text":"This is person authentication module for oxAuth which do basic authentication. This is 3 steps authentication which supports rediect to previous authentication step. For demo purposes it asks user to pass basic authentication 3 times. After unsuccessful login attempt it forward user to previous step. This module hasn't properties.","title":"Index"},{"location":"script-catalog/person_authentication/other/bcrypt_ssha_migration/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/bioid/","text":"BioID Web Service # Overview # BioID Web Service is a \"Biometrics as a service\" provider. This document will explain how to use Gluu's BioID interception script to configure the Gluu Server for a two-step authentication process with username and password as the first step, and BioID's biometric authentication as the second step. In order to use this authentication mechanism your organization will need to register for a BioID account. Prerequisitesm # A Gluu Server ( installation instructions ); BioID interception script (included in the default Gluu Server distribution); An account with BioID . Properties # The mandatory properties in the BioID authentication script are as follows | Property | Description | Example | |-----------------------|-------------------------------|---------------| |ENDPOINT |URL of the BioID Web Service| https://bws.bioid.com/extension/ | |APP_IDENTIFIER |API key | c20b04cc-776a-45ed-7a1f-06347f8edf6c | |APP_SECRET |API secret | sTGB4n4HAkvc2BnJp6KeNUTk | |STORAGE |The storage name assigned by BioID depending on the type of contract you have. | bws | |PARTITION |A number assigned to your company by BioID. | 12345 | Configure BioID Account # Sign up for a BioID account. Upon registration, you will recieve an email with the instance name (listed as STORAGE in Gluu's BioID authentication script), partition number(listed as PARTITION in Gluu's BioID authentication script). As the owner of this instance, you are entitled to access BWS Portal at https://bwsportal.bioid.com using the account associated with your email. With the BWS Portal, you can do the following: a. View your trial information such as your credentials (e.g. your client certificate), enrolled classes, BWS logs and more. b. Create your App ID and App secret, under \"Web API keys\". BioID Documentation # You can find all API reference at https://developer.bioid.com/bwsreference. Lots of useful information about BWS is available at https://developer.bioid.com/blog. If you intend to use liveness detection, you will find information about motion trigger helpful: https://developer.bioid.com/app-developer-guide/bioid-motion-detection Configure oxTrust # Follow the steps below to configure the BioID module in the oxTrust Admin GUI. Navigate to Configuration > Person Authentication Scripts . Scroll down to the BioID authentication script Configure the properties, all of which are mandatory, according to your API Enable the script by ticking the check box Now BioID's biometric authentication is available as an authentication mechanism for your Gluu Server. This means that, using OpenID Connect acr_values , applications can now request BioID biometric authentication for users. Note To make sure BioID has been enabled successfully, you can check your Gluu Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"bioid\" . Make BioID the Default Authentication Mechanism # Now applications can request BioID's biometric authentication. To make BioID biometic authentication your default authentication mechanism, follow these instructions: Navigate to Configuration > Manage Authentication . Select the Default Authentication Method tab. In the Default Authentication Method window you will see two options: Default acr and oxTrust acr . The oxTrust acr field controls the authentication mechanism that is presented to access the oxTrust dashboard GUI (the application you are in). The Default acr field controls the default authentication mechanism that is presented to users from all applications that leverage your Gluu Server for authentication. You can change one or both fields to BioID authentication as you see fit. If you want BioID to be the default authentication mechanism for access to oxTrust and all other applications that leverage your Gluu Server, change both fields to bioid.","title":"BioID Web Service"},{"location":"script-catalog/person_authentication/other/bioid/#bioid-web-service","text":"","title":"BioID Web Service"},{"location":"script-catalog/person_authentication/other/bioid/#overview","text":"BioID Web Service is a \"Biometrics as a service\" provider. This document will explain how to use Gluu's BioID interception script to configure the Gluu Server for a two-step authentication process with username and password as the first step, and BioID's biometric authentication as the second step. In order to use this authentication mechanism your organization will need to register for a BioID account.","title":"Overview"},{"location":"script-catalog/person_authentication/other/bioid/#prerequisitesm","text":"A Gluu Server ( installation instructions ); BioID interception script (included in the default Gluu Server distribution); An account with BioID .","title":"Prerequisitesm"},{"location":"script-catalog/person_authentication/other/bioid/#properties","text":"The mandatory properties in the BioID authentication script are as follows | Property | Description | Example | |-----------------------|-------------------------------|---------------| |ENDPOINT |URL of the BioID Web Service| https://bws.bioid.com/extension/ | |APP_IDENTIFIER |API key | c20b04cc-776a-45ed-7a1f-06347f8edf6c | |APP_SECRET |API secret | sTGB4n4HAkvc2BnJp6KeNUTk | |STORAGE |The storage name assigned by BioID depending on the type of contract you have. | bws | |PARTITION |A number assigned to your company by BioID. | 12345 |","title":"Properties"},{"location":"script-catalog/person_authentication/other/bioid/#configure-bioid-account","text":"Sign up for a BioID account. Upon registration, you will recieve an email with the instance name (listed as STORAGE in Gluu's BioID authentication script), partition number(listed as PARTITION in Gluu's BioID authentication script). As the owner of this instance, you are entitled to access BWS Portal at https://bwsportal.bioid.com using the account associated with your email. With the BWS Portal, you can do the following: a. View your trial information such as your credentials (e.g. your client certificate), enrolled classes, BWS logs and more. b. Create your App ID and App secret, under \"Web API keys\".","title":"Configure BioID Account"},{"location":"script-catalog/person_authentication/other/bioid/#bioid-documentation","text":"You can find all API reference at https://developer.bioid.com/bwsreference. Lots of useful information about BWS is available at https://developer.bioid.com/blog. If you intend to use liveness detection, you will find information about motion trigger helpful: https://developer.bioid.com/app-developer-guide/bioid-motion-detection","title":"BioID Documentation"},{"location":"script-catalog/person_authentication/other/bioid/#configure-oxtrust","text":"Follow the steps below to configure the BioID module in the oxTrust Admin GUI. Navigate to Configuration > Person Authentication Scripts . Scroll down to the BioID authentication script Configure the properties, all of which are mandatory, according to your API Enable the script by ticking the check box Now BioID's biometric authentication is available as an authentication mechanism for your Gluu Server. This means that, using OpenID Connect acr_values , applications can now request BioID biometric authentication for users. Note To make sure BioID has been enabled successfully, you can check your Gluu Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"bioid\" .","title":"Configure oxTrust"},{"location":"script-catalog/person_authentication/other/bioid/#make-bioid-the-default-authentication-mechanism","text":"Now applications can request BioID's biometric authentication. To make BioID biometic authentication your default authentication mechanism, follow these instructions: Navigate to Configuration > Manage Authentication . Select the Default Authentication Method tab. In the Default Authentication Method window you will see two options: Default acr and oxTrust acr . The oxTrust acr field controls the authentication mechanism that is presented to access the oxTrust dashboard GUI (the application you are in). The Default acr field controls the default authentication mechanism that is presented to users from all applications that leverage your Gluu Server for authentication. You can change one or both fields to BioID authentication as you see fit. If you want BioID to be the default authentication mechanism for access to oxTrust and all other applications that leverage your Gluu Server, change both fields to bioid.","title":"Make BioID the Default Authentication Mechanism"},{"location":"script-catalog/person_authentication/other/cas2/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/cas2_duo/Readme/","text":"Description # This script uses CAS2 and DUO scripts. Hence both script properties should be added. Before deploying it user should do: 1. Put Cas2ExternalAuthenticator.py and DuoExternalAuthenticator.py into /opt/gluu/python/libs . - wget -c https://raw.githubusercontent.com/GluuFederation/oxAuth/master/Server/integrations/duo/DuoExternalAuthenticator.py - wget -c https://raw.githubusercontent.com/GluuFederation/oxAuth/master/Server/integrations/cas2/Cas2ExternalAuthenticator.py chown -R root:gluu /opt/gluu/python/libs Restart oxAuth service with: service oxauth stop and service oxauth start Joining flows # This diagram illustrates how script join CAS2 and DUO scripts internally. Result authentication flow can be 2 or 3 steps. Configuration: # Name: CAS2DuoExternalAuthenticator Description: First AuthN with CAS server; 2FA with Gluu Server's Duo Programming Lanauge: Python / Level: 100 Location Type: Ldap / Usage type: Web Custom property ( key/value ): cas_map_user : false cas_review_opt : true cas_host : [hostname_of_cas_server] duo_creds_file : /etc/certs/duo_creds.json duo_host : [api-abcd.duosecurity.com] Script: Grab script and enable","title":"Description"},{"location":"script-catalog/person_authentication/other/cas2_duo/Readme/#description","text":"This script uses CAS2 and DUO scripts. Hence both script properties should be added. Before deploying it user should do: 1. Put Cas2ExternalAuthenticator.py and DuoExternalAuthenticator.py into /opt/gluu/python/libs . - wget -c https://raw.githubusercontent.com/GluuFederation/oxAuth/master/Server/integrations/duo/DuoExternalAuthenticator.py - wget -c https://raw.githubusercontent.com/GluuFederation/oxAuth/master/Server/integrations/cas2/Cas2ExternalAuthenticator.py chown -R root:gluu /opt/gluu/python/libs Restart oxAuth service with: service oxauth stop and service oxauth start","title":"Description"},{"location":"script-catalog/person_authentication/other/cas2_duo/Readme/#joining-flows","text":"This diagram illustrates how script join CAS2 and DUO scripts internally. Result authentication flow can be 2 or 3 steps.","title":"Joining flows"},{"location":"script-catalog/person_authentication/other/cas2_duo/Readme/#configuration","text":"Name: CAS2DuoExternalAuthenticator Description: First AuthN with CAS server; 2FA with Gluu Server's Duo Programming Lanauge: Python / Level: 100 Location Type: Ldap / Usage type: Web Custom property ( key/value ): cas_map_user : false cas_review_opt : true cas_host : [hostname_of_cas_server] duo_creds_file : /etc/certs/duo_creds.json duo_host : [api-abcd.duosecurity.com] Script: Grab script and enable","title":"Configuration:"},{"location":"script-catalog/person_authentication/other/cert/","text":"Script contents here This is a person authentication script for jans-auth-server that enables user Certificate Authentication. Properties # The module has a few properties: 1) chain_cert_file_path - It's mandatory property. It's path to file with cert chains in pem format. Example: '/etc/certs/chain_cert.pem' 2) map_user_cert - Specify if script should map new user to local account. If true, then on the first authentication, the script will prompt for a username/password in step 2, and then store the certificate fingerprint in the oxExternalUid attribute. Allowed values: true/false Example: true 3) use_generic_validator, use_path_validator, use_ocsp_validator, use_crl_validator - Enable/Disable specific certificate validation. Allowed values: true/false Example: true 4) crl_max_response_size - Specify maximum allowed size of CRL response Allowed values: integer value greater that 0 Example: 10485760 Default value: 5242880 5) credentials_file - Patch to file with reCAPTCHA credentials. Example: '/etc/certs/cert_credentials.json' Generating Certificates Without Configuration # 1. Generate a certificate authority (CA) cert. # 1. Generate your CA certificate using this command: # openssl req -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.cer 2. Generate a client SSL certificate # 1. Generate a private key for the SSL client. # openssl genrsa -out client.key 4096 2. Use the client's private key to generate a cert request. # openssl req -new -key client.key -out client.req 3. Issue the client certificate using the cert request and the CA cert/key. # openssl x509 -req -in client.req -CA ca.cer -CAkey ca.key -set_serial 101 -extensions client -days 365 -outform PEM -out client.cer 4. Convert the client certificate and private key to pkcs#12 format for use by browsers. # openssl pkcs12 -export -inkey client.key -in client.cer -out client.p12 5. Clean up - remove the client private key, client cert and client request files as the pkcs12 has everything needed. # rm client.key client.cer client.req Generating Certificate With Configuration # For testing purposes there is archive with CA/Intermidiate/User certs in archive . 1. Create and sign Root CA # 1.1. Generate password protected a 8192-bit long SHA-256 RSA key for root CA: # openssl genrsa -aes256 -out rootca.key 8192 Example output: Generating RSA private key, 8192 bit long modulus (2 primes) ....................+++ ........................................................................................................................................................................................................................................................................................................................................................................................+++ e is 65537 (0x010001) Enter pass phrase for rootca.key: Verifying - Enter pass phrase for rootca.key: 1.2 Create the self-signed root CA certificate ca.crt; you'll need to provide an identity for your root CA: # openssl req -sha256 -new -x509 -days 1826 -key rootca.key -out rootca.crt Example output: Enter pass phrase for rootca.key: You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:US State or Province Name (full name) [Some-State]:TX Locality Name (eg, city) []:Austin Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu, Inc. Organizational Unit Name (eg, section) []:Gluu CA Common Name (e.g. server FQDN or YOUR name) []:Gluu Root CA Email Address []: 1.3. Create root-ca.conf file: # [ ca ] default_ca = gluuca [ crl_ext ] issuerAltName=issuer:copy authorityKeyIdentifier=keyid:always [ gluuca ] dir = ./ new_certs_dir = $dir unique_subject = no certificate = $dir/rootca.crt database = $dir/certindex private_key = $dir/rootca.key serial = $dir/certserial default_days = 730 default_md = sha1 policy = gluuca_policy x509_extensions = gluuca_extensions crlnumber = $dir/crlnumber default_crl_days = 730 [ gluuca_policy ] commonName = supplied stateOrProvinceName = supplied countryName = optional emailAddress = optional organizationName = supplied organizationalUnitName = optional [ gluuca_extensions ] basicConstraints = critical,CA:TRUE,pathlen:0 keyUsage = critical,any subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer keyUsage = digitalSignature,cRLSign,keyCertSign extendedKeyUsage = serverAuth crlDistributionPoints = @crl_section subjectAltName = @alt_names authorityInfoAccess = @ocsp_section [alt_names] DNS.0 = Gluu Intermidiate CA 1 DNS.1 = Gluu CA Intermidiate 1 [crl_section] URI.0 = http://pki.gluu.org/GluuRoot.crl URI.1 = http://pki.backup.com/GluuRoot.crl [ocsp_section] caIssuers;URI.0 = http://pki.gluu.org/GluuRoot.crt caIssuers;URI.1 = http://pki.backup.com/GluuRoot.crt OCSP;URI.0 = http://pki.gluu.org/ocsp/ OCSP;URI.1 = http://pki.backup.com/ocsp/ 1.4. Create a few files where the CA will store it's serials: # touch certindex echo 1000 > certserial echo 1000 > crlnumber 1.5. If you need to set a specific certificate start / expiry date, add the following to [gluuca] # # format: YYYYMMDDHHMMSS default_enddate = 20191222035911 default_startdate = 20181222035911 2. Create and sign Intermediate 1 CA # 2.1. Generate the intermediate CA's private key: # openssl genrsa -out intermediate1.key 4096 Example output: Generating RSA private key, 4096 bit long modulus (2 primes) ........................................................++++ .........++++ e is 65537 (0x010001) 2.2. Generate the intermediate1 CA's CSR: # openssl req -new -sha256 -key intermediate1.key -out intermediate1.csr Example output: You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:US State or Province Name (full name) [Some-State]:TX Locality Name (eg, city) []:Austin Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu, Inc. Organizational Unit Name (eg, section) []:Gluu CA Common Name (e.g. server FQDN or YOUR name) []:Gluu Intermediate CA Email Address []: Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: 2.3. Sign the intermediate1 CSR with the Root CA: # openssl ca -batch -config root-ca.conf -notext -in intermediate1.csr -out intermediate1.crt Example output: Using configuration from root-ca.conf Enter pass phrase for .//rootca.key: Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows countryName :PRINTABLE:'US' stateOrProvinceName :ASN.1 12:'TX' localityName :ASN.1 12:'Austin' organizationName :ASN.1 12:'Gluu, Inc.' organizationalUnitName:ASN.1 12:'Gluu CA' commonName :ASN.1 12:'Gluu Intermediate CA' Certificate is to be certified until Dec 22 07:39:24 2021 GMT (730 days) Write out database with 1 new entries Data Base Updated 2.4. Generate the CRL (both in PEM and DER): # openssl ca -config root-ca.conf -gencrl -keyfile rootca.key -cert rootca.crt -out rootca.crl.pem openssl crl -inform PEM -in rootca.crl.pem -outform DER -out rootca.crl Generate the CRL after every certificate you sign with the CA. 2.5. Configuring the Intermediate CA 1 # Create a new folder for this intermediate and move in to it: mkdir intermediate1 cd ./intermediate1 Copy the Intermediate cert and key from the Root CA: mv ../intermediate1.* ./ Create the index files: touch certindex echo 1000 > certserial echo 1000 > crlnumber 2.6. Create a new intermediate-ca.conf file: # [ ca ] default_ca = gluuca [ crl_ext ] issuerAltName=issuer:copy authorityKeyIdentifier=keyid:always [ gluuca ] dir = ./ new_certs_dir = $dir unique_subject = no certificate = $dir/intermediate1.crt database = $dir/certindex private_key = $dir/intermediate1.key serial = $dir/certserial default_days = 365 default_md = sha1 policy = gluuca_policy x509_extensions = gluuca_extensions crlnumber = $dir/crlnumber default_crl_days = 365 [ gluuca_policy ] commonName = supplied stateOrProvinceName = supplied countryName = optional emailAddress = optional organizationName = supplied organizationalUnitName = optional [ gluuca_extensions ] basicConstraints = critical,CA:FALSE keyUsage = critical,any subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer keyUsage = digitalSignature, nonRepudiation, keyEncipherment extendedKeyUsage = clientAuth crlDistributionPoints = @crl_section subjectAltName = @alt_names authorityInfoAccess = @ocsp_section [alt_names] DNS.0 = example.com DNS.1 = example.org [crl_section] URI.0 = http://pki.gluu.org/GluuIntermidiate1.crl URI.1 = http://pki.backup.com/GluuIntermidiate1.crl [ocsp_section] caIssuers;URI.0 = http://pki.gluu.org/GluuIntermediate1.crt caIssuers;URI.1 = http://pki.backup.com/GluuIntermediate1.crt OCSP;URI.0 = http://pki.gluu.org/ocsp/ OCSP;URI.1 = http://pki.backup.com/ocsp/ Change the [alt_names] section to whatever you need as Subject Alternative names. Remove it including the subjectAltName = @alt_names line if you don't want a Subject Alternative Name. If you need to set a specific certificate start / expiry date, add the following to [gluuca] # format: YYYYMMDDHHMMSS default_enddate = 20191222035911 default_startdate = 20181222035911 Generate an empty CRL (both in PEM and DER): openssl ca -config intermediate-ca.conf -gencrl -keyfile intermediate1.key -cert intermediate1.crt -out intermediate1.crl.pem openssl crl -inform PEM -in intermediate1.crl.pem -outform DER -out intermediate1.crl 2.7. This is sample to show how to revoke cert. Use it only when you need to revoke the intermediate cert: # openssl ca -config root-ca.conf -revoke intermediate1.crt -keyfile rootca.key -cert rootca.crt 3. Creating end user certificates # We use this new intermediate CA to generate an end user certificate. Repeat these steps for every end user certificate you want to sign with this CA. 3.1. Create folder for end user certs: # mkdir enduser-certs 3.2. Generate the end user's private key: # openssl genrsa -out enduser-certs/user-gluu.org.key 4096 3.3. Generate the end user's CSR: # openssl req -new -sha256 -key enduser-certs/user-gluu.org.key -out enduser-certs/user-gluu.org.csr Example output: You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:US State or Province Name (full name) [Some-State]:TX Locality Name (eg, city) []:Austin Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu, Inc. Organizational Unit Name (eg, section) []:User Common Name (e.g. server FQDN or YOUR name) []:Full User Name Email Address []: Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: 3.4. Sign the end user's CSR with the Intermediate 1 CA: # openssl ca -batch -config intermediate-ca.conf -notext -in enduser-certs/user-gluu.org.csr -out enduser-certs/user-gluu.org.crt Example output: Using configuration from intermediate-ca.conf Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows countryName :PRINTABLE:'US' stateOrProvinceName :ASN.1 12:'TX' localityName :ASN.1 12:'Austin' organizationName :ASN.1 12:'Gluu, Inc.' organizationalUnitName:ASN.1 12:'User' commonName :ASN.1 12:'Full User Name' Certificate is to be certified until Dec 22 08:07:15 2020 GMT (365 days) Write out database with 1 new entries Data Base Updated 3.5. Generate the CRL (both in PEM and DER): # openssl ca -config intermediate-ca.conf -gencrl -keyfile intermediate1.key -cert intermediate1.crt -out intermediate1.crl.pem openssl crl -inform PEM -in intermediate1.crl.pem -outform DER -out intermediate1.crl Generate the CRL after every certificate you sign with the CA. 3.6. Create the certificate chain file by concatenating the Root and intermediate 1 certificates together. # cat ../rootca.crt intermediate1.crt > enduser-certs/user-gluu.org.chain Send the following files to the end user: user-gluu.org.crt user-gluu.org.key user-gluu.org.chain You can also let the end user supply their own CSR and just send them the .crt file. Do not delete that from the server, otherwise you cannot revoke it. 3.7. This is sample to show how to revoke cert. Use it only when you need to revoke the end users cert: # openssl ca -config intermediate-ca.conf -revoke enduser-certs/enduser-gluu.org.crt -keyfile intermediate1.key -cert intermediate1.crt 4. Validating the certificate # 4.1. You can validate the end user certificate against the chain using the following command: # openssl verify -CAfile enduser-certs/user-gluu.org.chain enduser-certs/user-gluu.org.crt Example output: enduser-certs/user-gluu.org.crt: OK 4.2. You can also validate it against the CRL. Concatenate the PEM CRL and the chain together first: # cat ../rootca.crt intermediate1.crt intermediate1.crl.pem > enduser-certs/user-gluu.org.crl.chain Verify the certificate: openssl verify -crl_check -CAfile enduser-certs/user-gluu.org.crl.chain enduser-certs/user-gluu.org.crt Example output: enduser-certs/user-gluu.org.crt: OK 5. Export end user certificate to PKCS#12 # Convert a PEM certificate file and a private key to PKCS#12 (.pfx .p12) openssl pkcs12 -export -out enduser-certs/user-gluu.org.pfx -inkey enduser-certs/user-gluu.org.key -in enduser-certs/user-gluu.org.crt -certfile enduser-certs/user-gluu.org.chain Quick Certificates for Testing # 1. Create a user_cert.conf file and update user_dn section: # [ req ] days = 365 prompt = no distinguished_name = user_dn x509_extensions = v3_ca [ user_dn ] countryName = US stateOrProvinceName = TX localityName = Austin organizationName = Gluu, Inc. organizationalUnitName = Gluu SSL department commonName = secure.gluu.com emailAddress = john@gluu.org [ v3_ca ] basicConstraints = CA:FALSE subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always, issuer extendedKeyUsage = clientAuth, emailProtection 2. Generate user cert # openssl req -x509 -config user_cert.conf -nodes -newkey rsa:4096 -keyout user_cert.key -out user_cert.crt 3. Export end user certificate to PKCS#12 # openssl pkcs12 -export -inkey user_cert.key -in user_cert.crt -out user_cert.p12","title":"Index"},{"location":"script-catalog/person_authentication/other/cert/#properties","text":"The module has a few properties: 1) chain_cert_file_path - It's mandatory property. It's path to file with cert chains in pem format. Example: '/etc/certs/chain_cert.pem' 2) map_user_cert - Specify if script should map new user to local account. If true, then on the first authentication, the script will prompt for a username/password in step 2, and then store the certificate fingerprint in the oxExternalUid attribute. Allowed values: true/false Example: true 3) use_generic_validator, use_path_validator, use_ocsp_validator, use_crl_validator - Enable/Disable specific certificate validation. Allowed values: true/false Example: true 4) crl_max_response_size - Specify maximum allowed size of CRL response Allowed values: integer value greater that 0 Example: 10485760 Default value: 5242880 5) credentials_file - Patch to file with reCAPTCHA credentials. Example: '/etc/certs/cert_credentials.json'","title":"Properties"},{"location":"script-catalog/person_authentication/other/cert/#generating-certificates-without-configuration","text":"","title":"Generating Certificates Without Configuration"},{"location":"script-catalog/person_authentication/other/cert/#1-generate-a-certificate-authority-ca-cert","text":"","title":"1. Generate a certificate authority (CA) cert."},{"location":"script-catalog/person_authentication/other/cert/#1-generate-your-ca-certificate-using-this-command","text":"openssl req -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.cer","title":"1. Generate your CA certificate using this command:"},{"location":"script-catalog/person_authentication/other/cert/#2-generate-a-client-ssl-certificate","text":"","title":"2. Generate a client SSL certificate"},{"location":"script-catalog/person_authentication/other/cert/#1-generate-a-private-key-for-the-ssl-client","text":"openssl genrsa -out client.key 4096","title":"1. Generate a private key for the SSL client."},{"location":"script-catalog/person_authentication/other/cert/#2-use-the-clients-private-key-to-generate-a-cert-request","text":"openssl req -new -key client.key -out client.req","title":"2. Use the client's private key to generate a cert request."},{"location":"script-catalog/person_authentication/other/cert/#3-issue-the-client-certificate-using-the-cert-request-and-the-ca-certkey","text":"openssl x509 -req -in client.req -CA ca.cer -CAkey ca.key -set_serial 101 -extensions client -days 365 -outform PEM -out client.cer","title":"3. Issue the client certificate using the cert request and the CA cert/key."},{"location":"script-catalog/person_authentication/other/cert/#4-convert-the-client-certificate-and-private-key-to-pkcs12-format-for-use-by-browsers","text":"openssl pkcs12 -export -inkey client.key -in client.cer -out client.p12","title":"4. Convert the client certificate and private key to pkcs#12 format for use by browsers."},{"location":"script-catalog/person_authentication/other/cert/#5-clean-up-remove-the-client-private-key-client-cert-and-client-request-files-as-the-pkcs12-has-everything-needed","text":"rm client.key client.cer client.req","title":"5. Clean up - remove the client private key, client cert and client request files as the pkcs12 has everything needed."},{"location":"script-catalog/person_authentication/other/cert/#generating-certificate-with-configuration","text":"For testing purposes there is archive with CA/Intermidiate/User certs in archive .","title":"Generating Certificate With Configuration"},{"location":"script-catalog/person_authentication/other/cert/#1-create-and-sign-root-ca","text":"","title":"1. Create and sign Root CA"},{"location":"script-catalog/person_authentication/other/cert/#11-generate-password-protected-a-8192-bit-long-sha-256-rsa-key-for-root-ca","text":"openssl genrsa -aes256 -out rootca.key 8192 Example output: Generating RSA private key, 8192 bit long modulus (2 primes) ....................+++ ........................................................................................................................................................................................................................................................................................................................................................................................+++ e is 65537 (0x010001) Enter pass phrase for rootca.key: Verifying - Enter pass phrase for rootca.key:","title":"1.1. Generate password protected a 8192-bit long SHA-256 RSA key for root CA:"},{"location":"script-catalog/person_authentication/other/cert/#12-create-the-self-signed-root-ca-certificate-cacrt-youll-need-to-provide-an-identity-for-your-root-ca","text":"openssl req -sha256 -new -x509 -days 1826 -key rootca.key -out rootca.crt Example output: Enter pass phrase for rootca.key: You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:US State or Province Name (full name) [Some-State]:TX Locality Name (eg, city) []:Austin Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu, Inc. Organizational Unit Name (eg, section) []:Gluu CA Common Name (e.g. server FQDN or YOUR name) []:Gluu Root CA Email Address []:","title":"1.2 Create the self-signed root CA certificate ca.crt; you'll need to provide an identity for your root CA:"},{"location":"script-catalog/person_authentication/other/cert/#13-create-root-caconf-file","text":"[ ca ] default_ca = gluuca [ crl_ext ] issuerAltName=issuer:copy authorityKeyIdentifier=keyid:always [ gluuca ] dir = ./ new_certs_dir = $dir unique_subject = no certificate = $dir/rootca.crt database = $dir/certindex private_key = $dir/rootca.key serial = $dir/certserial default_days = 730 default_md = sha1 policy = gluuca_policy x509_extensions = gluuca_extensions crlnumber = $dir/crlnumber default_crl_days = 730 [ gluuca_policy ] commonName = supplied stateOrProvinceName = supplied countryName = optional emailAddress = optional organizationName = supplied organizationalUnitName = optional [ gluuca_extensions ] basicConstraints = critical,CA:TRUE,pathlen:0 keyUsage = critical,any subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer keyUsage = digitalSignature,cRLSign,keyCertSign extendedKeyUsage = serverAuth crlDistributionPoints = @crl_section subjectAltName = @alt_names authorityInfoAccess = @ocsp_section [alt_names] DNS.0 = Gluu Intermidiate CA 1 DNS.1 = Gluu CA Intermidiate 1 [crl_section] URI.0 = http://pki.gluu.org/GluuRoot.crl URI.1 = http://pki.backup.com/GluuRoot.crl [ocsp_section] caIssuers;URI.0 = http://pki.gluu.org/GluuRoot.crt caIssuers;URI.1 = http://pki.backup.com/GluuRoot.crt OCSP;URI.0 = http://pki.gluu.org/ocsp/ OCSP;URI.1 = http://pki.backup.com/ocsp/","title":"1.3. Create root-ca.conf file:"},{"location":"script-catalog/person_authentication/other/cert/#14-create-a-few-files-where-the-ca-will-store-its-serials","text":"touch certindex echo 1000 > certserial echo 1000 > crlnumber","title":"1.4. Create a few files where the CA will store it's serials:"},{"location":"script-catalog/person_authentication/other/cert/#15-if-you-need-to-set-a-specific-certificate-start-expiry-date-add-the-following-to-gluuca","text":"# format: YYYYMMDDHHMMSS default_enddate = 20191222035911 default_startdate = 20181222035911","title":"1.5. If you need to set a specific certificate start / expiry date, add the following to [gluuca]"},{"location":"script-catalog/person_authentication/other/cert/#2-create-and-sign-intermediate-1-ca","text":"","title":"2. Create and sign Intermediate 1 CA"},{"location":"script-catalog/person_authentication/other/cert/#21-generate-the-intermediate-cas-private-key","text":"openssl genrsa -out intermediate1.key 4096 Example output: Generating RSA private key, 4096 bit long modulus (2 primes) ........................................................++++ .........++++ e is 65537 (0x010001)","title":"2.1. Generate the intermediate CA's private key:"},{"location":"script-catalog/person_authentication/other/cert/#22-generate-the-intermediate1-cas-csr","text":"openssl req -new -sha256 -key intermediate1.key -out intermediate1.csr Example output: You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:US State or Province Name (full name) [Some-State]:TX Locality Name (eg, city) []:Austin Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu, Inc. Organizational Unit Name (eg, section) []:Gluu CA Common Name (e.g. server FQDN or YOUR name) []:Gluu Intermediate CA Email Address []: Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []:","title":"2.2. Generate the intermediate1 CA's CSR:"},{"location":"script-catalog/person_authentication/other/cert/#23-sign-the-intermediate1-csr-with-the-root-ca","text":"openssl ca -batch -config root-ca.conf -notext -in intermediate1.csr -out intermediate1.crt Example output: Using configuration from root-ca.conf Enter pass phrase for .//rootca.key: Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows countryName :PRINTABLE:'US' stateOrProvinceName :ASN.1 12:'TX' localityName :ASN.1 12:'Austin' organizationName :ASN.1 12:'Gluu, Inc.' organizationalUnitName:ASN.1 12:'Gluu CA' commonName :ASN.1 12:'Gluu Intermediate CA' Certificate is to be certified until Dec 22 07:39:24 2021 GMT (730 days) Write out database with 1 new entries Data Base Updated","title":"2.3. Sign the intermediate1 CSR with the Root CA:"},{"location":"script-catalog/person_authentication/other/cert/#24-generate-the-crl-both-in-pem-and-der","text":"openssl ca -config root-ca.conf -gencrl -keyfile rootca.key -cert rootca.crt -out rootca.crl.pem openssl crl -inform PEM -in rootca.crl.pem -outform DER -out rootca.crl Generate the CRL after every certificate you sign with the CA.","title":"2.4. Generate the CRL (both in PEM and DER):"},{"location":"script-catalog/person_authentication/other/cert/#25-configuring-the-intermediate-ca-1","text":"Create a new folder for this intermediate and move in to it: mkdir intermediate1 cd ./intermediate1 Copy the Intermediate cert and key from the Root CA: mv ../intermediate1.* ./ Create the index files: touch certindex echo 1000 > certserial echo 1000 > crlnumber","title":"2.5. Configuring the Intermediate CA 1"},{"location":"script-catalog/person_authentication/other/cert/#26-create-a-new-intermediate-caconf-file","text":"[ ca ] default_ca = gluuca [ crl_ext ] issuerAltName=issuer:copy authorityKeyIdentifier=keyid:always [ gluuca ] dir = ./ new_certs_dir = $dir unique_subject = no certificate = $dir/intermediate1.crt database = $dir/certindex private_key = $dir/intermediate1.key serial = $dir/certserial default_days = 365 default_md = sha1 policy = gluuca_policy x509_extensions = gluuca_extensions crlnumber = $dir/crlnumber default_crl_days = 365 [ gluuca_policy ] commonName = supplied stateOrProvinceName = supplied countryName = optional emailAddress = optional organizationName = supplied organizationalUnitName = optional [ gluuca_extensions ] basicConstraints = critical,CA:FALSE keyUsage = critical,any subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer keyUsage = digitalSignature, nonRepudiation, keyEncipherment extendedKeyUsage = clientAuth crlDistributionPoints = @crl_section subjectAltName = @alt_names authorityInfoAccess = @ocsp_section [alt_names] DNS.0 = example.com DNS.1 = example.org [crl_section] URI.0 = http://pki.gluu.org/GluuIntermidiate1.crl URI.1 = http://pki.backup.com/GluuIntermidiate1.crl [ocsp_section] caIssuers;URI.0 = http://pki.gluu.org/GluuIntermediate1.crt caIssuers;URI.1 = http://pki.backup.com/GluuIntermediate1.crt OCSP;URI.0 = http://pki.gluu.org/ocsp/ OCSP;URI.1 = http://pki.backup.com/ocsp/ Change the [alt_names] section to whatever you need as Subject Alternative names. Remove it including the subjectAltName = @alt_names line if you don't want a Subject Alternative Name. If you need to set a specific certificate start / expiry date, add the following to [gluuca] # format: YYYYMMDDHHMMSS default_enddate = 20191222035911 default_startdate = 20181222035911 Generate an empty CRL (both in PEM and DER): openssl ca -config intermediate-ca.conf -gencrl -keyfile intermediate1.key -cert intermediate1.crt -out intermediate1.crl.pem openssl crl -inform PEM -in intermediate1.crl.pem -outform DER -out intermediate1.crl","title":"2.6. Create a new intermediate-ca.conf file:"},{"location":"script-catalog/person_authentication/other/cert/#27-this-is-sample-to-show-how-to-revoke-cert-use-it-only-when-you-need-to-revoke-the-intermediate-cert","text":"openssl ca -config root-ca.conf -revoke intermediate1.crt -keyfile rootca.key -cert rootca.crt","title":"2.7. This is sample to show how to revoke cert. Use it only when you need to revoke the intermediate cert:"},{"location":"script-catalog/person_authentication/other/cert/#3-creating-end-user-certificates","text":"We use this new intermediate CA to generate an end user certificate. Repeat these steps for every end user certificate you want to sign with this CA.","title":"3. Creating end user certificates"},{"location":"script-catalog/person_authentication/other/cert/#31-create-folder-for-end-user-certs","text":"mkdir enduser-certs","title":"3.1. Create folder for end user certs:"},{"location":"script-catalog/person_authentication/other/cert/#32-generate-the-end-users-private-key","text":"openssl genrsa -out enduser-certs/user-gluu.org.key 4096","title":"3.2. Generate the end user's private key:"},{"location":"script-catalog/person_authentication/other/cert/#33-generate-the-end-users-csr","text":"openssl req -new -sha256 -key enduser-certs/user-gluu.org.key -out enduser-certs/user-gluu.org.csr Example output: You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [AU]:US State or Province Name (full name) [Some-State]:TX Locality Name (eg, city) []:Austin Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu, Inc. Organizational Unit Name (eg, section) []:User Common Name (e.g. server FQDN or YOUR name) []:Full User Name Email Address []: Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []:","title":"3.3. Generate the end user's CSR:"},{"location":"script-catalog/person_authentication/other/cert/#34-sign-the-end-users-csr-with-the-intermediate-1-ca","text":"openssl ca -batch -config intermediate-ca.conf -notext -in enduser-certs/user-gluu.org.csr -out enduser-certs/user-gluu.org.crt Example output: Using configuration from intermediate-ca.conf Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows countryName :PRINTABLE:'US' stateOrProvinceName :ASN.1 12:'TX' localityName :ASN.1 12:'Austin' organizationName :ASN.1 12:'Gluu, Inc.' organizationalUnitName:ASN.1 12:'User' commonName :ASN.1 12:'Full User Name' Certificate is to be certified until Dec 22 08:07:15 2020 GMT (365 days) Write out database with 1 new entries Data Base Updated","title":"3.4. Sign the end user's CSR with the Intermediate 1 CA:"},{"location":"script-catalog/person_authentication/other/cert/#35-generate-the-crl-both-in-pem-and-der","text":"openssl ca -config intermediate-ca.conf -gencrl -keyfile intermediate1.key -cert intermediate1.crt -out intermediate1.crl.pem openssl crl -inform PEM -in intermediate1.crl.pem -outform DER -out intermediate1.crl Generate the CRL after every certificate you sign with the CA.","title":"3.5. Generate the CRL (both in PEM and DER):"},{"location":"script-catalog/person_authentication/other/cert/#36-create-the-certificate-chain-file-by-concatenating-the-root-and-intermediate-1-certificates-together","text":"cat ../rootca.crt intermediate1.crt > enduser-certs/user-gluu.org.chain Send the following files to the end user: user-gluu.org.crt user-gluu.org.key user-gluu.org.chain You can also let the end user supply their own CSR and just send them the .crt file. Do not delete that from the server, otherwise you cannot revoke it.","title":"3.6. Create the certificate chain file by concatenating the Root and intermediate 1 certificates together."},{"location":"script-catalog/person_authentication/other/cert/#37-this-is-sample-to-show-how-to-revoke-cert-use-it-only-when-you-need-to-revoke-the-end-users-cert","text":"openssl ca -config intermediate-ca.conf -revoke enduser-certs/enduser-gluu.org.crt -keyfile intermediate1.key -cert intermediate1.crt","title":"3.7. This is sample to show how to revoke cert. Use it only when you need to revoke the end users cert:"},{"location":"script-catalog/person_authentication/other/cert/#4-validating-the-certificate","text":"","title":"4. Validating the certificate"},{"location":"script-catalog/person_authentication/other/cert/#41-you-can-validate-the-end-user-certificate-against-the-chain-using-the-following-command","text":"openssl verify -CAfile enduser-certs/user-gluu.org.chain enduser-certs/user-gluu.org.crt Example output: enduser-certs/user-gluu.org.crt: OK","title":"4.1. You can validate the end user certificate against the chain using the following command:"},{"location":"script-catalog/person_authentication/other/cert/#42-you-can-also-validate-it-against-the-crl-concatenate-the-pem-crl-and-the-chain-together-first","text":"cat ../rootca.crt intermediate1.crt intermediate1.crl.pem > enduser-certs/user-gluu.org.crl.chain Verify the certificate: openssl verify -crl_check -CAfile enduser-certs/user-gluu.org.crl.chain enduser-certs/user-gluu.org.crt Example output: enduser-certs/user-gluu.org.crt: OK","title":"4.2. You can also validate it against the CRL. Concatenate the PEM CRL and the chain together first:"},{"location":"script-catalog/person_authentication/other/cert/#5-export-end-user-certificate-to-pkcs12","text":"Convert a PEM certificate file and a private key to PKCS#12 (.pfx .p12) openssl pkcs12 -export -out enduser-certs/user-gluu.org.pfx -inkey enduser-certs/user-gluu.org.key -in enduser-certs/user-gluu.org.crt -certfile enduser-certs/user-gluu.org.chain","title":"5. Export end user certificate to PKCS#12"},{"location":"script-catalog/person_authentication/other/cert/#quick-certificates-for-testing","text":"","title":"Quick Certificates for Testing"},{"location":"script-catalog/person_authentication/other/cert/#1-create-a-user_certconf-file-and-update-user_dn-section","text":"[ req ] days = 365 prompt = no distinguished_name = user_dn x509_extensions = v3_ca [ user_dn ] countryName = US stateOrProvinceName = TX localityName = Austin organizationName = Gluu, Inc. organizationalUnitName = Gluu SSL department commonName = secure.gluu.com emailAddress = john@gluu.org [ v3_ca ] basicConstraints = CA:FALSE subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always, issuer extendedKeyUsage = clientAuth, emailProtection","title":"1. Create a user_cert.conf file and update user_dn section:"},{"location":"script-catalog/person_authentication/other/cert/#2-generate-user-cert","text":"openssl req -x509 -config user_cert.conf -nodes -newkey rsa:4096 -keyout user_cert.key -out user_cert.crt","title":"2. Generate user cert"},{"location":"script-catalog/person_authentication/other/cert/#3-export-end-user-certificate-to-pkcs12","text":"openssl pkcs12 -export -inkey user_cert.key -in user_cert.crt -out user_cert.p12","title":"3. Export end user certificate to PKCS#12"},{"location":"script-catalog/person_authentication/other/ciba/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/compromised_password/readme/","text":"This is a person authentication module for oxAuth to verify if user password has been compromised and allows user to change password immediately after providing answer to secret question set by admin. 1) credentials_file = /etc/certs/vericloud_gluu_creds.json 2) secret_question = Set this parameter for the question to be disaplayed to user 3) secret_answer = Set this parameter for the answer to be provided by user to reset password Update vericloud_gluu_creds.json file with Vericloud API username and secret","title":"Readme"},{"location":"script-catalog/person_authentication/other/custom_registration/","text":"In order to exceute the custom registration workflow, Add the following custom property(key:value) in the script properties: attributes_json_file_path: /etc/Attributes.json and place Attributes.json file in the path specified in the custom property. Place the reg.xhtml file in /opt/gluu/jetty/oxauth/custom/pages/auth/ directory. Enable the script and set it as the default authentication method.","title":"Index"},{"location":"script-catalog/person_authentication/other/duo/","text":"Script contents here This is a person authentication script for jans-auth-server which enables Duo Authentication for user authentication. The module has a few properties: 1) duo_creds_file - It's mandatory property. It's path to file which contains contains ikey, skey, akey. These keys are required for DUO authentication. Example: /etc/certs/duo_creds.json Example content of this file: {\"ikey\": \"ikey_value\", \"skey\": \"skey_value\", \"akey\": \"akey_value\"} 2) duo_host - It's mandatory property. The URL of the DUO API server. Example: api-random.duosecurity.com 3) audit_attribute - It's optional property. It allows to define an attribute which the module should check for to determine whether the user belongs to duo_group or audit_group. Person DUO authentication module uses it if there is duo_group or audit_group property. Example: memberOf 4) duo_group - It's optional property. It's an optional attribute that alows to specify if DUO should be used for specific users. i.e. use DUO only for users who have audit_attribute ( memberOf ) attribute value equal to duo_group . If there is none DUO will be enforced for all users. 5) audit_group - It's optional property. Specify if module should send an e-mail to administrator upon login of a user who has audit_attribute memberOf attribute value equal to audit_group . 6) audit_group_email - It's optional property. It's the administrator's e-mail. Person DUO authentication module uses it if there is audit_group property.","title":"Index"},{"location":"script-catalog/person_authentication/other/forgot_password/","text":"Forgot Password 2FA Token Interception Script # Description # This script is a 2 in 1. It can be used to enable user to reset its password or to enable 2FA sending a token to user's email : How they work: Forgot Password # Step 1: User enters e-mail and if e-mail exists, user receive a token via email Step 2: User enters token received by e-mail Step 3: User enters new password Emai 2FA # Step 1: User enters username and password Step 2: User enters token received by e-mail Instalation # Make sure you have your SMTP settings correctly Gluu Server - Navigate to Configuration > Organization Configuration > SMTP Server Configuration Set up the script function (Forgot Password or Email 2FA) - Navigate to Configuration > Manage Custom Scripts, choose the script and set a custom attribute with key SCRIPT_FUNCTION and value forgot_password for Forgot Password mode, or email_2FA for Email 2FA mode. Enable the custom script. Please notice the xhtml files for this script are currently located at oxAuth/Server/src/main/webapp/auth/forgot_password/ Note: If you want to use both scripts, you'll need to copy it and change the custom attribute from the copied script.","title":"Forgot Password 2FA Token Interception Script"},{"location":"script-catalog/person_authentication/other/forgot_password/#forgot-password-2fa-token-interception-script","text":"","title":"Forgot Password 2FA Token Interception Script"},{"location":"script-catalog/person_authentication/other/forgot_password/#description","text":"This script is a 2 in 1. It can be used to enable user to reset its password or to enable 2FA sending a token to user's email : How they work:","title":"Description"},{"location":"script-catalog/person_authentication/other/forgot_password/#forgot-password","text":"Step 1: User enters e-mail and if e-mail exists, user receive a token via email Step 2: User enters token received by e-mail Step 3: User enters new password","title":"Forgot Password"},{"location":"script-catalog/person_authentication/other/forgot_password/#emai-2fa","text":"Step 1: User enters username and password Step 2: User enters token received by e-mail","title":"Emai 2FA"},{"location":"script-catalog/person_authentication/other/forgot_password/#instalation","text":"Make sure you have your SMTP settings correctly Gluu Server - Navigate to Configuration > Organization Configuration > SMTP Server Configuration Set up the script function (Forgot Password or Email 2FA) - Navigate to Configuration > Manage Custom Scripts, choose the script and set a custom attribute with key SCRIPT_FUNCTION and value forgot_password for Forgot Password mode, or email_2FA for Email 2FA mode. Enable the custom script. Please notice the xhtml files for this script are currently located at oxAuth/Server/src/main/webapp/auth/forgot_password/ Note: If you want to use both scripts, you'll need to copy it and change the custom attribute from the copied script.","title":"Instalation"},{"location":"script-catalog/person_authentication/other/fortinet/","text":"Fortinet - RADIUS server Authentication # Overview # This document explains how to configure the Gluu Server so that when a user logs in, an authentication request is made to Fortinet's remote RADIUS (Remote Authentication Dial-In User Service) server which then validates the user name and password. Prerequisites # A Gluu Server (installation instructions here ) which will play the role of RADIUS client The Fortinet script (included in the default Gluu Server distribution); A Fortinet server which is the RADIUS server. The jradius-client jar library added to oxAuth Fortinet Configuration # In Authentication -> Radius Service -> Clients , create a new client (which is Gluu server). Enter the \"secret\" which will be used by the interception script to exchange RADIUS packets. Gluu Server Configuration # Add JRadius library to oxAuth # Copy the jradius-client jar file to the following oxAuth folder inside the Gluu Server chroot: /opt/gluu/jetty/oxauth/custom/libs Edit /opt/gluu/jetty/oxauth/webapps/oxauth.xml and add the following line: <Set name=\"extraClasspath\">/opt/gluu/jetty/oxauth/custom/libs/jradius-client.jar</Set> Restart the oxauth service Enable Interception Script # Follow the steps below to enable Fortinet's RADIUS authentication: Navigate to Configuration > Person Authentication Scripts Find the fortinet script. Populate the properties table with the details from your Fortinet account: Property Description Input value RADIUS_SERVER_IP IP address of Fortinet's RADIUS Server 10.10.10.1 RADIUS_SERVER_SECRET Configured when the RADIUS client is registered. spam RADIUS_SERVER_AUTH_PORT Authentication port 1812 RADIUS_SERVER_ACCT_PORT Accounting port 1813 Enable the script by checking the box Scroll to the bottom of the page and click Update Now authenticating a user against Fortinet's RADIUS server is possible from your Gluu Server. This means that, using OpenID Connect acr_values , applications can now request Fortinet authentication for users. Note To make sure this method has been enabled successfully, you can check your Gluu Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"fortinet\" . Make Fortinet's user-password authentication the Default mechanism. # If fortinet should be the default authentication mechanism, follow these instructions: Navigate to Configuration > Manage Authentication . Select the Default Authentication Method tab. In the Default Authentication Method window you will see two options: Default acr and oxTrust acr . oxTrust acr sets the authentication mechanism for accessing the oxTrust dashboard GUI (only managers should have acccess to oxTrust). Default acr sets the default authentication mechanism for accessing all applications that leverage your Gluu Server for authentication (unless otherwise specified). If Fortinet should be the default authentication mechanism for all access, change both fields to fortinet. Troubleshooting # If problems are encountered, take a look at the logs, specifically /opt/gluu/jetty/oxauth/logs/oxauth_script.log . Inspect all messages related to Fortinet. For instance, the following messages show an example of correct script initialization: Fortinet. Initialization Fortinet. Initialized successfully Also make sure you are using the latest version of the script that can be found here .","title":"Fortinet - RADIUS server Authentication"},{"location":"script-catalog/person_authentication/other/fortinet/#fortinet-radius-server-authentication","text":"","title":"Fortinet - RADIUS server Authentication"},{"location":"script-catalog/person_authentication/other/fortinet/#overview","text":"This document explains how to configure the Gluu Server so that when a user logs in, an authentication request is made to Fortinet's remote RADIUS (Remote Authentication Dial-In User Service) server which then validates the user name and password.","title":"Overview"},{"location":"script-catalog/person_authentication/other/fortinet/#prerequisites","text":"A Gluu Server (installation instructions here ) which will play the role of RADIUS client The Fortinet script (included in the default Gluu Server distribution); A Fortinet server which is the RADIUS server. The jradius-client jar library added to oxAuth","title":"Prerequisites"},{"location":"script-catalog/person_authentication/other/fortinet/#fortinet-configuration","text":"In Authentication -> Radius Service -> Clients , create a new client (which is Gluu server). Enter the \"secret\" which will be used by the interception script to exchange RADIUS packets.","title":"Fortinet Configuration"},{"location":"script-catalog/person_authentication/other/fortinet/#gluu-server-configuration","text":"","title":"Gluu Server Configuration"},{"location":"script-catalog/person_authentication/other/fortinet/#add-jradius-library-to-oxauth","text":"Copy the jradius-client jar file to the following oxAuth folder inside the Gluu Server chroot: /opt/gluu/jetty/oxauth/custom/libs Edit /opt/gluu/jetty/oxauth/webapps/oxauth.xml and add the following line: <Set name=\"extraClasspath\">/opt/gluu/jetty/oxauth/custom/libs/jradius-client.jar</Set> Restart the oxauth service","title":"Add JRadius library to oxAuth"},{"location":"script-catalog/person_authentication/other/fortinet/#enable-interception-script","text":"Follow the steps below to enable Fortinet's RADIUS authentication: Navigate to Configuration > Person Authentication Scripts Find the fortinet script. Populate the properties table with the details from your Fortinet account: Property Description Input value RADIUS_SERVER_IP IP address of Fortinet's RADIUS Server 10.10.10.1 RADIUS_SERVER_SECRET Configured when the RADIUS client is registered. spam RADIUS_SERVER_AUTH_PORT Authentication port 1812 RADIUS_SERVER_ACCT_PORT Accounting port 1813 Enable the script by checking the box Scroll to the bottom of the page and click Update Now authenticating a user against Fortinet's RADIUS server is possible from your Gluu Server. This means that, using OpenID Connect acr_values , applications can now request Fortinet authentication for users. Note To make sure this method has been enabled successfully, you can check your Gluu Server's OpenID Connect configuration by navigating to the following URL: https://<hostname>/.well-known/openid-configuration . Find \"acr_values_supported\": and you should see \"fortinet\" .","title":"Enable Interception Script"},{"location":"script-catalog/person_authentication/other/fortinet/#make-fortinets-user-password-authentication-the-default-mechanism","text":"If fortinet should be the default authentication mechanism, follow these instructions: Navigate to Configuration > Manage Authentication . Select the Default Authentication Method tab. In the Default Authentication Method window you will see two options: Default acr and oxTrust acr . oxTrust acr sets the authentication mechanism for accessing the oxTrust dashboard GUI (only managers should have acccess to oxTrust). Default acr sets the default authentication mechanism for accessing all applications that leverage your Gluu Server for authentication (unless otherwise specified). If Fortinet should be the default authentication mechanism for all access, change both fields to fortinet.","title":"Make Fortinet's user-password authentication the Default mechanism."},{"location":"script-catalog/person_authentication/other/fortinet/#troubleshooting","text":"If problems are encountered, take a look at the logs, specifically /opt/gluu/jetty/oxauth/logs/oxauth_script.log . Inspect all messages related to Fortinet. For instance, the following messages show an example of correct script initialization: Fortinet. Initialization Fortinet. Initialized successfully Also make sure you are using the latest version of the script that can be found here .","title":"Troubleshooting"},{"location":"script-catalog/person_authentication/other/gplus/","text":"This is a person authentication module for oxAuth that enables Google+ Authentication for user authentication. The module has a few properties: 1) gplus_client_secrets_file - It's mandatory property. It's path to application configuration file downloaded from Google console for application. Example: /etc/certs/gplus_client_secrets.json These are steps needed to get it: a) Log into: https://console.developers.google.com/project b) Click \"Create project\" and enter project name c) Open new project \"API & auth -> Credentials\" menu item in configuration navigation tree d) Click \"Add credential\" with type \"OAuth 2.0 client ID\" e) Select \"Web application\" application type f) Enter \"Authorized JavaScript origins\". It should be CE server DNS name. Example: https://gluu.info g) Click \"Create\" and Click \"OK\" in next dialog h) Click \"Download JSON\" in order to download gplus_client_secrets.json file Also it's mandatory to enable Google+ API: a) Log into: https://console.developers.google.com/project b) Select project and enter project name c) Open new project \"API & auth -> API\" menu item in configuration navigation tree d) Click \"Google+ API\" e) Click \"Enable API\" button 2) gplus_deployment_type - Specify deployment mode. It's optional property. If this property isn't specified script tries to find user in local LDAP by 'subject_identifier' claim specified in id_token. If this property has 'map' value script allow to map 'subject_identifier' to local user account. If this property has 'enroll' value script should add new user to local LDAP with status 'acrtive'. In order to map IDP attributes to local attributes it uses properties gplus_remote_attributes_list and gplus_local_attributes_list. Allowed values: map/enroll Example: enroll 3) gplus_remote_attributes_list - Comma separated list of attribute names. Specify list of Google+ claims(attributes) which script should use to map to local attributes. It's optional property. It's mandatory only if gplus_deployment_type has value 'enroll'. The count of attributes in this property should be equal to count attributes in gplus_local_attributes_list property. Example: email, email, name, family_name, given_name, locale 4) gplus_local_attributes_list - Comma separated list of attribute names. Specify list of local attributes mapped from Google+ userInfo OpenId response. It's optional property. It's mandatory only if gplus_deployment_type has value 'enroll'. The count of attributes in this property should be equal to count attributes in gplus_remote_attributes_list property. Local attributes list should contains next mandatory attributes: uid, mail, givenName, sn, cn. Example: uid, mail, givenName, sn, cn, preferredLanguage 5) extension_module - Specify external module name. It's optional property. External module should implements 2 methods: def init(conf_attr): ... return True/False def postLogin ( conf_attr , user ) : ... return True / False Scripts calls init method at initialization . And calls postLogin after user log in order to execute additional custom workflow . 6) gplus_client_configuration_attribute - Specify client entry attribute name which can override gplus_client_secrets_file file content. It's optional property. It can be used in cases when all clients should use separate gplus_client_secrets.json configuration.","title":"Index"},{"location":"script-catalog/person_authentication/other/idfirst/","text":"Identifier-first authentication # This custom script allows administrators to implement the following workflow: User is presented with a form asking for username only User is shown a form asking for password only (username field is not editable) User is taken to a page where he is challenged to present a second factor (strong credential) for completion of authentication After form submission in step 1, the suitable user entry is looked up and an attribute is expected to contain an acr value corresponding to an already existing and enabled custom script that determines the second factor. If the attribute is not existing, the \"basic\" acr will be used. Thus, the basic script needs to be enabled as well in Gluu server. For numerals 2 and 3 to work properly, all custom scripts to be used (basic, u2f, super_gluu, ect.) should be edited so that the getPageForStep uses the custom page named \"alter_login.xhtml\". In other words, comment out the line showing ` return \"\" ` by prefixing it with a # character and add one with ` return \"/auth/idfirst/alter_login.xhtml\" ` in the subroutine \"getPageForStep\" of every script. Requirements: # To configure the user attribute to lookup for an acr (and thus a second factor), add \" acr_attribute \" as a property of the Identifier-first custom script via oxTrust. Example: name: acr_attribute value: oxPreferredMethod where oxPreferredMethod is an LDAP attribute part of GluuPerson object class. Copy the accompanying custom pages to /opt/gluu/jetty/oxauth/custom/pages/idfirst , namely alter_login.xhtml , alter_login.page.xml (3.0.2 only), and idfirst_login.xhtml . This is only required if your Gluu Server wasn't originally bundled with this script Ensure this script has a low level set in oxTrust. All other scripts to which this scripts forwards to must be greater in level than this.","title":"Identifier-first authentication"},{"location":"script-catalog/person_authentication/other/idfirst/#identifier-first-authentication","text":"This custom script allows administrators to implement the following workflow: User is presented with a form asking for username only User is shown a form asking for password only (username field is not editable) User is taken to a page where he is challenged to present a second factor (strong credential) for completion of authentication After form submission in step 1, the suitable user entry is looked up and an attribute is expected to contain an acr value corresponding to an already existing and enabled custom script that determines the second factor. If the attribute is not existing, the \"basic\" acr will be used. Thus, the basic script needs to be enabled as well in Gluu server. For numerals 2 and 3 to work properly, all custom scripts to be used (basic, u2f, super_gluu, ect.) should be edited so that the getPageForStep uses the custom page named \"alter_login.xhtml\". In other words, comment out the line showing ` return \"\" ` by prefixing it with a # character and add one with ` return \"/auth/idfirst/alter_login.xhtml\" ` in the subroutine \"getPageForStep\" of every script.","title":"Identifier-first authentication"},{"location":"script-catalog/person_authentication/other/idfirst/#requirements","text":"To configure the user attribute to lookup for an acr (and thus a second factor), add \" acr_attribute \" as a property of the Identifier-first custom script via oxTrust. Example: name: acr_attribute value: oxPreferredMethod where oxPreferredMethod is an LDAP attribute part of GluuPerson object class. Copy the accompanying custom pages to /opt/gluu/jetty/oxauth/custom/pages/idfirst , namely alter_login.xhtml , alter_login.page.xml (3.0.2 only), and idfirst_login.xhtml . This is only required if your Gluu Server wasn't originally bundled with this script Ensure this script has a low level set in oxTrust. All other scripts to which this scripts forwards to must be greater in level than this.","title":"Requirements:"},{"location":"script-catalog/person_authentication/other/inwebo/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/otp/Properties%20description/","text":"Script contents here This is a person authentication script for jans-auth-server which enables one-time password for user authentication. The module has a few properties: 1) otp_type - It's mandatory property. It's specify OTP mode: HOTP/ TOTP. Allowed values: hotp/totp Example: hotp 2) issuer - It's mandatory property. It's company name. Example: Janssen Inc 3) otp_conf_file - It's mandatory property. It's specify path to OTP configuration JSON file. Example: /etc/certs/otp_configuration.json 4) label - It's label inside QR code. It's optional property. Example: Janssen OTP 5) qr_options - Specify width and height of QR image. It's optional property. Example: qr_options: { width: 400, height: 400 } 6) registration_uri - It's URL to page where user can register new account. It's optional property. Example: https://ce-dev.jans.org/identity/register","title":"Properties description"},{"location":"script-catalog/person_authentication/other/passport/","text":"Passport is a person authentication module for oxAuth that enables Google+ Authentication , Twitter Authentication , Facebook Authentication etc. for user authentication. The module has a few properties: 1) generic_remote_attributes_list - It's mandatory property. Comma separated list of attribute names. Specify list of User claims(attributes) which script should use to map to local attributes. The count of attributes in this property should be equal to count attributes in generic_local_attributes_list property. Example: username, email, name, name, givenName, familyName, provider 2) generic_local_attributes_list - It's mandatory property. Comma separated list of attribute names. Specify list of local attributes mapped from passport userInfo response. The count of attributes in this property should be equal to count attributes in generic_remote_attributes_list property. Local attributes list should contains next mandatory attributes: uid, mail, givenName, sn, cn. Example: uid, mail, cn, displayName, givenName, sn, provider","title":"Index"},{"location":"script-catalog/person_authentication/other/phonefactor/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/postauthn/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/registration/","text":"This is a person authentication module for oxAuth that allows user to register first and login to server. Required Custom property (key/value) - 1) generic_register_attributes_list = email,fname,lname,email,phone,pwd 2) generic_local_attributes_list = uid,givenName,sn,mail,telephoneNumber,userPassword","title":"Index"},{"location":"script-catalog/person_authentication/other/saml/","text":"This authentication interception script configures oxAuth to use an external SAML identity provider. This approach enables you to dynamically enroll users in your Gluu Server after they authenticate at their home IDP--meaning you can create a local ldap entry for each new inbound SAML user. This is handy because it enables you to use either SAML or OpenID Connect API's that connect to the Gluu Server. Confusing? Yes! Handy... yes, yes! Installation # This list of steps needed to do to enable Asimba/SAML person authentication module. This module depends on python libraries. In order to use it we need to install Jython. Please use next articles to proper Jython installation: Installation notest: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_installation_optional Jython integration: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_python_integration Prepare file with IdP public certificate /etc/certs/saml.pem Confire new custom module in oxTrust: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Custom Scripts\" page. Select \"Person Authentication\" tab. Click on \"Add custom script configuration\" link. Enter name = saml Enter level = 0-100 (priority of this method). Select usage type \"Interactive\". Add custom required and optional properties which specified in README.txt. Copy/paste script from AsimbaPersonAuthentication.py. Activate it via \"Enabled\" checkbox. Click \"Update\" button at the bottom of this page. Configure oxAuth to use SAML authentication by default: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Authentication\" page. Scroll to \"Default Authentication Method\" panel. Select \"saml\" authentication mode. Click \"Update\" button at the bottom of this page. Try to log in using SAML authentication method: Wait 30 seconds and try to log in again. During this time oxAuth reload list of available person authentication modules. Open second browser or second browsing session and try to log in again. It's better to try to do that from another browser session because we can return back to previous authentication method if something will go wrong. There are log messages in this custom authentication script. In order to debug this module we can use command like this: tail -f /opt/tomcat/logs/wrapper.log | grep \"Saml\" Properties # This module has next properties: 1) asimba_saml_certificate_file - It's path to file which contains public IdP certificate in. Example: /etc/certs/saml.pem 2) saml_idp_sso_target_url - The URL at the Identity Provider where to the authentication request should be sent. Example: https://test.gluu.org/asimba/profiles/saml2/sso/web 3) asimba_entity_id - Set the issuer of the authentication request. This would usually be the URL of the issuing web application Example: https://test.gluu.info/saml 4) saml_use_authn_context - Specify if Saml request should contains samlp:RequestedAuthnContext section. Allowed values: true/false Example: true 5) saml_name_identifier_format - Specify in which format IdP should return a name identifier for the user. This property isn't required when saml_use_authn_context has value 'false' Example: urn:oasis:names:tc:SAML:2.0:nameid-format:persistent 6) saml_deployment_type - Specify deployment mode. It's optional property. If this property isn't specified Saml script tries to find user in local LDAP by 'Persistent Id' specified in Saml response. If this property has 'map' value Saml script map should map 'Persistent Id' to local user account. If this property has 'enroll' value Saml script should add new user to local LDAP with status 'register'. In order to map IDP attributes to local attributes it uses propertiessaml_idp_attributes_list and saml_local_attributes_list. Allowed values: map/enroll/enroll_all_attr Example: enroll 7) saml_validate_response - Specify if Saml script should valide Saml response signature. The path to IdP certificate should be specified in asimba_saml_certificate_file property. It's optional property. Default mode specify to validate Saml response. Allowed values: true/false Example: true 8) saml_client_configuration_attribute - Specify oxAuth client entry attribute name which contains Saml configuration in JSON format which allow to override next properties: asimba_saml_certificate_file, asimba_entity_id, saml_use_authn_context, saml_idp_attributes_list, saml_local_attributes_list. It's optional property. Property asimba_saml_certificate_file isn't mandatory. If the value is empty Smal script use global asimba_saml_certificate_file value. Example: oxAuthExtraConf Example content of client oxAuthExtraConf attribute: {\"saml_certificate_file\": \"\", \"asimba_entity_id\": \"https://localhost/app1\", \"saml_use_authn_context\": \"false\", \"saml_idp_attributes_list\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\", \"saml_local_attributes_list\": \"uid, mail, givenName, sn, cn\"} 9) saml_idp_attributes_list - Comma separated list of attribute names. Specify list of IdP attributes which Saml scrpt should use to map to local attributes. It's optional property. It's manadatory only if saml_deployment_type has value 'enroll'. The count of attributes in this property should be equal to count attributes in saml_local_attributes_list property. Example: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname 10) saml_local_attributes_list - Comma separated list of attribute names. Specify list of local attributes mapped from Saml response. It's optional property. It's manadatory only if saml_deployment_type has value 'enroll'. The count of attributes in this property should be equal to count attributes in saml_idp_attributes_list property. Local attributes list should contains next mandatory attributes: uid, mail, givenName, sn, cn. Example: uid, mail, givenName, sn, cn 11) user_object_classes - Specify custom list of LDAP user object classes Example: eduPerson 12) enforce_uniqueness_attr_list - Specify list of unique user attributes to validate if there is no user with simular attributes already Example: uid, mail 13) saml_extension_module - Specify external module name. It's optional property. External module should implements 2 methods: def init(conf_attr): ... return True/False def postLogin ( conf_attr , user ) : ... return True / False SAML scripts calls init method at initialization , and calls postLogin after to execute additional custom workflow . 14) saml_allow_basic_login - Specify if authentication module should allow both: basic and saml authentications Example: false","title":"Index"},{"location":"script-catalog/person_authentication/other/saml/#installation","text":"This list of steps needed to do to enable Asimba/SAML person authentication module. This module depends on python libraries. In order to use it we need to install Jython. Please use next articles to proper Jython installation: Installation notest: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_installation_optional Jython integration: http://ox.gluu.org/doku.php?id=oxtauth:customauthscript#jython_python_integration Prepare file with IdP public certificate /etc/certs/saml.pem Confire new custom module in oxTrust: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Custom Scripts\" page. Select \"Person Authentication\" tab. Click on \"Add custom script configuration\" link. Enter name = saml Enter level = 0-100 (priority of this method). Select usage type \"Interactive\". Add custom required and optional properties which specified in README.txt. Copy/paste script from AsimbaPersonAuthentication.py. Activate it via \"Enabled\" checkbox. Click \"Update\" button at the bottom of this page. Configure oxAuth to use SAML authentication by default: Log into oxTrust with administrative permissions. Open \"Configuration\u2192Manage Authentication\" page. Scroll to \"Default Authentication Method\" panel. Select \"saml\" authentication mode. Click \"Update\" button at the bottom of this page. Try to log in using SAML authentication method: Wait 30 seconds and try to log in again. During this time oxAuth reload list of available person authentication modules. Open second browser or second browsing session and try to log in again. It's better to try to do that from another browser session because we can return back to previous authentication method if something will go wrong. There are log messages in this custom authentication script. In order to debug this module we can use command like this: tail -f /opt/tomcat/logs/wrapper.log | grep \"Saml\"","title":"Installation"},{"location":"script-catalog/person_authentication/other/saml/#properties","text":"This module has next properties: 1) asimba_saml_certificate_file - It's path to file which contains public IdP certificate in. Example: /etc/certs/saml.pem 2) saml_idp_sso_target_url - The URL at the Identity Provider where to the authentication request should be sent. Example: https://test.gluu.org/asimba/profiles/saml2/sso/web 3) asimba_entity_id - Set the issuer of the authentication request. This would usually be the URL of the issuing web application Example: https://test.gluu.info/saml 4) saml_use_authn_context - Specify if Saml request should contains samlp:RequestedAuthnContext section. Allowed values: true/false Example: true 5) saml_name_identifier_format - Specify in which format IdP should return a name identifier for the user. This property isn't required when saml_use_authn_context has value 'false' Example: urn:oasis:names:tc:SAML:2.0:nameid-format:persistent 6) saml_deployment_type - Specify deployment mode. It's optional property. If this property isn't specified Saml script tries to find user in local LDAP by 'Persistent Id' specified in Saml response. If this property has 'map' value Saml script map should map 'Persistent Id' to local user account. If this property has 'enroll' value Saml script should add new user to local LDAP with status 'register'. In order to map IDP attributes to local attributes it uses propertiessaml_idp_attributes_list and saml_local_attributes_list. Allowed values: map/enroll/enroll_all_attr Example: enroll 7) saml_validate_response - Specify if Saml script should valide Saml response signature. The path to IdP certificate should be specified in asimba_saml_certificate_file property. It's optional property. Default mode specify to validate Saml response. Allowed values: true/false Example: true 8) saml_client_configuration_attribute - Specify oxAuth client entry attribute name which contains Saml configuration in JSON format which allow to override next properties: asimba_saml_certificate_file, asimba_entity_id, saml_use_authn_context, saml_idp_attributes_list, saml_local_attributes_list. It's optional property. Property asimba_saml_certificate_file isn't mandatory. If the value is empty Smal script use global asimba_saml_certificate_file value. Example: oxAuthExtraConf Example content of client oxAuthExtraConf attribute: {\"saml_certificate_file\": \"\", \"asimba_entity_id\": \"https://localhost/app1\", \"saml_use_authn_context\": \"false\", \"saml_idp_attributes_list\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\", \"saml_local_attributes_list\": \"uid, mail, givenName, sn, cn\"} 9) saml_idp_attributes_list - Comma separated list of attribute names. Specify list of IdP attributes which Saml scrpt should use to map to local attributes. It's optional property. It's manadatory only if saml_deployment_type has value 'enroll'. The count of attributes in this property should be equal to count attributes in saml_local_attributes_list property. Example: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname, http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname 10) saml_local_attributes_list - Comma separated list of attribute names. Specify list of local attributes mapped from Saml response. It's optional property. It's manadatory only if saml_deployment_type has value 'enroll'. The count of attributes in this property should be equal to count attributes in saml_idp_attributes_list property. Local attributes list should contains next mandatory attributes: uid, mail, givenName, sn, cn. Example: uid, mail, givenName, sn, cn 11) user_object_classes - Specify custom list of LDAP user object classes Example: eduPerson 12) enforce_uniqueness_attr_list - Specify list of unique user attributes to validate if there is no user with simular attributes already Example: uid, mail 13) saml_extension_module - Specify external module name. It's optional property. External module should implements 2 methods: def init(conf_attr): ... return True/False def postLogin ( conf_attr , user ) : ... return True / False SAML scripts calls init method at initialization , and calls postLogin after to execute additional custom workflow . 14) saml_allow_basic_login - Specify if authentication module should allow both: basic and saml authentications Example: false","title":"Properties"},{"location":"script-catalog/person_authentication/other/saml-passport/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/super_gluu/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/toopher/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/twilio_sms/","text":"Twilio SMS Authentication Script This is a two step authentication workflow. The first step is standard username password authentication against the local Gluu Server LDAP. The second step requires the person to enter a code that is sent via SMS to the person's mobile number. Script contents here","title":"Index"},{"location":"script-catalog/person_authentication/other/uaf/","text":"Script contents here This is a person authentication script for jans-auth-server that enables UAF for user authentication. The module has a few properties: 1) uaf_server_uri - It's mandatory property. It's URL to UAF server. Example: https://ce-dev.jans.org 2) uaf_policy_name - Specify UAF policy name. It's optional property. Example: default 3) send_push_notifaction - Specify if UAF server should send push notifications to person mobile phone. It's optional property. Allowed values: true/false Example: false 4) registration_uri - It's URL to page where user can register new account. It's optional property. Example: https://ce-dev.jans.org/identity/register 5) qr_options - Specify width and height of QR image. It's optional property. Example: qr_options: { width: 400, height: 400 }","title":"Index"},{"location":"script-catalog/person_authentication/other/wikid/","text":"This is a placeholder","title":"Index"},{"location":"script-catalog/person_authentication/other/wwpass/","text":"Setting Up WWPass Authentication in Gluu Server # Introduction # WWPass replaces the traditional username and password login with a more advanced multi-factor authentication solution. WWPass employs strong cryptography and robust combination of authentication factors to deliver a secure and user-friendly authentication experience. WWPass authentication starts with a smartphone app or a hardware token as the first authentication factor. Then additional authentication factors such as PIN or biometrics can be added to verify the user identity further. Gluu Server is a container distribution of free open source software (FOSS) for identity and access management (IAM). Gluu Server combines SAML 2.0, LDAP, OpenID Connect, and other authentication and authorization protocol implementations to create a platform for user authentication, identity information, and policy decisions. Combining WWPass strong multi-factor authentication with the versatility of Gluu Server helps to build secure IAM solutions that can be used for single sign-on (SSO), customer identity and access management (CIAM), and identity federation. Prerequisites # This tutorial assumes that you have the following: Gluu Server 4.1.1 installed on Ubuntu Server 18.04 or 16.04; An administrative account on this Ubuntu Server; An application certificate and private key for WWPass authentication; WWPass Key app or hardware token; Obtain Application Certificate and Private Key From WWPass # To obtain an application certificate and private key go to wwpass.com , click Sign Up to create a developer account or Log In if you already have an account. Then follow the website instructions to register your application domain and issue the application certificate. Prepare WWPass Integration Files # Copy this directory to your Gluu server and make it current cd wwpass Files in pages directory should be deployed to /opt/gluu-server/opt/gluu/jetty/oxauth/custom/pages/ sudo cp -rL pages/* /opt/gluu-server/opt/gluu/jetty/oxauth/custom/pages/ Files in static directory should be deployed to /opt/gluu-server/opt/gluu/jetty/oxauth/custom/static/ sudo cp -rL pages/* /opt/gluu-server/opt/gluu/jetty/oxauth/custom/static/ Copy wwpass.py to /opt/gluu-server/opt/gluu/python/libs/ sudo cp wwpass.py /opt/gluu-server/opt/gluu/python/libs/ Copy ticket.json to /opt/gluu-server/opt/wwpass_gluu/cgi sudo mkdir -p /opt/gluu-server/opt/wwpass_gluu/cgi sudo cp ticket.json /opt/gluu-server/opt/wwpass_gluu/cgi Make sure ticket.json is executable sudo chmod 755 /opt/gluu-server/opt/wwpass_gluu/cgi/ticket.json Copy WWPass application certificate and private key to /opt/gluu-server/opt/wwpass_gluu/ (assuming the certificate and key files are in your home directory) sudo cp ~/gluu_client.crt /opt/gluu-server/opt/wwpass_gluu/gluu_client.crt sudo cp ~/gluu_client.key /opt/gluu-server/opt/wwpass_gluu/gluu_client.key Replace ~/gluu_client.crt and ~/gluu_client.key with the names and location of your certificate and key files. Copy WWPass CA certificate wwpass.ca.crt to /opt/gluu-server/opt/wwpass_gluu/ sudo cp wwpass.ca.crt /opt/gluu-server/opt/wwpass_gluu Log in to the Gluu Server container sudo /sbin/gluu-serverd login Change ownership of files and directories just copied chown -R jetty:jetty /opt/jetty chown root:gluu /opt/gluu/python/libs/wwpass.py Configure Apache # Use your favorite console text editor to change Apache configuration [vi|nano|joe|...] /opt/gluu-server/etc/apache2/sites-available/https_gluu.conf Scroll down the file until you find the last <Location>...</Location> tag and insert the following snippet below it: <Location /wwpass > require all granted </Location> ScriptAlias \"/wwpass/\" \"/opt/wwpass_gluu/cgi/\" <Directory /opt/wwpass_gluu/cgi/ > SetHandler cgi-script Options +ExecCGI Order deny,allow Allow from all </Directory> Save the file and exit the editor. Enable mod_cgi and restart apache: a2enmod cgi systemctl restart apache2 Check that ticket.json is working. Go to https://<your_gluu_host>/wwpass/ticket.json . If your setup is correct, you will see output like this: { \"result\" : true , \"data\" : \"SPNAME:07629a1963c5e4f4f339ecb852b7a0bf10a90c62@p-sp-05-50:16033\" , \"ttl\" : 600 , \"encoding\" : \"plain\" } Configure Gluu Server # Log in as administrator and go to \"Configuration -> Manage Custom scripts\". In Person Authentication tab, click Add custom script configuration at the bottom of the page Create custom script wwpass with Location Type set to Database . Add the following to Custom Property fields by clicking on Add new property button: wwpass_crt_file: /opt/wwpass_gluu/gluu_client.crt wwpass_key_file: /opt/wwpass_gluu/gluu_client.key registration_url: URL of the registration web application, if you have one. Do not add this property otherwise recovery_url: URL for account recovery, if you have one. Do not add this property otherwise. To require PIN or biometrics during login, add: use_pin: True To enable binding WWPass keys with email, add: allow_email_bind: True Note, your Gluu server should be able to send emails, see Configuration -> Organization configuration -> SMTP Server Configuration . To enable binding WWPass keys with existing usernames and passwords, add: allow_password_bind: True To enable binding WWPass keys with another WWPass key, add: allow_passkey_bind: True Replace the content of Script textbox with the content of wwpassauth.py from gluu-master Set Enabled checkbox to enable the custom script: Click the Update button. It's also recommended to increase the unauthenticated session lifetime to give users more time to bind their WWPass keys. Go to Configuration -> JSON configuration -> OxAuth Configuration , find sessionIdUnauthenticatedUnusedLifetime setting and set it to 600 or more. Click Update to save settings. Set up Authentication Method # Before switching to WWPass authentication, make sure you have opened an administrator session in a different browser (not in a different window, but a completely different browser). Do not close that browser window and reload it from time to time to make sure your session does not expire. Keep the backup session opened until you are sure that WWPass authentication works properly or you might lock yourself out of Gluu. If that happens, refer to: Gluu FAQ In the Gluu Admin interface, navigate to Configuration -> Manage Authentication -> Default Authentication Method . Set both options to \"wwpass\". Click Update to save settings. Test Your Setup # Open \"https:// /\" in a different browser (not the one you used to configure Gluu). Try to sign in to your Gluu server with WWPass and bind your key using either email or username and password. If something does not work as expected, return to your main browser and revert Configuration -> Manage Authentication -> Default Authentication Method back to auth_ldap_server while you troubleshoot the problem. Troubleshooting # Relevant Gluu log files are: /opt/gluu-server/opt/gluu/jetty/oxauth/logs/oxauth.log /opt/gluu-server/opt/gluu/jetty/oxauth/logs/oxauth_script.log Check the files above for any errors. Errors in wwpass interception script are also displayed in Gluu web interface at 'Configuration -> Manage Custom scripts'. If there are any errors in the script, its name will be in red and the script editor will display the red button named \"Show Error\". Feel free to contact WWPass at support@wwpass.com if you have troubles integrating WWPass in your Gluu Server.","title":"Setting Up WWPass Authentication in Gluu Server"},{"location":"script-catalog/person_authentication/other/wwpass/#setting-up-wwpass-authentication-in-gluu-server","text":"","title":"Setting Up WWPass Authentication in Gluu Server"},{"location":"script-catalog/person_authentication/other/wwpass/#introduction","text":"WWPass replaces the traditional username and password login with a more advanced multi-factor authentication solution. WWPass employs strong cryptography and robust combination of authentication factors to deliver a secure and user-friendly authentication experience. WWPass authentication starts with a smartphone app or a hardware token as the first authentication factor. Then additional authentication factors such as PIN or biometrics can be added to verify the user identity further. Gluu Server is a container distribution of free open source software (FOSS) for identity and access management (IAM). Gluu Server combines SAML 2.0, LDAP, OpenID Connect, and other authentication and authorization protocol implementations to create a platform for user authentication, identity information, and policy decisions. Combining WWPass strong multi-factor authentication with the versatility of Gluu Server helps to build secure IAM solutions that can be used for single sign-on (SSO), customer identity and access management (CIAM), and identity federation.","title":"Introduction"},{"location":"script-catalog/person_authentication/other/wwpass/#prerequisites","text":"This tutorial assumes that you have the following: Gluu Server 4.1.1 installed on Ubuntu Server 18.04 or 16.04; An administrative account on this Ubuntu Server; An application certificate and private key for WWPass authentication; WWPass Key app or hardware token;","title":"Prerequisites"},{"location":"script-catalog/person_authentication/other/wwpass/#obtain-application-certificate-and-private-key-from-wwpass","text":"To obtain an application certificate and private key go to wwpass.com , click Sign Up to create a developer account or Log In if you already have an account. Then follow the website instructions to register your application domain and issue the application certificate.","title":"Obtain Application Certificate and Private Key From WWPass"},{"location":"script-catalog/person_authentication/other/wwpass/#prepare-wwpass-integration-files","text":"Copy this directory to your Gluu server and make it current cd wwpass Files in pages directory should be deployed to /opt/gluu-server/opt/gluu/jetty/oxauth/custom/pages/ sudo cp -rL pages/* /opt/gluu-server/opt/gluu/jetty/oxauth/custom/pages/ Files in static directory should be deployed to /opt/gluu-server/opt/gluu/jetty/oxauth/custom/static/ sudo cp -rL pages/* /opt/gluu-server/opt/gluu/jetty/oxauth/custom/static/ Copy wwpass.py to /opt/gluu-server/opt/gluu/python/libs/ sudo cp wwpass.py /opt/gluu-server/opt/gluu/python/libs/ Copy ticket.json to /opt/gluu-server/opt/wwpass_gluu/cgi sudo mkdir -p /opt/gluu-server/opt/wwpass_gluu/cgi sudo cp ticket.json /opt/gluu-server/opt/wwpass_gluu/cgi Make sure ticket.json is executable sudo chmod 755 /opt/gluu-server/opt/wwpass_gluu/cgi/ticket.json Copy WWPass application certificate and private key to /opt/gluu-server/opt/wwpass_gluu/ (assuming the certificate and key files are in your home directory) sudo cp ~/gluu_client.crt /opt/gluu-server/opt/wwpass_gluu/gluu_client.crt sudo cp ~/gluu_client.key /opt/gluu-server/opt/wwpass_gluu/gluu_client.key Replace ~/gluu_client.crt and ~/gluu_client.key with the names and location of your certificate and key files. Copy WWPass CA certificate wwpass.ca.crt to /opt/gluu-server/opt/wwpass_gluu/ sudo cp wwpass.ca.crt /opt/gluu-server/opt/wwpass_gluu Log in to the Gluu Server container sudo /sbin/gluu-serverd login Change ownership of files and directories just copied chown -R jetty:jetty /opt/jetty chown root:gluu /opt/gluu/python/libs/wwpass.py","title":"Prepare WWPass Integration Files"},{"location":"script-catalog/person_authentication/other/wwpass/#configure-apache","text":"Use your favorite console text editor to change Apache configuration [vi|nano|joe|...] /opt/gluu-server/etc/apache2/sites-available/https_gluu.conf Scroll down the file until you find the last <Location>...</Location> tag and insert the following snippet below it: <Location /wwpass > require all granted </Location> ScriptAlias \"/wwpass/\" \"/opt/wwpass_gluu/cgi/\" <Directory /opt/wwpass_gluu/cgi/ > SetHandler cgi-script Options +ExecCGI Order deny,allow Allow from all </Directory> Save the file and exit the editor. Enable mod_cgi and restart apache: a2enmod cgi systemctl restart apache2 Check that ticket.json is working. Go to https://<your_gluu_host>/wwpass/ticket.json . If your setup is correct, you will see output like this: { \"result\" : true , \"data\" : \"SPNAME:07629a1963c5e4f4f339ecb852b7a0bf10a90c62@p-sp-05-50:16033\" , \"ttl\" : 600 , \"encoding\" : \"plain\" }","title":"Configure Apache"},{"location":"script-catalog/person_authentication/other/wwpass/#configure-gluu-server","text":"Log in as administrator and go to \"Configuration -> Manage Custom scripts\". In Person Authentication tab, click Add custom script configuration at the bottom of the page Create custom script wwpass with Location Type set to Database . Add the following to Custom Property fields by clicking on Add new property button: wwpass_crt_file: /opt/wwpass_gluu/gluu_client.crt wwpass_key_file: /opt/wwpass_gluu/gluu_client.key registration_url: URL of the registration web application, if you have one. Do not add this property otherwise recovery_url: URL for account recovery, if you have one. Do not add this property otherwise. To require PIN or biometrics during login, add: use_pin: True To enable binding WWPass keys with email, add: allow_email_bind: True Note, your Gluu server should be able to send emails, see Configuration -> Organization configuration -> SMTP Server Configuration . To enable binding WWPass keys with existing usernames and passwords, add: allow_password_bind: True To enable binding WWPass keys with another WWPass key, add: allow_passkey_bind: True Replace the content of Script textbox with the content of wwpassauth.py from gluu-master Set Enabled checkbox to enable the custom script: Click the Update button. It's also recommended to increase the unauthenticated session lifetime to give users more time to bind their WWPass keys. Go to Configuration -> JSON configuration -> OxAuth Configuration , find sessionIdUnauthenticatedUnusedLifetime setting and set it to 600 or more. Click Update to save settings.","title":"Configure Gluu Server"},{"location":"script-catalog/person_authentication/other/wwpass/#set-up-authentication-method","text":"Before switching to WWPass authentication, make sure you have opened an administrator session in a different browser (not in a different window, but a completely different browser). Do not close that browser window and reload it from time to time to make sure your session does not expire. Keep the backup session opened until you are sure that WWPass authentication works properly or you might lock yourself out of Gluu. If that happens, refer to: Gluu FAQ In the Gluu Admin interface, navigate to Configuration -> Manage Authentication -> Default Authentication Method . Set both options to \"wwpass\". Click Update to save settings.","title":"Set up Authentication Method"},{"location":"script-catalog/person_authentication/other/wwpass/#test-your-setup","text":"Open \"https:// /\" in a different browser (not the one you used to configure Gluu). Try to sign in to your Gluu server with WWPass and bind your key using either email or username and password. If something does not work as expected, return to your main browser and revert Configuration -> Manage Authentication -> Default Authentication Method back to auth_ldap_server while you troubleshoot the problem.","title":"Test Your Setup"},{"location":"script-catalog/person_authentication/other/wwpass/#troubleshooting","text":"Relevant Gluu log files are: /opt/gluu-server/opt/gluu/jetty/oxauth/logs/oxauth.log /opt/gluu-server/opt/gluu/jetty/oxauth/logs/oxauth_script.log Check the files above for any errors. Errors in wwpass interception script are also displayed in Gluu web interface at 'Configuration -> Manage Custom scripts'. If there are any errors in the script, its name will be in red and the script editor will display the red button named \"Show Error\". Feel free to contact WWPass at support@wwpass.com if you have troubles integrating WWPass in your Gluu Server.","title":"Troubleshooting"},{"location":"script-catalog/person_authentication/other/yubicloud/","text":"Yubicloud OTP Validataion # Script contents here This is a single step authentication workflow. Instead of a human entering a password, Yubico's Yubikey OTP will be taken in as password. This script uses the Yubicloud Service by Yubico for validation of the OTP. Here are the steps required to setup the Yubico OTP as password. 1. Set up a custom attribute named the `yubikeyId` . Add this attribute the users who have to be authenticated via this method . Store the public part of the Yubikey Idendity ( usually the first 12 chars of OTP ) in this attribute against each user . This matches the user against the key . Set ting up Custom Attributes : https :// www . gluu . org / docs / customize / attributes / Find the Yubikey Idendity : https :// demo . yubico . com 2. Register for a Yubicloud API Key and get client ID and client Secret . https :// upgrade . yubico . com / getapikey / 3. Configure the custom script : i ) Enter the value for `yubicloud_uri` as any one of the following : api . yubico . com api2 . yubico . com api3 . yubico . com api4 . yubico . com api5 . yubico . com ii ) Enter the client secret as `yubicloud_api_key` iii ) Enter the client ID as `yubicloud_id` Now the method yubicloud can be set as the authentication mechanism and Yubikey can be used in place of the password of the users for authentication.","title":"Index"},{"location":"script-catalog/person_authentication/other/yubicloud/#yubicloud-otp-validataion","text":"Script contents here This is a single step authentication workflow. Instead of a human entering a password, Yubico's Yubikey OTP will be taken in as password. This script uses the Yubicloud Service by Yubico for validation of the OTP. Here are the steps required to setup the Yubico OTP as password. 1. Set up a custom attribute named the `yubikeyId` . Add this attribute the users who have to be authenticated via this method . Store the public part of the Yubikey Idendity ( usually the first 12 chars of OTP ) in this attribute against each user . This matches the user against the key . Set ting up Custom Attributes : https :// www . gluu . org / docs / customize / attributes / Find the Yubikey Idendity : https :// demo . yubico . com 2. Register for a Yubicloud API Key and get client ID and client Secret . https :// upgrade . yubico . com / getapikey / 3. Configure the custom script : i ) Enter the value for `yubicloud_uri` as any one of the following : api . yubico . com api2 . yubico . com api3 . yubico . com api4 . yubico . com api5 . yubico . com ii ) Enter the client secret as `yubicloud_api_key` iii ) Enter the client ID as `yubicloud_id` Now the method yubicloud can be set as the authentication mechanism and Yubikey can be used in place of the password of the users for authentication.","title":"Yubicloud OTP Validataion"},{"location":"script-catalog/person_authentication/otp-external-authenticator/","text":"This is a placeholder","title":"OTP External Authenticator"},{"location":"script-catalog/person_authentication/smpp-2fa/","text":"This is a placeholder","title":"SMPP"},{"location":"script-catalog/person_authentication/super-gluu-external-authenticator/","text":"This is a placeholder","title":"SuperGluu External Authenticator"},{"location":"script-catalog/person_authentication/twilio-2fa/","text":"This is a placeholder","title":"Twillio"},{"location":"script-catalog/person_authentication/user-cert-external-authenticator/","text":"This is a placeholder","title":"User Cert External Authenticator"},{"location":"script-catalog/person_authentication/yubicloud-external-authenticator/","text":"This is a placeholder","title":"YubiCloud External Autheticator"},{"location":"script-catalog/post_authn/post-authn/","text":"This is a placeholder","title":"Post Authentication"},{"location":"script-catalog/resource_owner_password_credentials/","text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"script-catalog/resource_owner_password_credentials/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"script-catalog/resource_owner_password_credentials/resource-owner-password-credentials/","text":"This is a placeholder","title":"Resource Owner Password"},{"location":"script-catalog/resource_owner_password_credentials/resource-owner-password-credentials-custom-params/","text":"This is a placeholder","title":"Resource Owner Password (Custom Param)"},{"location":"script-catalog/revoke_token/revoke-token/","text":"This is a placeholder","title":"Revoke Token"},{"location":"script-catalog/scim/","text":"SCIM Guide # Overview # SCIM script allows you to execute custom logic when certain SCIM API operations are invoked. With SCIM scripts, custom business logic can be executed when several of the SCIM API operations are invoked. This is useful in many situations, for example: Trigger notifications to external systems when certain resources are deleted Alter the actual responses the service produces Attach additional information to resources when they are created or updated Implement a fine-grained level of access to resources so different callers have permission to handle only a restricted number of resources Notes: # In this document, the term resources refer to those \"entities\" the service can manage, for instance, users or groups The term operation refers to any SCIM functionality accessible through its HTTP endpoints Basic development skills are assumed. Some grasp of Java and Python are required as well as understanding of the SCIM protocol. Interface # Methods # API Overview Custom scripts adhere to a simple API (ie. a well-defined collection of methods/routines) that is described in the following. It is advised to check the dummy script provided here as you read this section. Scripts' config properties All methods contain a configurationAttributes parameter, this gives access to the configuration properties of the script itself. This is a relevant aspect of Gluu scripts: they are all parameterizable!. configurationAttributes is a java.util.Map<String, SimpleCustomProperty> and here is how SimpleCustomProperty looks. Basic Methods These are methods not related to SCIM operations but still play key roles: |Method Name|Description|Return Value| |:---|:---|:---| | init |Called when the (SCIM) service starts and every time the script properties or code changes|A boolean value describing success or failure| | destroy |Called every time the script properties or code changes (called before init )|A boolean value describing success or failure| | getApiVersion |Determines what methods are effectively called when SCIM endpoints are invoked|A positive integer| Pre-resource Modification They are called when the resource is about to be persisted. The second parameter in these methods hold the object that will be persisted to permanent storage, thus any change or manipulation upon the object will be reflected in the underlying database (as well as in the output of the SCIM operation call itself). These methods are called regardless of the API version used. Names are self explanatory: Methods 2nd param 2nd param Class/Link createUser , updateUser , deleteUser user ScimCustomPerson createGroup , updateGroup , deleteGroup group GluuGroup Pre-resource modification methods return a boolean. A False value aborts the corresponding SCIM operation and a 500 error is returned. The same applies if the method execution crashes at runtime. Note that update* methods are called for both SCIM PUT and PATCH operations. Post-resource Modification They are called after the resource is persisted. The second parameter in these methods hold the object that was saved. Any change or manipulation upon the object will not be reflected in the underlying database, but may still modify the service response. These methods are called if getApiVersion returns a number >= 2. Methods 2nd param 2nd param Class/Link postCreateUser , postUpdateUser , postDeleteUser user ScimCustomPerson postCreateGroup , postUpdateGroup , postDeleteGroup group GluuGroup Post-resource modification methods return a boolean. A False value aborts the corresponding SCIM operation and a 500 error is returned. The same applies if the method execution crashes at runtime. Note that postUpdate* methods are called for both SCIM PUT and PATCH operations. Single Resource Retrieval These apply for SCIM operations that retrieve a resource by ID. They are called after the resource has been obtained from the database. The second parameter in these methods hold a reference to such object. Any change or manipulation upon the object will not be reflected in the underlying database, but may still modify the service response. These methods are called if getApiVersion returns a number >= 3. Methods 2nd param 2nd param Class/Link getUser user ScimCustomPerson getGroup group GluuGroup Single resource retrieval methods return a boolean. A False value aborts the whole SCIM operation and a 500 error is returned. The same applies if the method execution crashes at runtime. Multiple Resources Retrieval These apply for SCIM search operations. They are called after the results have been obtained from the database. The second parameter in these methods hold a reference to such result set. Any change or manipulation upon the object will not be reflected in the underlying database, but may still modify the service response. These methods are called if getApiVersion returns a number >= 4. Methods 2nd param 2nd param Class/Link postSearchUsers results PagedResult postSearchGroups results PagedResult Multiple resources retrieval methods return a boolean. A False value aborts the whole SCIM operation and a 500 error is returned. The same applies if the method execution crashes at runtime. Note that searching using the root .search SCIM endpoint will trigger calls to both of the methods listed. Advanced control These are alternative methods that allow to tweak the response the service produces. They can be employed to introduce complex business rules when operations are executed. These methods are called if getApiVersion returns a number >= 5. Methods manageResourceOperation manageSearchOperation Example: Modifying Search Results # SCIM spec defines the concept of attribute returnability where some attributes should never be part of a response (like passwords), always be returned (like resource identifiers), or be returned by default unless otherwise stated by the excludedAttributes parameter. Assume you are maintaining a user base of secret agents that work for your company and need to avoid exposing information such as their physical addresses for safety reasons. To keep it simple let's restrict the scope to user searches only. In practice you should take steps to hide this data on user retrieval and update. Let's alter postSearchUsers 's second parameter ( results ) to ensure addresses are not leaked: for user in results . getEntries () : user . setAttribute ( \"jansAddres\" , None ) This is very straightforward code except for the usage of jansAddres . Shouldn't it be simply addresses as the known SCIM attribute? Scripts work with entities that are about to be persisted or have already been saved so they kind of resemble the database structure (schema in LDAP terms). It turns out that database attribute names rarely match with SCIM names. While it is easy to know the SCIM name of a database attribute, the converse requires checking the code, however since you already have the skill this shouldn't be a problem: in this Java class you'll find the representation of a user resource in SCIM spec terms. Pay attention to the addresses field and its associated StoreReference annotation that contains the attribute where addresses are actually stored. With that said, save your modifications. You may like the idea of adding some prints for enlightment like: print \"%d entries returned of %d\" % ( results . getEntriesCount () , results . getTotalEntriesCount ()) for user in results . getEntries () : print \"Flushing addresses for user %s\" % user . getUid () user . setAttribute ( \"jansAddres\" , None ) Ensure no addresses are returned anymore in your SCIM user searches. Happy testing! Controlling execution of SCIM operations # With the manageResourceOperation and manageSearchOperation methods you can make complex decisions on how processing should take place based on contextual data and the incoming payload. manageResourceOperation This method is invoked when any following operations are executed: resource creation, modification, removal and retrieval by ID. In case of bulks, the method is called for every operation that fits into these categories. Parameters are described in the table below: Name Description Class/Link context Provides contextual information about the SCIM operation being called such as type of resource involved, HTTP verb, request headers, query params, etc. OperationContext entity A non-null object representing the resource involved A descendant of Entry . If the resource is a user, it will be an instance of ScimCustomPerson . In case of a group, it will be a GluuGroup payload The payload sent in the invocation; null when the operation is removal or retrieval by ID The datatype depends on the operation called. Check the interface that suits best and inspect the first parameter's datatype. The class will belong to some subpackage inside io.jans.scim.model.scim2 This method is expected to return an instance of javax.ws.rs.core.Response that supersedes the output of the operation itself. In other words, the actual processing of the operation is skipped in favor of the code supplied here. However note that minor validations may take place in the payload before your code is actually called. Returning None transfers the control of the operation for normal processing (default Jans implementation). If the method execution crashes at runtime, a 500 HTTP error is sent. Notes: Possible values for context.getResourceType() are: User, Group, FidoDevice, Fido2Device context.getTokenDetails().getValue() is a shortcut that will give you the access token the caller employed to issue the service call Both context.getTokenDetails().getTokenType() and context.getTokenDetails().getScope() return non null values when the protection mechanism of the API is OAuth or test mode Note that for resource creation operation, entity basically contains the same data supplied in the POST payload . In this case, entity has not originated from the database and has not been persisted either For the case of modification, retrieval and removal, entity contains the data currently stored in the database for the resource in question Since many values come from Java code, you can always do getClass().getName() to get an idea of what type of variables you are dealing with To build custom error responses your can reuse some of the getErrorResponse methods of class BaseScimWebService This method offers a high degree of flexibility. Perform careful testing of your code and account all potential scenarios. manageSearchOperation This method is invoked when resource searches are performed. Parameters are described in the table below: name Description Class/Link context Provides contextual information about the SCIM operation being called such as type of resource involved, HTTP verb, request headers, query params, etc. OperationContext searchRequest An object representing the search parameters provided in the call (applies for both GET and POST) SearchRequest Unlike manageResourceOperation , no entity parameter is passed. This is so because making decisions based on already executed searches would have a performance impact. Instead you can use context.setFilterPrepend(...) to help restrict the search against the database: here you can pass a String value that will be interpreted as an SCIM filter expression (see section 3.4.2.2 of RFC 7644). When the search being performed already contains a search filter (i.e. searchRequest.getFilter() is non-empty), a new filter is created by appending both \"subfilters\" with an and operator. As in the case of manageResourceOperation this method is expected to return an instance of javax.ws.rs.core.Response . Returning None transfers the control of the operation for normal processing (the Jans implementation). If the method execution crashes at runtime, a 500 HTTP error is sent. The same recommendations given for manageResourceOperation apply here. If you build filter expressions in your method, ensure they are syntactically valid to avoid your callers getting unexpected \"invalidFilter\" 400 errors. Example: segmenting the user base Let's assume you make use of the SCIM attribute userType so that your user base is partitioned into three disjoint segments according to such attribute and you have designated its possible values to be: Contractor, Employee, or Intern. Suppose your company has three different applications that make management of users in every category, that is, only one application is devoted to manage contractors, another employees, and other interns. You are interested in consistently granting access so that no application can create, query or modify users that don't belong to its focus. To properly handle this multi-tenancy scenario, you decide to use the contextual information coming from every request to determine if the operation should be allowed or not. For this purpose you communicate every application developer to send an additional HTTP header in their call with a value that only you (the administrator) and the developer knows. Let's call it the \"secret\". For the sake of simplicity let's assume developers are external to the company and only you know their identities. They don't know each other so they cannot exchange secrets. The strategy to implement segmentation is rather simple: Alter the default SCIM script by supplying a custom implementation for the methods that control execution Make the HTTP header name be a configuration property of the script so that it is not hard-coded Add a configuration property that contains the mapping of userType value vs. expected header value in JSON format Adding and parsing config properties Using Jans Config CLI update the SCIM script and add properties: custom_header with value USER-SEGMENT-SECRET access_map with value { \"<random_string>\":\"Contractor\", \"<random_string>\":\"Employee\", \"<random_string>\":\"Intern\" } Save the changes. In the init method this properties should be parsed. To start, let's add some imports: from io.jans.scim.ws.rs.scim2 import BaseScimWebService import json Here is how init would look like: def init ( self , configurationAttributes ): self . custom_header = configurationAttributes . get ( \"custom_header\" ) . getValue2 () access_map_json = configurationAttributes . get ( \"access_map\" ) . getValue2 () self . access_map = json . loads ( access_map_json ) print \"ScimEventHandler (init): Initialized successfully\" return True Note no validations took place here: we assumed the script contains the properties, that they are non empty and have sensible values. Allow/Deny resource operations The first step is to know the kind of application that is calling our service. For this purpose let's create a method that given incoming request headers returns the matching userType # headers params is an instance of javax . ws . rs . core . MultivaluedMap < String , String > def getUserType ( self , headers ) : secret = headers . getFirst ( self . custom_header ) if secret in self . access_map : return self . access_map [ secret ] else : return None Now let's code manageResourceOperation . We should allow access only under the following conditions: The getUserType method does not return None The entity object ( ScimCustomPerson instance) has a proper userType value. This means that for user creation, the incoming payload comes with a matching userType and for the other cases, the already stored attribute matches as well Assume that if the operation invoked is not user-related, we should allow access freely. Here is how the implementation might look: def manageResourceOperation ( self , context , entity , payload , configurationAttributes ): print \"manageResourceOperation. SCIM endpoint invoked is %s (HTTP %s )\" % ( context . getPath (), context . getMethod ()) if context . getResourceType () != \"User\" : return None expected_user_type = self . getUserType ( context . getRequestHeaders ()) if expected_user_type != None and entity . getAttribute ( \"jansUsrTyp\" ) == expected_user_type : return None else : return BaseScimWebService . getErrorResponse ( 403 , None , \"Attempt to handle a not allowed user type\" ) Note no usage of the payload took place. A case you may like to evaluate is where mistakenly using an update operation, the userType is set to an unexpected value. Allow/Deny searches This time instead of inspecting an entity, we ought to make a filter expression to restrict the search when the database is queried. For your reference, a valid filter expression is for instance userType eq \"Contractor\" . def manageSearchOperation ( self , context , searchRequest , configurationAttributes ) : print \"manageSearchOperation. SCIM endpoint invoked is %s (HTTP %s)\" % ( context . getPath () , context . getMethod ()) resource_type = context . getResourceType () print \"manageSearchOperation. This is a search over %s resources\" % resource_type if resource_type != \"User\" : return None expected_user_type = self . getUserType ( context . getRequestHeaders ()) if expected_user_type != None : context . setFilterPrepend ( \"userType eq \\\" % s \\ \"\" % expected_user_type ) return None else : return BaseScimWebService . getErrorResponse ( 403 , None , \"Attempt to handle a not allowed user type\" ) The manageSearchOperation must return a javax.ws.rs.core.Response . A None value makes continue the operation processing normally. Working with more than one script # You may have already noticed that it is possible to have several scripts under the SCIM type. This is how execution takes place when there are several scripts enabled: The applicable method is called in the first script. If the return value was True , the method is called again but this time in the subsequent script. If at any point a False return value is encountered, the SCIM operation is aborted with error 500. This means that a normal operation execution requires all involved methods across different scripts to be successful. There is an important exception to the above and is related to the manage* methods. In this case, only one script takes effect (the first script found). Note that in most cases having a single SCIM script suffices for all needs. Common Use Cases # Script Type: Python # Custom SCIM Event Handler # The sample code snippet shows how to - 1. Modify Search Results 2. Segment the user base 3. Allow/Deny resource operations 4. Allow/Deny searches Script Type: Java # Custom SCIM Event Handler # The sample code snippet shows how to - 1. Modify Search Results 2. Segment the user base 3. Allow/Deny resource operations 4. Allow/Deny searches","title":"SCIM Guide"},{"location":"script-catalog/scim/#scim-guide","text":"","title":"SCIM Guide"},{"location":"script-catalog/scim/#overview","text":"SCIM script allows you to execute custom logic when certain SCIM API operations are invoked. With SCIM scripts, custom business logic can be executed when several of the SCIM API operations are invoked. This is useful in many situations, for example: Trigger notifications to external systems when certain resources are deleted Alter the actual responses the service produces Attach additional information to resources when they are created or updated Implement a fine-grained level of access to resources so different callers have permission to handle only a restricted number of resources","title":"Overview"},{"location":"script-catalog/scim/#notes","text":"In this document, the term resources refer to those \"entities\" the service can manage, for instance, users or groups The term operation refers to any SCIM functionality accessible through its HTTP endpoints Basic development skills are assumed. Some grasp of Java and Python are required as well as understanding of the SCIM protocol.","title":"Notes:"},{"location":"script-catalog/scim/#interface","text":"","title":"Interface"},{"location":"script-catalog/scim/#methods","text":"API Overview Custom scripts adhere to a simple API (ie. a well-defined collection of methods/routines) that is described in the following. It is advised to check the dummy script provided here as you read this section. Scripts' config properties All methods contain a configurationAttributes parameter, this gives access to the configuration properties of the script itself. This is a relevant aspect of Gluu scripts: they are all parameterizable!. configurationAttributes is a java.util.Map<String, SimpleCustomProperty> and here is how SimpleCustomProperty looks. Basic Methods These are methods not related to SCIM operations but still play key roles: |Method Name|Description|Return Value| |:---|:---|:---| | init |Called when the (SCIM) service starts and every time the script properties or code changes|A boolean value describing success or failure| | destroy |Called every time the script properties or code changes (called before init )|A boolean value describing success or failure| | getApiVersion |Determines what methods are effectively called when SCIM endpoints are invoked|A positive integer| Pre-resource Modification They are called when the resource is about to be persisted. The second parameter in these methods hold the object that will be persisted to permanent storage, thus any change or manipulation upon the object will be reflected in the underlying database (as well as in the output of the SCIM operation call itself). These methods are called regardless of the API version used. Names are self explanatory: Methods 2nd param 2nd param Class/Link createUser , updateUser , deleteUser user ScimCustomPerson createGroup , updateGroup , deleteGroup group GluuGroup Pre-resource modification methods return a boolean. A False value aborts the corresponding SCIM operation and a 500 error is returned. The same applies if the method execution crashes at runtime. Note that update* methods are called for both SCIM PUT and PATCH operations. Post-resource Modification They are called after the resource is persisted. The second parameter in these methods hold the object that was saved. Any change or manipulation upon the object will not be reflected in the underlying database, but may still modify the service response. These methods are called if getApiVersion returns a number >= 2. Methods 2nd param 2nd param Class/Link postCreateUser , postUpdateUser , postDeleteUser user ScimCustomPerson postCreateGroup , postUpdateGroup , postDeleteGroup group GluuGroup Post-resource modification methods return a boolean. A False value aborts the corresponding SCIM operation and a 500 error is returned. The same applies if the method execution crashes at runtime. Note that postUpdate* methods are called for both SCIM PUT and PATCH operations. Single Resource Retrieval These apply for SCIM operations that retrieve a resource by ID. They are called after the resource has been obtained from the database. The second parameter in these methods hold a reference to such object. Any change or manipulation upon the object will not be reflected in the underlying database, but may still modify the service response. These methods are called if getApiVersion returns a number >= 3. Methods 2nd param 2nd param Class/Link getUser user ScimCustomPerson getGroup group GluuGroup Single resource retrieval methods return a boolean. A False value aborts the whole SCIM operation and a 500 error is returned. The same applies if the method execution crashes at runtime. Multiple Resources Retrieval These apply for SCIM search operations. They are called after the results have been obtained from the database. The second parameter in these methods hold a reference to such result set. Any change or manipulation upon the object will not be reflected in the underlying database, but may still modify the service response. These methods are called if getApiVersion returns a number >= 4. Methods 2nd param 2nd param Class/Link postSearchUsers results PagedResult postSearchGroups results PagedResult Multiple resources retrieval methods return a boolean. A False value aborts the whole SCIM operation and a 500 error is returned. The same applies if the method execution crashes at runtime. Note that searching using the root .search SCIM endpoint will trigger calls to both of the methods listed. Advanced control These are alternative methods that allow to tweak the response the service produces. They can be employed to introduce complex business rules when operations are executed. These methods are called if getApiVersion returns a number >= 5. Methods manageResourceOperation manageSearchOperation","title":"Methods"},{"location":"script-catalog/scim/#example-modifying-search-results","text":"SCIM spec defines the concept of attribute returnability where some attributes should never be part of a response (like passwords), always be returned (like resource identifiers), or be returned by default unless otherwise stated by the excludedAttributes parameter. Assume you are maintaining a user base of secret agents that work for your company and need to avoid exposing information such as their physical addresses for safety reasons. To keep it simple let's restrict the scope to user searches only. In practice you should take steps to hide this data on user retrieval and update. Let's alter postSearchUsers 's second parameter ( results ) to ensure addresses are not leaked: for user in results . getEntries () : user . setAttribute ( \"jansAddres\" , None ) This is very straightforward code except for the usage of jansAddres . Shouldn't it be simply addresses as the known SCIM attribute? Scripts work with entities that are about to be persisted or have already been saved so they kind of resemble the database structure (schema in LDAP terms). It turns out that database attribute names rarely match with SCIM names. While it is easy to know the SCIM name of a database attribute, the converse requires checking the code, however since you already have the skill this shouldn't be a problem: in this Java class you'll find the representation of a user resource in SCIM spec terms. Pay attention to the addresses field and its associated StoreReference annotation that contains the attribute where addresses are actually stored. With that said, save your modifications. You may like the idea of adding some prints for enlightment like: print \"%d entries returned of %d\" % ( results . getEntriesCount () , results . getTotalEntriesCount ()) for user in results . getEntries () : print \"Flushing addresses for user %s\" % user . getUid () user . setAttribute ( \"jansAddres\" , None ) Ensure no addresses are returned anymore in your SCIM user searches. Happy testing!","title":"Example: Modifying Search Results"},{"location":"script-catalog/scim/#controlling-execution-of-scim-operations","text":"With the manageResourceOperation and manageSearchOperation methods you can make complex decisions on how processing should take place based on contextual data and the incoming payload. manageResourceOperation This method is invoked when any following operations are executed: resource creation, modification, removal and retrieval by ID. In case of bulks, the method is called for every operation that fits into these categories. Parameters are described in the table below: Name Description Class/Link context Provides contextual information about the SCIM operation being called such as type of resource involved, HTTP verb, request headers, query params, etc. OperationContext entity A non-null object representing the resource involved A descendant of Entry . If the resource is a user, it will be an instance of ScimCustomPerson . In case of a group, it will be a GluuGroup payload The payload sent in the invocation; null when the operation is removal or retrieval by ID The datatype depends on the operation called. Check the interface that suits best and inspect the first parameter's datatype. The class will belong to some subpackage inside io.jans.scim.model.scim2 This method is expected to return an instance of javax.ws.rs.core.Response that supersedes the output of the operation itself. In other words, the actual processing of the operation is skipped in favor of the code supplied here. However note that minor validations may take place in the payload before your code is actually called. Returning None transfers the control of the operation for normal processing (default Jans implementation). If the method execution crashes at runtime, a 500 HTTP error is sent. Notes: Possible values for context.getResourceType() are: User, Group, FidoDevice, Fido2Device context.getTokenDetails().getValue() is a shortcut that will give you the access token the caller employed to issue the service call Both context.getTokenDetails().getTokenType() and context.getTokenDetails().getScope() return non null values when the protection mechanism of the API is OAuth or test mode Note that for resource creation operation, entity basically contains the same data supplied in the POST payload . In this case, entity has not originated from the database and has not been persisted either For the case of modification, retrieval and removal, entity contains the data currently stored in the database for the resource in question Since many values come from Java code, you can always do getClass().getName() to get an idea of what type of variables you are dealing with To build custom error responses your can reuse some of the getErrorResponse methods of class BaseScimWebService This method offers a high degree of flexibility. Perform careful testing of your code and account all potential scenarios. manageSearchOperation This method is invoked when resource searches are performed. Parameters are described in the table below: name Description Class/Link context Provides contextual information about the SCIM operation being called such as type of resource involved, HTTP verb, request headers, query params, etc. OperationContext searchRequest An object representing the search parameters provided in the call (applies for both GET and POST) SearchRequest Unlike manageResourceOperation , no entity parameter is passed. This is so because making decisions based on already executed searches would have a performance impact. Instead you can use context.setFilterPrepend(...) to help restrict the search against the database: here you can pass a String value that will be interpreted as an SCIM filter expression (see section 3.4.2.2 of RFC 7644). When the search being performed already contains a search filter (i.e. searchRequest.getFilter() is non-empty), a new filter is created by appending both \"subfilters\" with an and operator. As in the case of manageResourceOperation this method is expected to return an instance of javax.ws.rs.core.Response . Returning None transfers the control of the operation for normal processing (the Jans implementation). If the method execution crashes at runtime, a 500 HTTP error is sent. The same recommendations given for manageResourceOperation apply here. If you build filter expressions in your method, ensure they are syntactically valid to avoid your callers getting unexpected \"invalidFilter\" 400 errors. Example: segmenting the user base Let's assume you make use of the SCIM attribute userType so that your user base is partitioned into three disjoint segments according to such attribute and you have designated its possible values to be: Contractor, Employee, or Intern. Suppose your company has three different applications that make management of users in every category, that is, only one application is devoted to manage contractors, another employees, and other interns. You are interested in consistently granting access so that no application can create, query or modify users that don't belong to its focus. To properly handle this multi-tenancy scenario, you decide to use the contextual information coming from every request to determine if the operation should be allowed or not. For this purpose you communicate every application developer to send an additional HTTP header in their call with a value that only you (the administrator) and the developer knows. Let's call it the \"secret\". For the sake of simplicity let's assume developers are external to the company and only you know their identities. They don't know each other so they cannot exchange secrets. The strategy to implement segmentation is rather simple: Alter the default SCIM script by supplying a custom implementation for the methods that control execution Make the HTTP header name be a configuration property of the script so that it is not hard-coded Add a configuration property that contains the mapping of userType value vs. expected header value in JSON format Adding and parsing config properties Using Jans Config CLI update the SCIM script and add properties: custom_header with value USER-SEGMENT-SECRET access_map with value { \"<random_string>\":\"Contractor\", \"<random_string>\":\"Employee\", \"<random_string>\":\"Intern\" } Save the changes. In the init method this properties should be parsed. To start, let's add some imports: from io.jans.scim.ws.rs.scim2 import BaseScimWebService import json Here is how init would look like: def init ( self , configurationAttributes ): self . custom_header = configurationAttributes . get ( \"custom_header\" ) . getValue2 () access_map_json = configurationAttributes . get ( \"access_map\" ) . getValue2 () self . access_map = json . loads ( access_map_json ) print \"ScimEventHandler (init): Initialized successfully\" return True Note no validations took place here: we assumed the script contains the properties, that they are non empty and have sensible values. Allow/Deny resource operations The first step is to know the kind of application that is calling our service. For this purpose let's create a method that given incoming request headers returns the matching userType # headers params is an instance of javax . ws . rs . core . MultivaluedMap < String , String > def getUserType ( self , headers ) : secret = headers . getFirst ( self . custom_header ) if secret in self . access_map : return self . access_map [ secret ] else : return None Now let's code manageResourceOperation . We should allow access only under the following conditions: The getUserType method does not return None The entity object ( ScimCustomPerson instance) has a proper userType value. This means that for user creation, the incoming payload comes with a matching userType and for the other cases, the already stored attribute matches as well Assume that if the operation invoked is not user-related, we should allow access freely. Here is how the implementation might look: def manageResourceOperation ( self , context , entity , payload , configurationAttributes ): print \"manageResourceOperation. SCIM endpoint invoked is %s (HTTP %s )\" % ( context . getPath (), context . getMethod ()) if context . getResourceType () != \"User\" : return None expected_user_type = self . getUserType ( context . getRequestHeaders ()) if expected_user_type != None and entity . getAttribute ( \"jansUsrTyp\" ) == expected_user_type : return None else : return BaseScimWebService . getErrorResponse ( 403 , None , \"Attempt to handle a not allowed user type\" ) Note no usage of the payload took place. A case you may like to evaluate is where mistakenly using an update operation, the userType is set to an unexpected value. Allow/Deny searches This time instead of inspecting an entity, we ought to make a filter expression to restrict the search when the database is queried. For your reference, a valid filter expression is for instance userType eq \"Contractor\" . def manageSearchOperation ( self , context , searchRequest , configurationAttributes ) : print \"manageSearchOperation. SCIM endpoint invoked is %s (HTTP %s)\" % ( context . getPath () , context . getMethod ()) resource_type = context . getResourceType () print \"manageSearchOperation. This is a search over %s resources\" % resource_type if resource_type != \"User\" : return None expected_user_type = self . getUserType ( context . getRequestHeaders ()) if expected_user_type != None : context . setFilterPrepend ( \"userType eq \\\" % s \\ \"\" % expected_user_type ) return None else : return BaseScimWebService . getErrorResponse ( 403 , None , \"Attempt to handle a not allowed user type\" ) The manageSearchOperation must return a javax.ws.rs.core.Response . A None value makes continue the operation processing normally.","title":"Controlling execution of SCIM operations"},{"location":"script-catalog/scim/#working-with-more-than-one-script","text":"You may have already noticed that it is possible to have several scripts under the SCIM type. This is how execution takes place when there are several scripts enabled: The applicable method is called in the first script. If the return value was True , the method is called again but this time in the subsequent script. If at any point a False return value is encountered, the SCIM operation is aborted with error 500. This means that a normal operation execution requires all involved methods across different scripts to be successful. There is an important exception to the above and is related to the manage* methods. In this case, only one script takes effect (the first script found). Note that in most cases having a single SCIM script suffices for all needs.","title":"Working with more than one script"},{"location":"script-catalog/scim/#common-use-cases","text":"","title":"Common Use Cases"},{"location":"script-catalog/scim/#script-type-python","text":"","title":"Script Type: Python"},{"location":"script-catalog/scim/#custom-scim-event-handler","text":"The sample code snippet shows how to - 1. Modify Search Results 2. Segment the user base 3. Allow/Deny resource operations 4. Allow/Deny searches","title":"Custom SCIM Event Handler"},{"location":"script-catalog/scim/#script-type-java","text":"","title":"Script Type: Java"},{"location":"script-catalog/scim/#custom-scim-event-handler_1","text":"The sample code snippet shows how to - 1. Modify Search Results 2. Segment the user base 3. Allow/Deny resource operations 4. Allow/Deny searches","title":"Custom SCIM Event Handler"},{"location":"script-catalog/scim/sample-script/","text":"This is a placeholder","title":"SCIM"},{"location":"script-catalog/spontaneous_scope/spontaneous-scope/","text":"This is a placeholder","title":"Spontaneous Scope"},{"location":"script-catalog/uma_claims_gathering/uma-claims-gathering/","text":"This is a placeholder","title":"UMA Claims Gathering"},{"location":"script-catalog/uma_rpt_claims/uma-rpt-claims/","text":"This is a placeholder","title":"UMA RPT Claims"},{"location":"script-catalog/uma_rpt_policy/","text":"Overview # Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"script-catalog/uma_rpt_policy/#overview","text":"Please use the left navigation menu to browse the content of this section while we are still working on developing content for Overview page. Contribute If you\u2019d like to contribute to this document, get started with the Contribution Guide","title":"Overview"},{"location":"script-catalog/uma_rpt_policy/uma-client-authz-rpt-policy/","text":"This is a placeholder","title":"UMA Client Authz RPT Policy"},{"location":"script-catalog/uma_rpt_policy/uma-rpt-policy/","text":"This is a placeholder","title":"UMA RPT Policy"},{"location":"script-catalog/update_token/sample-script/","text":"Overview # By overriding the interface methods in UpdateTokenType inside a custom script you can Enable transformation of claims and values in id_token and Access token e.g. add a custom claim to an id_token , change a token expiry, change the sub value, or remove the nonce . Example use-case: As per the open banking standard, the id_token should contain claim openbanking_intent_id and the same value should also reflect in the sub claim. As specified in the FAPI Baseline Specification the sub claim should have the user id. Set a specific token lifetime Perform extra business logic like adding or removing scopes. Add an extra audit log for each token response. Flow # sequenceDiagram title UpdateToken script autonumber 1 RP->>Jans AS: Request token Jans AS->>Jans AS: Is UpdateToken script is associated with client? <br/>(or is there a script that applies to all clients? ) Jans AS->>Jans AS: do stuff note right of Jans AS: do stuff<br/>1. Enable transformation of claims and values in id_token <br/> OR 2. set token expiry <br/> or 3. add / remove scopes. <br/> or 4. perform audit logs Jans AS->>RP: return token(s) (Access token, ID token or Refresh Token) reflecting step 3 Adding the custom script to Jans server # Create cs.json with the contents of a CUSTOM script. To do that, run the following command. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript > /tmp/cs.json Edit the file's contents to reflect the addition of the UpdateToken custom script. Set enabled flag true Configure any parameters that the script may use. name field should reflect the use case script_type should be UPDATE_TOKEN script.py can have contents similar to Sample Script ) and is present in jans-cli's host machine. { \"dn\": null, \"inum\": null, \"name\": \"update_token\", \"aliases\": [], \"description\": \"Update token custom script\", \"script\": \"_file /root/script.py\", \"scriptType\": \"UPDATE_TOKEN\", \"programmingLanguage\": \"JYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": [ { \"value1\": \"param_name\", \"value2\": \"DI3ICTTJKLL8PPPNGH7YI\", \"description\": \"This is just an example\", \"hide\": true }, { \"value1\": \"param_name_2\", \"value2\": \"eEbJdi3hg42zxyFYbHArU5RuioPP\", \"description\": \"yet another example\", \"hide\": true } ] , \"level\": \"integer\", \"revision\": 0, \"enabled\": true, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } - Add the custom script. Save the response, it will contain the inum of the newly added script. /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/cs.json Associate an Update Token script to a client (RP) [optional step] # \ud83d\udcdd Note: If the Update token script is not associated with a client, then it will be applicable to all clients registered in the Jans Server. Which implies that all tokens obtained using the Jans server will reflect modifications as per the script. To Associate an Update Token script to a client (RP), execute the command below with appropriate values for: - inum of the client - inum of the update_token script /opt/jans/jans-cli/config-cli.py --operation-id patch-oauth-openid-clients-by-inum --url-suffix inum:inum_of_client --data '[ { \"op\": \"add\", \"path\": \"updateTokenScriptDns\", \"value\": [\"inum={SCRIPT_ID},ou=scripts,o=jans\"] } ]' Writing an Update token script (Pseudo code for potential usecases) # 1. Mandatory methods: # class UpdateToken(UpdateTokenType): def __init__(self, currentTimeMillis): self.currentTimeMillis = currentTimeMillis def init(self, customScript, configurationAttributes): return True def destroy(self, configurationAttributes): return True def getApiVersion(self): return 11 ```` ### 2. modifyIdToken () : Used to modify claims in an ID token Pseudocode and example : # Returns boolean, true - indicates that script applied changes # jsonWebResponse - is JwtHeader, you can use any method to manipulate JWT # context is reference of io.jans.oxauth.service.external.context.ExternalUpdateTokenContext def modifyIdToken(self, jsonWebResponse, context): # header claims jsonWebResponse . getHeader (). setClaim ( \"header_name\" , \"header_value\" ) # custom claims jsonWebResponse . getClaims (). setClaim ( \"openbanking_intent_id\" , openbanking_intent_id_value ) # regular claims jsonWebResponse . getClaims (). setClaim ( \"sub\" , claimValue ) return True ![Inspecting a modified ID token](https://github.com/JanssenProject/jans/blob/main/docs/assets/update-id-token.png) ### 3. modifyAccessToken(): #### a. Granularity of access control: An UpdateTokenType script is great for adding scopes or removing scopes to/from the Access token. By doing so you can tailor build the granularity of access control according to business need. [`context.overwriteAccessTokenScopes`](https://github.com/JanssenProject/jans/blob/main/jans-auth-server/server/src/main/java/io/jans/as/server/service/external/context/ExternalUpdateTokenContext.java) is ready to use method of the `context` variable def modifyAccessToken(self, accessToken, context): context.overwriteAccessTokenScopes(accessToken, Sets.newHashSet(\"openid\", \"mynewscope\")) #### b. Perform business check before returning AT Pseudo code and example - Issue Access token only if account balance is greater than 0 # Returns boolean, true - indicates that script applied changes # accessToken - is JwtHeader, you can use any method to manipulate JWT # context is reference of io.jans.oxauth.service.external.context.ExternalUpdateTokenContext def modifyAccessToken(self, accessToken, context): # read from session sessionIdService = CdiUtil . bean ( SessionIdService ) sessionId = sessionIdService . getSessionByDn ( context . getGrant () . getSessionDn ()) # fetch from persistence org_id = sessionId . getSessionAttributes () . get ( \"org_id\" ) balance = thirdPartyApi . checkBalance ( org_id ) if balance > 0 : return True else : return False # forbid the creation of AT ``` c. Modify claims in an access token: # ``` # Returns boolean, true - indicates that script applied changes. If false is returned token will not be created. # accessToken is reference of io.jans.as.server.model.common.AccessToken (note authorization grant can be taken as context.getGrant()) # context is reference of io.jans.oxauth.service.external.context.ExternalUpdateTokenContext def modifyAccessToken(self, accessToken, context): # header claims accessToken . getHeader (). setClaim ( \"header_name\" , \"header_value\" ) # custom claims accessToken . getClaims (). setClaim ( \"claim_name\" , \"claimValue\" ) # regular claims accessToken . getClaims (). setClaim ( \"sub\" , claimValue ) return True ### 5. Modify a specific token lifetime based on the context: 1. Refresh token lifetime: def getRefreshTokenLifetimeInSeconds(self, context): return 24 * 60 * 60 # one day 2. ID token lifetime: def getIdTokenLifetimeInSeconds(self, context): return 10 * 60 * 60 # 10 hours 3. Access token lifetime: def getAccessTokenLifetimeInSeconds(self, context): return 10 * 60 * 60 # 10 hours ### 6. modifyRefreshToken() : Used to modify claims in a Refresh Token # Returns boolean, true - indicates that script applied changes. If false is returned token will not be created. # refreshToken is reference of io.jans.as.server.model.common.RefreshToken (note authorization grant can be taken as context.getGrant()) # context is reference of io.jans.as.server.service.external.context.ExternalUpdateTokenContext (in https://github.com/JanssenProject/jans-auth-server project, ) def modifyRefreshToken(self, refreshToken, context): return True ``` IntrospectionType script vs UpdateTokenType script # IntrospectionType UpdateTokenType Client configuration parameter Introspection script is invoked only when accessTokenAsJwt = true Update token script is invoked irrespective of whether accessTokenAsJwt is true or false Core Purpose Used to return access token meta information like current validity, approved scopes, and information about the context in which the token was issued when a Resource Server which queries the Introspection endpoint used to enable transformation of claims and values in id_token and Access token, set a specific token lifetime, change granularity of access control (up-scoping, down-scoping), audit logging for each token response, forbid the creation of AT based on a criteria. Functionality 1. Can be used to modify claims of an Access token as JWT, however this it is recommended to use UpdateToken script instead. 1. Used to modify id_token, refresh token and access token 2. Introspection script cannot change scope of AT 2. UpdateToken can change scope of AT and modify AT object in persistence irrespective of the value of accessTokenAsJwt as true or false Script Invocation sequence 2. After an Access token is generated 2. Before the creation of AT, id_token and refresh_token Testing # Use this: Reference for testing Inspect the tokens. Use jwt.io to inspect the contents of a JWT.","title":"Update Token"},{"location":"script-catalog/update_token/sample-script/#overview","text":"By overriding the interface methods in UpdateTokenType inside a custom script you can Enable transformation of claims and values in id_token and Access token e.g. add a custom claim to an id_token , change a token expiry, change the sub value, or remove the nonce . Example use-case: As per the open banking standard, the id_token should contain claim openbanking_intent_id and the same value should also reflect in the sub claim. As specified in the FAPI Baseline Specification the sub claim should have the user id. Set a specific token lifetime Perform extra business logic like adding or removing scopes. Add an extra audit log for each token response.","title":"Overview"},{"location":"script-catalog/update_token/sample-script/#flow","text":"sequenceDiagram title UpdateToken script autonumber 1 RP->>Jans AS: Request token Jans AS->>Jans AS: Is UpdateToken script is associated with client? <br/>(or is there a script that applies to all clients? ) Jans AS->>Jans AS: do stuff note right of Jans AS: do stuff<br/>1. Enable transformation of claims and values in id_token <br/> OR 2. set token expiry <br/> or 3. add / remove scopes. <br/> or 4. perform audit logs Jans AS->>RP: return token(s) (Access token, ID token or Refresh Token) reflecting step 3","title":"Flow"},{"location":"script-catalog/update_token/sample-script/#adding-the-custom-script-to-jans-server","text":"Create cs.json with the contents of a CUSTOM script. To do that, run the following command. /opt/jans/jans-cli/config-cli.py --schema /components/schemas/CustomScript > /tmp/cs.json Edit the file's contents to reflect the addition of the UpdateToken custom script. Set enabled flag true Configure any parameters that the script may use. name field should reflect the use case script_type should be UPDATE_TOKEN script.py can have contents similar to Sample Script ) and is present in jans-cli's host machine. { \"dn\": null, \"inum\": null, \"name\": \"update_token\", \"aliases\": [], \"description\": \"Update token custom script\", \"script\": \"_file /root/script.py\", \"scriptType\": \"UPDATE_TOKEN\", \"programmingLanguage\": \"JYTHON\", \"moduleProperties\": { \"value1\": null, \"value2\": null, \"description\": null }, \"configurationProperties\": [ { \"value1\": \"param_name\", \"value2\": \"DI3ICTTJKLL8PPPNGH7YI\", \"description\": \"This is just an example\", \"hide\": true }, { \"value1\": \"param_name_2\", \"value2\": \"eEbJdi3hg42zxyFYbHArU5RuioPP\", \"description\": \"yet another example\", \"hide\": true } ] , \"level\": \"integer\", \"revision\": 0, \"enabled\": true, \"scriptError\": { \"raisedAt\": null, \"stackTrace\": null }, \"modified\": false, \"internal\": false } - Add the custom script. Save the response, it will contain the inum of the newly added script. /opt/jans/jans-cli/config-cli.py --operation-id post-config-scripts --data /tmp/cs.json","title":"Adding the custom script to Jans server"},{"location":"script-catalog/update_token/sample-script/#associate-an-update-token-script-to-a-client-rp-optional-step","text":"\ud83d\udcdd Note: If the Update token script is not associated with a client, then it will be applicable to all clients registered in the Jans Server. Which implies that all tokens obtained using the Jans server will reflect modifications as per the script. To Associate an Update Token script to a client (RP), execute the command below with appropriate values for: - inum of the client - inum of the update_token script /opt/jans/jans-cli/config-cli.py --operation-id patch-oauth-openid-clients-by-inum --url-suffix inum:inum_of_client --data '[ { \"op\": \"add\", \"path\": \"updateTokenScriptDns\", \"value\": [\"inum={SCRIPT_ID},ou=scripts,o=jans\"] } ]'","title":"Associate an Update Token script to a client (RP) [optional step]"},{"location":"script-catalog/update_token/sample-script/#writing-an-update-token-script-pseudo-code-for-potential-usecases","text":"","title":"Writing an Update token script (Pseudo code for potential usecases)"},{"location":"script-catalog/update_token/sample-script/#1-mandatory-methods","text":"class UpdateToken(UpdateTokenType): def __init__(self, currentTimeMillis): self.currentTimeMillis = currentTimeMillis def init(self, customScript, configurationAttributes): return True def destroy(self, configurationAttributes): return True def getApiVersion(self): return 11 ```` ### 2. modifyIdToken () : Used to modify claims in an ID token Pseudocode and example : # Returns boolean, true - indicates that script applied changes # jsonWebResponse - is JwtHeader, you can use any method to manipulate JWT # context is reference of io.jans.oxauth.service.external.context.ExternalUpdateTokenContext def modifyIdToken(self, jsonWebResponse, context): # header claims jsonWebResponse . getHeader (). setClaim ( \"header_name\" , \"header_value\" ) # custom claims jsonWebResponse . getClaims (). setClaim ( \"openbanking_intent_id\" , openbanking_intent_id_value ) # regular claims jsonWebResponse . getClaims (). setClaim ( \"sub\" , claimValue ) return True ![Inspecting a modified ID token](https://github.com/JanssenProject/jans/blob/main/docs/assets/update-id-token.png) ### 3. modifyAccessToken(): #### a. Granularity of access control: An UpdateTokenType script is great for adding scopes or removing scopes to/from the Access token. By doing so you can tailor build the granularity of access control according to business need. [`context.overwriteAccessTokenScopes`](https://github.com/JanssenProject/jans/blob/main/jans-auth-server/server/src/main/java/io/jans/as/server/service/external/context/ExternalUpdateTokenContext.java) is ready to use method of the `context` variable def modifyAccessToken(self, accessToken, context): context.overwriteAccessTokenScopes(accessToken, Sets.newHashSet(\"openid\", \"mynewscope\")) #### b. Perform business check before returning AT Pseudo code and example - Issue Access token only if account balance is greater than 0 # Returns boolean, true - indicates that script applied changes # accessToken - is JwtHeader, you can use any method to manipulate JWT # context is reference of io.jans.oxauth.service.external.context.ExternalUpdateTokenContext def modifyAccessToken(self, accessToken, context): # read from session sessionIdService = CdiUtil . bean ( SessionIdService ) sessionId = sessionIdService . getSessionByDn ( context . getGrant () . getSessionDn ()) # fetch from persistence org_id = sessionId . getSessionAttributes () . get ( \"org_id\" ) balance = thirdPartyApi . checkBalance ( org_id ) if balance > 0 : return True else : return False # forbid the creation of AT ```","title":"1. Mandatory methods:"},{"location":"script-catalog/update_token/sample-script/#c-modify-claims-in-an-access-token","text":"``` # Returns boolean, true - indicates that script applied changes. If false is returned token will not be created. # accessToken is reference of io.jans.as.server.model.common.AccessToken (note authorization grant can be taken as context.getGrant()) # context is reference of io.jans.oxauth.service.external.context.ExternalUpdateTokenContext def modifyAccessToken(self, accessToken, context): # header claims accessToken . getHeader (). setClaim ( \"header_name\" , \"header_value\" ) # custom claims accessToken . getClaims (). setClaim ( \"claim_name\" , \"claimValue\" ) # regular claims accessToken . getClaims (). setClaim ( \"sub\" , claimValue ) return True ### 5. Modify a specific token lifetime based on the context: 1. Refresh token lifetime: def getRefreshTokenLifetimeInSeconds(self, context): return 24 * 60 * 60 # one day 2. ID token lifetime: def getIdTokenLifetimeInSeconds(self, context): return 10 * 60 * 60 # 10 hours 3. Access token lifetime: def getAccessTokenLifetimeInSeconds(self, context): return 10 * 60 * 60 # 10 hours ### 6. modifyRefreshToken() : Used to modify claims in a Refresh Token # Returns boolean, true - indicates that script applied changes. If false is returned token will not be created. # refreshToken is reference of io.jans.as.server.model.common.RefreshToken (note authorization grant can be taken as context.getGrant()) # context is reference of io.jans.as.server.service.external.context.ExternalUpdateTokenContext (in https://github.com/JanssenProject/jans-auth-server project, ) def modifyRefreshToken(self, refreshToken, context): return True ```","title":"c. Modify claims in an access token:"},{"location":"script-catalog/update_token/sample-script/#introspectiontype-script-vs-updatetokentype-script","text":"IntrospectionType UpdateTokenType Client configuration parameter Introspection script is invoked only when accessTokenAsJwt = true Update token script is invoked irrespective of whether accessTokenAsJwt is true or false Core Purpose Used to return access token meta information like current validity, approved scopes, and information about the context in which the token was issued when a Resource Server which queries the Introspection endpoint used to enable transformation of claims and values in id_token and Access token, set a specific token lifetime, change granularity of access control (up-scoping, down-scoping), audit logging for each token response, forbid the creation of AT based on a criteria. Functionality 1. Can be used to modify claims of an Access token as JWT, however this it is recommended to use UpdateToken script instead. 1. Used to modify id_token, refresh token and access token 2. Introspection script cannot change scope of AT 2. UpdateToken can change scope of AT and modify AT object in persistence irrespective of the value of accessTokenAsJwt as true or false Script Invocation sequence 2. After an Access token is generated 2. Before the creation of AT, id_token and refresh_token","title":"IntrospectionType script vs UpdateTokenType script"},{"location":"script-catalog/update_token/sample-script/#testing","text":"Use this: Reference for testing Inspect the tokens. Use jwt.io to inspect the contents of a JWT.","title":"Testing"}]}